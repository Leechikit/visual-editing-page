/* Minification failed. Returning unminified contents.
(20499,32-48): run-time error JS5017: Syntax error in regular expression: /([^\d\+-\s])/ig
 */
/*!
 * jquery-confirm v2.0.0 (http://craftpip.github.io/jquery-confirm/)
 * Author: Boniface Pereira
 * Website: www.craftpip.com
 * Contact: hey@craftpip.com
 *
 * Copyright 2013-2015 jquery-confirm
 * Licensed under MIT (https://github.com/craftpip/jquery-confirm/blob/master/LICENSE)
 */
if(typeof jQuery==="undefined"){throw new Error("jquery-confirm requires jQuery")}var jconfirm,Jconfirm;(function(b){b.fn.confirm=function(c){if(typeof c==="undefined"){c={}}var d=b(this);d.on("click",function(f){f.preventDefault();if(d.attr("href")){c.confirm=function(){location.href=d.attr("href")}}b.confirm(c)});return d};b.confirm=function(c){return jconfirm(c)};b.alert=function(c){c.cancelButton=false;return jconfirm(c)};b.dialog=function(c){c.cancelButton=false;c.confirmButton=false;c.confirmKeys=[13];return jconfirm(c)};jconfirm=function(c){if(typeof c==="undefined"){c={}}if(jconfirm.defaults){b.extend(jconfirm.pluginDefaults,jconfirm.defaults)}var c=b.extend({},jconfirm.pluginDefaults,c);return new Jconfirm(c)};Jconfirm=function(c){b.extend(this,c);this._init()};Jconfirm.prototype={_init:function(){var c=this;this._rand=Math.round(Math.random()*99999);this._buildHTML();this._bindEvents();setTimeout(function(){c.open()},0)},animations:["anim-scale","anim-top","anim-bottom","anim-left","anim-right","anim-zoom","anim-opacity","anim-none","anim-rotate","anim-rotatex","anim-rotatey","anim-scalex","anim-scaley"],_buildHTML:function(){this.animation="anim-"+this.animation.toLowerCase();this.closeAnimation="anim-"+this.closeAnimation.toLowerCase();this.$el=b(this.template).appendTo(this.container).addClass(this.theme);this.$el.find(".jconfirm-box-container").addClass(this.columnClass);this.CSS={"-webkit-transition-duration":this.animationSpeed/1000+"s","transition-duration":this.animationSpeed/1000+"s","-webkit-transition-timing-function":"cubic-bezier(.38,1.28,.2, "+this.animationBounce+")","transition-timing-function":"cubic-bezier(.38,1.28,.2, "+this.animationBounce+")"};this.$el.find(".jconfirm-bg").css(this.CSS);this.$b=this.$el.find(".jconfirm-box").css(this.CSS).addClass(this.animation);this.$body=this.$b;if(this.rtl){this.$el.addClass("rtl")}this.$title=this.$el.find("div.title");this.setTitle();this.contentDiv=this.$el.find("div.content");this.$content=this.contentDiv;this.$btnc=this.$el.find(".buttons");if(this.confirmButton&&this.confirmButton.trim()!==""){this.$confirmButton=b('<button class="btn">'+this.confirmButton+"</button>").appendTo(this.$btnc).addClass(this.confirmButtonClass)}if(this.cancelButton&&this.cancelButton.trim()!==""){this.$cancelButton=b('<button class="btn">'+this.cancelButton+"</button>").appendTo(this.$btnc).addClass(this.cancelButtonClass)}if(!this.confirmButton&&!this.cancelButton){this.$btnc.remove()}if(!this.confirmButton&&!this.cancelButton&&this.closeIcon===null){this.$closeButton=this.$b.find(".closeIcon").show()}if(this.closeIcon===true){this.$closeButton=this.$b.find(".closeIcon").show()}this.setContent();if(this.autoClose){this._startCountDown()}},setTitle:function(c){this.title=(typeof c!=="undefined")?c:this.title;if(this.title&&this.$title){this.$title.html('<i class="'+this.icon+'"></i> '+this.title)}else{this.$title.remove()}},setContent:function(e){var f=this;this.content=(e)?e:this.content;var c=(e)?true:false;if(typeof this.content==="boolean"){if(!this.content){this.contentDiv.remove()}else{console.error("Invalid option for property content: passed TRUE")}}else{if(typeof this.content==="string"){if(this.content.substr(0,4).toLowerCase()==="url:"){this.contentDiv.html("");this.$btnc.find("button").prop("disabled",true);var d=this.content.substring(4,this.content.length);b.get(d).done(function(h){f.contentDiv.html(h)}).always(function(i,h,j){if(typeof f.contentLoaded==="function"){f.contentLoaded(i,h,j)}f.$btnc.find("button").prop("disabled",false);f.setDialogCenter()})}else{this.contentDiv.html(this.content)}}else{if(typeof this.content==="function"){this.contentDiv.html("");this.$btnc.find("button").attr("disabled","disabled");var g=this.content(this);if(typeof g!=="object"){console.error("The content function must return jquery promise.")}else{if(typeof g.always!=="function"){console.error("The object returned is not a jquery promise.")}else{g.always(function(i,h){f.$btnc.find("button").removeAttr("disabled");f.setDialogCenter()})}}}else{console.error("Invalid option for property content, passed: "+typeof this.content)}}}this.setDialogCenter(c)},_startCountDown:function(){var c=this.autoClose.split("|");if(/cancel/.test(c[0])&&this.type==="alert"){return false}else{if(/confirm|cancel/.test(c[0])){this.$cd=b('<span class="countdown">').appendTo(this["$"+c[0]+"Button"]);var d=this;d.$cd.parent().click();var e=c[1]/1000;this.interval=setInterval(function(){d.$cd.html(" ["+(e-=1)+"]");if(e===0){d.$cd.parent().trigger("click");clearInterval(d.interval)}},1000)}else{console.error("Invalid option "+c[0]+", must be confirm/cancel")}}},_bindEvents:function(){var d=this;var c=false;this.$el.find(".jconfirm-scrollpane").click(function(f){if(!c){if(d.backgroundDismiss){d.cancel();d.close()}else{d.$b.addClass("hilight");setTimeout(function(){d.$b.removeClass("hilight")},400)}}c=false});this.$el.find(".jconfirm-box").click(function(f){c=true});if(this.$confirmButton){this.$confirmButton.click(function(g){g.preventDefault();var f=d.confirm(d.$b);d.onAction("confirm");if(typeof f==="undefined"||f){d.close()}})}if(this.$cancelButton){this.$cancelButton.click(function(g){g.preventDefault();var f=d.cancel(d.$b);d.onAction("cancel");if(typeof f==="undefined"||f){d.close()}})}if(this.$closeButton){this.$closeButton.click(function(f){f.preventDefault();d.cancel();d.onAction("close");d.close()})}if(this.keyboardEnabled){setTimeout(function(){b(window).on("keyup."+this._rand,function(f){d.reactOnKey(f)})},500)}b(window).on("resize."+this._rand,function(){d.setDialogCenter(true)})},reactOnKey:function a(f){var c=b(".jconfirm");if(c.eq(c.length-1)[0]!==this.$el[0]){return false}var d=f.which;if(this.contentDiv.find(":input").is(":focus")&&/13|32/.test(d)){return false}if(b.inArray(d,this.cancelKeys)!==-1){if(!this.backgroundDismiss){this.$el.find(".jconfirm-bg").click();return false}if(this.$cancelButton){this.$cancelButton.click()}else{this.close()}}if(b.inArray(d,this.confirmKeys)!==-1){if(this.$confirmButton){this.$confirmButton.click()}}},setDialogCenter:function(d){var h=b(window).height();var g=this.$b.outerHeight();var c=(h-g)/2;var f=100;if(g>(h-f)){var e={"margin-top":f/2,"margin-bottom":f/2}}else{var e={"margin-top":c}}if(d){this.$b.animate(e,{duration:this.animationSpeed,queue:false})}else{this.$b.css(e)}},close:function(){var c=this;if(this.isClosed()){return false}if(typeof this.onClose==="function"){this.onClose()}b(window).unbind("resize."+this._rand);if(this.keyboardEnabled){b(window).unbind("keyup."+this._rand)}c.$el.find(".jconfirm-bg").removeClass("seen");this.$b.addClass(this.closeAnimation);var d=(this.closeAnimation=="anim-none")?0:this.animationSpeed;setTimeout(function(){c.$el.remove()},d+50);jconfirm.record.closed+=1;jconfirm.record.currentlyOpen-=1;if(jconfirm.record.currentlyOpen<1){b("body").removeClass("jconfirm-noscroll")}return true},open:function(){var d=this;if(this.isClosed()){return false}d.$el.find(".jconfirm-bg").addClass("seen");b("body").addClass("jconfirm-noscroll");this.$b.removeClass(this.animations.join(" "));this.$b.find("input[autofocus]:visible:first").focus();jconfirm.record.opened+=1;jconfirm.record.currentlyOpen+=1;if(typeof this.onOpen==="function"){this.onOpen()}var c="jconfirm-box"+this._rand;this.$b.attr("aria-labelledby",c).attr("tabindex",-1).focus();if(this.$title){this.$title.attr("id",c)}else{if(this.$content){this.$content.attr("id",c)}}return true},isClosed:function(){return this.$el.css("display")===""}};jconfirm.pluginDefaults={template:'<div class="jconfirm"><div class="jconfirm-bg"></div><div class="jconfirm-scrollpane"><div class="container"><div class="row"><div class="jconfirm-box-container span6 offset3"><div class="jconfirm-box" role="dialog" aria-labelledby="labelled" tabindex="-1"><div class="closeIcon"><span class="glyphicon glyphicon-remove"></span></div><div class="title"></div><div class="content"></div><div class="buttons"></div><div class="jquery-clear"></div></div></div></div></div></div></div>',title:"Hello",content:"Are you sure to continue?",contentLoaded:function(){},icon:"",confirmButton:"Okay",cancelButton:"Cancel",confirmButtonClass:"btn-default",cancelButtonClass:"btn-default",theme:"white",animation:"zoom",closeAnimation:"scale",animationSpeed:500,animationBounce:1.2,keyboardEnabled:false,rtl:false,confirmKeys:[13,32],cancelKeys:[27],container:"body",confirm:function(){},cancel:function(){},backgroundDismiss:true,autoClose:false,closeIcon:null,columnClass:"col-md-4 col-md-offset-4",onOpen:function(){},onClose:function(){},onAction:function(){}};jconfirm.record={opened:0,closed:0,currentlyOpen:0}})(jQuery);;
/*!
 * jQuery Form Plugin
 * version: 3.50.0-2014.02.05
 * Requires jQuery v1.5 or later
 * Copyright (c) 2013 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
/*global ActiveXObject */

// AMD support
(function (factory) {
    "use strict";
    if (typeof define === 'function' && define.amd) {
        // using AMD; register as anon module
        define(['jquery'], factory);
    } else {
        // no AMD; invoke directly
        factory( (typeof(jQuery) != 'undefined') ? jQuery : window.Zepto );
    }
}

(function($) {
"use strict";

/*
    Usage Note:
    -----------
    Do not use both ajaxSubmit and ajaxForm on the same form.  These
    functions are mutually exclusive.  Use ajaxSubmit if you want
    to bind your own submit handler to the form.  For example,

    $(document).ready(function() {
        $('#myForm').on('submit', function(e) {
            e.preventDefault(); // <-- important
            $(this).ajaxSubmit({
                target: '#output'
            });
        });
    });

    Use ajaxForm when you want the plugin to manage all the event binding
    for you.  For example,

    $(document).ready(function() {
        $('#myForm').ajaxForm({
            target: '#output'
        });
    });

    You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
    form does not have to exist when you invoke ajaxForm:

    $('#myForm').ajaxForm({
        delegation: true,
        target: '#output'
    });

    When using ajaxForm, the ajaxSubmit function will be invoked for you
    at the appropriate time.
*/

/**
 * Feature detection
 */
var feature = {};
feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
feature.formdata = window.FormData !== undefined;

var hasProp = !!$.fn.prop;

// attr2 uses prop when it can but checks the return type for
// an expected string.  this accounts for the case where a form 
// contains inputs with names like "action" or "method"; in those
// cases "prop" returns the element
$.fn.attr2 = function() {
    if ( ! hasProp ) {
        return this.attr.apply(this, arguments);
    }
    var val = this.prop.apply(this, arguments);
    if ( ( val && val.jquery ) || typeof val === 'string' ) {
        return val;
    }
    return this.attr.apply(this, arguments);
};

/**
 * ajaxSubmit() provides a mechanism for immediately submitting
 * an HTML form using AJAX.
 */
$.fn.ajaxSubmit = function(options) {
    /*jshint scripturl:true */

    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
    if (!this.length) {
        log('ajaxSubmit: skipping submit process - no element selected');
        return this;
    }

    var method, action, url, $form = this;

    if (typeof options == 'function') {
        options = { success: options };
    }
    else if ( options === undefined ) {
        options = {};
    }

    method = options.type || this.attr2('method');
    action = options.url  || this.attr2('action');

    url = (typeof action === 'string') ? $.trim(action) : '';
    url = url || window.location.href || '';
    if (url) {
        // clean url (don't include hash vaue)
        url = (url.match(/^([^#]+)/)||[])[1];
    }

    options = $.extend(true, {
        url:  url,
        success: $.ajaxSettings.success,
        type: method || $.ajaxSettings.type,
        iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
    }, options);

    // hook for manipulating the form data before it is extracted;
    // convenient for use with rich editors like tinyMCE or FCKEditor
    var veto = {};
    this.trigger('form-pre-serialize', [this, options, veto]);
    if (veto.veto) {
        log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
        return this;
    }

    // provide opportunity to alter form data before it is serialized
    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
        log('ajaxSubmit: submit aborted via beforeSerialize callback');
        return this;
    }

    var traditional = options.traditional;
    if ( traditional === undefined ) {
        traditional = $.ajaxSettings.traditional;
    }

    var elements = [];
    var qx, a = this.formToArray(options.semantic, elements);
    if (options.data) {
        options.extraData = options.data;
        qx = $.param(options.data, traditional);
    }

    // give pre-submit callback an opportunity to abort the submit
    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
        log('ajaxSubmit: submit aborted via beforeSubmit callback');
        return this;
    }

    // fire vetoable 'validate' event
    this.trigger('form-submit-validate', [a, this, options, veto]);
    if (veto.veto) {
        log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
        return this;
    }

    var q = $.param(a, traditional);
    if (qx) {
        q = ( q ? (q + '&' + qx) : qx );
    }
    if (options.type.toUpperCase() == 'GET') {
        options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
        options.data = null;  // data is null for 'get'
    }
    else {
        options.data = q; // data is the query string for 'post'
    }

    var callbacks = [];
    if (options.resetForm) {
        callbacks.push(function() { $form.resetForm(); });
    }
    if (options.clearForm) {
        callbacks.push(function() { $form.clearForm(options.includeHidden); });
    }

    // perform a load on the target only if dataType is not provided
    if (!options.dataType && options.target) {
        var oldSuccess = options.success || function(){};
        callbacks.push(function(data) {
            var fn = options.replaceTarget ? 'replaceWith' : 'html';
            $(options.target)[fn](data).each(oldSuccess, arguments);
        });
    }
    else if (options.success) {
        callbacks.push(options.success);
    }

    options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
        var context = options.context || this ;    // jQuery 1.4+ supports scope context
        for (var i=0, max=callbacks.length; i < max; i++) {
            callbacks[i].apply(context, [data, status, xhr || $form, $form]);
        }
    };

    if (options.error) {
        var oldError = options.error;
        options.error = function(xhr, status, error) {
            var context = options.context || this;
            oldError.apply(context, [xhr, status, error, $form]);
        };
    }

     if (options.complete) {
        var oldComplete = options.complete;
        options.complete = function(xhr, status) {
            var context = options.context || this;
            oldComplete.apply(context, [xhr, status, $form]);
        };
    }

    // are there files to upload?

    // [value] (issue #113), also see comment:
    // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
    var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });

    var hasFileInputs = fileInputs.length > 0;
    var mp = 'multipart/form-data';
    var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

    var fileAPI = feature.fileapi && feature.formdata;
    log("fileAPI :" + fileAPI);
    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

    var jqxhr;

    // options.iframe allows user to force iframe mode
    // 06-NOV-09: now defaulting to iframe mode if file input is detected
    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
        // hack to fix Safari hang (thanks to Tim Molendijk for this)
        // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
        if (options.closeKeepAlive) {
            $.get(options.closeKeepAlive, function() {
                jqxhr = fileUploadIframe(a);
            });
        }
        else {
            jqxhr = fileUploadIframe(a);
        }
    }
    else if ((hasFileInputs || multipart) && fileAPI) {
        jqxhr = fileUploadXhr(a);
    }
    else {
        jqxhr = $.ajax(options);
    }

    $form.removeData('jqxhr').data('jqxhr', jqxhr);

    // clear element array
    for (var k=0; k < elements.length; k++) {
        elements[k] = null;
    }

    // fire 'notify' event
    this.trigger('form-submit-notify', [this, options]);
    return this;

    // utility fn for deep serialization
    function deepSerialize(extraData){
        var serialized = $.param(extraData, options.traditional).split('&');
        var len = serialized.length;
        var result = [];
        var i, part;
        for (i=0; i < len; i++) {
            // #252; undo param space replacement
            serialized[i] = serialized[i].replace(/\+/g,' ');
            part = serialized[i].split('=');
            // #278; use array instead of object storage, favoring array serializations
            result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
        }
        return result;
    }

     // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
    function fileUploadXhr(a) {
        var formdata = new FormData();

        for (var i=0; i < a.length; i++) {
            formdata.append(a[i].name, a[i].value);
        }

        if (options.extraData) {
            var serializedData = deepSerialize(options.extraData);
            for (i=0; i < serializedData.length; i++) {
                if (serializedData[i]) {
                    formdata.append(serializedData[i][0], serializedData[i][1]);
                }
            }
        }

        options.data = null;

        var s = $.extend(true, {}, $.ajaxSettings, options, {
            contentType: false,
            processData: false,
            cache: false,
            type: method || 'POST'
        });

        if (options.uploadProgress) {
            // workaround because jqXHR does not expose upload property
            s.xhr = function() {
                var xhr = $.ajaxSettings.xhr();
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', function(event) {
                        var percent = 0;
                        var position = event.loaded || event.position; /*event.position is deprecated*/
                        var total = event.total;
                        if (event.lengthComputable) {
                            percent = Math.ceil(position / total * 100);
                        }
                        options.uploadProgress(event, position, total, percent);
                    }, false);
                }
                return xhr;
            };
        }

        s.data = null;
        var beforeSend = s.beforeSend;
        s.beforeSend = function(xhr, o) {
            //Send FormData() provided by user
            if (options.formData) {
                o.data = options.formData;
            }
            else {
                o.data = formdata;
            }
            if(beforeSend) {
                beforeSend.call(this, xhr, o);
            }
        };
        return $.ajax(s);
    }

    // private function for handling file uploads (hat tip to YAHOO!)
    function fileUploadIframe(a) {
        var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
        var deferred = $.Deferred();

        // #341
        deferred.abort = function(status) {
            xhr.abort(status);
        };

        if (a) {
            // ensure that every serialized input is still enabled
            for (i=0; i < elements.length; i++) {
                el = $(elements[i]);
                if ( hasProp ) {
                    el.prop('disabled', false);
                }
                else {
                    el.removeAttr('disabled');
                }
            }
        }

        s = $.extend(true, {}, $.ajaxSettings, options);
        s.context = s.context || s;
        id = 'jqFormIO' + (new Date().getTime());
        if (s.iframeTarget) {
            $io = $(s.iframeTarget);
            n = $io.attr2('name');
            if (!n) {
                $io.attr2('name', id);
            }
            else {
                id = n;
            }
        }
        else {
            $io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
            $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
        }
        io = $io[0];


        xhr = { // mock object
            aborted: 0,
            responseText: null,
            responseXML: null,
            status: 0,
            statusText: 'n/a',
            getAllResponseHeaders: function() {},
            getResponseHeader: function() {},
            setRequestHeader: function() {},
            abort: function(status) {
                var e = (status === 'timeout' ? 'timeout' : 'aborted');
                log('aborting upload... ' + e);
                this.aborted = 1;

                try { // #214, #257
                    if (io.contentWindow.document.execCommand) {
                        io.contentWindow.document.execCommand('Stop');
                    }
                }
                catch(ignore) {}

                $io.attr('src', s.iframeSrc); // abort op in progress
                xhr.error = e;
                if (s.error) {
                    s.error.call(s.context, xhr, e, status);
                }
                if (g) {
                    $.event.trigger("ajaxError", [xhr, s, e]);
                }
                if (s.complete) {
                    s.complete.call(s.context, xhr, e);
                }
            }
        };

        g = s.global;
        // trigger ajax global events so that activity/block indicators work like normal
        if (g && 0 === $.active++) {
            $.event.trigger("ajaxStart");
        }
        if (g) {
            $.event.trigger("ajaxSend", [xhr, s]);
        }

        if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
            if (s.global) {
                $.active--;
            }
            deferred.reject();
            return deferred;
        }
        if (xhr.aborted) {
            deferred.reject();
            return deferred;
        }

        // add submitting element to data if we know it
        sub = form.clk;
        if (sub) {
            n = sub.name;
            if (n && !sub.disabled) {
                s.extraData = s.extraData || {};
                s.extraData[n] = sub.value;
                if (sub.type == "image") {
                    s.extraData[n+'.x'] = form.clk_x;
                    s.extraData[n+'.y'] = form.clk_y;
                }
            }
        }

        var CLIENT_TIMEOUT_ABORT = 1;
        var SERVER_ABORT = 2;
                
        function getDoc(frame) {
            /* it looks like contentWindow or contentDocument do not
             * carry the protocol property in ie8, when running under ssl
             * frame.document is the only valid response document, since
             * the protocol is know but not on the other two objects. strange?
             * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
             */
            
            var doc = null;
            
            // IE8 cascading access check
            try {
                if (frame.contentWindow) {
                    doc = frame.contentWindow.document;
                }
            } catch(err) {
                // IE8 access denied under ssl & missing protocol
                log('cannot get iframe.contentWindow document: ' + err);
            }

            if (doc) { // successful getting content
                return doc;
            }

            try { // simply checking may throw in ie8 under ssl or mismatched protocol
                doc = frame.contentDocument ? frame.contentDocument : frame.document;
            } catch(err) {
                // last attempt
                log('cannot get iframe.contentDocument: ' + err);
                doc = frame.document;
            }
            return doc;
        }

        // Rails CSRF hack (thanks to Yvan Barthelemy)
        var csrf_token = $('meta[name=csrf-token]').attr('content');
        var csrf_param = $('meta[name=csrf-param]').attr('content');
        if (csrf_param && csrf_token) {
            s.extraData = s.extraData || {};
            s.extraData[csrf_param] = csrf_token;
        }

        // take a breath so that pending repaints get some cpu time before the upload starts
        function doSubmit() {
            // make sure form attrs are set
            var t = $form.attr2('target'), 
                a = $form.attr2('action'), 
                mp = 'multipart/form-data',
                et = $form.attr('enctype') || $form.attr('encoding') || mp;

            // update form attrs in IE friendly way
            form.setAttribute('target',id);
            if (!method || /post/i.test(method) ) {
                form.setAttribute('method', 'POST');
            }
            if (a != s.url) {
                form.setAttribute('action', s.url);
            }

            // ie borks in some cases when setting encoding
            if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
                $form.attr({
                    encoding: 'multipart/form-data',
                    enctype:  'multipart/form-data'
                });
            }

            // support timout
            if (s.timeout) {
                timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
            }

            // look for server aborts
            function checkState() {
                try {
                    var state = getDoc(io).readyState;
                    log('state = ' + state);
                    if (state && state.toLowerCase() == 'uninitialized') {
                        setTimeout(checkState,50);
                    }
                }
                catch(e) {
                    log('Server abort: ' , e, ' (', e.name, ')');
                    cb(SERVER_ABORT);
                    if (timeoutHandle) {
                        clearTimeout(timeoutHandle);
                    }
                    timeoutHandle = undefined;
                }
            }

            // add "extra" data to form if provided in options
            var extraInputs = [];
            try {
                if (s.extraData) {
                    for (var n in s.extraData) {
                        if (s.extraData.hasOwnProperty(n)) {
                           // if using the $.param format that allows for multiple values with the same name
                           if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
                               extraInputs.push(
                               $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
                                   .appendTo(form)[0]);
                           } else {
                               extraInputs.push(
                               $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
                                   .appendTo(form)[0]);
                           }
                        }
                    }
                }

                if (!s.iframeTarget) {
                    // add iframe to doc and submit the form
                    $io.appendTo('body');
                }
                if (io.attachEvent) {
                    io.attachEvent('onload', cb);
                }
                else {
                    io.addEventListener('load', cb, false);
                }
                setTimeout(checkState,15);

                try {
                    form.submit();
                } catch(err) {
                    // just in case form has element with name/id of 'submit'
                    var submitFn = document.createElement('form').submit;
                    submitFn.apply(form);
                }
            }
            finally {
                // reset attrs and remove "extra" input elements
                form.setAttribute('action',a);
                form.setAttribute('enctype', et); // #380
                if(t) {
                    form.setAttribute('target', t);
                } else {
                    $form.removeAttr('target');
                }
                $(extraInputs).remove();
            }
        }

        if (s.forceSync) {
            doSubmit();
        }
        else {
            setTimeout(doSubmit, 10); // this lets dom updates render
        }

        var data, doc, domCheckCount = 50, callbackProcessed;

        function cb(e) {
            if (xhr.aborted || callbackProcessed) {
                return;
            }
            
            doc = getDoc(io);
            if(!doc) {
                log('cannot access response document');
                e = SERVER_ABORT;
            }
            if (e === CLIENT_TIMEOUT_ABORT && xhr) {
                xhr.abort('timeout');
                deferred.reject(xhr, 'timeout');
                return;
            }
            else if (e == SERVER_ABORT && xhr) {
                xhr.abort('server abort');
                deferred.reject(xhr, 'error', 'server abort');
                return;
            }

            if (!doc || doc.location.href == s.iframeSrc) {
                // response not received yet
                if (!timedOut) {
                    return;
                }
            }
            if (io.detachEvent) {
                io.detachEvent('onload', cb);
            }
            else {
                io.removeEventListener('load', cb, false);
            }

            var status = 'success', errMsg;
            try {
                if (timedOut) {
                    throw 'timeout';
                }

                var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
                log('isXml='+isXml);
                if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
                    if (--domCheckCount) {
                        // in some browsers (Opera) the iframe DOM is not always traversable when
                        // the onload callback fires, so we loop a bit to accommodate
                        log('requeing onLoad callback, DOM not available');
                        setTimeout(cb, 250);
                        return;
                    }
                    // let this fall through because server response could be an empty document
                    //log('Could not access iframe DOM after mutiple tries.');
                    //throw 'DOMException: not available';
                }

                //log('response detected');
                var docRoot = doc.body ? doc.body : doc.documentElement;
                xhr.responseText = docRoot ? docRoot.innerHTML : null;
                xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                if (isXml) {
                    s.dataType = 'xml';
                }
                xhr.getResponseHeader = function(header){
                    var headers = {'content-type': s.dataType};
                    return headers[header.toLowerCase()];
                };
                // support for XHR 'status' & 'statusText' emulation :
                if (docRoot) {
                    xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
                    xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
                }

                var dt = (s.dataType || '').toLowerCase();
                var scr = /(json|script|text)/.test(dt);
                if (scr || s.textarea) {
                    // see if user embedded response in textarea
                    var ta = doc.getElementsByTagName('textarea')[0];
                    if (ta) {
                        xhr.responseText = ta.value;
                        // support for XHR 'status' & 'statusText' emulation :
                        xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
                        xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
                    }
                    else if (scr) {
                        // account for browsers injecting pre around json response
                        var pre = doc.getElementsByTagName('pre')[0];
                        var b = doc.getElementsByTagName('body')[0];
                        if (pre) {
                            xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                        }
                        else if (b) {
                            xhr.responseText = b.textContent ? b.textContent : b.innerText;
                        }
                    }
                }
                else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
                    xhr.responseXML = toXml(xhr.responseText);
                }

                try {
                    data = httpData(xhr, dt, s);
                }
                catch (err) {
                    status = 'parsererror';
                    xhr.error = errMsg = (err || status);
                }
            }
            catch (err) {
                log('error caught: ',err);
                status = 'error';
                xhr.error = errMsg = (err || status);
            }

            if (xhr.aborted) {
                log('upload aborted');
                status = null;
            }

            if (xhr.status) { // we've set xhr.status
                status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
            }

            // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
            if (status === 'success') {
                if (s.success) {
                    s.success.call(s.context, data, 'success', xhr);
                }
                deferred.resolve(xhr.responseText, 'success', xhr);
                if (g) {
                    $.event.trigger("ajaxSuccess", [xhr, s]);
                }
            }
            else if (status) {
                if (errMsg === undefined) {
                    errMsg = xhr.statusText;
                }
                if (s.error) {
                    s.error.call(s.context, xhr, status, errMsg);
                }
                deferred.reject(xhr, 'error', errMsg);
                if (g) {
                    $.event.trigger("ajaxError", [xhr, s, errMsg]);
                }
            }

            if (g) {
                $.event.trigger("ajaxComplete", [xhr, s]);
            }

            if (g && ! --$.active) {
                $.event.trigger("ajaxStop");
            }

            if (s.complete) {
                s.complete.call(s.context, xhr, status);
            }

            callbackProcessed = true;
            if (s.timeout) {
                clearTimeout(timeoutHandle);
            }

            // clean up
            setTimeout(function() {
                if (!s.iframeTarget) {
                    $io.remove();
                }
                else { //adding else to clean up existing iframe response.
                    $io.attr('src', s.iframeSrc);
                }
                xhr.responseXML = null;
            }, 100);
        }

        var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
            if (window.ActiveXObject) {
                doc = new ActiveXObject('Microsoft.XMLDOM');
                doc.async = 'false';
                doc.loadXML(s);
            }
            else {
                doc = (new DOMParser()).parseFromString(s, 'text/xml');
            }
            return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
        };
        var parseJSON = $.parseJSON || function(s) {
            /*jslint evil:true */
            return window['eval']('(' + s + ')');
        };

        var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

            var ct = xhr.getResponseHeader('content-type') || '',
                xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
                data = xml ? xhr.responseXML : xhr.responseText;

            if (xml && data.documentElement.nodeName === 'parsererror') {
                if ($.error) {
                    $.error('parsererror');
                }
            }
            if (s && s.dataFilter) {
                data = s.dataFilter(data, type);
            }
            if (typeof data === 'string') {
                if (type === 'json' || !type && ct.indexOf('json') >= 0) {
                    data = parseJSON(data);
                } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                    $.globalEval(data);
                }
            }
            return data;
        };

        return deferred;
    }
};

/**
 * ajaxForm() provides a mechanism for fully automating form submission.
 *
 * The advantages of using this method instead of ajaxSubmit() are:
 *
 * 1: This method will include coordinates for <input type="image" /> elements (if the element
 *    is used to submit the form).
 * 2. This method will include the submit element's name/value data (for the element that was
 *    used to submit the form).
 * 3. This method binds the submit() method to the form for you.
 *
 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
 * passes the options argument along after properly binding events for submit elements and
 * the form itself.
 */
$.fn.ajaxForm = function(options) {
    options = options || {};
    options.delegation = options.delegation && $.isFunction($.fn.on);

    // in jQuery 1.3+ we can fix mistakes with the ready state
    if (!options.delegation && this.length === 0) {
        var o = { s: this.selector, c: this.context };
        if (!$.isReady && o.s) {
            log('DOM not ready, queuing ajaxForm');
            $(function() {
                $(o.s,o.c).ajaxForm(options);
            });
            return this;
        }
        // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
        log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
        return this;
    }

    if ( options.delegation ) {
        $(document)
            .off('submit.form-plugin', this.selector, doAjaxSubmit)
            .off('click.form-plugin', this.selector, captureSubmittingElement)
            .on('submit.form-plugin', this.selector, options, doAjaxSubmit)
            .on('click.form-plugin', this.selector, options, captureSubmittingElement);
        return this;
    }

    return this.ajaxFormUnbind()
        .bind('submit.form-plugin', options, doAjaxSubmit)
        .bind('click.form-plugin', options, captureSubmittingElement);
};

// private event handlers
function doAjaxSubmit(e) {
    /*jshint validthis:true */
    var options = e.data;
    if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
        e.preventDefault();
        $(e.target).ajaxSubmit(options); // #365
    }
}

function captureSubmittingElement(e) {
    /*jshint validthis:true */
    var target = e.target;
    var $el = $(target);
    if (!($el.is("[type=submit],[type=image]"))) {
        // is this a child element of the submit el?  (ex: a span within a button)
        var t = $el.closest('[type=submit]');
        if (t.length === 0) {
            return;
        }
        target = t[0];
    }
    var form = this;
    form.clk = target;
    if (target.type == 'image') {
        if (e.offsetX !== undefined) {
            form.clk_x = e.offsetX;
            form.clk_y = e.offsetY;
        } else if (typeof $.fn.offset == 'function') {
            var offset = $el.offset();
            form.clk_x = e.pageX - offset.left;
            form.clk_y = e.pageY - offset.top;
        } else {
            form.clk_x = e.pageX - target.offsetLeft;
            form.clk_y = e.pageY - target.offsetTop;
        }
    }
    // clear form vars
    setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
}


// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
$.fn.ajaxFormUnbind = function() {
    return this.unbind('submit.form-plugin click.form-plugin');
};

/**
 * formToArray() gathers form element data into an array of objects that can
 * be passed to any of the following ajax functions: $.get, $.post, or load.
 * Each object in the array has both a 'name' and 'value' property.  An example of
 * an array for a simple login form might be:
 *
 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
 *
 * It is this array that is passed to pre-submit callback functions provided to the
 * ajaxSubmit() and ajaxForm() methods.
 */
$.fn.formToArray = function(semantic, elements) {
    var a = [];
    if (this.length === 0) {
        return a;
    }

    var form = this[0];
    var formId = this.attr('id');
    var els = semantic ? form.getElementsByTagName('*') : form.elements;
    var els2;

    if (els && !/MSIE [678]/.test(navigator.userAgent)) { // #390
        els = $(els).get();  // convert to standard array
    }

    // #386; account for inputs outside the form which use the 'form' attribute
    if ( formId ) {
        els2 = $(':input[form=' + formId + ']').get();
        if ( els2.length ) {
            els = (els || []).concat(els2);
        }
    }

    if (!els || !els.length) {
        return a;
    }

    var i,j,n,v,el,max,jmax;
    for(i=0, max=els.length; i < max; i++) {
        el = els[i];
        n = el.name;
        if (!n || el.disabled) {
            continue;
        }

        if (semantic && form.clk && el.type == "image") {
            // handle image inputs on the fly when semantic == true
            if(form.clk == el) {
                a.push({name: n, value: $(el).val(), type: el.type });
                a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
            }
            continue;
        }

        v = $.fieldValue(el, true);
        if (v && v.constructor == Array) {
            if (elements) {
                elements.push(el);
            }
            for(j=0, jmax=v.length; j < jmax; j++) {
                a.push({name: n, value: v[j]});
            }
        }
        else if (feature.fileapi && el.type == 'file') {
            if (elements) {
                elements.push(el);
            }
            var files = el.files;
            if (files.length) {
                for (j=0; j < files.length; j++) {
                    a.push({name: n, value: files[j], type: el.type});
                }
            }
            else {
                // #180
                a.push({ name: n, value: '', type: el.type });
            }
        }
        else if (v !== null && typeof v != 'undefined') {
            if (elements) {
                elements.push(el);
            }
            a.push({name: n, value: v, type: el.type, required: el.required});
        }
    }

    if (!semantic && form.clk) {
        // input type=='image' are not found in elements array! handle it here
        var $input = $(form.clk), input = $input[0];
        n = input.name;
        if (n && !input.disabled && input.type == 'image') {
            a.push({name: n, value: $input.val()});
            a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
        }
    }
    return a;
};

/**
 * Serializes form data into a 'submittable' string. This method will return a string
 * in the format: name1=value1&amp;name2=value2
 */
$.fn.formSerialize = function(semantic) {
    //hand off to jQuery.param for proper encoding
    return $.param(this.formToArray(semantic));
};

/**
 * Serializes all field elements in the jQuery object into a query string.
 * This method will return a string in the format: name1=value1&amp;name2=value2
 */
$.fn.fieldSerialize = function(successful) {
    var a = [];
    this.each(function() {
        var n = this.name;
        if (!n) {
            return;
        }
        var v = $.fieldValue(this, successful);
        if (v && v.constructor == Array) {
            for (var i=0,max=v.length; i < max; i++) {
                a.push({name: n, value: v[i]});
            }
        }
        else if (v !== null && typeof v != 'undefined') {
            a.push({name: this.name, value: v});
        }
    });
    //hand off to jQuery.param for proper encoding
    return $.param(a);
};

/**
 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
 *
 *  <form><fieldset>
 *      <input name="A" type="text" />
 *      <input name="A" type="text" />
 *      <input name="B" type="checkbox" value="B1" />
 *      <input name="B" type="checkbox" value="B2"/>
 *      <input name="C" type="radio" value="C1" />
 *      <input name="C" type="radio" value="C2" />
 *  </fieldset></form>
 *
 *  var v = $('input[type=text]').fieldValue();
 *  // if no values are entered into the text inputs
 *  v == ['','']
 *  // if values entered into the text inputs are 'foo' and 'bar'
 *  v == ['foo','bar']
 *
 *  var v = $('input[type=checkbox]').fieldValue();
 *  // if neither checkbox is checked
 *  v === undefined
 *  // if both checkboxes are checked
 *  v == ['B1', 'B2']
 *
 *  var v = $('input[type=radio]').fieldValue();
 *  // if neither radio is checked
 *  v === undefined
 *  // if first radio is checked
 *  v == ['C1']
 *
 * The successful argument controls whether or not the field element must be 'successful'
 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
 * The default value of the successful argument is true.  If this value is false the value(s)
 * for each element is returned.
 *
 * Note: This method *always* returns an array.  If no valid value can be determined the
 *    array will be empty, otherwise it will contain one or more values.
 */
$.fn.fieldValue = function(successful) {
    for (var val=[], i=0, max=this.length; i < max; i++) {
        var el = this[i];
        var v = $.fieldValue(el, successful);
        if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
            continue;
        }
        if (v.constructor == Array) {
            $.merge(val, v);
        }
        else {
            val.push(v);
        }
    }
    return val;
};

/**
 * Returns the value of the field element.
 */
$.fieldValue = function(el, successful) {
    var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
    if (successful === undefined) {
        successful = true;
    }

    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
        (t == 'checkbox' || t == 'radio') && !el.checked ||
        (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
        tag == 'select' && el.selectedIndex == -1)) {
            return null;
    }

    if (tag == 'select') {
        var index = el.selectedIndex;
        if (index < 0) {
            return null;
        }
        var a = [], ops = el.options;
        var one = (t == 'select-one');
        var max = (one ? index+1 : ops.length);
        for(var i=(one ? index : 0); i < max; i++) {
            var op = ops[i];
            if (op.selected) {
                var v = op.value;
                if (!v) { // extra pain for IE...
                    v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value;
                }
                if (one) {
                    return v;
                }
                a.push(v);
            }
        }
        return a;
    }
    return $(el).val();
};

/**
 * Clears the form data.  Takes the following actions on the form's input fields:
 *  - input text fields will have their 'value' property set to the empty string
 *  - select elements will have their 'selectedIndex' property set to -1
 *  - checkbox and radio inputs will have their 'checked' property set to false
 *  - inputs of type submit, button, reset, and hidden will *not* be effected
 *  - button elements will *not* be effected
 */
$.fn.clearForm = function(includeHidden) {
    return this.each(function() {
        $('input,select,textarea', this).clearFields(includeHidden);
    });
};

/**
 * Clears the selected form elements.
 */
$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
    return this.each(function() {
        var t = this.type, tag = this.tagName.toLowerCase();
        if (re.test(t) || tag == 'textarea') {
            this.value = '';
        }
        else if (t == 'checkbox' || t == 'radio') {
            this.checked = false;
        }
        else if (tag == 'select') {
            this.selectedIndex = -1;
        }
		else if (t == "file") {
			if (/MSIE/.test(navigator.userAgent)) {
				$(this).replaceWith($(this).clone(true));
			} else {
				$(this).val('');
			}
		}
        else if (includeHidden) {
            // includeHidden can be the value true, or it can be a selector string
            // indicating a special test; for example:
            //  $('#myForm').clearForm('.special:hidden')
            // the above would clean hidden inputs that have the class of 'special'
            if ( (includeHidden === true && /hidden/.test(t)) ||
                 (typeof includeHidden == 'string' && $(this).is(includeHidden)) ) {
                this.value = '';
            }
        }
    });
};

/**
 * Resets the form data.  Causes all form elements to be reset to their original value.
 */
$.fn.resetForm = function() {
    return this.each(function() {
        // guard against an input with the name of 'reset'
        // note that IE reports the reset function as an 'object'
        if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
            this.reset();
        }
    });
};

/**
 * Enables or disables any matching elements.
 */
$.fn.enable = function(b) {
    if (b === undefined) {
        b = true;
    }
    return this.each(function() {
        this.disabled = !b;
    });
};

/**
 * Checks/unchecks any matching checkboxes or radio buttons and
 * selects/deselects and matching option elements.
 */
$.fn.selected = function(select) {
    if (select === undefined) {
        select = true;
    }
    return this.each(function() {
        var t = this.type;
        if (t == 'checkbox' || t == 'radio') {
            this.checked = select;
        }
        else if (this.tagName.toLowerCase() == 'option') {
            var $sel = $(this).parent('select');
            if (select && $sel[0] && $sel[0].type == 'select-one') {
                // deselect all other options
                $sel.find('option').selected(false);
            }
            this.selected = select;
        }
    });
};

// expose debug var
$.fn.ajaxSubmit.debug = false;

// helper fn for console logging
function log() {
    if (!$.fn.ajaxSubmit.debug) {
        return;
    }
    var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
    if (window.console && window.console.log) {
        window.console.log(msg);
    }
    else if (window.opera && window.opera.postError) {
        window.opera.postError(msg);
    }
}

}));
;
//公用数据,数据类型
jQuery.extend({
    BizDataType: {
        /// 空值
        Unspecified: -1,
        /// 逻辑数组型
        BoolArray: 0,
        /// 逻辑型
        Bool: 1,
        /// 时间数组型
        DateTimeArray: 4,
        /// 日期型
        DateTime: 5,
        /// 双精度数组型
        DoubleArray: 6,
        /// 双精度数值型
        Double: 7,
        /// 整数数组型
        IntArray: 8,
        /// 整数
        Int: 9,
        /// 长整型数组型
        LongArray: 10,
        /// 长整数
        Long: 11,
        /// 字符串数组型
        StringArray: 12,
        /// 长文本
        String: 13,
        /// 短文本
        ShortString: 14,
        /// 签名
        // Sign : 15,
        /// 链接
        HyperLink: 16,
        /// 审批
        Comment: 17,
        /// 二进制流
        ByteArray: 20,
        ///图片类型
        Image: 23,
        /// 未指定类型的附件
        Attachment: 24,
        /// 时间段型
        TimeSpan: 25,
        /// 参与者（单人）
        SingleParticipant: 26,
        /// 参与者（多人）
        MultiParticipant: 27,
        /// Html
        Html: 30,
        /// 对象类型
        Object: 31,
        /// Xml
        Xml: 32,
        /// Guid  
        Guid: 33,
        /// Guid数组
        GuidArray: 34,
        /// Decimal
        Decimal: 35,
        /// Decimal数组
        DecimalArray: 36,
        /// 业务对象
        BizObject: 40,
        /// 业务对象数组
        BizObjectArray: 41,
        /// 业务结构
        BizStructure: 42,
        /// 业务结构数组
        BizStructureArray: 43,
        /// 关联查询
        Association: 50,
        //关联查询多表单
        AssociationArray: 51,
        ///地图
        Map: 55,
        //地址
        Address: 56,
        //公式型控件
        Formula:57
    }
});;
//公用数据

//系统保留字段的名称
var ReservedPropertiesName = {
    PropertyName_CreatedBy: "CreatedBy",
    PropertyName_CreatedTime: "CreatedTime",
    PropertyName_ModifiedTime: "ModifiedTime",
    PropertyName_OwnerId: "OwnerId",
    PropertyName_OwnerDeptId: "OwnerDeptId",
    PropertyName_Status: "Status",
    PropertyName_SeqNo: "SeqNo"
}
//组织机构类型
var OrganizationType = {
    User: 0,
    Dept: 1,
    All: 2
}

var ListViewDisplayMode = {
    List: 0,
    Calendar:1,
   Timeline:2
}
var FunctionNodeType = {
    /// </summary>
    AppPackage : 190,

    /// <summary>
    /// 应用模块(不能发起流程)
    /// </summary>
    FormModule : 200,

    /// <summary>
    /// 应用模块(可以发起流程)
    /// </summary>
    WorkflowModule : 210,

    /// <summary>
    /// 报表模块
    /// </summary>
    ReportModule : 220,

    /// <summary>
    /// 自定义列表模块（不含表单）
    /// </summary>
    CustomListModule : 300,
    /// <summary>
    /// 节点分组
    /// </summary>
    GroupModule: 230,

    SingletonModule:240
};
jQuery.extend({
    // 打开表单的接口
    //otherParam其他参数，json格式:{showInModal:是否显示在弹出框中,title:"",height:500,widht:500,OnShowCallback:function,OnHiddenCallback:function}
    /*{ 1.schemaCode SchemaCode表单编码参数
        2.objectId ,BizObjectID不传时打开新增时的表单
        3.params ,传递到表单的参数
        4.checkIsChange,是否检查修改
        5.showlist,兼容移动端是否显示列表 
        6.showInModal：是否弹出框中显示，如果为false，title height width OnShowCallback OnHiddenCallback 等属性不起作用
        7.title: 对话框标题
        8.height:对话框高度，格式 500 数值类型
        9.width: 对话框宽度，格式 500
        10.OnShowCallback 显示时事件 
        11.OnHiddenCallback 隐藏时显示
    }*/
    IShowForm: function () {
        //schemaCode, objectId, params, checkIsChange 其他参数使用JSON格式
        if (arguments.length < 1) {
            return;
        }
        var args = {
            schemaCode: "",
            objectId:"",
            params: "",
            checkIsChange: false,
            showInModal: false,
            title: "",
            height: 500,
            width: 820,
            onShowCallback: null,
            onHiddenCallback:null
        };

        for (var i = 0; i < arguments.length; i++) {
            var data = arguments[i];
            if (data == null) { continue; }
            if (typeof (data) == "string" || data.constructor == String
                || typeof (data) == "boolean" || data.constructor == Boolean
                || typeof (data) == "function" || data.constructor == Function
            ) { 
                if (i == 0) {
                    args.schemaCode = data;
                } else if (i == 1) {
                    args.objectId = data;
                } else if (i == 2) {
                    args.params = JSON.parse(data);
                } else if (i == 3) {
                    args.checkIsChange = data;
                }

            } else if (typeof (data) == "object" || data.constructor == Object) {
                if (i == 2 && !data.params && data.showInModal == undefined) {
                    args.params = data;
                } else {
                    args = $.extend({}, args, data);
                }
            }
        }

        if (args.showInModal) {
            $.IDialogModal.Show(args.schemaCode, args.objectId, args.title, args.height, args.width, args.params, args.onShowCallback, args.onHiddenCallback);
        }
        else {
            $.ISideModal.Show("/Form/DefaultSheet/" + args.schemaCode + "?SchemaCode=" + args.schemaCode + "&BizObjectId=" + args.objectId, "", null, null, args.checkIsChange, args.params);
        }  
    },
    // 获取参数值
    IGetParams: function (name) {
        //SideModal 侧滑框
        var sideModalValue = top.$.ISideModal.GetParamValue(name);
        if (sideModalValue) {
            return sideModalValue;
        }
        //弹出框表单参数
        var dialogArguments = localStorage.getItem('DialogArguments');
        if (dialogArguments) {
            var jsonData = JSON.parse(dialogArguments);
            return jsonData[name];
        }
        return null;
    },

    // 定位
    ILocation: function () {
        //$.IShowWarn("PC端不支持定位");
        //console.log("PC端不支持定位");
        //return null;
        var Address = "深圳市南山区科技南十路航天科技研究院";
        var Point = { lat: '21.345', lng: '114.454' };
        return {
            Address: Address,
            Point: Point
        };
    },

    // 下载附件
    IDownloadAttachments: function (attachmentIds) {
        var attachmentIdStr = attachmentIds.join(";");
        window.open("/Form/DownloadAttachments/?AttachmentIdStr=" + attachmentIdStr);
    },

    //显示提示框
    IShowPreLoader: function (title) {

    },
    //隐藏提示框
    IHidePreLoader: function () {

    },
    //扫描二维码
    IScanBarCode: function () { },
    //扫描条形码
    IScanQrCode: function () { },
    //扫描名片
    IScanCard: function () { },

    IOpenLink: function (url) {
        window.open(url);
    },


//显示钉钉个人资料页
IShowUserInfo: function (userId, corpId) {
   
},
//显示钉钉聊天页面
IShowChatPage: function (users, corpId) {
   
},
//拨打免费电话
IShowFreeCall: function () {
    
},
//图片类型钉消息
IPostImageDing: function (users, corpId, text, success, fail) {
   
},
//Link类型钉消息
IPostLinkDing: function (users, corpId, text, title, url, imageUrl, subText, success, fail) {
   
}

});;
/**
 * @author zhixin wen <wenzhixin2010@gmail.com>
 * version: 1.10.1
 * https://github.com/wenzhixin/bootstrap-table/
 */

!function ($) {
    'use strict';

    // TOOLS DEFINITION
    // ======================

    var cachedWidth = null;

    // it only does '%s', and return '' when arguments are undefined
    var sprintf = function (str) {
        var args = arguments,
            flag = true,
            i = 1;

        str = str.replace(/%s/g, function () {
            var arg = args[i++];

            if (typeof arg === 'undefined') {
                flag = false;
                return '';
            }
            return arg;
        });
        return flag ? str : '';
    };

    var getPropertyFromOther = function (list, from, to, value) {
        var result = '';
        $.each(list, function (i, item) {
            if (item[from] === value) {
                result = item[to];
                return false;
            }
            return true;
        });
        return result;
    };

    var getFieldIndex = function (columns, field) {
        var index = -1;

        $.each(columns, function (i, column) {
            try {
                if (column.field === field) {
                    index = i;
                    return false;
                }
            }

            catch (e) {
                var a = e;
            }
            return true;
        });
        return index;
    };

    // http://jsfiddle.net/wenyi/47nz7ez9/3/
    var setFieldIndex = function (columns) {
        var i, j, k,
            totalCol = 0,
            flag = [];

        for (i = 0; i < columns[0].length; i++) {
            totalCol += columns[0][i].colspan || 1;
        }

        for (i = 0; i < columns.length; i++) {
            flag[i] = [];
            for (j = 0; j < totalCol; j++) {
                flag[i][j] = false;
            }
        }

        for (i = 0; i < columns.length; i++) {
            for (j = 0; j < columns[i].length; j++) {
                var r = columns[i][j],
                    rowspan = r.rowspan || 1,
                    colspan = r.colspan || 1,
                    index = $.inArray(false, flag[i]);

                if (colspan === 1) {
                    r.fieldIndex = index;
                    // when field is undefined, use index instead
                    if (typeof r.field === 'undefined') {
                        r.field = index;
                    }
                }

                for (k = 0; k < rowspan; k++) {
                    flag[i + k][index] = true;
                }
                for (k = 0; k < colspan; k++) {
                    flag[i][index + k] = true;
                }
            }
        }
    };

    var getScrollBarWidth = function () {
        if (cachedWidth === null) {
            var inner = $('<p/>').addClass('fixed-table-scroll-inner'),
                outer = $('<div/>').addClass('fixed-table-scroll-outer'),
                w1, w2;

            outer.append(inner);
            $('body').append(outer);

            w1 = inner[0].offsetWidth;
            outer.css('overflow', 'scroll');
            w2 = inner[0].offsetWidth;

            if (w1 === w2) {
                w2 = outer[0].clientWidth;
            }

            outer.remove();
            cachedWidth = w1 - w2;
        }
        return cachedWidth;
    };

    var calculateObjectValue = function (self, name, args, defaultValue) {
        var func = name;

        if (typeof name === 'string') {
            // support obj.func1.func2
            var names = name.split('.');

            if (names.length > 1) {
                func = window;
                $.each(names, function (i, f) {
                    func = func[f];
                });
            } else {
                func = window[name];
            }
        }
        if (typeof func === 'object') {
            return func;
        }
        if (typeof func === 'function') {
            return func.apply(self, args);
        }
        if (!func && typeof name === 'string' && sprintf.apply(this, [name].concat(args))) {
            return sprintf.apply(this, [name].concat(args));
        }
        return defaultValue;
    };

    var compareObjects = function (objectA, objectB, compareLength) {
        // Create arrays of property names
        var objectAProperties = Object.getOwnPropertyNames(objectA),
            objectBProperties = Object.getOwnPropertyNames(objectB),
            propName = '';

        if (compareLength) {
            // If number of properties is different, objects are not equivalent
            if (objectAProperties.length !== objectBProperties.length) {
                return false;
            }
        }

        for (var i = 0; i < objectAProperties.length; i++) {
            propName = objectAProperties[i];

            // If the property is not in the object B properties, continue with the next property
            if ($.inArray(propName, objectBProperties) > -1) {
                // If values of same property are not equal, objects are not equivalent
                if (objectA[propName] !== objectB[propName]) {
                    return false;
                }
            }
        }

        // If we made it this far, objects are considered equivalent
        return true;
    };

    var escapeHTML = function (text) {
        if (typeof text === 'string') {
            return text
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;')
                .replace(/`/g, '&#x60;');
        }
        return text;
    };

    var getRealHeight = function ($el) {
        var height = 0;
        $el.children().each(function () {
            if (height < $(this).outerHeight(true)) {
                height = $(this).outerHeight(true);
            }
        });
        return height;
    };

    var getRealDataAttr = function (dataAttr) {
        for (var attr in dataAttr) {
            var auxAttr = attr.split(/(?=[A-Z])/).join('-').toLowerCase();
            if (auxAttr !== attr) {
                dataAttr[auxAttr] = dataAttr[attr];
                delete dataAttr[attr];
            }
        }

        return dataAttr;
    };

    var getItemField = function (item, field, escape) {
        var value = item;

        if (typeof field !== 'string' || item.hasOwnProperty(field)) {
            return escape ? escapeHTML(item[field]) : item[field];
        }
        var props = field.split('.');
        for (var p in props) {
            value = value && value[props[p]];
        }
        return escape ? escapeHTML(value) : value;
    };

    var isIEBrowser = function () {
        return !!(navigator.userAgent.indexOf("MSIE ") > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./));
    };

    // BOOTSTRAP TABLE CLASS DEFINITION
    // ======================

    var BootstrapTable = function (el, options) {
        this.options = options;
        this.$el = $(el);
        this.$el_ = this.$el.clone();
        this.timeoutId_ = 0;
        this.timeoutFooter_ = 0;

        this.init();
    };

    BootstrapTable.DEFAULTS = {
        classes: 'table table-hover',
        locale: undefined,
        height: undefined,
        undefinedText: '-',
        sortName: undefined,
        sortOrder: 'asc',
        striped: false,
        columns: [[]],
        data: [],
        dataField: 'rows',
        method: 'get',
        url: undefined,
        ajax: undefined,
        cache: true,
        contentType: 'application/json',
        dataType: 'json',
        ajaxOptions: {},
        queryParams: function (params) {
            return params;
        },
        queryParamsType: 'limit', // undefined
        responseHandler: function (res) {
            return res;
        },
        pagination: false,
        onlyInfoPagination: false,
        sidePagination: 'client', // client or server
        totalRows: 0, // server side need to set
        pageNumber: 1,
        pageSize: 10,
        pageList: [10, 25, 50, 100],
        paginationHAlign: 'right', //right, left
        paginationVAlign: 'bottom', //bottom, top, both
        paginationDetailHAlign: 'left', //right, left
        paginationPreText: '&lsaquo;',
        paginationNextText: '&rsaquo;',
        search: false,
        searchOnEnterKey: false,
        strictSearch: false,
        searchAlign: 'right',
        selectItemName: 'btSelectItem',
        showHeader: true,
        showFooter: false,
        showColumns: false,
        showPaginationSwitch: false,
        showRefresh: false,
        showToggle: false,
        buttonsAlign: 'right',
        smartDisplay: true,
        escape: false,
        minimumCountColumns: 1,
        idField: undefined,
        uniqueId: undefined,
        cardView: false,
        detailView: false,
        detailFormatter: function (index, row) {
            return '';
        },
        trimOnSearch: true,
        clickToSelect: false,
        singleSelect: false,
        toolbar: undefined,
        toolbarAlign: 'left',
        checkboxHeader: true,
        sortable: true,
        silentSort: true,
        maintainSelected: false,
        searchTimeOut: 500,
        searchText: '',
        iconSize: undefined,
        iconsPrefix: 'glyphicon', // glyphicon of fa (font awesome)
        icons: {
            paginationSwitchDown: 'glyphicon-collapse-down icon-chevron-down',
            paginationSwitchUp: 'glyphicon-collapse-up icon-chevron-up',
            refresh: 'glyphicon-refresh icon-refresh',
            toggle: 'glyphicon-list-alt icon-list-alt',
            columns: 'glyphicon-th icon-th',
            detailOpen: 'glyphicon-plus icon-plus',
            detailClose: 'glyphicon-minus icon-minus'
        },

        rowStyle: function (row, index) {
            return {};
        },

        rowAttributes: function (row, index) {
            return {};
        },

        onAll: function (name, args) {
            return false;
        },
        onClickCell: function (field, value, row, $element) {
            return false;
        },
        onDblClickCell: function (field, value, row, $element) {
            return false;
        },
        onClickRow: function (item, $element) {
            return false;
        },
        onDblClickRow: function (item, $element) {
            return false;
        },
        onSort: function (name, order) {
            return false;
        },
        onCheck: function (row) {
            return false;
        },
        onUncheck: function (row) {
            return false;
        },
        onCheckAll: function (rows) {
            return false;
        },
        onUncheckAll: function (rows) {
            return false;
        },
        onCheckSome: function (rows) {
            return false;
        },
        onUncheckSome: function (rows) {
            return false;
        },
        onLoadSuccess: function (data) {
            return false;
        },
        onLoadError: function (status) {
            return false;
        },
        onColumnSwitch: function (field, checked) {
            return false;
        },
        onPageChange: function (number, size) {
            return false;
        },
        onSearch: function (text) {
            return false;
        },
        onToggle: function (cardView) {
            return false;
        },
        onPreBody: function (data) {
            return false;
        },
        onPostBody: function () {
            return false;
        },
        onPostHeader: function () {
            return false;
        },
        onExpandRow: function (index, row, $detail) {
            return false;
        },
        onCollapseRow: function (index, row) {
            return false;
        },
        onRefreshOptions: function (options) {
            return false;
        },
        onResetView: function () {
            return false;
        }
    };

    BootstrapTable.LOCALES = [];

    BootstrapTable.LOCALES['en-US'] = BootstrapTable.LOCALES['en'] = {
        formatLoadingMessage: function () {
            return 'Loading, please wait...';
        },
        formatRecordsPerPage: function (pageNumber) {
            return sprintf('%s records per page', pageNumber);
        },
        formatShowingRows: function (pageFrom, pageTo, totalRows) {
            return sprintf('Showing %s to %s of %s rows', pageFrom, pageTo, totalRows);
        },
        formatDetailPagination: function (totalRows) {
            return sprintf('Showing %s rows', totalRows);
        },
        formatSearch: function () {
            return 'Search';
        },
        formatNoMatches: function () {
            return 'No matching records found';
        },
        formatPaginationSwitch: function () {
            return 'Hide/Show pagination';
        },
        formatRefresh: function () {
            return 'Refresh';
        },
        formatToggle: function () {
            return 'Toggle';
        },
        formatColumns: function () {
            return 'Columns';
        },
        formatAllRows: function () {
            return 'All';
        }
    };

    $.extend(BootstrapTable.DEFAULTS, BootstrapTable.LOCALES['en-US']);

    BootstrapTable.COLUMN_DEFAULTS = {
        radio: false,
        checkbox: false,
        checkboxEnabled: true,
        field: undefined,
        title: undefined,
        titleTooltip: undefined,
        'class': undefined,
        align: undefined, // left, right, center
        halign: undefined, // left, right, center
        falign: undefined, // left, right, center
        valign: undefined, // top, middle, bottom
        width: undefined,
        sortable: false,
        order: 'asc', // asc, desc
        visible: true,
        switchable: true,
        clickToSelect: true,
        formatter: undefined,
        footerFormatter: undefined,
        events: undefined,
        sorter: undefined,
        sortName: undefined,
        cellStyle: undefined,
        searchable: true,
        searchFormatter: true,
        cardVisible: true
    };

    BootstrapTable.EVENTS = {
        'all.bs.table': 'onAll',
        'click-cell.bs.table': 'onClickCell',
        'dbl-click-cell.bs.table': 'onDblClickCell',
        'click-row.bs.table': 'onClickRow',
        'dbl-click-row.bs.table': 'onDblClickRow',
        'sort.bs.table': 'onSort',
        'check.bs.table': 'onCheck',
        'uncheck.bs.table': 'onUncheck',
        'check-all.bs.table': 'onCheckAll',
        'uncheck-all.bs.table': 'onUncheckAll',
        'check-some.bs.table': 'onCheckSome',
        'uncheck-some.bs.table': 'onUncheckSome',
        'load-success.bs.table': 'onLoadSuccess',
        'load-error.bs.table': 'onLoadError',
        'column-switch.bs.table': 'onColumnSwitch',
        'page-change.bs.table': 'onPageChange',
        'search.bs.table': 'onSearch',
        'toggle.bs.table': 'onToggle',
        'pre-body.bs.table': 'onPreBody',
        'post-body.bs.table': 'onPostBody',
        'post-header.bs.table': 'onPostHeader',
        'expand-row.bs.table': 'onExpandRow',
        'collapse-row.bs.table': 'onCollapseRow',
        'refresh-options.bs.table': 'onRefreshOptions',
        'reset-view.bs.table': 'onResetView'
    };

    BootstrapTable.prototype.init = function () {
        this.initLocale();
        this.initContainer();
        this.initTable();
        this.initHeader();
        this.initData();
        this.initFooter();
        this.initToolbar();
        this.initPagination();
        this.initBody();
        this.initSearchText();
        this.initServer();
    };

    BootstrapTable.prototype.initLocale = function () {
        if (this.options.locale) {
            var parts = this.options.locale.split(/-|_/);
            parts[0].toLowerCase();
            parts[1] && parts[1].toUpperCase();
            if ($.fn.bootstrapTable.locales[this.options.locale]) {
                // locale as requested
                $.extend(this.options, $.fn.bootstrapTable.locales[this.options.locale]);
            } else if ($.fn.bootstrapTable.locales[parts.join('-')]) {
                // locale with sep set to - (in case original was specified with _)
                $.extend(this.options, $.fn.bootstrapTable.locales[parts.join('-')]);
            } else if ($.fn.bootstrapTable.locales[parts[0]]) {
                // short locale language code (i.e. 'en')
                $.extend(this.options, $.fn.bootstrapTable.locales[parts[0]]);
            }
        }
    };

    BootstrapTable.prototype.initContainer = function () {
        this.$container = $([
            '<div class="bootstrap-table">',
            '<div class="fixed-table-toolbar"></div>',
            this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?
                '<div class="fixed-table-pagination" style="clear: both;"></div>' :
                '',
            '<div class="fixed-table-container">',
            '<div class="fixed-table-header"><table></table></div>',
            '<div class="fixed-table-body">',
            '<div class="fixed-table-loading">',
            this.options.formatLoadingMessage(),
            '</div>',
            '</div>',
            '<div class="fixed-table-footer"><table><tr></tr></table></div>',
            this.options.paginationVAlign === 'bottom' || this.options.paginationVAlign === 'both' ?
                '<div class="fixed-table-pagination"></div>' :
                '',
            '</div>',
            '</div>'
        ].join(''));

        this.$container.insertAfter(this.$el);
        this.$tableContainer = this.$container.find('.fixed-table-container');
        this.$tableHeader = this.$container.find('.fixed-table-header');
        this.$tableBody = this.$container.find('.fixed-table-body');
        this.$tableLoading = this.$container.find('.fixed-table-loading');
        this.$tableFooter = this.$container.find('.fixed-table-footer');
        this.$toolbar = this.$container.find('.fixed-table-toolbar');
        this.$pagination = this.$container.find('.fixed-table-pagination');

        this.$tableBody.append(this.$el);
        this.$container.after('<div class="clearfix"></div>');

        this.$el.addClass(this.options.classes);
        if (this.options.striped) {
            this.$el.addClass('table-striped');
        }
        if ($.inArray('table-no-bordered', this.options.classes.split(' ')) !== -1) {
            this.$tableContainer.addClass('table-no-bordered');
        }
    };

    BootstrapTable.prototype.initTable = function () {
        var that = this,
            columns = [],
            data = [];

        this.$header = this.$el.find('>thead');
        if (!this.$header.length) {
            this.$header = $('<thead></thead>').appendTo(this.$el);
        }
        this.$header.find('tr').each(function () {
            var column = [];

            $(this).find('th').each(function () {
                column.push($.extend({}, {
                    title: $(this).html(),
                    'class': $(this).attr('class'),
                    titleTooltip: $(this).attr('title'),
                    rowspan: $(this).attr('rowspan') ? +$(this).attr('rowspan') : undefined,
                    colspan: $(this).attr('colspan') ? +$(this).attr('colspan') : undefined
                }, $(this).data()));
            });
            columns.push(column);
        });
        if (!$.isArray(this.options.columns[0])) {
            this.options.columns = [this.options.columns];
        }
        this.options.columns = $.extend(true, [], columns, this.options.columns);
        this.columns = [];

        setFieldIndex(this.options.columns);
        $.each(this.options.columns, function (i, columns) {
            $.each(columns, function (j, column) {
                column = $.extend({}, BootstrapTable.COLUMN_DEFAULTS, column);

                if (typeof column.fieldIndex !== 'undefined') {
                    that.columns[column.fieldIndex] = column;
                }

                that.options.columns[i][j] = column;
            });
        });

        // if options.data is setting, do not process tbody data
        if (this.options.data.length) {
            return;
        }

        this.$el.find('>tbody>tr').each(function () {
            var row = {};

            // save tr's id, class and data-* attributes
            row._id = $(this).attr('id');
            row._class = $(this).attr('class');
            row._data = getRealDataAttr($(this).data());

            $(this).find('td').each(function (i) {
                var field = that.columns[i].field;

                row[field] = $(this).html();
                // save td's id, class and data-* attributes
                row['_' + field + '_id'] = $(this).attr('id');
                row['_' + field + '_class'] = $(this).attr('class');
                row['_' + field + '_rowspan'] = $(this).attr('rowspan');
                row['_' + field + '_title'] = $(this).attr('title');
                row['_' + field + '_data'] = getRealDataAttr($(this).data());
            });
            data.push(row);
        });
        this.options.data = data;
    };

    BootstrapTable.prototype.initHeader = function () {
        var that = this,
            visibleColumns = {},
            html = [];

        this.header = {
            fields: [],
            styles: [],
            classes: [],
            formatters: [],
            events: [],
            sorters: [],
            sortNames: [],
            cellStyles: [],
            searchables: []
        };

        $.each(this.options.columns, function (i, columns) {
            html.push('<tr>');

            if (i == 0 && !that.options.cardView && that.options.detailView) {
                html.push(sprintf('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>',
                    that.options.columns.length));
            }

            $.each(columns, function (j, column) {
                var text = '',
                    halign = '', // header align style
                    align = '', // body align style
                    style = '',
                    class_ = sprintf(' class="%s"', column['class']),
                    order = that.options.sortOrder || column.order,
                    unitWidth = 'px',
                    width = column.width;

                if (column.width !== undefined && (!that.options.cardView)) {
                    if (typeof column.width === 'string') {
                        if (column.width.indexOf('%') !== -1) {
                            unitWidth = '%';
                        }
                    }
                }
                if (column.width && typeof column.width === 'string') {
                    width = column.width.replace('%', '').replace('px', '');
                }

                halign = sprintf('text-align: %s; ', column.halign ? column.halign : column.align);
                align = sprintf('text-align: %s; ', column.align);
                style = sprintf('vertical-align: %s; ', column.valign);
                style += sprintf('width: %s; ', (column.checkbox || column.radio) && !width ?
                    '36px' : (width ? width + unitWidth : undefined));

                if (typeof column.fieldIndex !== 'undefined') {
                    that.header.fields[column.fieldIndex] = column.field;
                    that.header.styles[column.fieldIndex] = align + style;
                    that.header.classes[column.fieldIndex] = class_;
                    that.header.formatters[column.fieldIndex] = column.formatter;
                    that.header.events[column.fieldIndex] = column.events;
                    that.header.sorters[column.fieldIndex] = column.sorter;
                    that.header.sortNames[column.fieldIndex] = column.sortName;
                    that.header.cellStyles[column.fieldIndex] = column.cellStyle;
                    that.header.searchables[column.fieldIndex] = column.searchable;

                    if (!column.visible) {
                        return;
                    }

                    if (that.options.cardView && (!column.cardVisible)) {
                        return;
                    }

                    visibleColumns[column.field] = column;
                }

                html.push('<th' + sprintf(' title="%s"', column.titleTooltip),
                    column.checkbox || column.radio ?
                        sprintf(' class="bs-checkbox %s"', column['class'] || '') :
                        class_,
                    sprintf(' style="%s"', halign + style),
                    sprintf(' rowspan="%s"', column.rowspan),
                    sprintf(' colspan="%s"', column.colspan),
                    sprintf(' data-field="%s"', column.field),
                    "tabindex='0'",
                    '>');

                html.push(sprintf('<div class="th-inner %s">', that.options.sortable && column.sortable ?
                    'sortable both' : ''));

                text = column.title;

                if (column.checkbox) {
                    if (!that.options.singleSelect && that.options.checkboxHeader) {
                        //text = '<input name="btSelectAll" type="checkbox" />';
                        var GID = $.IGuid();
                        text = '<input name="btSelectAll" id="' + GID + '" type="checkbox" style="display:none;" /><label for="' + GID + '"></label>';
                    }
                    that.header.stateField = column.field;
                }
                if (column.radio) {
                    text = '';
                    that.header.stateField = column.field;
                    that.options.singleSelect = true;
                }

                html.push(text);
                html.push('</div>');
                html.push('<div class="fht-cell"></div>');
                html.push('</div>');
                html.push('</th>');
            });
            html.push('</tr>');
        });

        this.$header.html(html.join(''));
        this.$header.find('th[data-field]').each(function (i) {
            $(this).data(visibleColumns[$(this).data('field')]);
        });
        this.$container.off('click', '.th-inner').on('click', '.th-inner', function (event) {
            var target = $(this);
            if (target.closest('.bootstrap-table')[0] !== that.$container[0])
                return false;

            if (that.options.sortable && target.parent().data().sortable) {
                that.onSort(event);
            }
        });

        this.$header.children().children().off('keypress').on('keypress', function (event) {
            if (that.options.sortable && $(this).data().sortable) {
                var code = event.keyCode || event.which;
                if (code == 13) { //Enter keycode
                    that.onSort(event);
                }
            }
        });

        if (!this.options.showHeader || this.options.cardView) {
            this.$header.hide();
            this.$tableHeader.hide();
            this.$tableLoading.css('top', 0);
        } else {
            this.$header.show();
            this.$tableHeader.show();
            this.$tableLoading.css('top', this.$header.outerHeight() + 1);
            // Assign the correct sortable arrow
            this.getCaret();
        }

        this.$selectAll = this.$header.find('[name="btSelectAll"]');
        this.$selectAll.off('click').on('click', function () {
            var checked = $(this).prop('checked');
            that[checked ? 'checkAll' : 'uncheckAll']();
            that.updateSelected();
        });
    };

    BootstrapTable.prototype.initFooter = function () {
        if (!this.options.showFooter || this.options.cardView) {
            this.$tableFooter.hide();
        } else {
            this.$tableFooter.show();
        }
    };

    /**
     * @param data
     * @param type: append / prepend
     */
    BootstrapTable.prototype.initData = function (data, type) {
        if (type === 'append') {
            this.data = this.data.concat(data);
        } else if (type === 'prepend') {
            this.data = [].concat(data).concat(this.data);
        } else {
            this.data = data || this.options.data;
        }

        // Fix #839 Records deleted when adding new row on filtered table
        if (type === 'append') {
            this.options.data = this.options.data.concat(data);
        } else if (type === 'prepend') {
            this.options.data = [].concat(data).concat(this.options.data);
        } else {
            this.options.data = this.data;
        }

        if (this.options.sidePagination === 'server') {
            return;
        }
        this.initSort();
    };

    BootstrapTable.prototype.initSort = function () {
        var that = this,
            name = this.options.sortName,
            order = this.options.sortOrder === 'desc' ? -1 : 1,
            index = $.inArray(this.options.sortName, this.header.fields);

        if (index !== -1) {
            this.data.sort(function (a, b) {
                if (that.header.sortNames[index]) {
                    name = that.header.sortNames[index];
                }
                var aa = getItemField(a, name, that.options.escape),
                    bb = getItemField(b, name, that.options.escape),
                    value = calculateObjectValue(that.header, that.header.sorters[index], [aa, bb]);

                if (value !== undefined) {
                    return order * value;
                }

                // Fix #161: undefined or null string sort bug.
                if (aa === undefined || aa === null) {
                    aa = '';
                }
                if (bb === undefined || bb === null) {
                    bb = '';
                }

                // IF both values are numeric, do a numeric comparison
                if ($.isNumeric(aa) && $.isNumeric(bb)) {
                    // Convert numerical values form string to float.
                    aa = parseFloat(aa);
                    bb = parseFloat(bb);
                    if (aa < bb) {
                        return order * -1;
                    }
                    return order;
                }

                if (aa === bb) {
                    return 0;
                }

                // If value is not a string, convert to string
                if (typeof aa !== 'string') {
                    aa = aa.toString();
                }

                if (aa.localeCompare(bb) === -1) {
                    return order * -1;
                }

                return order;
            });
        }
    };

    BootstrapTable.prototype.onSort = function (event) {
        var $this = event.type === "keypress" ? $(event.currentTarget) : $(event.currentTarget).parent(),
            $this_ = this.$header.find('th').eq($this.index());

        this.$header.add(this.$header_).find('span.order').remove();

        if (this.options.sortName === $this.data('field')) {
            this.options.sortOrder = this.options.sortOrder === 'asc' ? 'desc' : 'asc';
        } else {
            this.options.sortName = $this.data('field');
            this.options.sortOrder = $this.data('order') === 'asc' ? 'desc' : 'asc';
        }
        this.trigger('sort', this.options.sortName, this.options.sortOrder);

        $this.add($this_).data('order', this.options.sortOrder);

        // Assign the correct sortable arrow
        this.getCaret();

        if (this.options.sidePagination === 'server') {
            this.initServer(this.options.silentSort);
            return;
        }

        this.initSort();
        this.initBody();
    };

    BootstrapTable.prototype.initToolbar = function () {
        var that = this,
            html = [],
            timeoutId = 0,
            $keepOpen,
            $search,
            switchableCount = 0;

        if (this.$toolbar.find('.bars').children().length) {
            $('body').append($(this.options.toolbar));
        }
        this.$toolbar.html('');

        if (typeof this.options.toolbar === 'string' || typeof this.options.toolbar === 'object') {
            $(sprintf('<div class="bars pull-%s"></div>', this.options.toolbarAlign))
                .appendTo(this.$toolbar)
                .append($(this.options.toolbar));
        }

        // showColumns, showToggle, showRefresh
        html = [sprintf('<div class="columns columns-%s btn-group pull-%s">',
            this.options.buttonsAlign, this.options.buttonsAlign)];

        if (typeof this.options.icons === 'string') {
            this.options.icons = calculateObjectValue(null, this.options.icons);
        }

        if (this.options.showPaginationSwitch) {
            html.push(sprintf('<button class="btn btn-default" type="button" name="paginationSwitch" title="%s">',
                this.options.formatPaginationSwitch()),
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.paginationSwitchDown),
                '</button>');
        }

        if (this.options.showRefresh) {
            html.push(sprintf('<button class="btn btn-default' +
                sprintf(' btn-%s', this.options.iconSize) +
                '" type="button" name="refresh" title="%s">',
                this.options.formatRefresh()),
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.refresh),
                '</button>');
        }

        if (this.options.showToggle) {
            html.push(sprintf('<button class="btn btn-default' +
                sprintf(' btn-%s', this.options.iconSize) +
                '" type="button" name="toggle" title="%s">',
                this.options.formatToggle()),
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.toggle),
                '</button>');
        }

        if (this.options.showColumns) {
            html.push(sprintf('<div class="keep-open btn-group" title="%s">',
                this.options.formatColumns()),
                '<button type="button" class="btn btn-default' +
                sprintf(' btn-%s', this.options.iconSize) +
                ' dropdown-toggle" data-toggle="dropdown">',
                sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.columns),
                ' <span class="caret"></span>',
                '</button>',
                '<ul class="dropdown-menu" role="menu">');

            $.each(this.columns, function (i, column) {
                if (column.radio || column.checkbox) {
                    return;
                }

                if (that.options.cardView && (!column.cardVisible)) {
                    return;
                }

                var checked = column.visible ? ' checked="checked"' : '';

                if (column.switchable) {
                    html.push(sprintf('<li>' +
                        '<label><input type="checkbox" data-field="%s" value="%s"%s> %s</label>' +
                        '</li>', column.field, i, checked, column.title));
                    switchableCount++;
                }
            });
            html.push('</ul>',
                '</div>');
        }

        html.push('</div>');

        // Fix #188: this.showToolbar is for extensions
        if (this.showToolbar || html.length > 2) {
            this.$toolbar.append(html.join(''));
        }

        if (this.options.showPaginationSwitch) {
            this.$toolbar.find('button[name="paginationSwitch"]')
                .off('click').on('click', $.proxy(this.togglePagination, this));
        }

        if (this.options.showRefresh) {
            this.$toolbar.find('button[name="refresh"]')
                .off('click').on('click', $.proxy(this.refresh, this));
        }

        if (this.options.showToggle) {
            this.$toolbar.find('button[name="toggle"]')
                .off('click').on('click', function () {
                    that.toggleView();
                });
        }

        if (this.options.showColumns) {
            $keepOpen = this.$toolbar.find('.keep-open');

            if (switchableCount <= this.options.minimumCountColumns) {
                $keepOpen.find('input').prop('disabled', true);
            }

            $keepOpen.find('li').off('click').on('click', function (event) {
                event.stopImmediatePropagation();
            });
            $keepOpen.find('input').off('click').on('click', function () {
                var $this = $(this);

                that.toggleColumn(getFieldIndex(that.columns,
                    $(this).data('field')), $this.prop('checked'), false);
                that.trigger('column-switch', $(this).data('field'), $this.prop('checked'));
            });
        }

        if (this.options.search) {
            html = [];
            html.push(
                '<div class="pull-' + this.options.searchAlign + ' search">',
                sprintf('<input class="form-control' +
                    sprintf(' input-%s', this.options.iconSize) +
                    '" type="text" placeholder="%s">',
                    this.options.formatSearch()),
                '</div>');

            this.$toolbar.append(html.join(''));
            $search = this.$toolbar.find('.search input');
            $search.off('keyup drop').on('keyup drop', function (event) {
                if (that.options.searchOnEnterKey) {
                    if (event.keyCode !== 13) {
                        return;
                    }
                }

                clearTimeout(timeoutId); // doesn't matter if it's 0
                timeoutId = setTimeout(function () {
                    that.onSearch(event);
                }, that.options.searchTimeOut);
            });

            if (isIEBrowser()) {
                $search.off('mouseup').on('mouseup', function (event) {
                    clearTimeout(timeoutId); // doesn't matter if it's 0
                    timeoutId = setTimeout(function () {
                        that.onSearch(event);
                    }, that.options.searchTimeOut);
                });
            }
        }
    };

    BootstrapTable.prototype.onSearch = function (event) {
        var text = $.trim($(event.currentTarget).val());

        // trim search input
        if (this.options.trimOnSearch && $(event.currentTarget).val() !== text) {
            $(event.currentTarget).val(text);
        }

        if (text === this.searchText) {
            return;
        }
        this.searchText = text;
        this.options.searchText = text;

        this.options.pageNumber = 1;
        this.initSearch();
        this.updatePagination();
        this.trigger('search', text);
    };

    BootstrapTable.prototype.initSearch = function () {
        var that = this;

        if (this.options.sidePagination !== 'server') {
            var s = this.searchText && this.searchText.toLowerCase();
            var f = $.isEmptyObject(this.filterColumns) ? null : this.filterColumns;

            // Check filter
            this.data = f ? $.grep(this.options.data, function (item, i) {
                for (var key in f) {
                    if ($.isArray(f[key])) {
                        if ($.inArray(item[key], f[key]) === -1) {
                            return false;
                        }
                    } else if (item[key] !== f[key]) {
                        return false;
                    }
                }
                return true;
            }) : this.options.data;

            this.data = s ? $.grep(this.data, function (item, i) {
                for (var key in item) {
                    key = $.isNumeric(key) ? parseInt(key, 10) : key;
                    var value = item[key],
                        column = that.columns[getFieldIndex(that.columns, key)],
                        j = $.inArray(key, that.header.fields);

                    // Fix #142: search use formatted data
                    if (column && column.searchFormatter) {
                        value = calculateObjectValue(column,
                            that.header.formatters[j], [value, item, i], value);
                    }

                    var index = $.inArray(key, that.header.fields);
                    if (index !== -1 && that.header.searchables[index] && (typeof value === 'string' || typeof value === 'number')) {
                        if (that.options.strictSearch) {
                            if ((value + '').toLowerCase() === s) {
                                return true;
                            }
                        } else {
                            if ((value + '').toLowerCase().indexOf(s) !== -1) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }) : this.data;
        }
    };

    BootstrapTable.prototype.initPagination = function () {
        if (!this.options.pagination) {
            this.$pagination.hide();
            return;
        } else {
            this.$pagination.show();
        }

        var that = this,
            html = [],
            $allSelected = false,
            i, from, to,
            $pageList,
            $first, $pre,
            $next, $last,
            $number,
            data = this.getData();

        if (this.options.sidePagination !== 'server') {
            this.options.totalRows = data.length;
        }

        this.totalPages = 0;
        if (this.options.totalRows) {
            if (this.options.pageSize === this.options.formatAllRows()) {
                this.options.pageSize = this.options.totalRows;
                $allSelected = true;
            } else if (this.options.pageSize === this.options.totalRows) {
                // Fix #667 Table with pagination,
                // multiple pages and a search that matches to one page throws exception
                var pageLst = typeof this.options.pageList === 'string' ?
                    this.options.pageList.replace('[', '').replace(']', '')
                        .replace(/ /g, '').toLowerCase().split(',') : this.options.pageList;
                if ($.inArray(this.options.formatAllRows().toLowerCase(), pageLst) > -1) {
                    $allSelected = true;
                }
            }

            this.totalPages = ~~((this.options.totalRows - 1) / this.options.pageSize) + 1;

            this.options.totalPages = this.totalPages;
        }
        if (this.totalPages > 0 && this.options.pageNumber > this.totalPages) {
            this.options.pageNumber = this.totalPages;
        }

        this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1;
        this.pageTo = this.options.pageNumber * this.options.pageSize;
        if (this.pageTo > this.options.totalRows) {
            this.pageTo = this.options.totalRows;
        }

        html.push(
            '<div class="pull-' + this.options.paginationDetailHAlign + ' pagination-detail">',
            '<span class="pagination-info">',
            this.options.onlyInfoPagination ? this.options.formatDetailPagination(this.options.totalRows) :
                this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows),
            '</span>');

        if (!this.options.onlyInfoPagination) {
            html.push('<span class="page-list">');

            var pageNumber = [
                sprintf('<span class="btn-group %s">',
                    this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?
                        'dropdown' : 'dropup'),
                '<button type="button" class="btn btn-default ' +
                sprintf(' btn-%s', this.options.iconSize) +
                ' dropdown-toggle" data-toggle="dropdown">',
                '<span class="page-size">',
                $allSelected ? this.options.formatAllRows() : this.options.pageSize,
                '</span>',
                ' <span class="caret"></span>',
                '</button>',
                '<ul class="dropdown-menu" role="menu">'
            ],
                pageList = this.options.pageList;

            if (typeof this.options.pageList === 'string') {
                var list = this.options.pageList.replace('[', '').replace(']', '')
                    .replace(/ /g, '').split(',');

                pageList = [];
                $.each(list, function (i, value) {
                    pageList.push(value.toUpperCase() === that.options.formatAllRows().toUpperCase() ?
                        that.options.formatAllRows() : +value);
                });
            }

            $.each(pageList, function (i, page) {
                if (!that.options.smartDisplay || i === 0 || pageList[i - 1] <= that.options.totalRows) {
                    var active;
                    if ($allSelected) {
                        active = page === that.options.formatAllRows() ? ' class="active"' : '';
                    } else {
                        active = page === that.options.pageSize ? ' class="active"' : '';
                    }
                    pageNumber.push(sprintf('<li%s><a href="javascript:void(0)">%s</a></li>', active, page));
                }
            });
            pageNumber.push('</ul></span>');

            html.push(this.options.formatRecordsPerPage(pageNumber.join('')));
            html.push('</span>');

            html.push('</div>',
                '<div class="pull-' + this.options.paginationHAlign + ' pagination">',
                '<ul class="pagination' + sprintf(' pagination-%s', this.options.iconSize) + '">',
                '<li class="page-pre"><a href="javascript:void(0)">' + this.options.paginationPreText + '</a></li>');

            if (this.totalPages < 5) {
                from = 1;
                to = this.totalPages;
            } else {
                from = this.options.pageNumber - 2;
                to = from + 4;
                if (from < 1) {
                    from = 1;
                    to = 5;
                }
                if (to > this.totalPages) {
                    to = this.totalPages;
                    from = to - 4;
                }
            }

            if (this.totalPages >= 6) {
                if (this.options.pageNumber >= 3) {
                    html.push('<li class="page-first' + (1 === this.options.pageNumber ? ' active' : '') + '">',
                        '<a href="javascript:void(0)">', 1, '</a>',
                        '</li>');

                    from++;
                }

                if (this.options.pageNumber >= 4) {
                    if (this.options.pageNumber == 4 || this.totalPages == 6 || this.totalPages == 7) {
                        from--;
                    } else {
                        html.push('<li class="page-first-separator disabled">',
                            '<a href="javascript:void(0)">...</a>',
                            '</li>');
                    }

                    to--;
                }
            }

            if (this.totalPages >= 7) {
                if (this.options.pageNumber >= (this.totalPages - 2)) {
                    from--;
                }
            }

            if (this.totalPages == 6) {
                if (this.options.pageNumber >= (this.totalPages - 2)) {
                    to++;
                }
            } else if (this.totalPages >= 7) {
                if (this.totalPages == 7 || this.options.pageNumber >= (this.totalPages - 3)) {
                    to++;
                }
            }

            for (i = from; i <= to; i++) {
                html.push('<li class="page-number' + (i === this.options.pageNumber ? ' active' : '') + '">',
                    '<a href="javascript:void(0)">', i, '</a>',
                    '</li>');
            }

            if (this.totalPages >= 8) {
                if (this.options.pageNumber <= (this.totalPages - 4)) {
                    html.push('<li class="page-last-separator disabled">',
                        '<a href="javascript:void(0)">...</a>',
                        '</li>');
                }
            }

            if (this.totalPages >= 6) {
                if (this.options.pageNumber <= (this.totalPages - 3)) {
                    html.push('<li class="page-last' + (this.totalPages === this.options.pageNumber ? ' active' : '') + '">',
                        '<a href="javascript:void(0)">', this.totalPages, '</a>',
                        '</li>');
                }
            }

            html.push(
                '<li class="page-next"><a href="javascript:void(0)">' + this.options.paginationNextText + '</a></li>',
                '</ul>',
                '</div>');
        }
        this.$pagination.html(html.join(''));

        if (!this.options.onlyInfoPagination) {
            $pageList = this.$pagination.find('.page-list a');
            $first = this.$pagination.find('.page-first');
            $pre = this.$pagination.find('.page-pre');
            $next = this.$pagination.find('.page-next');
            $last = this.$pagination.find('.page-last');
            $number = this.$pagination.find('.page-number');

            if (this.options.smartDisplay) {
                if (this.totalPages <= 1) {
                    this.$pagination.find('div.pagination').hide();
                }
                if (pageList.length < 2 || this.options.totalRows <= pageList[0]) {
                    this.$pagination.find('span.page-list').hide();
                }

                // when data is empty, hide the pagination
                this.$pagination[this.getData().length ? 'show' : 'hide']();
            }
            if ($allSelected) {
                this.options.pageSize = this.options.formatAllRows();
            }
            $pageList.off('click').on('click', $.proxy(this.onPageListChange, this));
            $first.off('click').on('click', $.proxy(this.onPageFirst, this));
            $pre.off('click').on('click', $.proxy(this.onPagePre, this));
            $next.off('click').on('click', $.proxy(this.onPageNext, this));
            $last.off('click').on('click', $.proxy(this.onPageLast, this));
            $number.off('click').on('click', $.proxy(this.onPageNumber, this));
        }
    };

    BootstrapTable.prototype.updatePagination = function (event) {
        // Fix #171: IE disabled button can be clicked bug.
        if (event && $(event.currentTarget).hasClass('disabled')) {
            return;
        }

        if (!this.options.maintainSelected) {
            this.resetRows();
        }

        this.initPagination();
        if (this.options.sidePagination === 'server') {
            this.initServer();
        } else {
            this.initBody();
        }

        this.trigger('page-change', this.options.pageNumber, this.options.pageSize);
    };

    BootstrapTable.prototype.onPageListChange = function (event) {
        var $this = $(event.currentTarget);

        $this.parent().addClass('active').siblings().removeClass('active');
        this.options.pageSize = $this.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ?
            this.options.formatAllRows() : +$this.text();
        this.$toolbar.find('.page-size').text(this.options.pageSize);

        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageFirst = function (event) {
        this.options.pageNumber = 1;
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPagePre = function (event) {
        if ((this.options.pageNumber - 1) == 0) {
            this.options.pageNumber = this.options.totalPages;
        } else {
            this.options.pageNumber--;
        }
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageNext = function (event) {
        if ((this.options.pageNumber + 1) > this.options.totalPages) {
            this.options.pageNumber = 1;
        } else {
            this.options.pageNumber++;
        }
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageLast = function (event) {
        this.options.pageNumber = this.totalPages;
        this.updatePagination(event);
    };

    BootstrapTable.prototype.onPageNumber = function (event) {
        if (this.options.pageNumber === +$(event.currentTarget).text()) {
            return;
        }
        this.options.pageNumber = +$(event.currentTarget).text();
        this.updatePagination(event);
    };

    BootstrapTable.prototype.initBody = function (fixedScroll) {
        var that = this,
            html = [],
            data = this.getData();

        this.trigger('pre-body', data);

        this.$body = this.$el.find('>tbody');
        if (!this.$body.length) {
            this.$body = $('<tbody></tbody>').appendTo(this.$el);
        }

        //Fix #389 Bootstrap-table-flatJSON is not working

        if (!this.options.pagination || this.options.sidePagination === 'server') {
            this.pageFrom = 1;
            this.pageTo = data.length;
        }

        for (var i = this.pageFrom - 1; i < this.pageTo; i++) {
            var key,
                item = data[i],
                style = {},
                csses = [],
                data_ = '',
                attributes = {},
                htmlAttributes = [];

            style = calculateObjectValue(this.options, this.options.rowStyle, [item, i], style);

            if (style && style.css) {
                for (key in style.css) {
                    csses.push(key + ': ' + style.css[key]);
                }
            }

            attributes = calculateObjectValue(this.options,
                this.options.rowAttributes, [item, i], attributes);

            if (attributes) {
                for (key in attributes) {
                    htmlAttributes.push(sprintf('%s="%s"', key, escapeHTML(attributes[key])));
                }
            }

            if (item._data && !$.isEmptyObject(item._data)) {
                $.each(item._data, function (k, v) {
                    // ignore data-index
                    if (k === 'index') {
                        return;
                    }
                    data_ += sprintf(' data-%s="%s"', k, v);
                });
            }

            html.push('<tr',
                sprintf(' %s', htmlAttributes.join(' ')),
                sprintf(' id="%s"', $.isArray(item) ? undefined : item._id),
                sprintf(' class="%s"', style.classes || ($.isArray(item) ? undefined : item._class)),
                sprintf(' data-index="%s"', i),
                sprintf(' data-uniqueid="%s"', item[this.options.uniqueId]),
                sprintf('%s', data_),
                '>'
            );

            if (this.options.cardView) {
                html.push(sprintf('<td colspan="%s">', this.header.fields.length));
            }

            if (!this.options.cardView && this.options.detailView) {
                html.push('<td>',
                    '<a class="detail-icon" href="javascript:">',
                    sprintf('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.detailOpen),
                    '</a>',
                    '</td>');
            }

            $.each(this.header.fields, function (j, field) {
                var text = '',
                    value = getItemField(item, field, that.options.escape),
                    type = '',
                    cellStyle = {},
                    id_ = '',
                    class_ = that.header.classes[j],
                    data_ = '',
                    rowspan_ = '',
                    title_ = '',
                    column = that.columns[getFieldIndex(that.columns, field)];

                if (!column || !column.visible) {
                    return;
                }

                style = sprintf('style="%s"', csses.concat(that.header.styles[j]).join('; '));

                value = calculateObjectValue(column,
                    that.header.formatters[j], [value, item, i], value);

                // handle td's id and class
                if (item['_' + field + '_id']) {
                    id_ = sprintf(' id="%s"', item['_' + field + '_id']);
                }
                if (item['_' + field + '_class']) {
                    class_ = sprintf(' class="%s"', item['_' + field + '_class']);
                }
                if (item['_' + field + '_rowspan']) {
                    rowspan_ = sprintf(' rowspan="%s"', item['_' + field + '_rowspan']);
                }
                if (item['_' + field + '_title']) {
                    title_ = sprintf(' title="%s"', item['_' + field + '_title']);
                }
                cellStyle = calculateObjectValue(that.header,
                    that.header.cellStyles[j], [value, item, i], cellStyle);
                if (cellStyle.classes) {
                    class_ = sprintf(' class="%s"', cellStyle.classes);
                }
                if (cellStyle.css) {
                    var csses_ = [];
                    for (var key in cellStyle.css) {
                        csses_.push(key + ': ' + cellStyle.css[key]);
                    }
                    style = sprintf('style="%s"', csses_.concat(that.header.styles[j]).join('; '));
                }

                if (item['_' + field + '_data'] && !$.isEmptyObject(item['_' + field + '_data'])) {
                    $.each(item['_' + field + '_data'], function (k, v) {
                        // ignore data-index
                        if (k === 'index') {
                            return;
                        }
                        data_ += sprintf(' data-%s="%s"', k, v);
                    });
                }

                if (column.checkbox || column.radio) {
                    type = column.checkbox ? 'checkbox' : type;
                    type = column.radio ? 'radio' : type;
                    var GID = $.IGuid();
                    text = [sprintf(that.options.cardView ?
                        '<div class="card-view %s">' : '<td class="bs-checkbox %s">', column['class'] || ''),
                    '<input id="' + GID + '" style="display:none;"' +
                    sprintf(' data-index="%s"', i) +
                    sprintf(' name="%s"', that.options.selectItemName) +
                    sprintf(' type="%s"', type) +
                    sprintf(' value="%s"', item[that.options.idField]) +
                    sprintf(' checked="%s"', value === true ||
                        (value && value.checked) ? 'checked' : undefined) +
                    sprintf(' disabled="%s"', !column.checkboxEnabled ||
                        (value && value.disabled) ? 'disabled' : undefined) +
                    ' /><label for="' + GID + '"></label>',
                    that.header.formatters[j] && typeof value === 'string' ? value : '',
                    that.options.cardView ? '</div>' : '</td>'
                    ].join('');

                    item[that.header.stateField] = value === true || (value && value.checked);
                } else {
                    value = typeof value === 'undefined' || value === null ?
                        that.options.undefinedText : value;

                    text = that.options.cardView ? ['<div class="card-view">',
                        that.options.showHeader ? sprintf('<span class="title" %s>%s</span>', style,
                            getPropertyFromOther(that.columns, 'field', 'title', field)) : '',
                        sprintf('<span class="value">%s</span>', value),
                        '</div>'
                    ].join('') : [sprintf('<td%s %s %s %s %s %s>', id_, class_, style, data_, rowspan_, title_),
                        value,
                        '</td>'
                    ].join('');

                    // Hide empty data on Card view when smartDisplay is set to true.
                    if (that.options.cardView && that.options.smartDisplay && value === '') {
                        // Should set a placeholder for event binding correct fieldIndex
                        text = '<div class="card-view"></div>';
                    }
                }

                html.push(text);
            });

            if (this.options.cardView) {
                html.push('</td>');
            }

            html.push('</tr>');
        }

        // show no records
        if (!html.length) {
            html.push('<tr class="no-records-found table-nodata">',
                sprintf('<td colspan="%s">%s</td>',
                    this.$header.find('th').length, this.options.formatNoMatches()),
                '</tr>');
        }

        this.$body.html(html.join(''));

        if (!fixedScroll) {
            this.scrollTo(0);
        }

        // click to select by column
        this.$body.find('> tr[data-index] > td').off('click dblclick').on('click dblclick', function (e) {
            var $td = $(this),
                $tr = $td.parent(),
                item = that.data[$tr.data('index')],
                index = $td[0].cellIndex,
                field = that.header.fields[that.options.detailView && !that.options.cardView ? index - 1 : index],
                column = that.columns[getFieldIndex(that.columns, field)],
                value = getItemField(item, field, that.options.escape);

            if ($td.find('.detail-icon').length) {
                return;
            }

            that.trigger(e.type === 'click' ? 'click-cell' : 'dbl-click-cell', field, value, item, $td);
            that.trigger(e.type === 'click' ? 'click-row' : 'dbl-click-row', item, $tr);

            // if click to select - then trigger the checkbox/radio click
            if (e.type === 'click' && that.options.clickToSelect && column.clickToSelect) {
                var $selectItem = $tr.find(sprintf('[name="%s"]', that.options.selectItemName));
                if ($selectItem.length) {
                    $selectItem[0].click(); // #144: .trigger('click') bug
                }
            }
        });

        this.$body.find('> tr[data-index] > td > .detail-icon').off('click').on('click', function () {
            var $this = $(this),
                $tr = $this.parent().parent(),
                index = $tr.data('index'),
                row = data[index]; // Fix #980 Detail view, when searching, returns wrong row

            // remove and update
            if ($tr.next().is('tr.detail-view')) {
                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailOpen));
                $tr.next().remove();
                that.trigger('collapse-row', index, row);
            } else {
                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailClose));
                $tr.after(sprintf('<tr class="detail-view"><td colspan="%s"></td></tr>', $tr.find('td').length));
                var $element = $tr.next().find('td');
                var content = calculateObjectValue(that.options, that.options.detailFormatter, [index, row, $element], '');
                if ($element.length === 1) {
                    $element.append(content);
                }
                that.trigger('expand-row', index, row, $element);
            }
            that.resetView();
        });

        this.$selectItem = this.$body.find(sprintf('[name="%s"]', this.options.selectItemName));
        this.$selectItem.off('click').on('click', function (event) {
            event.stopImmediatePropagation();

            var $this = $(this),
                checked = $this.prop('checked'),
                row = that.data[$this.data('index')];

            if (that.options.maintainSelected && $(this).is(':radio')) {
                $.each(that.options.data, function (i, row) {
                    row[that.header.stateField] = false;
                });
            }

            row[that.header.stateField] = checked;

            if (that.options.singleSelect) {
                that.$selectItem.not(this).each(function () {
                    that.data[$(this).data('index')][that.header.stateField] = false;
                });
                that.$selectItem.filter(':checked').not(this).prop('checked', false);
            }

            that.updateSelected();
            that.trigger(checked ? 'check' : 'uncheck', row, $this);
        });

        $.each(this.header.events, function (i, events) {
            if (!events) {
                return;
            }
            // fix bug, if events is defined with namespace
            if (typeof events === 'string') {
                events = calculateObjectValue(null, events);
            }

            var field = that.header.fields[i],
                fieldIndex = $.inArray(field, that.getVisibleFields());

            if (that.options.detailView && !that.options.cardView) {
                fieldIndex += 1;
            }

            for (var key in events) {
                that.$body.find('>tr:not(.no-records-found)').each(function () {
                    var $tr = $(this),
                        $td = $tr.find(that.options.cardView ? '.card-view' : 'td').eq(fieldIndex),
                        index = key.indexOf(' '),
                        name = key.substring(0, index),
                        el = key.substring(index + 1),
                        func = events[key];

                    $td.find(el).off(name).on(name, function (e) {
                        var index = $tr.data('index'),
                            row = that.data[index],
                            value = row[field];

                        func.apply(this, [e, value, row, index]);
                    });
                });
            }
        });

        this.updateSelected();
        this.resetView();

        this.trigger('post-body');
    };

    BootstrapTable.prototype.initServer = function (silent, query) {
        var that = this,
            data = {},
            params = {
                searchText: this.searchText,
                sortName: this.options.sortName,
                sortOrder: this.options.sortOrder
            },
            request;

        if (this.options.pagination) {
            params.pageSize = this.options.pageSize === this.options.formatAllRows() ?
                this.options.totalRows : this.options.pageSize;
            params.pageNumber = this.options.pageNumber;
        }

        if (!this.options.url && !this.options.ajax) {
            return;
        }

        if (this.options.queryParamsType === 'limit') {
            params = {
                search: params.searchText,
                sort: params.sortName,
                order: params.sortOrder
            };
            if (this.options.pagination) {
                params.limit = this.options.pageSize === this.options.formatAllRows() ?
                    this.options.totalRows : this.options.pageSize;
                params.offset = this.options.pageSize === this.options.formatAllRows() ?
                    0 : this.options.pageSize * (this.options.pageNumber - 1);
            }
        }

        if (!($.isEmptyObject(this.filterColumnsPartial))) {
            params['filter'] = JSON.stringify(this.filterColumnsPartial, null);
        }

        data = calculateObjectValue(this.options, this.options.queryParams, [params], data);

        $.extend(data, query || {});

        // false to stop request
        if (data === false) {
            return;
        }

        if (!silent) {
            this.$tableLoading.show();
        }
        request = $.extend({}, calculateObjectValue(null, this.options.ajaxOptions), {
            type: this.options.method,
            url: this.options.url,
            data: this.options.contentType === 'application/json' && this.options.method === 'post' ?
                JSON.stringify(data) : data,
            cache: this.options.cache,
            contentType: this.options.contentType,
            dataType: this.options.dataType,
            success: function (res) {
                if (!res.Successful) {
                    $.IShowError({ title: "", msg: "", detail: res.ErrorMessage });
                    return;
                }
                var handle = function (response) {
                    response = calculateObjectValue(that.options, that.options.responseHandler, [response], response);
                    that.load(response);
                    that.trigger('load-success', response);
                    if (!silent) that.$tableLoading.hide();
                };
                //����ж�ջ�Ļ�
                //Debugging = 0,
                //Exceptional = 1,
                //Finished = 2
                if (res.ReturnData && res.ReturnData.Response != null && res.ReturnData.Response.DebugTrack != null && res.ReturnData.Response.DebugTrack.DebugState == 0) {
                    top.$.IPushDebugTrack(res.ReturnData.Response, that, handle);
                }
                else {
                    if (res.ReturnData && res.ReturnData.Response) {
                        handle(res.ReturnData.Response);
                    } else if (res.Result) {
                        handle(res);
                    } else {
                        handle(res.ReturnData);
                    }
                }
            },
            error: function (res) {
                that.trigger('load-error', res.status, res);
                if (!silent) that.$tableLoading.hide();
            }
        });

        if (this.options.ajax) {
            calculateObjectValue(this, this.options.ajax, [request], null);
        } else {
            $.ajax(request);
        }
    };

    BootstrapTable.prototype.initSearchText = function () {
        if (this.options.search) {
            if (this.options.searchText !== '') {
                var $search = this.$toolbar.find('.search input');
                $search.val(this.options.searchText);
                this.onSearch({ currentTarget: $search });
            }
        }
    };

    BootstrapTable.prototype.getCaret = function () {
        var that = this;

        $.each(this.$header.find('th'), function (i, th) {
            $(th).find('.sortable').removeClass('desc asc').addClass($(th).data('field') === that.options.sortName ? that.options.sortOrder : 'both');
        });
    };

    BootstrapTable.prototype.updateSelected = function () {
        var checkAll = this.$selectItem.filter(':enabled').length &&
            this.$selectItem.filter(':enabled').length ===
            this.$selectItem.filter(':enabled').filter(':checked').length;

        this.$selectAll.add(this.$selectAll_).prop('checked', checkAll);

        this.$selectItem.each(function () {
            $(this).closest('tr')[$(this).prop('checked') ? 'addClass' : 'removeClass']('selected');
        });
    };

    BootstrapTable.prototype.updateRows = function () {
        var that = this;

        this.$selectItem.each(function () {
            that.data[$(this).data('index')][that.header.stateField] = $(this).prop('checked');
        });
    };

    BootstrapTable.prototype.resetRows = function () {
        var that = this;

        $.each(this.data, function (i, row) {
            that.$selectAll.prop('checked', false);
            that.$selectItem.prop('checked', false);
            if (that.header.stateField) {
                row[that.header.stateField] = false;
            }
        });
    };

    BootstrapTable.prototype.trigger = function (name) {
        var args = Array.prototype.slice.call(arguments, 1);

        name += '.bs.table';
        this.options[BootstrapTable.EVENTS[name]].apply(this.options, args);
        this.$el.trigger($.Event(name), args);

        this.options.onAll(name, args);
        this.$el.trigger($.Event('all.bs.table'), [name, args]);
    };

    BootstrapTable.prototype.resetHeader = function () {
        // fix #61: the hidden table reset header bug.
        // fix bug: get $el.css('width') error sometime (height = 500)
        clearTimeout(this.timeoutId_);
        this.timeoutId_ = setTimeout($.proxy(this.fitHeader, this), this.$el.is(':hidden') ? 100 : 0);
    };

    BootstrapTable.prototype.fitHeader = function () {
        var that = this,
            fixedBody,
            scrollWidth,
            focused,
            focusedTemp;

        if (that.$el.is(':hidden')) {
            that.timeoutId_ = setTimeout($.proxy(that.fitHeader, that), 100);
            return;
        }
        fixedBody = this.$tableBody.get(0);

        scrollWidth = fixedBody.scrollWidth > fixedBody.clientWidth &&
            fixedBody.scrollHeight > fixedBody.clientHeight + this.$header.outerHeight() ?
            getScrollBarWidth() : 0;

        this.$el.css('margin-top', -this.$header.outerHeight());

        focused = $(':focus');
        if (focused.length > 0) {
            var $th = focused.parents('th');
            if ($th.length > 0) {
                var dataField = $th.attr('data-field');
                if (dataField !== undefined) {
                    var $headerTh = this.$header.find("[data-field='" + dataField + "']");
                    if ($headerTh.length > 0) {
                        $headerTh.find(":input").addClass("focus-temp");
                    }
                }
            }
        }

        this.$header_ = this.$header.clone(true, true);
        this.$selectAll_ = this.$header_.find('[name="btSelectAll"]');
        this.$tableHeader.css({
            'margin-right': scrollWidth
        }).find('table').css('width', this.$el.outerWidth())
            .html('').attr('class', this.$el.attr('class'))
            .append(this.$header_);


        focusedTemp = $('.focus-temp:visible:eq(0)');
        if (focusedTemp.length > 0) {
            focusedTemp.focus();
            this.$header.find('.focus-temp').removeClass('focus-temp');
        }

        // fix bug: $.data() is not working as expected after $.append()
        this.$header.find('th[data-field]').each(function (i) {
            that.$header_.find(sprintf('th[data-field="%s"]', $(this).data('field'))).data($(this).data());
        });

        var visibleFields = this.getVisibleFields();

        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {
            var $this = $(this),
                index = i;

            if (that.options.detailView && !that.options.cardView) {
                if (i === 0) {
                    that.$header_.find('th.detail').find('.fht-cell').width($this.innerWidth());
                }
                index = i - 1;
            }

            that.$header_.find(sprintf('th[data-field="%s"]', visibleFields[index]))
                .find('.fht-cell').width($this.innerWidth());
        });
        // horizontal scroll event
        // TODO: it's probably better improving the layout than binding to scroll event
        this.$tableBody.off('scroll').on('scroll', function () {
            that.$tableHeader.scrollLeft($(this).scrollLeft());

            if (that.options.showFooter && !that.options.cardView) {
                that.$tableFooter.scrollLeft($(this).scrollLeft());
            }
        });
        that.trigger('post-header');
    };

    BootstrapTable.prototype.resetFooter = function () {
        var that = this,
            data = that.getData(),
            html = [];

        if (!this.options.showFooter || this.options.cardView) { //do nothing
            return;
        }

        if (!this.options.cardView && this.options.detailView) {
            html.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>');
        }

        $.each(this.columns, function (i, column) {
            var falign = '', // footer align style
                style = '',
                class_ = sprintf(' class="%s"', column['class']);

            if (!column.visible) {
                return;
            }

            if (that.options.cardView && (!column.cardVisible)) {
                return;
            }

            falign = sprintf('text-align: %s; ', column.falign ? column.falign : column.align);
            style = sprintf('vertical-align: %s; ', column.valign);

            html.push('<td', class_, sprintf(' style="%s"', falign + style), '>');
            html.push('<div class="th-inner">');

            html.push(calculateObjectValue(column, column.footerFormatter, [data], '&nbsp;') || '&nbsp;');

            html.push('</div>');
            html.push('<div class="fht-cell"></div>');
            html.push('</div>');
            html.push('</td>');
        });

        this.$tableFooter.find('tr').html(html.join(''));
        clearTimeout(this.timeoutFooter_);
        this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this),
            this.$el.is(':hidden') ? 100 : 0);
    };

    BootstrapTable.prototype.fitFooter = function () {
        var that = this,
            $footerTd,
            elWidth,
            scrollWidth;

        clearTimeout(this.timeoutFooter_);
        if (this.$el.is(':hidden')) {
            this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this), 100);
            return;
        }

        elWidth = this.$el.css('width');
        scrollWidth = elWidth > this.$tableBody.width() ? getScrollBarWidth() : 0;

        this.$tableFooter.css({
            'margin-right': scrollWidth
        }).find('table').css('width', elWidth)
            .attr('class', this.$el.attr('class'));

        $footerTd = this.$tableFooter.find('td');

        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {
            var $this = $(this);

            $footerTd.eq(i).find('.fht-cell').width($this.innerWidth());
        });
    };

    BootstrapTable.prototype.toggleColumn = function (index, checked, needUpdate) {
        if (index === -1) {
            return;
        }
        this.columns[index].visible = checked;
        this.initHeader();
        this.initSearch();
        this.initPagination();
        this.initBody();

        if (this.options.showColumns) {
            var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);

            if (needUpdate) {
                $items.filter(sprintf('[value="%s"]', index)).prop('checked', checked);
            }

            if ($items.filter(':checked').length <= this.options.minimumCountColumns) {
                $items.filter(':checked').prop('disabled', true);
            }
        }
    };

    BootstrapTable.prototype.toggleRow = function (index, uniqueId, visible) {
        if (index === -1) {
            return;
        }

        this.$body.find(typeof index !== 'undefined' ?
            sprintf('tr[data-index="%s"]', index) :
            sprintf('tr[data-uniqueid="%s"]', uniqueId))
        [visible ? 'show' : 'hide']();
    };

    BootstrapTable.prototype.getVisibleFields = function () {
        var that = this,
            visibleFields = [];

        $.each(this.header.fields, function (j, field) {
            var column = that.columns[getFieldIndex(that.columns, field)];

            if (!column || !column.visible) {
                return;
            }
            visibleFields.push(field);
        });
        return visibleFields;
    };

    // PUBLIC FUNCTION DEFINITION
    // =======================

    BootstrapTable.prototype.resetView = function (params) {
        var padding = 0;

        if (params && params.height) {
            this.options.height = params.height;
        }

        this.$selectAll.prop('checked', this.$selectItem.length > 0 &&
            this.$selectItem.length === this.$selectItem.filter(':checked').length);

        if (this.options.height) {
            var toolbarHeight = getRealHeight(this.$toolbar),
                paginationHeight = getRealHeight(this.$pagination),
                height = this.options.height - toolbarHeight - paginationHeight;

            this.$tableContainer.css('height', height + 'px');
        }

        if (this.options.cardView) {
            // remove the element css
            this.$el.css('margin-top', '0');
            this.$tableContainer.css('padding-bottom', '0');
            return;
        }

        if (this.options.showHeader && this.options.height) {
            this.$tableHeader.show();
            this.resetHeader();
            padding += this.$header.outerHeight();
        } else {
            this.$tableHeader.hide();
            this.trigger('post-header');
        }

        if (this.options.showFooter) {
            this.resetFooter();
            if (this.options.height) {
                padding += this.$tableFooter.outerHeight() + 1;
            }
        }

        // Assign the correct sortable arrow
        this.getCaret();
        this.$tableContainer.css('padding-bottom', padding + 'px');
        this.trigger('reset-view');
    };

    BootstrapTable.prototype.getData = function (useCurrentPage) {
        return (this.searchText || !$.isEmptyObject(this.filterColumns) || !$.isEmptyObject(this.filterColumnsPartial)) ?
            (useCurrentPage ? this.data.slice(this.pageFrom - 1, this.pageTo) : this.data) :
            (useCurrentPage ? this.options.data.slice(this.pageFrom - 1, this.pageTo) : this.options.data);
    };

    BootstrapTable.prototype.load = function (data) {
        var fixedScroll = false;

        // #431: support pagination
        if (this.options.sidePagination === 'server') {
            if (data) {
                this.options.totalRows = data.total;
                fixedScroll = data.fixedScroll;
                data = data[this.options.dataField];
            }
        } else if (!$.isArray(data)) { // support fixedScroll
            if (data) {
                fixedScroll = data.fixedScroll;
                data = data.data;
            }
        }

        this.initData(data);
        this.initSearch();
        this.initPagination();
        this.initBody(fixedScroll);
    };

    BootstrapTable.prototype.append = function (data) {
        this.initData(data, 'append');
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.prepend = function (data) {
        this.initData(data, 'prepend');
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.remove = function (params) {
        var len = this.options.data.length,
            i, row;

        if (!params.hasOwnProperty('field') || !params.hasOwnProperty('values')) {
            return;
        }

        for (i = len - 1; i >= 0; i--) {
            row = this.options.data[i];

            if (!row.hasOwnProperty(params.field)) {
                continue;
            }
            if ($.inArray(row[params.field], params.values) !== -1) {
                this.options.data.splice(i, 1);
            }
        }

        if (len === this.options.data.length) {
            return;
        }

        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.removeAll = function () {
        if (this.options.data.length > 0) {
            this.options.data.splice(0, this.options.data.length);
            this.initSearch();
            this.initPagination();
            this.initBody(true);
        }
    };

    BootstrapTable.prototype.getRowByUniqueId = function (id) {
        var uniqueId = this.options.uniqueId,
            len = this.options.data.length,
            dataRow = null,
            i, row, rowUniqueId;

        for (i = len - 1; i >= 0; i--) {
            row = this.options.data[i];

            if (row.hasOwnProperty(uniqueId)) { // uniqueId is a column
                rowUniqueId = row[uniqueId];
            } else if (row._data.hasOwnProperty(uniqueId)) { // uniqueId is a row data property
                rowUniqueId = row._data[uniqueId];
            } else {
                continue;
            }

            if (typeof rowUniqueId === 'string') {
                id = id.toString();
            } else if (typeof rowUniqueId === 'number') {
                if ((Number(rowUniqueId) === rowUniqueId) && (rowUniqueId % 1 === 0)) {
                    id = parseInt(id);
                } else if ((rowUniqueId === Number(rowUniqueId)) && (rowUniqueId !== 0)) {
                    id = parseFloat(id);
                }
            }

            if (rowUniqueId === id) {
                dataRow = row;
                break;
            }
        }

        return dataRow;
    };

    BootstrapTable.prototype.removeByUniqueId = function (id) {
        var len = this.options.data.length,
            row = this.getRowByUniqueId(id);

        if (row) {
            this.options.data.splice(this.options.data.indexOf(row), 1);
        }

        if (len === this.options.data.length) {
            return;
        }

        this.initSearch();
        this.initPagination();
        this.initBody(true);
    };

    BootstrapTable.prototype.updateByUniqueId = function (params) {
        var rowId;

        if (!params.hasOwnProperty('id') || !params.hasOwnProperty('row')) {
            return;
        }

        rowId = $.inArray(this.getRowByUniqueId(params.id), this.options.data);

        if (rowId === -1) {
            return;
        }

        $.extend(this.data[rowId], params.row);
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.insertRow = function (params) {
        if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {
            return;
        }
        this.data.splice(params.index, 0, params.row);
        this.initSearch();
        this.initPagination();
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.updateRow = function (params) {
        if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {
            return;
        }
        $.extend(this.data[params.index], params.row);
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.showRow = function (params) {
        if (!params.hasOwnProperty('index') && !params.hasOwnProperty('uniqueId')) {
            return;
        }
        this.toggleRow(params.index, params.uniqueId, true);
    };

    BootstrapTable.prototype.hideRow = function (params) {
        if (!params.hasOwnProperty('index') && !params.hasOwnProperty('uniqueId')) {
            return;
        }
        this.toggleRow(params.index, params.uniqueId, false);
    };

    BootstrapTable.prototype.getRowsHidden = function (show) {
        var rows = $(this.$body[0]).children().filter(':hidden'),
            i = 0;
        if (show) {
            for (; i < rows.length; i++) {
                $(rows[i]).show();
            }
        }
        return rows;
    };

    BootstrapTable.prototype.mergeCells = function (options) {
        var row = options.index,
            col = $.inArray(options.field, this.getVisibleFields()),
            rowspan = options.rowspan || 1,
            colspan = options.colspan || 1,
            i, j,
            $tr = this.$body.find('>tr'),
            $td;

        if (this.options.detailView && !this.options.cardView) {
            col += 1;
        }

        $td = $tr.eq(row).find('>td').eq(col);

        if (row < 0 || col < 0 || row >= this.data.length) {
            return;
        }

        for (i = row; i < row + rowspan; i++) {
            for (j = col; j < col + colspan; j++) {
                $tr.eq(i).find('>td').eq(j).hide();
            }
        }

        $td.attr('rowspan', rowspan).attr('colspan', colspan).show();
    };

    BootstrapTable.prototype.updateCell = function (params) {
        if (!params.hasOwnProperty('index') ||
            !params.hasOwnProperty('field') ||
            !params.hasOwnProperty('value')) {
            return;
        }
        this.data[params.index][params.field] = params.value;

        if (params.reinit === false) {
            return;
        }
        this.initSort();
        this.initBody(true);
    };

    BootstrapTable.prototype.getOptions = function () {
        return this.options;
    };

    BootstrapTable.prototype.getSelections = function () {
        var that = this;

        return $.grep(this.data, function (row) {
            return row[that.header.stateField];
        });
    };

    BootstrapTable.prototype.getAllSelections = function () {
        var that = this;

        return $.grep(this.options.data, function (row) {
            return row[that.header.stateField];
        });
    };

    BootstrapTable.prototype.checkAll = function () {
        this.checkAll_(true);
    };

    BootstrapTable.prototype.uncheckAll = function () {
        this.checkAll_(false);
    };

    BootstrapTable.prototype.checkInvert = function () {
        var that = this;
        var rows = that.$selectItem.filter(':enabled');
        var checked = rows.filter(':checked');
        rows.each(function () {
            $(this).prop('checked', !$(this).prop('checked'));
        });
        that.updateRows();
        that.updateSelected();
        that.trigger('uncheck-some', checked);
        checked = that.getSelections();
        that.trigger('check-some', checked);
    };

    BootstrapTable.prototype.checkAll_ = function (checked) {
        var rows;
        if (!checked) {
            rows = this.getSelections();
        }
        this.$selectAll.add(this.$selectAll_).prop('checked', checked);
        this.$selectItem.filter(':enabled').prop('checked', checked);
        this.updateRows();
        if (checked) {
            rows = this.getSelections();
        }
        this.trigger(checked ? 'check-all' : 'uncheck-all', rows);
    };

    BootstrapTable.prototype.check = function (index) {
        this.check_(true, index);
    };

    BootstrapTable.prototype.uncheck = function (index) {
        this.check_(false, index);
    };

    BootstrapTable.prototype.check_ = function (checked, index) {
        var $el = this.$selectItem.filter(sprintf('[data-index="%s"]', index)).prop('checked', checked);
        this.data[index][this.header.stateField] = checked;
        this.updateSelected();
        this.trigger(checked ? 'check' : 'uncheck', this.data[index], $el);
    };

    BootstrapTable.prototype.checkBy = function (obj) {
        this.checkBy_(true, obj);
    };

    BootstrapTable.prototype.uncheckBy = function (obj) {
        this.checkBy_(false, obj);
    };

    BootstrapTable.prototype.checkBy_ = function (checked, obj) {
        if (!obj.hasOwnProperty('field') || !obj.hasOwnProperty('values')) {
            return;
        }

        var that = this,
            rows = [];
        $.each(this.options.data, function (index, row) {
            if (!row.hasOwnProperty(obj.field)) {
                return false;
            }
            if ($.inArray(row[obj.field], obj.values) !== -1) {
                var $el = that.$selectItem.filter(':enabled')
                    .filter(sprintf('[data-index="%s"]', index)).prop('checked', checked);
                row[that.header.stateField] = checked;
                rows.push(row);
                that.trigger(checked ? 'check' : 'uncheck', row, $el);
            }
        });
        this.updateSelected();
        this.trigger(checked ? 'check-some' : 'uncheck-some', rows);
    };

    BootstrapTable.prototype.destroy = function () {
        this.$el.insertBefore(this.$container);
        $(this.options.toolbar).insertBefore(this.$el);
        this.$container.next().remove();
        this.$container.remove();
        this.$el.html(this.$el_.html())
            .css('margin-top', '0')
            .attr('class', this.$el_.attr('class') || ''); // reset the class
    };

    BootstrapTable.prototype.showLoading = function () {
        this.$tableLoading.show();
    };

    BootstrapTable.prototype.hideLoading = function () {
        this.$tableLoading.hide();
    };

    BootstrapTable.prototype.togglePagination = function () {
        this.options.pagination = !this.options.pagination;
        var button = this.$toolbar.find('button[name="paginationSwitch"] i');
        if (this.options.pagination) {
            button.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchDown);
        } else {
            button.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchUp);
        }
        this.updatePagination();
    };

    BootstrapTable.prototype.refresh = function (params) {
        if (params && params.url) {
            this.options.url = params.url;
            this.options.pageNumber = 1;
        }
        this.initServer(params && params.silent, params && params.query);
    };

    BootstrapTable.prototype.resetWidth = function () {
        if (this.options.showHeader && this.options.height) {
            this.fitHeader();
        }
        if (this.options.showFooter) {
            this.fitFooter();
        }
    };

    BootstrapTable.prototype.showColumn = function (field) {
        this.toggleColumn(getFieldIndex(this.columns, field), true, true);
    };

    BootstrapTable.prototype.hideColumn = function (field) {
        this.toggleColumn(getFieldIndex(this.columns, field), false, true);
    };

    BootstrapTable.prototype.getHiddenColumns = function () {
        return $.grep(this.columns, function (column) {
            return !column.visible;
        });
    };

    BootstrapTable.prototype.filterBy = function (columns) {
        this.filterColumns = $.isEmptyObject(columns) ? {} : columns;
        this.options.pageNumber = 1;
        this.initSearch();
        this.updatePagination();
    };

    BootstrapTable.prototype.scrollTo = function (value) {
        if (typeof value === 'string') {
            value = value === 'bottom' ? this.$tableBody[0].scrollHeight : 0;
        }
        if (typeof value === 'number') {
            this.$tableBody.scrollTop(value);
        }
        if (typeof value === 'undefined') {
            return this.$tableBody.scrollTop();
        }
    };

    BootstrapTable.prototype.getScrollPosition = function () {
        return this.scrollTo();
    };

    BootstrapTable.prototype.selectPage = function (page) {
        if (page > 0 && page <= this.options.totalPages) {
            this.options.pageNumber = page;
            this.updatePagination();
        }
    };

    BootstrapTable.prototype.prevPage = function () {
        if (this.options.pageNumber > 1) {
            this.options.pageNumber--;
            this.updatePagination();
        }
    };

    BootstrapTable.prototype.nextPage = function () {
        if (this.options.pageNumber < this.options.totalPages) {
            this.options.pageNumber++;
            this.updatePagination();
        }
    };

    BootstrapTable.prototype.toggleView = function () {
        this.options.cardView = !this.options.cardView;
        this.initHeader();
        // Fixed remove toolbar when click cardView button.
        //that.initToolbar();
        this.initBody();
        this.trigger('toggle', this.options.cardView);
    };

    BootstrapTable.prototype.refreshOptions = function (options) {
        //If the objects are equivalent then avoid the call of destroy / init methods
        if (compareObjects(this.options, options, true)) {
            return;
        }
        this.options = $.extend(this.options, options);
        this.trigger('refresh-options', this.options);
        this.destroy();
        this.init();
    };

    BootstrapTable.prototype.resetSearch = function (text) {
        var $search = this.$toolbar.find('.search input');
        $search.val(text || '');
        this.onSearch({ currentTarget: $search });
    };

    BootstrapTable.prototype.expandRow_ = function (expand, index) {
        var $tr = this.$body.find(sprintf('> tr[data-index="%s"]', index));
        if ($tr.next().is('tr.detail-view') === (expand ? false : true)) {
            $tr.find('> td > .detail-icon').click();
        }
    };

    BootstrapTable.prototype.expandRow = function (index) {
        this.expandRow_(true, index);
    };

    BootstrapTable.prototype.collapseRow = function (index) {
        this.expandRow_(false, index);
    };

    BootstrapTable.prototype.expandAllRows = function (isSubTable) {
        if (isSubTable) {
            var $tr = this.$body.find(sprintf('> tr[data-index="%s"]', 0)),
                that = this,
                detailIcon = null,
                executeInterval = false,
                idInterval = -1;

            if (!$tr.next().is('tr.detail-view')) {
                $tr.find('> td > .detail-icon').click();
                executeInterval = true;
            } else if (!$tr.next().next().is('tr.detail-view')) {
                $tr.next().find(".detail-icon").click();
                executeInterval = true;
            }

            if (executeInterval) {
                try {
                    idInterval = setInterval(function () {
                        detailIcon = that.$body.find("tr.detail-view").last().find(".detail-icon");
                        if (detailIcon.length > 0) {
                            detailIcon.click();
                        } else {
                            clearInterval(idInterval);
                        }
                    }, 1);
                } catch (ex) {
                    clearInterval(idInterval);
                }
            }
        } else {
            var trs = this.$body.children();
            for (var i = 0; i < trs.length; i++) {
                this.expandRow_(true, $(trs[i]).data("index"));
            }
        }
    };

    BootstrapTable.prototype.collapseAllRows = function (isSubTable) {
        if (isSubTable) {
            this.expandRow_(false, 0);
        } else {
            var trs = this.$body.children();
            for (var i = 0; i < trs.length; i++) {
                this.expandRow_(false, $(trs[i]).data("index"));
            }
        }
    };

    BootstrapTable.prototype.updateFormatText = function (name, text) {
        if (this.options[sprintf('format%s', name)]) {
            if (typeof text === 'string') {
                this.options[sprintf('format%s', name)] = function () {
                    return text;
                };
            } else if (typeof text === 'function') {
                this.options[sprintf('format%s', name)] = text;
            }
        }
        this.initToolbar();
        this.initPagination();
        this.initBody();
    };

    // BOOTSTRAP TABLE PLUGIN DEFINITION
    // =======================

    var allowedMethods = [
        'getOptions',
        'getSelections', 'getAllSelections', 'getData',
        'load', 'append', 'prepend', 'remove', 'removeAll',
        'insertRow', 'updateRow', 'updateCell', 'updateByUniqueId', 'removeByUniqueId',
        'getRowByUniqueId', 'showRow', 'hideRow', 'getRowsHidden',
        'mergeCells',
        'checkAll', 'uncheckAll', 'checkInvert',
        'check', 'uncheck',
        'checkBy', 'uncheckBy',
        'refresh',
        'resetView',
        'resetWidth',
        'destroy',
        'showLoading', 'hideLoading',
        'showColumn', 'hideColumn', 'getHiddenColumns',
        'filterBy',
        'scrollTo',
        'getScrollPosition',
        'selectPage', 'prevPage', 'nextPage',
        'togglePagination',
        'toggleView',
        'refreshOptions',
        'resetSearch',
        'expandRow', 'collapseRow', 'expandAllRows', 'collapseAllRows',
        'updateFormatText'
    ];

    $.fn.bootstrapTable = function (option) {
        var value,
            args = Array.prototype.slice.call(arguments, 1);

        this.each(function () {
            var $this = $(this),
                data = $this.data('bootstrap.table'),
                options = $.extend({}, BootstrapTable.DEFAULTS, $this.data(),
                    typeof option === 'object' && option);

            if (typeof option === 'string') {
                if ($.inArray(option, allowedMethods) < 0) {
                    throw new Error("Unknown method: " + option);
                }

                if (!data) {
                    return;
                }

                value = data[option].apply(data, args);

                if (option === 'destroy') {
                    $this.removeData('bootstrap.table');
                }
            }

            if (!data) {
                $this.data('bootstrap.table', (data = new BootstrapTable(this, options)));
            }
        });

        return typeof value === 'undefined' ? this : value;
    };

    $.fn.bootstrapTable.Constructor = BootstrapTable;
    $.fn.bootstrapTable.defaults = BootstrapTable.DEFAULTS;
    $.fn.bootstrapTable.columnDefaults = BootstrapTable.COLUMN_DEFAULTS;
    $.fn.bootstrapTable.locales = BootstrapTable.LOCALES;
    $.fn.bootstrapTable.methods = allowedMethods;
    $.fn.bootstrapTable.utils = {
        sprintf: sprintf,
        getFieldIndex: getFieldIndex,
        compareObjects: compareObjects,
        calculateObjectValue: calculateObjectValue
    };

    // BOOTSTRAP TABLE INIT
    // =======================

    $(function () {
        $('[data-toggle="table"]').bootstrapTable();
    });
}(jQuery);
;
/**
 * Bootstrap Table Chinese translation
 * Author: Zhixin Wen<wenzhixin2010@gmail.com>
 */
(function ($) {
    'use strict';

    $.fn.bootstrapTable.locales['zh-CN'] = {
        formatLoadingMessage: function () {
            return '正在努力地加载数据中，请稍候……';
        },
        formatRecordsPerPage: function (pageNumber) {
            return '每页显示 ' + pageNumber + ' 条记录';
        },
        formatShowingRows: function (pageFrom, pageTo, totalRows) {
            return '显示第 ' + pageFrom + ' 到第 ' + pageTo + ' 条记录，总共 ' + totalRows + ' 条记录';
        },
        formatSearch: function () {
            return '搜索';
        },
        formatNoMatches: function () {
            //return '没有找到匹配的记录';
            return "";
        },
        formatPaginationSwitch: function () {
            return '隐藏/显示分页';
        },
        formatRefresh: function () {
            return '刷新';
        },
        formatToggle: function () {
            return '切换';
        },
        formatColumns: function () {
            return '列';
        },
        formatExport: function () {
            return '导出数据';
        },
        formatClearFilters: function () {
            return '清空过滤';
        }
    };

    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['zh-CN']);

})(jQuery);
;
/* jquery.nicescroll 3.6.8 InuYaksa*2015 MIT http://nicescroll.areaaperta.com */(function(f){"function"===typeof define&&define.amd?define(["jquery"],f):"object"===typeof exports?module.exports=f(require("jquery")):f(jQuery)})(function(f){var B=!1,F=!1,O=0,P=2E3,A=0,J=["webkit","ms","moz","o"],v=window.requestAnimationFrame||!1,w=window.cancelAnimationFrame||!1;if(!v)for(var Q in J){var G=J[Q];if(v=window[G+"RequestAnimationFrame"]){w=window[G+"CancelAnimationFrame"]||window[G+"CancelRequestAnimationFrame"];break}}var x=window.MutationObserver||window.WebKitMutationObserver||
!1,K={zindex:"auto",cursoropacitymin:0,cursoropacitymax:1,cursorcolor:"#424242",cursorwidth:"6px",cursorborder:"1px solid #fff",cursorborderradius:"5px",scrollspeed:60,mousescrollstep:24,touchbehavior:!1,hwacceleration:!0,usetransition:!0,boxzoom:!1,dblclickzoom:!0,gesturezoom:!0,grabcursorenabled:!0,autohidemode:!0,background:"",iframeautoresize:!0,cursorminheight:32,preservenativescrolling:!0,railoffset:!1,railhoffset:!1,bouncescroll:!0,spacebarenabled:!0,railpadding:{top:0,right:0,left:0,bottom:0},
disableoutline:!0,horizrailenabled:!0,railalign:"right",railvalign:"bottom",enabletranslate3d:!0,enablemousewheel:!0,enablekeyboard:!0,smoothscroll:!0,sensitiverail:!0,enablemouselockapi:!0,cursorfixedheight:!1,directionlockdeadzone:6,hidecursordelay:400,nativeparentscrolling:!0,enablescrollonselection:!0,overflowx:!0,overflowy:!0,cursordragspeed:.3,rtlmode:"auto",cursordragontouch:!1,oneaxismousemode:"auto",scriptpath:function(){var f=document.getElementsByTagName("script"),f=f.length?f[f.length-
1].src.split("?")[0]:"";return 0<f.split("/").length?f.split("/").slice(0,-1).join("/")+"/":""}(),preventmultitouchscrolling:!0,disablemutationobserver:!1},H=!1,R=function(){if(H)return H;var f=document.createElement("DIV"),c=f.style,k=navigator.userAgent,l=navigator.platform,d={haspointerlock:"pointerLockElement"in document||"webkitPointerLockElement"in document||"mozPointerLockElement"in document};d.isopera="opera"in window;d.isopera12=d.isopera&&"getUserMedia"in navigator;d.isoperamini="[object OperaMini]"===
Object.prototype.toString.call(window.operamini);d.isie="all"in document&&"attachEvent"in f&&!d.isopera;d.isieold=d.isie&&!("msInterpolationMode"in c);d.isie7=d.isie&&!d.isieold&&(!("documentMode"in document)||7==document.documentMode);d.isie8=d.isie&&"documentMode"in document&&8==document.documentMode;d.isie9=d.isie&&"performance"in window&&9==document.documentMode;d.isie10=d.isie&&"performance"in window&&10==document.documentMode;d.isie11="msRequestFullscreen"in f&&11<=document.documentMode;d.isieedge12=
navigator.userAgent.match(/Edge\/12\./); d.isieedge = "msOverflowStyle" in f; d.ismodernie = d.isie11 || d.isieedge; d.isie9mobile = /iemobile.9/i.test(k); d.isie9mobile && (d.isie9 = !1); d.isie7mobile = !d.isie9mobile && d.isie7 && /iemobile/i.test(k); d.ismozilla = "MozAppearance" in c; d.iswebkit = "WebkitAppearance" in c; d.ischrome = "chrome" in window; d.ischrome38 = d.ischrome && "touchAction" in c; d.ischrome22 = !d.ischrome38 && d.ischrome && d.haspointerlock; d.ischrome26 = !d.ischrome38 && d.ischrome && "transition" in c; d.cantouch = false;d.hasw3ctouch=(window.PointerEvent||!1)&&(0<navigator.MaxTouchPoints||0<navigator.msMaxTouchPoints);d.hasmstouch=!d.hasw3ctouch&&(window.MSPointerEvent||!1);d.ismac=/^mac$/i.test(l);d.isios=d.cantouch&&/iphone|ipad|ipod/i.test(l);d.isios4=d.isios&&!("seal"in Object);d.isios7=d.isios&&"webkitHidden"in document;d.isios8=d.isios&&"hidden"in document;d.isandroid=/android/i.test(k);d.haseventlistener="addEventListener"in f;d.trstyle=!1;d.hastransform=!1;
d.hastranslate3d=!1;d.transitionstyle=!1;d.hastransition=!1;d.transitionend=!1;l=["transform","msTransform","webkitTransform","MozTransform","OTransform"];for(k=0;k<l.length;k++)if(void 0!==c[l[k]]){d.trstyle=l[k];break}d.hastransform=!!d.trstyle;d.hastransform&&(c[d.trstyle]="translate3d(1px,2px,3px)",d.hastranslate3d=/translate3d/.test(c[d.trstyle]));d.transitionstyle=!1;d.prefixstyle="";d.transitionend=!1;for(var l="transition webkitTransition msTransition MozTransition OTransition OTransition KhtmlTransition".split(" "),
q=" -webkit- -ms- -moz- -o- -o -khtml-".split(" "),t="transitionend webkitTransitionEnd msTransitionEnd transitionend otransitionend oTransitionEnd KhtmlTransitionEnd".split(" "),k=0;k<l.length;k++)if(l[k]in c){d.transitionstyle=l[k];d.prefixstyle=q[k];d.transitionend=t[k];break}d.ischrome26&&(d.prefixstyle=q[1]);d.hastransition=d.transitionstyle;a:{k=["grab","-webkit-grab","-moz-grab"];if(d.ischrome&&!d.ischrome38||d.isie)k=[];for(l=0;l<k.length;l++)if(q=k[l],c.cursor=q,c.cursor==q){c=q;break a}c=
"url(//patriciaportfolio.googlecode.com/files/openhand.cur),n-resize"}d.cursorgrabvalue=c;d.hasmousecapture="setCapture"in f;d.hasMutationObserver=!1!==x;return H=d},S=function(h,c){function k(){var b=a.doc.css(e.trstyle);return b&&"matrix"==b.substr(0,6)?b.replace(/^.*\((.*)\)$/g,"$1").replace(/px/g,"").split(/, +/):!1}function l(){var b=a.win;if("zIndex"in b)return b.zIndex();for(;0<b.length&&9!=b[0].nodeType;){var g=b.css("zIndex");if(!isNaN(g)&&0!=g)return parseInt(g);b=b.parent()}return!1}function d(b,
g,u){g=b.css(g);b=parseFloat(g);return isNaN(b)?(b=z[g]||0,u=3==b?u?a.win.outerHeight()-a.win.innerHeight():a.win.outerWidth()-a.win.innerWidth():1,a.isie8&&b&&(b+=1),u?b:0):b}function q(b,g,u,c){a._bind(b,g,function(a){a=a?a:window.event;var c={original:a,target:a.target||a.srcElement,type:"wheel",deltaMode:"MozMousePixelScroll"==a.type?0:1,deltaX:0,deltaZ:0,preventDefault:function(){a.preventDefault?a.preventDefault():a.returnValue=!1;return!1},stopImmediatePropagation:function(){a.stopImmediatePropagation?
a.stopImmediatePropagation():a.cancelBubble=!0}};"mousewheel"==g?(a.wheelDeltaX&&(c.deltaX=-.025*a.wheelDeltaX),a.wheelDeltaY&&(c.deltaY=-.025*a.wheelDeltaY),c.deltaY||c.deltaX||(c.deltaY=-.025*a.wheelDelta)):c.deltaY=a.detail;return u.call(b,c)},c)}function t(b,g,c){var d,e;0==b.deltaMode?(d=-Math.floor(a.opt.mousescrollstep/54*b.deltaX),e=-Math.floor(a.opt.mousescrollstep/54*b.deltaY)):1==b.deltaMode&&(d=-Math.floor(b.deltaX*a.opt.mousescrollstep),e=-Math.floor(b.deltaY*a.opt.mousescrollstep));
g&&a.opt.oneaxismousemode&&0==d&&e&&(d=e,e=0,c&&(0>d?a.getScrollLeft()>=a.page.maxw:0>=a.getScrollLeft())&&(e=d,d=0));a.isrtlmode&&(d=-d);d&&(a.scrollmom&&a.scrollmom.stop(),a.lastdeltax+=d,a.debounced("mousewheelx",function(){var b=a.lastdeltax;a.lastdeltax=0;a.rail.drag||a.doScrollLeftBy(b)},15));if(e){if(a.opt.nativeparentscrolling&&c&&!a.ispage&&!a.zoomactive)if(0>e){if(a.getScrollTop()>=a.page.maxh)return!0}else if(0>=a.getScrollTop())return!0;a.scrollmom&&a.scrollmom.stop();a.lastdeltay+=e;
a.synched("mousewheely",function(){var b=a.lastdeltay;a.lastdeltay=0;a.rail.drag||a.doScrollBy(b)},15)}b.stopImmediatePropagation();return b.preventDefault()}var a=this;this.version="3.6.8";this.name="nicescroll";this.me=c;this.opt={doc:f("body"),win:!1};f.extend(this.opt,K);this.opt.snapbackspeed=80;if(h)for(var r in a.opt)void 0!==h[r]&&(a.opt[r]=h[r]);a.opt.disablemutationobserver&&(x=!1);this.iddoc=(this.doc=a.opt.doc)&&this.doc[0]?this.doc[0].id||"":"";this.ispage=/^BODY|HTML/.test(a.opt.win?
a.opt.win[0].nodeName:this.doc[0].nodeName);this.haswrapper=!1!==a.opt.win;this.win=a.opt.win||(this.ispage?f(window):this.doc);this.docscroll=this.ispage&&!this.haswrapper?f(window):this.win;this.body=f("body");this.iframe=this.isfixed=this.viewport=!1;this.isiframe="IFRAME"==this.doc[0].nodeName&&"IFRAME"==this.win[0].nodeName;this.istextarea="TEXTAREA"==this.win[0].nodeName;this.forcescreen=!1;this.canshowonmouseevent="scroll"!=a.opt.autohidemode;this.page=this.view=this.onzoomout=this.onzoomin=
this.onscrollcancel=this.onscrollend=this.onscrollstart=this.onclick=this.ongesturezoom=this.onkeypress=this.onmousewheel=this.onmousemove=this.onmouseup=this.onmousedown=!1;this.scroll={x:0,y:0};this.scrollratio={x:0,y:0};this.cursorheight=20;this.scrollvaluemax=0;if("auto"==this.opt.rtlmode){r=this.win[0]==window?this.body:this.win;var p=r.css("writing-mode")||r.css("-webkit-writing-mode")||r.css("-ms-writing-mode")||r.css("-moz-writing-mode");"horizontal-tb"==p||"lr-tb"==p||""==p?(this.isrtlmode=
"rtl"==r.css("direction"),this.isvertical=!1):(this.isrtlmode="vertical-rl"==p||"tb"==p||"tb-rl"==p||"rl-tb"==p,this.isvertical="vertical-rl"==p||"tb"==p||"tb-rl"==p)}else this.isrtlmode=!0===this.opt.rtlmode,this.isvertical=!1;this.observerbody=this.observerremover=this.observer=this.scrollmom=this.scrollrunning=!1;do this.id="ascrail"+P++;while(document.getElementById(this.id));this.hasmousefocus=this.hasfocus=this.zoomactive=this.zoom=this.selectiondrag=this.cursorfreezed=this.cursor=this.rail=
!1;this.visibility=!0;this.hidden=this.locked=this.railslocked=!1;this.cursoractive=!0;this.wheelprevented=!1;this.overflowx=a.opt.overflowx;this.overflowy=a.opt.overflowy;this.nativescrollingarea=!1;this.checkarea=0;this.events=[];this.saved={};this.delaylist={};this.synclist={};this.lastdeltay=this.lastdeltax=0;this.detected=R();var e=f.extend({},this.detected);this.ishwscroll=(this.canhwscroll=e.hastransform&&a.opt.hwacceleration)&&a.haswrapper;this.hasreversehr=this.isrtlmode?this.isvertical?
!(e.iswebkit||e.isie||e.isie11):!(e.iswebkit||e.isie&&!e.isie10&&!e.isie11):!1;this.istouchcapable=!1;e.cantouch||!e.hasw3ctouch&&!e.hasmstouch?!e.cantouch||e.isios||e.isandroid||!e.iswebkit&&!e.ismozilla||(this.istouchcapable=!0):this.istouchcapable=!0;a.opt.enablemouselockapi||(e.hasmousecapture=!1,e.haspointerlock=!1);this.debounced=function(b,g,c){a&&(a.delaylist[b]||(g.call(a),a.delaylist[b]={h:v(function(){a.delaylist[b].fn.call(a);a.delaylist[b]=!1},c)}),a.delaylist[b].fn=g)};var I=!1;this.synched=
function(b,g){a.synclist[b]=g;(function(){I||(v(function(){if(a){I=!1;for(var b in a.synclist){var g=a.synclist[b];g&&g.call(a);a.synclist[b]=!1}}}),I=!0)})();return b};this.unsynched=function(b){a.synclist[b]&&(a.synclist[b]=!1)};this.css=function(b,g){for(var c in g)a.saved.css.push([b,c,b.css(c)]),b.css(c,g[c])};this.scrollTop=function(b){return void 0===b?a.getScrollTop():a.setScrollTop(b)};this.scrollLeft=function(b){return void 0===b?a.getScrollLeft():a.setScrollLeft(b)};var D=function(a,g,
c,d,e,f,k){this.st=a;this.ed=g;this.spd=c;this.p1=d||0;this.p2=e||1;this.p3=f||0;this.p4=k||1;this.ts=(new Date).getTime();this.df=this.ed-this.st};D.prototype={B2:function(a){return 3*a*a*(1-a)},B3:function(a){return 3*a*(1-a)*(1-a)},B4:function(a){return(1-a)*(1-a)*(1-a)},getNow:function(){var a=1-((new Date).getTime()-this.ts)/this.spd,g=this.B2(a)+this.B3(a)+this.B4(a);return 0>a?this.ed:this.st+Math.round(this.df*g)},update:function(a,g){this.st=this.getNow();this.ed=a;this.spd=g;this.ts=(new Date).getTime();
this.df=this.ed-this.st;return this}};if(this.ishwscroll){this.doc.translate={x:0,y:0,tx:"0px",ty:"0px"};e.hastranslate3d&&e.isios&&this.doc.css("-webkit-backface-visibility","hidden");this.getScrollTop=function(b){if(!b){if(b=k())return 16==b.length?-b[13]:-b[5];if(a.timerscroll&&a.timerscroll.bz)return a.timerscroll.bz.getNow()}return a.doc.translate.y};this.getScrollLeft=function(b){if(!b){if(b=k())return 16==b.length?-b[12]:-b[4];if(a.timerscroll&&a.timerscroll.bh)return a.timerscroll.bh.getNow()}return a.doc.translate.x};
this.notifyScrollEvent=function(a){var g=document.createEvent("UIEvents");g.initUIEvent("scroll",!1,!0,window,1);g.niceevent=!0;a.dispatchEvent(g)};var y=this.isrtlmode?1:-1;e.hastranslate3d&&a.opt.enabletranslate3d?(this.setScrollTop=function(b,g){a.doc.translate.y=b;a.doc.translate.ty=-1*b+"px";a.doc.css(e.trstyle,"translate3d("+a.doc.translate.tx+","+a.doc.translate.ty+",0px)");g||a.notifyScrollEvent(a.win[0])},this.setScrollLeft=function(b,g){a.doc.translate.x=b;a.doc.translate.tx=b*y+"px";a.doc.css(e.trstyle,
"translate3d("+a.doc.translate.tx+","+a.doc.translate.ty+",0px)");g||a.notifyScrollEvent(a.win[0])}):(this.setScrollTop=function(b,g){a.doc.translate.y=b;a.doc.translate.ty=-1*b+"px";a.doc.css(e.trstyle,"translate("+a.doc.translate.tx+","+a.doc.translate.ty+")");g||a.notifyScrollEvent(a.win[0])},this.setScrollLeft=function(b,g){a.doc.translate.x=b;a.doc.translate.tx=b*y+"px";a.doc.css(e.trstyle,"translate("+a.doc.translate.tx+","+a.doc.translate.ty+")");g||a.notifyScrollEvent(a.win[0])})}else this.getScrollTop=
function(){return a.docscroll.scrollTop()},this.setScrollTop=function(b){return setTimeout(function(){a&&a.docscroll.scrollTop(b)},1)},this.getScrollLeft=function(){return a.hasreversehr?a.detected.ismozilla?a.page.maxw-Math.abs(a.docscroll.scrollLeft()):a.page.maxw-a.docscroll.scrollLeft():a.docscroll.scrollLeft()},this.setScrollLeft=function(b){return setTimeout(function(){if(a)return a.hasreversehr&&(b=a.detected.ismozilla?-(a.page.maxw-b):a.page.maxw-b),a.docscroll.scrollLeft(b)},1)};this.getTarget=
function(a){return a?a.target?a.target:a.srcElement?a.srcElement:!1:!1};this.hasParent=function(a,g){if(!a)return!1;for(var c=a.target||a.srcElement||a||!1;c&&c.id!=g;)c=c.parentNode||!1;return!1!==c};var z={thin:1,medium:3,thick:5};this.getDocumentScrollOffset=function(){return{top:window.pageYOffset||document.documentElement.scrollTop,left:window.pageXOffset||document.documentElement.scrollLeft}};this.getOffset=function(){if(a.isfixed){var b=a.win.offset(),g=a.getDocumentScrollOffset();b.top-=g.top;
b.left-=g.left;return b}b=a.win.offset();if(!a.viewport)return b;g=a.viewport.offset();return{top:b.top-g.top,left:b.left-g.left}};this.updateScrollBar=function(b){var g,c,e;if(a.ishwscroll)a.rail.css({height:a.win.innerHeight()-(a.opt.railpadding.top+a.opt.railpadding.bottom)}),a.railh&&a.railh.css({width:a.win.innerWidth()-(a.opt.railpadding.left+a.opt.railpadding.right)});else{var f=a.getOffset();g=f.top;c=f.left-(a.opt.railpadding.left+a.opt.railpadding.right);g+=d(a.win,"border-top-width",!0);
c+=a.rail.align?a.win.outerWidth()-d(a.win,"border-right-width")-a.rail.width:d(a.win,"border-left-width");if(e=a.opt.railoffset)e.top&&(g+=e.top),e.left&&(c+=e.left);a.railslocked||a.rail.css({top:g,left:c,height:(b?b.h:a.win.innerHeight())-(a.opt.railpadding.top+a.opt.railpadding.bottom)});a.zoom&&a.zoom.css({top:g+1,left:1==a.rail.align?c-20:c+a.rail.width+4});if(a.railh&&!a.railslocked){g=f.top;c=f.left;if(e=a.opt.railhoffset)e.top&&(g+=e.top),e.left&&(c+=e.left);b=a.railh.align?g+d(a.win,"border-top-width",
!0)+a.win.innerHeight()-a.railh.height:g+d(a.win,"border-top-width",!0);c+=d(a.win,"border-left-width");a.railh.css({top:b-(a.opt.railpadding.top+a.opt.railpadding.bottom),left:c,width:a.railh.width})}}};this.doRailClick=function(b,g,c){var d;a.railslocked||(a.cancelEvent(b),g?(g=c?a.doScrollLeft:a.doScrollTop,d=c?(b.pageX-a.railh.offset().left-a.cursorwidth/2)*a.scrollratio.x:(b.pageY-a.rail.offset().top-a.cursorheight/2)*a.scrollratio.y,g(d)):(g=c?a.doScrollLeftBy:a.doScrollBy,d=c?a.scroll.x:a.scroll.y,
b=c?b.pageX-a.railh.offset().left:b.pageY-a.rail.offset().top,c=c?a.view.w:a.view.h,g(d>=b?c:-c)))};a.hasanimationframe=v;a.hascancelanimationframe=w;a.hasanimationframe?a.hascancelanimationframe||(w=function(){a.cancelAnimationFrame=!0}):(v=function(a){return setTimeout(a,15-Math.floor(+new Date/1E3)%16)},w=clearTimeout);this.init=function(){a.saved.css=[];if(e.isie7mobile||e.isoperamini)return!0;e.hasmstouch&&a.css(a.ispage?f("html"):a.win,{_touchaction:"none"});var b=e.ismodernie||e.isie10?{"-ms-overflow-style":"none"}:
{"overflow-y":"hidden"};a.zindex="auto";a.zindex=a.ispage||"auto"!=a.opt.zindex?a.opt.zindex:l()||"auto";!a.ispage&&"auto"!=a.zindex&&a.zindex>A&&(A=a.zindex);a.isie&&0==a.zindex&&"auto"==a.opt.zindex&&(a.zindex="auto");if(!a.ispage||!e.cantouch&&!e.isieold&&!e.isie9mobile){var c=a.docscroll;a.ispage&&(c=a.haswrapper?a.win:a.doc);e.isie9mobile||a.css(c,b);a.ispage&&e.isie7&&("BODY"==a.doc[0].nodeName?a.css(f("html"),{"overflow-y":"hidden"}):"HTML"==a.doc[0].nodeName&&a.css(f("body"),b));!e.isios||
a.ispage||a.haswrapper||a.css(f("body"),{"-webkit-overflow-scrolling":"touch"});var d=f(document.createElement("div"));d.css({position:"relative",top:0,"float":"right",width:a.opt.cursorwidth,height:0,"background-color":a.opt.cursorcolor,border:a.opt.cursorborder,"background-clip":"padding-box","-webkit-border-radius":a.opt.cursorborderradius,"-moz-border-radius":a.opt.cursorborderradius,"border-radius":a.opt.cursorborderradius});d.hborder=parseFloat(d.outerHeight()-d.innerHeight());d.addClass("nicescroll-cursors");
a.cursor=d;var m=f(document.createElement("div"));m.attr("id",a.id);m.addClass("nicescroll-rails nicescroll-rails-vr");var k,h,p=["left","right","top","bottom"],L;for(L in p)h=p[L],(k=a.opt.railpadding[h])?m.css("padding-"+h,k+"px"):a.opt.railpadding[h]=0;m.append(d);m.width=Math.max(parseFloat(a.opt.cursorwidth),d.outerWidth());m.css({width:m.width+"px",zIndex:a.zindex,background:a.opt.background,cursor:"default"});m.visibility=!0;m.scrollable=!0;m.align="left"==a.opt.railalign?0:1;a.rail=m;d=a.rail.drag=
!1;!a.opt.boxzoom||a.ispage||e.isieold||(d=document.createElement("div"),a.bind(d,"click",a.doZoom),a.bind(d,"mouseenter",function(){a.zoom.css("opacity",a.opt.cursoropacitymax)}),a.bind(d,"mouseleave",function(){a.zoom.css("opacity",a.opt.cursoropacitymin)}),a.zoom=f(d),a.zoom.css({cursor:"pointer",zIndex:a.zindex,backgroundImage:"url("+a.opt.scriptpath+"zoomico.png)",height:18,width:18,backgroundPosition:"0px 0px"}),a.opt.dblclickzoom&&a.bind(a.win,"dblclick",a.doZoom),e.cantouch&&a.opt.gesturezoom&&
(a.ongesturezoom=function(b){1.5<b.scale&&a.doZoomIn(b);.8>b.scale&&a.doZoomOut(b);return a.cancelEvent(b)},a.bind(a.win,"gestureend",a.ongesturezoom)));a.railh=!1;var n;a.opt.horizrailenabled&&(a.css(c,{overflowX:"hidden"}),d=f(document.createElement("div")),d.css({position:"absolute",top:0,height:a.opt.cursorwidth,width:0,backgroundColor:a.opt.cursorcolor,border:a.opt.cursorborder,backgroundClip:"padding-box","-webkit-border-radius":a.opt.cursorborderradius,"-moz-border-radius":a.opt.cursorborderradius,
"border-radius":a.opt.cursorborderradius}),e.isieold&&d.css("overflow","hidden"),d.wborder=parseFloat(d.outerWidth()-d.innerWidth()),d.addClass("nicescroll-cursors"),a.cursorh=d,n=f(document.createElement("div")),n.attr("id",a.id+"-hr"),n.addClass("nicescroll-rails nicescroll-rails-hr"),n.height=Math.max(parseFloat(a.opt.cursorwidth),d.outerHeight()),n.css({height:n.height+"px",zIndex:a.zindex,background:a.opt.background}),n.append(d),n.visibility=!0,n.scrollable=!0,n.align="top"==a.opt.railvalign?
0:1,a.railh=n,a.railh.drag=!1);a.ispage?(m.css({position:"fixed",top:0,height:"100%"}),m.align?m.css({right:0}):m.css({left:0}),a.body.append(m),a.railh&&(n.css({position:"fixed",left:0,width:"100%"}),n.align?n.css({bottom:0}):n.css({top:0}),a.body.append(n))):(a.ishwscroll?("static"==a.win.css("position")&&a.css(a.win,{position:"relative"}),c="HTML"==a.win[0].nodeName?a.body:a.win,f(c).scrollTop(0).scrollLeft(0),a.zoom&&(a.zoom.css({position:"absolute",top:1,right:0,"margin-right":m.width+4}),c.append(a.zoom)),
m.css({position:"absolute",top:0}),m.align?m.css({right:0}):m.css({left:0}),c.append(m),n&&(n.css({position:"absolute",left:0,bottom:0}),n.align?n.css({bottom:0}):n.css({top:0}),c.append(n))):(a.isfixed="fixed"==a.win.css("position"),c=a.isfixed?"fixed":"absolute",a.isfixed||(a.viewport=a.getViewport(a.win[0])),a.viewport&&(a.body=a.viewport,0==/fixed|absolute/.test(a.viewport.css("position"))&&a.css(a.viewport,{position:"relative"})),m.css({position:c}),a.zoom&&a.zoom.css({position:c}),a.updateScrollBar(),
a.body.append(m),a.zoom&&a.body.append(a.zoom),a.railh&&(n.css({position:c}),a.body.append(n))),e.isios&&a.css(a.win,{"-webkit-tap-highlight-color":"rgba(0,0,0,0)","-webkit-touch-callout":"none"}),e.isie&&a.opt.disableoutline&&a.win.attr("hideFocus","true"),e.iswebkit&&a.opt.disableoutline&&a.win.css("outline","none"));!1===a.opt.autohidemode?(a.autohidedom=!1,a.rail.css({opacity:a.opt.cursoropacitymax}),a.railh&&a.railh.css({opacity:a.opt.cursoropacitymax})):!0===a.opt.autohidemode||"leave"===a.opt.autohidemode?
(a.autohidedom=f().add(a.rail),e.isie8&&(a.autohidedom=a.autohidedom.add(a.cursor)),a.railh&&(a.autohidedom=a.autohidedom.add(a.railh)),a.railh&&e.isie8&&(a.autohidedom=a.autohidedom.add(a.cursorh))):"scroll"==a.opt.autohidemode?(a.autohidedom=f().add(a.rail),a.railh&&(a.autohidedom=a.autohidedom.add(a.railh))):"cursor"==a.opt.autohidemode?(a.autohidedom=f().add(a.cursor),a.railh&&(a.autohidedom=a.autohidedom.add(a.cursorh))):"hidden"==a.opt.autohidemode&&(a.autohidedom=!1,a.hide(),a.railslocked=
!1);if(e.isie9mobile)a.scrollmom=new M(a),a.onmangotouch=function(){var b=a.getScrollTop(),c=a.getScrollLeft();if(b==a.scrollmom.lastscrolly&&c==a.scrollmom.lastscrollx)return!0;var g=b-a.mangotouch.sy,d=c-a.mangotouch.sx;if(0!=Math.round(Math.sqrt(Math.pow(d,2)+Math.pow(g,2)))){var e=0>g?-1:1,f=0>d?-1:1,u=+new Date;a.mangotouch.lazy&&clearTimeout(a.mangotouch.lazy);80<u-a.mangotouch.tm||a.mangotouch.dry!=e||a.mangotouch.drx!=f?(a.scrollmom.stop(),a.scrollmom.reset(c,b),a.mangotouch.sy=b,a.mangotouch.ly=
b,a.mangotouch.sx=c,a.mangotouch.lx=c,a.mangotouch.dry=e,a.mangotouch.drx=f,a.mangotouch.tm=u):(a.scrollmom.stop(),a.scrollmom.update(a.mangotouch.sx-d,a.mangotouch.sy-g),a.mangotouch.tm=u,g=Math.max(Math.abs(a.mangotouch.ly-b),Math.abs(a.mangotouch.lx-c)),a.mangotouch.ly=b,a.mangotouch.lx=c,2<g&&(a.mangotouch.lazy=setTimeout(function(){a.mangotouch.lazy=!1;a.mangotouch.dry=0;a.mangotouch.drx=0;a.mangotouch.tm=0;a.scrollmom.doMomentum(30)},100)))}},m=a.getScrollTop(),n=a.getScrollLeft(),a.mangotouch=
{sy:m,ly:m,dry:0,sx:n,lx:n,drx:0,lazy:!1,tm:0},a.bind(a.docscroll,"scroll",a.onmangotouch);else{if(e.cantouch||a.istouchcapable||a.opt.touchbehavior||e.hasmstouch){a.scrollmom=new M(a);a.ontouchstart=function(b){if(b.pointerType&&2!=b.pointerType&&"touch"!=b.pointerType)return!1;a.hasmoving=!1;if(!a.railslocked){var c;if(e.hasmstouch)for(c=b.target?b.target:!1;c;){var g=f(c).getNiceScroll();if(0<g.length&&g[0].me==a.me)break;if(0<g.length)return!1;if("DIV"==c.nodeName&&c.id==a.id)break;c=c.parentNode?
c.parentNode:!1}a.cancelScroll();if((c=a.getTarget(b))&&/INPUT/i.test(c.nodeName)&&/range/i.test(c.type))return a.stopPropagation(b);!("clientX"in b)&&"changedTouches"in b&&(b.clientX=b.changedTouches[0].clientX,b.clientY=b.changedTouches[0].clientY);a.forcescreen&&(g=b,b={original:b.original?b.original:b},b.clientX=g.screenX,b.clientY=g.screenY);a.rail.drag={x:b.clientX,y:b.clientY,sx:a.scroll.x,sy:a.scroll.y,st:a.getScrollTop(),sl:a.getScrollLeft(),pt:2,dl:!1};if(a.ispage||!a.opt.directionlockdeadzone)a.rail.drag.dl=
"f";else{var g=f(window).width(),d=f(window).height(),d=Math.max(0,Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)-d),g=Math.max(0,Math.max(document.body.scrollWidth,document.documentElement.scrollWidth)-g);a.rail.drag.ck=!a.rail.scrollable&&a.railh.scrollable?0<d?"v":!1:a.rail.scrollable&&!a.railh.scrollable?0<g?"h":!1:!1;a.rail.drag.ck||(a.rail.drag.dl="f")}a.opt.touchbehavior&&a.isiframe&&e.isie&&(g=a.win.position(),a.rail.drag.x+=g.left,a.rail.drag.y+=g.top);a.hasmoving=
!1;a.lastmouseup=!1;a.scrollmom.reset(b.clientX,b.clientY);if(!e.cantouch&&!this.istouchcapable&&!b.pointerType){if(!c||!/INPUT|SELECT|TEXTAREA/i.test(c.nodeName))return!a.ispage&&e.hasmousecapture&&c.setCapture(),a.opt.touchbehavior?(c.onclick&&!c._onclick&&(c._onclick=c.onclick,c.onclick=function(b){if(a.hasmoving)return!1;c._onclick.call(this,b)}),a.cancelEvent(b)):a.stopPropagation(b);/SUBMIT|CANCEL|BUTTON/i.test(f(c).attr("type"))&&(pc={tg:c,click:!1},a.preventclick=pc)}}};a.ontouchend=function(b){if(!a.rail.drag)return!0;
if(2==a.rail.drag.pt){if(b.pointerType&&2!=b.pointerType&&"touch"!=b.pointerType)return!1;a.scrollmom.doMomentum();a.rail.drag=!1;if(a.hasmoving&&(a.lastmouseup=!0,a.hideCursor(),e.hasmousecapture&&document.releaseCapture(),!e.cantouch))return a.cancelEvent(b)}else if(1==a.rail.drag.pt)return a.onmouseup(b)};var q=a.opt.touchbehavior&&a.isiframe&&!e.hasmousecapture;a.ontouchmove=function(b,c){if(!a.rail.drag||b.targetTouches&&a.opt.preventmultitouchscrolling&&1<b.targetTouches.length||b.pointerType&&
2!=b.pointerType&&"touch"!=b.pointerType)return!1;if(2==a.rail.drag.pt){if(e.cantouch&&e.isios&&void 0===b.original)return!0;a.hasmoving=!0;a.preventclick&&!a.preventclick.click&&(a.preventclick.click=a.preventclick.tg.onclick||!1,a.preventclick.tg.onclick=a.onpreventclick);b=f.extend({original:b},b);"changedTouches"in b&&(b.clientX=b.changedTouches[0].clientX,b.clientY=b.changedTouches[0].clientY);if(a.forcescreen){var g=b;b={original:b.original?b.original:b};b.clientX=g.screenX;b.clientY=g.screenY}var d,
g=d=0;q&&!c&&(d=a.win.position(),g=-d.left,d=-d.top);var u=b.clientY+d;d=u-a.rail.drag.y;var m=b.clientX+g,k=m-a.rail.drag.x,h=a.rail.drag.st-d;a.ishwscroll&&a.opt.bouncescroll?0>h?h=Math.round(h/2):h>a.page.maxh&&(h=a.page.maxh+Math.round((h-a.page.maxh)/2)):(0>h&&(u=h=0),h>a.page.maxh&&(h=a.page.maxh,u=0));var l;a.railh&&a.railh.scrollable&&(l=a.isrtlmode?k-a.rail.drag.sl:a.rail.drag.sl-k,a.ishwscroll&&a.opt.bouncescroll?0>l?l=Math.round(l/2):l>a.page.maxw&&(l=a.page.maxw+Math.round((l-a.page.maxw)/
2)):(0>l&&(m=l=0),l>a.page.maxw&&(l=a.page.maxw,m=0)));g=!1;if(a.rail.drag.dl)g=!0,"v"==a.rail.drag.dl?l=a.rail.drag.sl:"h"==a.rail.drag.dl&&(h=a.rail.drag.st);else{d=Math.abs(d);var k=Math.abs(k),C=a.opt.directionlockdeadzone;if("v"==a.rail.drag.ck){if(d>C&&k<=.3*d)return a.rail.drag=!1,!0;k>C&&(a.rail.drag.dl="f",f("body").scrollTop(f("body").scrollTop()))}else if("h"==a.rail.drag.ck){if(k>C&&d<=.3*k)return a.rail.drag=!1,!0;d>C&&(a.rail.drag.dl="f",f("body").scrollLeft(f("body").scrollLeft()))}}a.synched("touchmove",
function(){a.rail.drag&&2==a.rail.drag.pt&&(a.prepareTransition&&a.prepareTransition(0),a.rail.scrollable&&a.setScrollTop(h),a.scrollmom.update(m,u),a.railh&&a.railh.scrollable?(a.setScrollLeft(l),a.showCursor(h,l)):a.showCursor(h),e.isie10&&document.selection.clear())});e.ischrome&&a.istouchcapable&&(g=!1);if(g)return a.cancelEvent(b)}else if(1==a.rail.drag.pt)return a.onmousemove(b)}}a.onmousedown=function(b,c){if(!a.rail.drag||1==a.rail.drag.pt){if(a.railslocked)return a.cancelEvent(b);a.cancelScroll();
a.rail.drag={x:b.clientX,y:b.clientY,sx:a.scroll.x,sy:a.scroll.y,pt:1,hr:!!c};var g=a.getTarget(b);!a.ispage&&e.hasmousecapture&&g.setCapture();a.isiframe&&!e.hasmousecapture&&(a.saved.csspointerevents=a.doc.css("pointer-events"),a.css(a.doc,{"pointer-events":"none"}));a.hasmoving=!1;return a.cancelEvent(b)}};a.onmouseup=function(b){if(a.rail.drag){if(1!=a.rail.drag.pt)return!0;e.hasmousecapture&&document.releaseCapture();a.isiframe&&!e.hasmousecapture&&a.doc.css("pointer-events",a.saved.csspointerevents);
a.rail.drag=!1;a.hasmoving&&a.triggerScrollEnd();return a.cancelEvent(b)}};a.onmousemove=function(b){if(a.rail.drag){if(1==a.rail.drag.pt){if(e.ischrome&&0==b.which)return a.onmouseup(b);a.cursorfreezed=!0;a.hasmoving=!0;if(a.rail.drag.hr){a.scroll.x=a.rail.drag.sx+(b.clientX-a.rail.drag.x);0>a.scroll.x&&(a.scroll.x=0);var c=a.scrollvaluemaxw;a.scroll.x>c&&(a.scroll.x=c)}else a.scroll.y=a.rail.drag.sy+(b.clientY-a.rail.drag.y),0>a.scroll.y&&(a.scroll.y=0),c=a.scrollvaluemax,a.scroll.y>c&&(a.scroll.y=
c);a.synched("mousemove",function(){a.rail.drag&&1==a.rail.drag.pt&&(a.showCursor(),a.rail.drag.hr?a.hasreversehr?a.doScrollLeft(a.scrollvaluemaxw-Math.round(a.scroll.x*a.scrollratio.x),a.opt.cursordragspeed):a.doScrollLeft(Math.round(a.scroll.x*a.scrollratio.x),a.opt.cursordragspeed):a.doScrollTop(Math.round(a.scroll.y*a.scrollratio.y),a.opt.cursordragspeed))});return a.cancelEvent(b)}}else a.checkarea=0};if(e.cantouch||a.opt.touchbehavior)a.onpreventclick=function(b){if(a.preventclick)return a.preventclick.tg.onclick=
a.preventclick.click,a.preventclick=!1,a.cancelEvent(b)},a.bind(a.win,"mousedown",a.ontouchstart),a.onclick=e.isios?!1:function(b){return a.lastmouseup?(a.lastmouseup=!1,a.cancelEvent(b)):!0},a.opt.grabcursorenabled&&e.cursorgrabvalue&&(a.css(a.ispage?a.doc:a.win,{cursor:e.cursorgrabvalue}),a.css(a.rail,{cursor:e.cursorgrabvalue}));else{var r=function(b){if(a.selectiondrag){if(b){var c=a.win.outerHeight();b=b.pageY-a.selectiondrag.top;0<b&&b<c&&(b=0);b>=c&&(b-=c);a.selectiondrag.df=b}0!=a.selectiondrag.df&&
(a.doScrollBy(2*-Math.floor(a.selectiondrag.df/6)),a.debounced("doselectionscroll",function(){r()},50))}};a.hasTextSelected="getSelection"in document?function(){return 0<document.getSelection().rangeCount}:"selection"in document?function(){return"None"!=document.selection.type}:function(){return!1};a.onselectionstart=function(b){a.ispage||(a.selectiondrag=a.win.offset())};a.onselectionend=function(b){a.selectiondrag=!1};a.onselectiondrag=function(b){a.selectiondrag&&a.hasTextSelected()&&a.debounced("selectionscroll",
function(){r(b)},250)}}e.hasw3ctouch?(a.css(a.rail,{"touch-action":"none"}),a.css(a.cursor,{"touch-action":"none"}),a.bind(a.win,"pointerdown",a.ontouchstart),a.bind(document,"pointerup",a.ontouchend),a.bind(document,"pointermove",a.ontouchmove)):e.hasmstouch?(a.css(a.rail,{"-ms-touch-action":"none"}),a.css(a.cursor,{"-ms-touch-action":"none"}),a.bind(a.win,"MSPointerDown",a.ontouchstart),a.bind(document,"MSPointerUp",a.ontouchend),a.bind(document,"MSPointerMove",a.ontouchmove),a.bind(a.cursor,"MSGestureHold",
function(a){a.preventDefault()}),a.bind(a.cursor,"contextmenu",function(a){a.preventDefault()})):this.istouchcapable&&(a.bind(a.win,"touchstart",a.ontouchstart),a.bind(document,"touchend",a.ontouchend),a.bind(document,"touchcancel",a.ontouchend),a.bind(document,"touchmove",a.ontouchmove));if(a.opt.cursordragontouch||!e.cantouch&&!a.opt.touchbehavior)a.rail.css({cursor:"default"}),a.railh&&a.railh.css({cursor:"default"}),a.jqbind(a.rail,"mouseenter",function(){if(!a.ispage&&!a.win.is(":visible"))return!1;
a.canshowonmouseevent&&a.showCursor();a.rail.active=!0}),a.jqbind(a.rail,"mouseleave",function(){a.rail.active=!1;a.rail.drag||a.hideCursor()}),a.opt.sensitiverail&&(a.bind(a.rail,"click",function(b){a.doRailClick(b,!1,!1)}),a.bind(a.rail,"dblclick",function(b){a.doRailClick(b,!0,!1)}),a.bind(a.cursor,"click",function(b){a.cancelEvent(b)}),a.bind(a.cursor,"dblclick",function(b){a.cancelEvent(b)})),a.railh&&(a.jqbind(a.railh,"mouseenter",function(){if(!a.ispage&&!a.win.is(":visible"))return!1;a.canshowonmouseevent&&
a.showCursor();a.rail.active=!0}),a.jqbind(a.railh,"mouseleave",function(){a.rail.active=!1;a.rail.drag||a.hideCursor()}),a.opt.sensitiverail&&(a.bind(a.railh,"click",function(b){a.doRailClick(b,!1,!0)}),a.bind(a.railh,"dblclick",function(b){a.doRailClick(b,!0,!0)}),a.bind(a.cursorh,"click",function(b){a.cancelEvent(b)}),a.bind(a.cursorh,"dblclick",function(b){a.cancelEvent(b)})));e.cantouch||a.opt.touchbehavior?(a.bind(e.hasmousecapture?a.win:document,"mouseup",a.ontouchend),a.bind(document,"mousemove",
a.ontouchmove),a.onclick&&a.bind(document,"click",a.onclick),a.opt.cursordragontouch?(a.bind(a.cursor,"mousedown",a.onmousedown),a.bind(a.cursor,"mouseup",a.onmouseup),a.cursorh&&a.bind(a.cursorh,"mousedown",function(b){a.onmousedown(b,!0)}),a.cursorh&&a.bind(a.cursorh,"mouseup",a.onmouseup)):(a.bind(a.rail,"mousedown",function(a){a.preventDefault()}),a.railh&&a.bind(a.railh,"mousedown",function(a){a.preventDefault()}))):(a.bind(e.hasmousecapture?a.win:document,"mouseup",a.onmouseup),a.bind(document,
"mousemove",a.onmousemove),a.onclick&&a.bind(document,"click",a.onclick),a.bind(a.cursor,"mousedown",a.onmousedown),a.bind(a.cursor,"mouseup",a.onmouseup),a.railh&&(a.bind(a.cursorh,"mousedown",function(b){a.onmousedown(b,!0)}),a.bind(a.cursorh,"mouseup",a.onmouseup)),!a.ispage&&a.opt.enablescrollonselection&&(a.bind(a.win[0],"mousedown",a.onselectionstart),a.bind(document,"mouseup",a.onselectionend),a.bind(a.cursor,"mouseup",a.onselectionend),a.cursorh&&a.bind(a.cursorh,"mouseup",a.onselectionend),
a.bind(document,"mousemove",a.onselectiondrag)),a.zoom&&(a.jqbind(a.zoom,"mouseenter",function(){a.canshowonmouseevent&&a.showCursor();a.rail.active=!0}),a.jqbind(a.zoom,"mouseleave",function(){a.rail.active=!1;a.rail.drag||a.hideCursor()})));a.opt.enablemousewheel&&(a.isiframe||a.mousewheel(e.isie&&a.ispage?document:a.win,a.onmousewheel),a.mousewheel(a.rail,a.onmousewheel),a.railh&&a.mousewheel(a.railh,a.onmousewheelhr));a.ispage||e.cantouch||/HTML|^BODY/.test(a.win[0].nodeName)||(a.win.attr("tabindex")||
a.win.attr({tabindex:O++}),a.jqbind(a.win,"focus",function(b){B=a.getTarget(b).id||!0;a.hasfocus=!0;a.canshowonmouseevent&&a.noticeCursor()}),a.jqbind(a.win,"blur",function(b){B=!1;a.hasfocus=!1}),a.jqbind(a.win,"mouseenter",function(b){F=a.getTarget(b).id||!0;a.hasmousefocus=!0;a.canshowonmouseevent&&a.noticeCursor()}),a.jqbind(a.win,"mouseleave",function(){F=!1;a.hasmousefocus=!1;a.rail.drag||a.hideCursor()}))}a.onkeypress=function(b){if(a.railslocked&&0==a.page.maxh)return!0;b=b?b:window.e;var c=
a.getTarget(b);if(c&&/INPUT|TEXTAREA|SELECT|OPTION/.test(c.nodeName)&&(!c.getAttribute("type")&&!c.type||!/submit|button|cancel/i.tp)||f(c).attr("contenteditable"))return!0;if(a.hasfocus||a.hasmousefocus&&!B||a.ispage&&!B&&!F){c=b.keyCode;if(a.railslocked&&27!=c)return a.cancelEvent(b);var g=b.ctrlKey||!1,d=b.shiftKey||!1,e=!1;switch(c){case 38:case 63233:a.doScrollBy(72);e=!0;break;case 40:case 63235:a.doScrollBy(-72);e=!0;break;case 37:case 63232:a.railh&&(g?a.doScrollLeft(0):a.doScrollLeftBy(72),
e=!0);break;case 39:case 63234:a.railh&&(g?a.doScrollLeft(a.page.maxw):a.doScrollLeftBy(-72),e=!0);break;case 33:case 63276:a.doScrollBy(a.view.h);e=!0;break;case 34:case 63277:a.doScrollBy(-a.view.h);e=!0;break;case 36:case 63273:a.railh&&g?a.doScrollPos(0,0):a.doScrollTo(0);e=!0;break;case 35:case 63275:a.railh&&g?a.doScrollPos(a.page.maxw,a.page.maxh):a.doScrollTo(a.page.maxh);e=!0;break;case 32:a.opt.spacebarenabled&&(d?a.doScrollBy(a.view.h):a.doScrollBy(-a.view.h),e=!0);break;case 27:a.zoomactive&&
(a.doZoom(),e=!0)}if(e)return a.cancelEvent(b)}};a.opt.enablekeyboard&&a.bind(document,e.isopera&&!e.isopera12?"keypress":"keydown",a.onkeypress);a.bind(document,"keydown",function(b){b.ctrlKey&&(a.wheelprevented=!0)});a.bind(document,"keyup",function(b){b.ctrlKey||(a.wheelprevented=!1)});a.bind(window,"blur",function(b){a.wheelprevented=!1});a.bind(window,"resize",a.lazyResize);a.bind(window,"orientationchange",a.lazyResize);a.bind(window,"load",a.lazyResize);if(e.ischrome&&!a.ispage&&!a.haswrapper){var t=
a.win.attr("style"),m=parseFloat(a.win.css("width"))+1;a.win.css("width",m);a.synched("chromefix",function(){a.win.attr("style",t)})}a.onAttributeChange=function(b){a.lazyResize(a.isieold?250:30)};a.isie11||!1===x||(a.observerbody=new x(function(b){b.forEach(function(b){if("attributes"==b.type)return f("body").hasClass("modal-open")&&f("body").hasClass("modal-dialog")&&!f.contains(f(".modal-dialog")[0],a.doc[0])?a.hide():a.show()});if(document.body.scrollHeight!=a.page.maxh)return a.lazyResize(30)}),
a.observerbody.observe(document.body,{childList:!0,subtree:!0,characterData:!1,attributes:!0,attributeFilter:["class"]}));a.ispage||a.haswrapper||(!1!==x?(a.observer=new x(function(b){b.forEach(a.onAttributeChange)}),a.observer.observe(a.win[0],{childList:!0,characterData:!1,attributes:!0,subtree:!1}),a.observerremover=new x(function(b){b.forEach(function(b){if(0<b.removedNodes.length)for(var c in b.removedNodes)if(a&&b.removedNodes[c]==a.win[0])return a.remove()})}),a.observerremover.observe(a.win[0].parentNode,
{childList:!0,characterData:!1,attributes:!1,subtree:!1})):(a.bind(a.win,e.isie&&!e.isie9?"propertychange":"DOMAttrModified",a.onAttributeChange),e.isie9&&a.win[0].attachEvent("onpropertychange",a.onAttributeChange),a.bind(a.win,"DOMNodeRemoved",function(b){b.target==a.win[0]&&a.remove()})));!a.ispage&&a.opt.boxzoom&&a.bind(window,"resize",a.resizeZoom);a.istextarea&&(a.bind(a.win,"keydown",a.lazyResize),a.bind(a.win,"mouseup",a.lazyResize));a.lazyResize(30)}if("IFRAME"==this.doc[0].nodeName){var N=
function(){a.iframexd=!1;var c;try{c="contentDocument"in this?this.contentDocument:this.contentWindow.document}catch(g){a.iframexd=!0,c=!1}if(a.iframexd)return"console"in window&&console.log("NiceScroll error: policy restriced iframe"),!0;a.forcescreen=!0;a.isiframe&&(a.iframe={doc:f(c),html:a.doc.contents().find("html")[0],body:a.doc.contents().find("body")[0]},a.getContentSize=function(){return{w:Math.max(a.iframe.html.scrollWidth,a.iframe.body.scrollWidth),h:Math.max(a.iframe.html.scrollHeight,
a.iframe.body.scrollHeight)}},a.docscroll=f(a.iframe.body));if(!e.isios&&a.opt.iframeautoresize&&!a.isiframe){a.win.scrollTop(0);a.doc.height("");var d=Math.max(c.getElementsByTagName("html")[0].scrollHeight,c.body.scrollHeight);a.doc.height(d)}a.lazyResize(30);e.isie7&&a.css(f(a.iframe.html),b);a.css(f(a.iframe.body),b);e.isios&&a.haswrapper&&a.css(f(c.body),{"-webkit-transform":"translate3d(0,0,0)"});"contentWindow"in this?a.bind(this.contentWindow,"scroll",a.onscroll):a.bind(c,"scroll",a.onscroll);
a.opt.enablemousewheel&&a.mousewheel(c,a.onmousewheel);a.opt.enablekeyboard&&a.bind(c,e.isopera?"keypress":"keydown",a.onkeypress);if(e.cantouch||a.opt.touchbehavior)a.bind(c,"mousedown",a.ontouchstart),a.bind(c,"mousemove",function(b){return a.ontouchmove(b,!0)}),a.opt.grabcursorenabled&&e.cursorgrabvalue&&a.css(f(c.body),{cursor:e.cursorgrabvalue});a.bind(c,"mouseup",a.ontouchend);a.zoom&&(a.opt.dblclickzoom&&a.bind(c,"dblclick",a.doZoom),a.ongesturezoom&&a.bind(c,"gestureend",a.ongesturezoom))};
this.doc[0].readyState&&"complete"==this.doc[0].readyState&&setTimeout(function(){N.call(a.doc[0],!1)},500);a.bind(this.doc,"load",N)}};this.showCursor=function(b,c){a.cursortimeout&&(clearTimeout(a.cursortimeout),a.cursortimeout=0);if(a.rail){a.autohidedom&&(a.autohidedom.stop().css({opacity:a.opt.cursoropacitymax}),a.cursoractive=!0);a.rail.drag&&1==a.rail.drag.pt||(void 0!==b&&!1!==b&&(a.scroll.y=Math.round(1*b/a.scrollratio.y)),void 0!==c&&(a.scroll.x=Math.round(1*c/a.scrollratio.x)));a.cursor.css({height:a.cursorheight,
top:a.scroll.y});if(a.cursorh){var d=a.hasreversehr?a.scrollvaluemaxw-a.scroll.x:a.scroll.x;!a.rail.align&&a.rail.visibility?a.cursorh.css({width:a.cursorwidth,left:d+a.rail.width}):a.cursorh.css({width:a.cursorwidth,left:d});a.cursoractive=!0}a.zoom&&a.zoom.stop().css({opacity:a.opt.cursoropacitymax})}};this.hideCursor=function(b){a.cursortimeout||!a.rail||!a.autohidedom||a.hasmousefocus&&"leave"==a.opt.autohidemode||(a.cursortimeout=setTimeout(function(){a.rail.active&&a.showonmouseevent||(a.autohidedom.stop().animate({opacity:a.opt.cursoropacitymin}),
a.zoom&&a.zoom.stop().animate({opacity:a.opt.cursoropacitymin}),a.cursoractive=!1);a.cursortimeout=0},b||a.opt.hidecursordelay))};this.noticeCursor=function(b,c,d){a.showCursor(c,d);a.rail.active||a.hideCursor(b)};this.getContentSize=a.ispage?function(){return{w:Math.max(document.body.scrollWidth,document.documentElement.scrollWidth),h:Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}}:a.haswrapper?function(){return{w:a.doc.outerWidth()+parseInt(a.win.css("paddingLeft"))+
parseInt(a.win.css("paddingRight")),h:a.doc.outerHeight()+parseInt(a.win.css("paddingTop"))+parseInt(a.win.css("paddingBottom"))}}:function(){return{w:a.docscroll[0].scrollWidth,h:a.docscroll[0].scrollHeight}};this.onResize=function(b,c){if(!a||!a.win)return!1;if(!a.haswrapper&&!a.ispage){if("none"==a.win.css("display"))return a.visibility&&a.hideRail().hideRailHr(),!1;a.hidden||a.visibility||a.showRail().showRailHr()}var d=a.page.maxh,e=a.page.maxw,f=a.view.h,k=a.view.w;a.view={w:a.ispage?a.win.width():
parseInt(a.win[0].clientWidth),h:a.ispage?a.win.height():parseInt(a.win[0].clientHeight)};a.page=c?c:a.getContentSize();a.page.maxh=Math.max(0,a.page.h-a.view.h);a.page.maxw=Math.max(0,a.page.w-a.view.w);if(a.page.maxh==d&&a.page.maxw==e&&a.view.w==k&&a.view.h==f){if(a.ispage)return a;d=a.win.offset();if(a.lastposition&&(e=a.lastposition,e.top==d.top&&e.left==d.left))return a;a.lastposition=d}0==a.page.maxh?(a.hideRail(),a.scrollvaluemax=0,a.scroll.y=0,a.scrollratio.y=0,a.cursorheight=0,a.setScrollTop(0),
a.rail&&(a.rail.scrollable=!1)):(a.page.maxh-=a.opt.railpadding.top+a.opt.railpadding.bottom,a.rail.scrollable=!0);0==a.page.maxw?(a.hideRailHr(),a.scrollvaluemaxw=0,a.scroll.x=0,a.scrollratio.x=0,a.cursorwidth=0,a.setScrollLeft(0),a.railh&&(a.railh.scrollable=!1)):(a.page.maxw-=a.opt.railpadding.left+a.opt.railpadding.right,a.railh&&(a.railh.scrollable=a.opt.horizrailenabled));a.railslocked=a.locked||0==a.page.maxh&&0==a.page.maxw;if(a.railslocked)return a.ispage||a.updateScrollBar(a.view),!1;a.hidden||
a.visibility?!a.railh||a.hidden||a.railh.visibility||a.showRailHr():a.showRail().showRailHr();a.istextarea&&a.win.css("resize")&&"none"!=a.win.css("resize")&&(a.view.h-=20);a.cursorheight=Math.min(a.view.h,Math.round(a.view.h/a.page.h*a.view.h));a.cursorheight=a.opt.cursorfixedheight?a.opt.cursorfixedheight:Math.max(a.opt.cursorminheight,a.cursorheight);a.cursorwidth=Math.min(a.view.w,Math.round(a.view.w/a.page.w*a.view.w));a.cursorwidth=a.opt.cursorfixedheight?a.opt.cursorfixedheight:Math.max(a.opt.cursorminheight,
a.cursorwidth);a.scrollvaluemax=a.view.h-a.cursorheight-a.cursor.hborder-(a.opt.railpadding.top+a.opt.railpadding.bottom);a.railh&&(a.railh.width=0<a.page.maxh?a.view.w-a.rail.width:a.view.w,a.scrollvaluemaxw=a.railh.width-a.cursorwidth-a.cursorh.wborder-(a.opt.railpadding.left+a.opt.railpadding.right));a.ispage||a.updateScrollBar(a.view);a.scrollratio={x:a.page.maxw/a.scrollvaluemaxw,y:a.page.maxh/a.scrollvaluemax};a.getScrollTop()>a.page.maxh?a.doScrollTop(a.page.maxh):(a.scroll.y=Math.round(a.getScrollTop()*
(1/a.scrollratio.y)),a.scroll.x=Math.round(a.getScrollLeft()*(1/a.scrollratio.x)),a.cursoractive&&a.noticeCursor());a.scroll.y&&0==a.getScrollTop()&&a.doScrollTo(Math.floor(a.scroll.y*a.scrollratio.y));return a};this.resize=a.onResize;this.hlazyresize=0;this.lazyResize=function(b){a.haswrapper||a.hide();a.hlazyresize&&clearTimeout(a.hlazyresize);a.hlazyresize=setTimeout(function(){a&&a.show().resize()},240);return a};this.jqbind=function(b,c,d){a.events.push({e:b,n:c,f:d,q:!0});f(b).bind(c,d)};this.mousewheel=
function(b,c,d){b="jquery"in b?b[0]:b;if("onwheel"in document.createElement("div"))a._bind(b,"wheel",c,d||!1);else{var e=void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll";q(b,e,c,d||!1);"DOMMouseScroll"==e&&q(b,"MozMousePixelScroll",c,d||!1)}};e.haseventlistener?(this.bind=function(b,c,d,e){a._bind("jquery"in b?b[0]:b,c,d,e||!1)},this._bind=function(b,c,d,e){a.events.push({e:b,n:c,f:d,b:e,q:!1});b.addEventListener(c,d,e||!1)},this.cancelEvent=function(a){if(!a)return!1;a=a.original?a.original:
a;a.cancelable&&a.preventDefault();a.stopPropagation();a.preventManipulation&&a.preventManipulation();return!1},this.stopPropagation=function(a){if(!a)return!1;a=a.original?a.original:a;a.stopPropagation();return!1},this._unbind=function(a,c,d,e){a.removeEventListener(c,d,e)}):(this.bind=function(b,c,d,e){var f="jquery"in b?b[0]:b;a._bind(f,c,function(b){(b=b||window.event||!1)&&b.srcElement&&(b.target=b.srcElement);"pageY"in b||(b.pageX=b.clientX+document.documentElement.scrollLeft,b.pageY=b.clientY+
document.documentElement.scrollTop);return!1===d.call(f,b)||!1===e?a.cancelEvent(b):!0})},this._bind=function(b,c,d,e){a.events.push({e:b,n:c,f:d,b:e,q:!1});b.attachEvent?b.attachEvent("on"+c,d):b["on"+c]=d},this.cancelEvent=function(a){a=window.event||!1;if(!a)return!1;a.cancelBubble=!0;a.cancel=!0;return a.returnValue=!1},this.stopPropagation=function(a){a=window.event||!1;if(!a)return!1;a.cancelBubble=!0;return!1},this._unbind=function(a,c,d,e){a.detachEvent?a.detachEvent("on"+c,d):a["on"+c]=!1});
this.unbindAll=function(){for(var b=0;b<a.events.length;b++){var c=a.events[b];c.q?c.e.unbind(c.n,c.f):a._unbind(c.e,c.n,c.f,c.b)}};this.showRail=function(){0==a.page.maxh||!a.ispage&&"none"==a.win.css("display")||(a.visibility=!0,a.rail.visibility=!0,a.rail.css("display","block"));return a};this.showRailHr=function(){if(!a.railh)return a;0==a.page.maxw||!a.ispage&&"none"==a.win.css("display")||(a.railh.visibility=!0,a.railh.css("display","block"));return a};this.hideRail=function(){a.visibility=
!1;a.rail.visibility=!1;a.rail.css("display","none");return a};this.hideRailHr=function(){if(!a.railh)return a;a.railh.visibility=!1;a.railh.css("display","none");return a};this.show=function(){a.hidden=!1;a.railslocked=!1;return a.showRail().showRailHr()};this.hide=function(){a.hidden=!0;a.railslocked=!0;return a.hideRail().hideRailHr()};this.toggle=function(){return a.hidden?a.show():a.hide()};this.remove=function(){a.stop();a.cursortimeout&&clearTimeout(a.cursortimeout);for(var b in a.delaylist)a.delaylist[b]&&
w(a.delaylist[b].h);a.doZoomOut();a.unbindAll();e.isie9&&a.win[0].detachEvent("onpropertychange",a.onAttributeChange);!1!==a.observer&&a.observer.disconnect();!1!==a.observerremover&&a.observerremover.disconnect();!1!==a.observerbody&&a.observerbody.disconnect();a.events=null;a.cursor&&a.cursor.remove();a.cursorh&&a.cursorh.remove();a.rail&&a.rail.remove();a.railh&&a.railh.remove();a.zoom&&a.zoom.remove();for(b=0;b<a.saved.css.length;b++){var c=a.saved.css[b];c[0].css(c[1],void 0===c[2]?"":c[2])}a.saved=
!1;a.me.data("__nicescroll","");var d=f.nicescroll;d.each(function(b){if(this&&this.id===a.id){delete d[b];for(var c=++b;c<d.length;c++,b++)d[b]=d[c];d.length--;d.length&&delete d[d.length]}});for(var k in a)a[k]=null,delete a[k];a=null};this.scrollstart=function(b){this.onscrollstart=b;return a};this.scrollend=function(b){this.onscrollend=b;return a};this.scrollcancel=function(b){this.onscrollcancel=b;return a};this.zoomin=function(b){this.onzoomin=b;return a};this.zoomout=function(b){this.onzoomout=
b;return a};this.isScrollable=function(a){a=a.target?a.target:a;if("OPTION"==a.nodeName)return!0;for(;a&&1==a.nodeType&&!/^BODY|HTML/.test(a.nodeName);){var c=f(a),c=c.css("overflowY")||c.css("overflowX")||c.css("overflow")||"";if(/scroll|auto/.test(c))return a.clientHeight!=a.scrollHeight;a=a.parentNode?a.parentNode:!1}return!1};this.getViewport=function(a){for(a=a&&a.parentNode?a.parentNode:!1;a&&1==a.nodeType&&!/^BODY|HTML/.test(a.nodeName);){var c=f(a);if(/fixed|absolute/.test(c.css("position")))return c;
var d=c.css("overflowY")||c.css("overflowX")||c.css("overflow")||"";if(/scroll|auto/.test(d)&&a.clientHeight!=a.scrollHeight||0<c.getNiceScroll().length)return c;a=a.parentNode?a.parentNode:!1}return!1};this.triggerScrollEnd=function(){if(a.onscrollend){var b=a.getScrollLeft(),c=a.getScrollTop();a.onscrollend.call(a,{type:"scrollend",current:{x:b,y:c},end:{x:b,y:c}})}};this.onmousewheel=function(b){if(!a.wheelprevented){if(a.railslocked)return a.debounced("checkunlock",a.resize,250),!0;if(a.rail.drag)return a.cancelEvent(b);
"auto"==a.opt.oneaxismousemode&&0!=b.deltaX&&(a.opt.oneaxismousemode=!1);if(a.opt.oneaxismousemode&&0==b.deltaX&&!a.rail.scrollable)return a.railh&&a.railh.scrollable?a.onmousewheelhr(b):!0;var c=+new Date,d=!1;a.opt.preservenativescrolling&&a.checkarea+600<c&&(a.nativescrollingarea=a.isScrollable(b),d=!0);a.checkarea=c;if(a.nativescrollingarea)return!0;if(b=t(b,!1,d))a.checkarea=0;return b}};this.onmousewheelhr=function(b){if(!a.wheelprevented){if(a.railslocked||!a.railh.scrollable)return!0;if(a.rail.drag)return a.cancelEvent(b);
var c=+new Date,d=!1;a.opt.preservenativescrolling&&a.checkarea+600<c&&(a.nativescrollingarea=a.isScrollable(b),d=!0);a.checkarea=c;return a.nativescrollingarea?!0:a.railslocked?a.cancelEvent(b):t(b,!0,d)}};this.stop=function(){a.cancelScroll();a.scrollmon&&a.scrollmon.stop();a.cursorfreezed=!1;a.scroll.y=Math.round(a.getScrollTop()*(1/a.scrollratio.y));a.noticeCursor();return a};this.getTransitionSpeed=function(b){b=Math.min(Math.round(10*a.opt.scrollspeed),Math.round(b/20*a.opt.scrollspeed));return 20<
b?b:0};a.opt.smoothscroll?a.ishwscroll&&e.hastransition&&a.opt.usetransition&&a.opt.smoothscroll?(this.prepareTransition=function(b,c){var d=c?20<b?b:0:a.getTransitionSpeed(b),f=d?e.prefixstyle+"transform "+d+"ms ease-out":"";a.lasttransitionstyle&&a.lasttransitionstyle==f||(a.lasttransitionstyle=f,a.doc.css(e.transitionstyle,f));return d},this.doScrollLeft=function(b,c){var d=a.scrollrunning?a.newscrolly:a.getScrollTop();a.doScrollPos(b,d,c)},this.doScrollTop=function(b,c){var d=a.scrollrunning?
a.newscrollx:a.getScrollLeft();a.doScrollPos(d,b,c)},this.doScrollPos=function(b,c,d){var f=a.getScrollTop(),k=a.getScrollLeft();(0>(a.newscrolly-f)*(c-f)||0>(a.newscrollx-k)*(b-k))&&a.cancelScroll();0==a.opt.bouncescroll&&(0>c?c=0:c>a.page.maxh&&(c=a.page.maxh),0>b?b=0:b>a.page.maxw&&(b=a.page.maxw));if(a.scrollrunning&&b==a.newscrollx&&c==a.newscrolly)return!1;a.newscrolly=c;a.newscrollx=b;a.newscrollspeed=d||!1;if(a.timer)return!1;a.timer=setTimeout(function(){var d=a.getScrollTop(),f=a.getScrollLeft(),
k=Math.round(Math.sqrt(Math.pow(b-f,2)+Math.pow(c-d,2))),k=a.newscrollspeed&&1<a.newscrollspeed?a.newscrollspeed:a.getTransitionSpeed(k);a.newscrollspeed&&1>=a.newscrollspeed&&(k*=a.newscrollspeed);a.prepareTransition(k,!0);a.timerscroll&&a.timerscroll.tm&&clearInterval(a.timerscroll.tm);0<k&&(!a.scrollrunning&&a.onscrollstart&&a.onscrollstart.call(a,{type:"scrollstart",current:{x:f,y:d},request:{x:b,y:c},end:{x:a.newscrollx,y:a.newscrolly},speed:k}),e.transitionend?a.scrollendtrapped||(a.scrollendtrapped=
!0,a.bind(a.doc,e.transitionend,a.onScrollTransitionEnd,!1)):(a.scrollendtrapped&&clearTimeout(a.scrollendtrapped),a.scrollendtrapped=setTimeout(a.onScrollTransitionEnd,k)),a.timerscroll={bz:new D(d,a.newscrolly,k,0,0,.58,1),bh:new D(f,a.newscrollx,k,0,0,.58,1)},a.cursorfreezed||(a.timerscroll.tm=setInterval(function(){a.showCursor(a.getScrollTop(),a.getScrollLeft())},60)));a.synched("doScroll-set",function(){a.timer=0;a.scrollendtrapped&&(a.scrollrunning=!0);a.setScrollTop(a.newscrolly);a.setScrollLeft(a.newscrollx);
if(!a.scrollendtrapped)a.onScrollTransitionEnd()})},50)},this.cancelScroll=function(){if(!a.scrollendtrapped)return!0;var b=a.getScrollTop(),c=a.getScrollLeft();a.scrollrunning=!1;e.transitionend||clearTimeout(e.transitionend);a.scrollendtrapped=!1;a._unbind(a.doc[0],e.transitionend,a.onScrollTransitionEnd);a.prepareTransition(0);a.setScrollTop(b);a.railh&&a.setScrollLeft(c);a.timerscroll&&a.timerscroll.tm&&clearInterval(a.timerscroll.tm);a.timerscroll=!1;a.cursorfreezed=!1;a.showCursor(b,c);return a},
this.onScrollTransitionEnd=function(){a.scrollendtrapped&&a._unbind(a.doc[0],e.transitionend,a.onScrollTransitionEnd);a.scrollendtrapped=!1;a.prepareTransition(0);a.timerscroll&&a.timerscroll.tm&&clearInterval(a.timerscroll.tm);a.timerscroll=!1;var b=a.getScrollTop(),c=a.getScrollLeft();a.setScrollTop(b);a.railh&&a.setScrollLeft(c);a.noticeCursor(!1,b,c);a.cursorfreezed=!1;0>b?b=0:b>a.page.maxh&&(b=a.page.maxh);0>c?c=0:c>a.page.maxw&&(c=a.page.maxw);if(b!=a.newscrolly||c!=a.newscrollx)return a.doScrollPos(c,
b,a.opt.snapbackspeed);a.onscrollend&&a.scrollrunning&&a.triggerScrollEnd();a.scrollrunning=!1}):(this.doScrollLeft=function(b,c){var d=a.scrollrunning?a.newscrolly:a.getScrollTop();a.doScrollPos(b,d,c)},this.doScrollTop=function(b,c){var d=a.scrollrunning?a.newscrollx:a.getScrollLeft();a.doScrollPos(d,b,c)},this.doScrollPos=function(b,c,d){function e(){if(a.cancelAnimationFrame)return!0;a.scrollrunning=!0;if(p=1-p)return a.timer=v(e)||1;var b=0,c,d,f=d=a.getScrollTop();if(a.dst.ay){f=a.bzscroll?
a.dst.py+a.bzscroll.getNow()*a.dst.ay:a.newscrolly;c=f-d;if(0>c&&f<a.newscrolly||0<c&&f>a.newscrolly)f=a.newscrolly;a.setScrollTop(f);f==a.newscrolly&&(b=1)}else b=1;d=c=a.getScrollLeft();if(a.dst.ax){d=a.bzscroll?a.dst.px+a.bzscroll.getNow()*a.dst.ax:a.newscrollx;c=d-c;if(0>c&&d<a.newscrollx||0<c&&d>a.newscrollx)d=a.newscrollx;a.setScrollLeft(d);d==a.newscrollx&&(b+=1)}else b+=1;2==b?(a.timer=0,a.cursorfreezed=!1,a.bzscroll=!1,a.scrollrunning=!1,0>f?f=0:f>a.page.maxh&&(f=Math.max(0,a.page.maxh)),
0>d?d=0:d>a.page.maxw&&(d=a.page.maxw),d!=a.newscrollx||f!=a.newscrolly?a.doScrollPos(d,f):a.onscrollend&&a.triggerScrollEnd()):a.timer=v(e)||1}c=void 0===c||!1===c?a.getScrollTop(!0):c;if(a.timer&&a.newscrolly==c&&a.newscrollx==b)return!0;a.timer&&w(a.timer);a.timer=0;var f=a.getScrollTop(),k=a.getScrollLeft();(0>(a.newscrolly-f)*(c-f)||0>(a.newscrollx-k)*(b-k))&&a.cancelScroll();a.newscrolly=c;a.newscrollx=b;a.bouncescroll&&a.rail.visibility||(0>a.newscrolly?a.newscrolly=0:a.newscrolly>a.page.maxh&&
(a.newscrolly=a.page.maxh));a.bouncescroll&&a.railh.visibility||(0>a.newscrollx?a.newscrollx=0:a.newscrollx>a.page.maxw&&(a.newscrollx=a.page.maxw));a.dst={};a.dst.x=b-k;a.dst.y=c-f;a.dst.px=k;a.dst.py=f;var h=Math.round(Math.sqrt(Math.pow(a.dst.x,2)+Math.pow(a.dst.y,2)));a.dst.ax=a.dst.x/h;a.dst.ay=a.dst.y/h;var l=0,n=h;0==a.dst.x?(l=f,n=c,a.dst.ay=1,a.dst.py=0):0==a.dst.y&&(l=k,n=b,a.dst.ax=1,a.dst.px=0);h=a.getTransitionSpeed(h);d&&1>=d&&(h*=d);a.bzscroll=0<h?a.bzscroll?a.bzscroll.update(n,h):
new D(l,n,h,0,1,0,1):!1;if(!a.timer){(f==a.page.maxh&&c>=a.page.maxh||k==a.page.maxw&&b>=a.page.maxw)&&a.checkContentSize();var p=1;a.cancelAnimationFrame=!1;a.timer=1;a.onscrollstart&&!a.scrollrunning&&a.onscrollstart.call(a,{type:"scrollstart",current:{x:k,y:f},request:{x:b,y:c},end:{x:a.newscrollx,y:a.newscrolly},speed:h});e();(f==a.page.maxh&&c>=f||k==a.page.maxw&&b>=k)&&a.checkContentSize();a.noticeCursor()}},this.cancelScroll=function(){a.timer&&w(a.timer);a.timer=0;a.bzscroll=!1;a.scrollrunning=
!1;return a}):(this.doScrollLeft=function(b,c){var d=a.getScrollTop();a.doScrollPos(b,d,c)},this.doScrollTop=function(b,c){var d=a.getScrollLeft();a.doScrollPos(d,b,c)},this.doScrollPos=function(b,c,d){var e=b>a.page.maxw?a.page.maxw:b;0>e&&(e=0);var f=c>a.page.maxh?a.page.maxh:c;0>f&&(f=0);a.synched("scroll",function(){a.setScrollTop(f);a.setScrollLeft(e)})},this.cancelScroll=function(){});this.doScrollBy=function(b,c){var d=0,d=c?Math.floor((a.scroll.y-b)*a.scrollratio.y):(a.timer?a.newscrolly:
a.getScrollTop(!0))-b;if(a.bouncescroll){var e=Math.round(a.view.h/2);d<-e?d=-e:d>a.page.maxh+e&&(d=a.page.maxh+e)}a.cursorfreezed=!1;e=a.getScrollTop(!0);if(0>d&&0>=e)return a.noticeCursor();if(d>a.page.maxh&&e>=a.page.maxh)return a.checkContentSize(),a.noticeCursor();a.doScrollTop(d)};this.doScrollLeftBy=function(b,c){var d=0,d=c?Math.floor((a.scroll.x-b)*a.scrollratio.x):(a.timer?a.newscrollx:a.getScrollLeft(!0))-b;if(a.bouncescroll){var e=Math.round(a.view.w/2);d<-e?d=-e:d>a.page.maxw+e&&(d=a.page.maxw+
e)}a.cursorfreezed=!1;e=a.getScrollLeft(!0);if(0>d&&0>=e||d>a.page.maxw&&e>=a.page.maxw)return a.noticeCursor();a.doScrollLeft(d)};this.doScrollTo=function(b,c){a.cursorfreezed=!1;a.doScrollTop(b)};this.checkContentSize=function(){var b=a.getContentSize();b.h==a.page.h&&b.w==a.page.w||a.resize(!1,b)};a.onscroll=function(b){a.rail.drag||a.cursorfreezed||a.synched("scroll",function(){a.scroll.y=Math.round(a.getScrollTop()*(1/a.scrollratio.y));a.railh&&(a.scroll.x=Math.round(a.getScrollLeft()*(1/a.scrollratio.x)));
a.noticeCursor()})};a.bind(a.docscroll,"scroll",a.onscroll);this.doZoomIn=function(b){if(!a.zoomactive){a.zoomactive=!0;a.zoomrestore={style:{}};var c="position top left zIndex backgroundColor marginTop marginBottom marginLeft marginRight".split(" "),d=a.win[0].style,k;for(k in c){var h=c[k];a.zoomrestore.style[h]=void 0!==d[h]?d[h]:""}a.zoomrestore.style.width=a.win.css("width");a.zoomrestore.style.height=a.win.css("height");a.zoomrestore.padding={w:a.win.outerWidth()-a.win.width(),h:a.win.outerHeight()-
a.win.height()};e.isios4&&(a.zoomrestore.scrollTop=f(window).scrollTop(),f(window).scrollTop(0));a.win.css({position:e.isios4?"absolute":"fixed",top:0,left:0,zIndex:A+100,margin:0});c=a.win.css("backgroundColor");(""==c||/transparent|rgba\(0, 0, 0, 0\)|rgba\(0,0,0,0\)/.test(c))&&a.win.css("backgroundColor","#fff");a.rail.css({zIndex:A+101});a.zoom.css({zIndex:A+102});a.zoom.css("backgroundPosition","0px -18px");a.resizeZoom();a.onzoomin&&a.onzoomin.call(a);return a.cancelEvent(b)}};this.doZoomOut=
function(b){if(a.zoomactive)return a.zoomactive=!1,a.win.css("margin",""),a.win.css(a.zoomrestore.style),e.isios4&&f(window).scrollTop(a.zoomrestore.scrollTop),a.rail.css({"z-index":a.zindex}),a.zoom.css({"z-index":a.zindex}),a.zoomrestore=!1,a.zoom.css("backgroundPosition","0px 0px"),a.onResize(),a.onzoomout&&a.onzoomout.call(a),a.cancelEvent(b)};this.doZoom=function(b){return a.zoomactive?a.doZoomOut(b):a.doZoomIn(b)};this.resizeZoom=function(){if(a.zoomactive){var b=a.getScrollTop();a.win.css({width:f(window).width()-
a.zoomrestore.padding.w+"px",height:f(window).height()-a.zoomrestore.padding.h+"px"});a.onResize();a.setScrollTop(Math.min(a.page.maxh,b))}};this.init();f.nicescroll.push(this)},M=function(f){var c=this;this.nc=f;this.steptime=this.lasttime=this.speedy=this.speedx=this.lasty=this.lastx=0;this.snapy=this.snapx=!1;this.demuly=this.demulx=0;this.lastscrolly=this.lastscrollx=-1;this.timer=this.chky=this.chkx=0;this.time=function(){return+new Date};this.reset=function(f,h){c.stop();var d=c.time();c.steptime=
0;c.lasttime=d;c.speedx=0;c.speedy=0;c.lastx=f;c.lasty=h;c.lastscrollx=-1;c.lastscrolly=-1};this.update=function(f,h){var d=c.time();c.steptime=d-c.lasttime;c.lasttime=d;var d=h-c.lasty,q=f-c.lastx,t=c.nc.getScrollTop(),a=c.nc.getScrollLeft(),t=t+d,a=a+q;c.snapx=0>a||a>c.nc.page.maxw;c.snapy=0>t||t>c.nc.page.maxh;c.speedx=q;c.speedy=d;c.lastx=f;c.lasty=h};this.stop=function(){c.nc.unsynched("domomentum2d");c.timer&&clearTimeout(c.timer);c.timer=0;c.lastscrollx=-1;c.lastscrolly=-1};this.doSnapy=function(f,
h){var d=!1;0>h?(h=0,d=!0):h>c.nc.page.maxh&&(h=c.nc.page.maxh,d=!0);0>f?(f=0,d=!0):f>c.nc.page.maxw&&(f=c.nc.page.maxw,d=!0);d?c.nc.doScrollPos(f,h,c.nc.opt.snapbackspeed):c.nc.triggerScrollEnd()};this.doMomentum=function(f){var h=c.time(),d=f?h+f:c.lasttime;f=c.nc.getScrollLeft();var q=c.nc.getScrollTop(),t=c.nc.page.maxh,a=c.nc.page.maxw;c.speedx=0<a?Math.min(60,c.speedx):0;c.speedy=0<t?Math.min(60,c.speedy):0;d=d&&60>=h-d;if(0>q||q>t||0>f||f>a)d=!1;f=c.speedx&&d?c.speedx:!1;if(c.speedy&&d&&c.speedy||
f){var r=Math.max(16,c.steptime);50<r&&(f=r/50,c.speedx*=f,c.speedy*=f,r=50);c.demulxy=0;c.lastscrollx=c.nc.getScrollLeft();c.chkx=c.lastscrollx;c.lastscrolly=c.nc.getScrollTop();c.chky=c.lastscrolly;var p=c.lastscrollx,e=c.lastscrolly,v=function(){var d=600<c.time()-h?.04:.02;c.speedx&&(p=Math.floor(c.lastscrollx-c.speedx*(1-c.demulxy)),c.lastscrollx=p,0>p||p>a)&&(d=.1);c.speedy&&(e=Math.floor(c.lastscrolly-c.speedy*(1-c.demulxy)),c.lastscrolly=e,0>e||e>t)&&(d=.1);c.demulxy=Math.min(1,c.demulxy+
d);c.nc.synched("domomentum2d",function(){c.speedx&&(c.nc.getScrollLeft(),c.chkx=p,c.nc.setScrollLeft(p));c.speedy&&(c.nc.getScrollTop(),c.chky=e,c.nc.setScrollTop(e));c.timer||(c.nc.hideCursor(),c.doSnapy(p,e))});1>c.demulxy?c.timer=setTimeout(v,r):(c.stop(),c.nc.hideCursor(),c.doSnapy(p,e))};v()}else c.doSnapy(c.nc.getScrollLeft(),c.nc.getScrollTop())}},y=f.fn.scrollTop;f.cssHooks.pageYOffset={get:function(h,c,k){return(c=f.data(h,"__nicescroll")||!1)&&c.ishwscroll?c.getScrollTop():y.call(h)},set:function(h,
c){var k=f.data(h,"__nicescroll")||!1;k&&k.ishwscroll?k.setScrollTop(parseInt(c)):y.call(h,c);return this}};f.fn.scrollTop=function(h){if(void 0===h){var c=this[0]?f.data(this[0],"__nicescroll")||!1:!1;return c&&c.ishwscroll?c.getScrollTop():y.call(this)}return this.each(function(){var c=f.data(this,"__nicescroll")||!1;c&&c.ishwscroll?c.setScrollTop(parseInt(h)):y.call(f(this),h)})};var z=f.fn.scrollLeft;f.cssHooks.pageXOffset={get:function(h,c,k){return(c=f.data(h,"__nicescroll")||!1)&&c.ishwscroll?
c.getScrollLeft():z.call(h)},set:function(h,c){var k=f.data(h,"__nicescroll")||!1;k&&k.ishwscroll?k.setScrollLeft(parseInt(c)):z.call(h,c);return this}};f.fn.scrollLeft=function(h){if(void 0===h){var c=this[0]?f.data(this[0],"__nicescroll")||!1:!1;return c&&c.ishwscroll?c.getScrollLeft():z.call(this)}return this.each(function(){var c=f.data(this,"__nicescroll")||!1;c&&c.ishwscroll?c.setScrollLeft(parseInt(h)):z.call(f(this),h)})};var E=function(h){var c=this;this.length=0;this.name="nicescrollarray";
this.each=function(d){f.each(c,d);return c};this.push=function(d){c[c.length]=d;c.length++};this.eq=function(d){return c[d]};if(h)for(var k=0;k<h.length;k++){var l=f.data(h[k],"__nicescroll")||!1;l&&(this[this.length]=l,this.length++)}return this};(function(f,c,k){for(var l=0;l<c.length;l++)k(f,c[l])})(E.prototype,"show hide toggle onResize resize remove stop doScrollPos".split(" "),function(f,c){f[c]=function(){var f=arguments;return this.each(function(){this[c].apply(this,f)})}});f.fn.getNiceScroll=
function(h){return void 0===h?new E(this):this[h]&&f.data(this[h],"__nicescroll")||!1};f.expr[":"].nicescroll=function(h){return void 0!==f.data(h,"__nicescroll")};f.fn.niceScroll=function(h,c){void 0!==c||"object"!=typeof h||"jquery"in h||(c=h,h=!1);c=f.extend({},c);var k=new E;void 0===c&&(c={});h&&(c.doc=f(h),c.win=f(this));var l=!("doc"in c);l||"win"in c||(c.win=f(this));this.each(function(){var d=f(this).data("__nicescroll")||!1;d||(c.doc=l?f(this):c.doc,d=new S(c,f(this)),f(this).data("__nicescroll",
d));k.push(d)});return 1==k.length?k[0]:k};window.NiceScroll={getjQuery:function(){return f}};f.nicescroll||(f.nicescroll=new E,f.nicescroll.options=K)});;
(function(b){b.gritter={};b.gritter.options={position:"",class_name:"",fade_in_speed:"medium",fade_out_speed:1000,time:1000};b.gritter.add=function(f){try{return a.add(f||{})}catch(d){var c="Gritter Error: "+d;(typeof(console)!="undefined"&&console.error)?console.error(c,f):alert(c)}};b.gritter.remove=function(d,c){a.removeSpecific(d,c||{})};b.gritter.removeAll=function(c){a.stop(c||{})};var a={position:"",fade_in_speed:"",fade_out_speed:"",time:"",_custom_timer:0,_item_count:0,_is_setup:0,_tpl_close:'<a class="gritter-close" href="#" tabindex="1">Close Notification</a>',_tpl_title:'<span class="gritter-title">[[title]]</span>',_tpl_item:'<div id="gritter-item-[[number]]" class="gritter-item-wrapper [[item_class]]" style="display:none" role="alert"><div class="gritter-top"></div><div class="gritter-item">[[close]][[image]]<div class="[[class_name]]">[[title]]<p>[[text]]</p></div><div style="clear:both"></div></div><div class="gritter-bottom"></div></div>',_tpl_wrap:'<div id="gritter-notice-wrapper"></div>',add:function(g){if(typeof(g)=="string"){g={text:g}}if(g.text===null){throw'You must supply "text" parameter.'}if(!this._is_setup){this._runSetup()}var k=g.title,n=g.text,e=g.image||"",l=g.sticky||false,m=g.class_name||b.gritter.options.class_name,j=b.gritter.options.position,d=g.time||"";this._verifyWrapper();this._item_count++;var f=this._item_count,i=this._tpl_item;b(["before_open","after_open","before_close","after_close"]).each(function(p,q){a["_"+q+"_"+f]=(b.isFunction(g[q]))?g[q]:function(){}});this._custom_timer=0;if(d){this._custom_timer=d}var c=(e!="")?'<img src="'+e+'" class="gritter-image" />':"",h=(e!="")?"gritter-with-image":"gritter-without-image";if(k){k=this._str_replace("[[title]]",k,this._tpl_title)}else{k=""}i=this._str_replace(["[[title]]","[[text]]","[[close]]","[[image]]","[[number]]","[[class_name]]","[[item_class]]"],[k,n,this._tpl_close,c,this._item_count,h,m],i);if(this["_before_open_"+f]()===false){return false}b("#gritter-notice-wrapper").addClass(j).append(i);var o=b("#gritter-item-"+this._item_count);o.fadeIn(this.fade_in_speed,function(){a["_after_open_"+f](b(this))});if(!l){this._setFadeTimer(o,f)}b(o).bind("mouseenter mouseleave",function(p){if(p.type=="mouseenter"){if(!l){a._restoreItemIfFading(b(this),f)}}else{if(!l){a._setFadeTimer(b(this),f)}}a._hoverState(b(this),p.type)});b(o).find(".gritter-close").click(function(){a.removeSpecific(f,{},null,true);return false;});return f},_countRemoveWrapper:function(c,d,f){d.remove();this["_after_close_"+c](d,f);if(b(".gritter-item-wrapper").length==0){b("#gritter-notice-wrapper").remove()}},_fade:function(g,d,j,f){var j=j||{},i=(typeof(j.fade)!="undefined")?j.fade:true,c=j.speed||this.fade_out_speed,h=f;this["_before_close_"+d](g,h);if(f){g.unbind("mouseenter mouseleave")}if(i){g.animate({opacity:0},c,function(){g.animate({height:0},300,function(){a._countRemoveWrapper(d,g,h)})})}else{this._countRemoveWrapper(d,g)}},_hoverState:function(d,c){if(c=="mouseenter"){d.addClass("hover");d.find(".gritter-close").show()}else{d.removeClass("hover");d.find(".gritter-close").hide()}},removeSpecific:function(c,g,f,d){if(!f){var f=b("#gritter-item-"+c)}this._fade(f,c,g||{},d)},_restoreItemIfFading:function(d,c){clearTimeout(this["_int_id_"+c]);d.stop().css({opacity:"",height:""})},_runSetup:function(){for(opt in b.gritter.options){this[opt]=b.gritter.options[opt]}this._is_setup=1},_setFadeTimer:function(f,d){var c=(this._custom_timer)?this._custom_timer:this.time;this["_int_id_"+d]=setTimeout(function(){a._fade(f,d)},c)},stop:function(e){var c=(b.isFunction(e.before_close))?e.before_close:function(){};var f=(b.isFunction(e.after_close))?e.after_close:function(){};var d=b("#gritter-notice-wrapper");c(d);d.fadeOut(function(){b(this).remove();f()})},_str_replace:function(v,e,o,n){var k=0,h=0,t="",m="",g=0,q=0,l=[].concat(v),c=[].concat(e),u=o,d=c instanceof Array,p=u instanceof Array;u=[].concat(u);if(n){this.window[n]=0}for(k=0,g=u.length;k<g;k++){if(u[k]===""){continue}for(h=0,q=l.length;h<q;h++){t=u[k]+"";m=d?(c[h]!==undefined?c[h]:""):c[0];u[k]=(t).split(l[h]).join(m);if(n&&u[k]!==t){this.window[n]+=(t.length-u[k].length)/l[h].length}}}return p?u:u[0]},_verifyWrapper:function(){if(b("#gritter-notice-wrapper").length==0){b("body").append(this._tpl_wrap)}}}})(jQuery);
;
jQuery.extend({
    ListView: {
        Element: null,
        ViewContext: {},
        Actions: {},
        Headers: {},
        Properties: {},
        AjaxUrl: "/App/OnAction/",
        SheetUrl: "/Form/DefaultSheet/",

        ListViewDisplayMode: {
            /// 列表模式
            List: 0,
            /// 日历模式
            Calendar: 1,
            ///时间轴模式
            Timeline: 2
        },
        SortDirection: {
            /// <summary>
            /// 升序
            /// </summary>
            Ascending: 0,
            /// <summary>
            /// 降序
            /// </summary>
            Descending: 1,
            /// <summary>
            /// 未指定
            /// </summary>
            Unspecified: 2
        },
        BizObjectStatus:
        {
            /// 草稿，对于表单来说，用户点保存，表示是草稿状态；对于流程来说，审批完成前，都是草稿状态
            Draft: 0,
            /// 审批通过
            Effective: 1,
            /// 被取消
            Canceled: 3,
            /// 进行中
            Running: 2
        },
        Action_Create: "Create",
        SearchParamsJson: "searchParamsJson",
        ScopeType: "scopeType",
        ChildSchemaCode: "ChildSchemaCode",
        PagedByApplist: "PagedByApplist",
        ///流程表单的流程状态
        WorkflowState: null,
        Action_PrintQrCode: "PrintQrCode",
        ///是否能打印二维码
        CanPrintQrCode: false
    }
});

jQuery.extend($.ListView, {
    Init: function ($el, viewContext) {
        this.Element = $el;
        var that = this;
        var handle = function (viewContext) {
            if (!viewContext.Successful) {
                var errorMsg = "";
                for (var i = 0; i < viewContext.Errors.length; i++) {

                    errorMsg += viewContext.Errors[i] + "/n";
                }
                $.IShowError({ title: "提示", msg: "出错了", detail: errorMsg });
                return;
            }
            that.ViewContext = viewContext;
            that.Actions = that.ViewContext.Actions;
            that.Headers = that.ViewContext.Columns;
            that.QueryCode = that.ViewContext.SchemaCode;
            that.LoadScriptString(that.ViewContext.Javascript);
            that.InitQueryItems(that.ViewContext.QueryItems);
            that.InitActions(that.Actions);
            that.InitFilter();
            that.ShowChildSchemaCode = "";
            that.InitBody();
            var $divserch = $("#divSearch");
            $divserch.find("input").off('input').on('input', function () { keyType = 1; });
            $divserch.find("input[type!='checkbox']").change(function () { keyType = 1; });
            var $btnImport = $("#Import");
            if (!$.isEmptyObject($btnImport)) {
                $btnImport.unbind("click").bind("click", function () {
                    ShowCheckColums(mySchemaCode);
                })
            }
            var $btnExport = $("#Export");
            if (!$.isEmptyObject($btnExport)) {
                $btnExport.unbind("click").bind("click", function () {
                    ShowExportColums(mySchemaCode);
                })
            }
        };

        if (viewContext.DebugTrack != null && viewContext.DebugTrack.DebugState == 0) {
            top.$.IPushDebugTrack(viewContext, that, handle);
        }
        else {
            handle(viewContext);
        }
    },

    //初始化过滤
    InitQueryItems: function (QueryItems) {

    },

    //初始化工具栏
    InitActions: function (Actions) {
        if (typeof (MobileCacheManager) != "undefined") {
            return;
        }
        var ActionPanelId = $.IGuid();
        this.$ActionPanel = $("<div>").attr("id", ActionPanelId).addClass("btn-toolbar").attr("role", "toolbar");
        var $BtnGroup = $("<div class='btn-group' role='group'>");
        var $MoreBtnGroup = $("<div class='btn-group more-button' role='group'>");
        var $MoreBtn = $("<button class='dropdown-toggle btn btn-default' data-toggle='dropdown'>更多</button>");
        var $MoreBtnUl = $("<ul class='dropdown-menu'>");
        if (!Actions) return;
        var actionNum = 0;
        var timeModeSupportActions = ["Create", "Import", "Export"];
        var currentMode = constName.ShowMode == "" ? this.ViewContext.DisplayMode : constName.ShowMode;
        for (var key in Actions) {
            //时间轴模式只显示"新增","导入","导出"
            if ($.inArray(key, timeModeSupportActions) == -1 && currentMode == $.ListView.ListViewDisplayMode.Timeline) {
                continue;
            }
            if (key == "PrintQrCode") { $.ListView.CanPrintQrCode = true; }

            //图标替换
            if (typeof (Actions[key].Icon) == "string") {
                if (Actions[key].Icon.trim() == "fa-qrcode") {
                    Actions[key].Icon = "icon-erweima"
                }
                else if (Actions[key].Icon.trim() == "fa-download") {
                    Actions[key].Icon = "icon-import2"
                }
                else if (Actions[key].Icon.trim() == "fa-upload") {
                    Actions[key].Icon = "icon-export2"
                }
                else if (Actions[key].Icon.trim() == "fa-times") {
                    Actions[key].Icon = "icon-remove2"
                }
                else if (Actions[key].Icon.trim() == "fa-plus") {
                    Actions[key].Icon = "icon-dian"
                }
            } else {
                Actions[key].Icon = "";
            }

            actionNum++;
            var $Button;
            if (actionNum > 5) {
                //添加更多按钮
                $MoreBtnUl.append('<li><a id="' + key + '"><i class="fa ' + Actions[key].Icon + ' mr5"></i>' + Actions[key].Text + '</a></li>');
            } else {
                //直接显示的按钮
                $Button = $("<div>").addClass("btn btn-default")
                    .attr("id", key)
                    .append("<i class='fa " + Actions[key].Icon + " mr5'></i>" + Actions[key].Text);
                $BtnGroup.append($Button);
                $Button.click(this, function (e) {
                    e.data.DoAction.apply(e.data, [$(this).attr("id")]);
                    e.stopPropagation();
                    $.HideAllPopup();
                    return false;
                });
            }
        }
        if (actionNum > 5) {
            $MoreBtnGroup.append($MoreBtn).append($MoreBtnUl);
            $BtnGroup.append($MoreBtnGroup);
        }

        $(this.Element).append(this.$ActionPanel.append($BtnGroup));
        $MoreBtnUl.on("click", "li>a", this, function (e) {
            var action = $(this).attr("id");
            if (action != "Import" && action != "Export") {
                e.data.DoAction.apply(e.data, [action]);
                e.stopPropagation();
                return false;
            }
        })
    },

    InitFilter: function () {
        if (typeof (MobileCacheManager) != "undefined") {
            return;
        }
        $("#myfilter").hide();
        $("#divSearch").hide();
        $("#mychildschemacode").hide();
        this.$ActionPanel.append($("#myMode"));
        this.$ActionPanel.append($("#myfilter"));
        this.$ActionPanel.append($("#mychildschemacode"));

        if ($("#divSearch").length > 0) {
            $(this.Element).append($("#divSearch"));
            $(this.Element).append($("#myMore"));
            var $divserch = $("#divSearch").addClass("backgroundcolor");
            $("#divSearch").show();
            $("#myMore").show();
        }
        //模式切换
        $("#myMode").show();
        var DisplayMode = $("#toggleMode").val();
        //主表子表
        if (DisplayMode == ListViewDisplayMode.List) {
            if ($("#showchildschemacode").children("option").length > 1) {
                $("#mychildschemacode").show();
            }
        }
        //权限相关，我的，我部门的。。。
        if ($("#scopeType").children("option").length > 1) {
            $("#myfilter").show();
        }

        SetFilterToolTip();
        ////处理过滤条件filter-text
        //$("#ListView").find(".filter-text").off("mouseenter.filtertext").on("mouseenter.filtertext", function () {
        //    var clientWidth = this.clientWidth;
        //    var scrollWidth = this.scrollWidth;
        //    if (clientWidth < scrollWidth) {
        //        var $that = $(this);
        //        var tooltipText = this.innerText;
        //        var offset = $that.offset();
        //        $tableTip.text(tooltipText).css({
        //            left: offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft() - 120,
        //            bottom: $(window).height() - offset.top + 6 + $(window).scrollTop() - 35
        //        }).toggle();
        //        return false;
        //    }
        //});

        //$("#ListView").find(".filter-text").off("mouseleave.filtertext").on("mouseleave.filtertext", function () {
        //    $tableTip && $tableTip.hide();
        //});
    },

    LoadScriptString: function (code) {
        if (code == null || code == "") return;
        var myScript = document.createElement("script");
        myScript.type = "text/javascript";
        try {
            myScript.appendChild(document.createTextNode(code));
        }
        catch (ex) {
            myScript.text = code;
        }
        document.body.appendChild(myScript);
    },

    //工具栏点击事件
    DoAction: function (ActionName) {
        var response = {};
        if ($.isFunction($.ListView.ActionPreDo)) {
            var preDoResult = $.ListView.ActionPreDo.apply(this, [ActionName, response]);
            if (preDoResult != void 0 && !preDoResult) {
                return;
            }
        }

        switch (ActionName) {
            case "Create":
                this.Create.apply(this, [response]);
                break;
            case "Remove":
                this.Remove.apply(this, [response]);
                break;
            case "PrintQrCode":
                this.PrintQrCode.apply(this, [response]);
                break;
            default:
                if (ActionName != void 0 && ActionName != "") {
                    var that = this;
                    var rows = this.GetSelected();
                    var ids = [];
                    if (rows && rows.length > 0) {
                        for (var i = 0, len = rows.length; i < len; i++) {
                            ids.push(rows[i].ObjectId);
                        }
                    }

                    that.Post(ActionName,
                        $.extend({ QueryCode: that.QueryCode, ObjectIds: JSON.stringify(ids) }, response),
                        function (result) {
                            if (result.Successful) {
                                that.RefreshView.apply(that);
                            }
                            else {
                                //当有返回错误提示信息时，优先显示提示信息
                                if (result.Errors.length > 0) {
                                    $.IShowError(result.Errors[0]);
                                }
                                else {
                                    $.IShowError("失败!");
                                }
                            }

                            if (result.Message != null && result.Message.length > 0) {
                                $.IShowTip(result.Message);
                            }
                        });
                }
                break;
        }
    },

    Create: function (response) {
        var sheetUrl = this.SheetUrl + "?SchemaCode=" + this.QueryCode;
        top.$.ISideModal.Show(sheetUrl, this.ViewContext.DisplayName, response, null, null, null, self);
    },

    Remove: function (response) {
        var that = this;
        if (!this.ViewContext.Selectable) {
            $.IShowWarn("提示", "请联系管理员，开启批量选择");
            return;
        }
        var Rows = this.GetSelected();
        if (Rows.length == 0) {
            $.IShowWarn("提示", "没有选中任何行");
            return;
        }
        $.IConfirm("提示", "<span>选中" + Rows.length + "行数据,删除后将无法恢复,确定删除?</span>", function (isTrue) {
            if (isTrue) {
                var ids = Array();
                for (var i = 0; i < Rows.length; i++) {
                    ids.push(Rows[i].ObjectId);
                }

                //that.TimeOut = setTimeout(function () {
                //    that.ShowHappyLoading();
                //}, 1500);
                that.Post(
                    "Remove",
                    $.extend({ QueryCode: that.QueryCode, ObjectIds: JSON.stringify(ids) }, response),
                    function (result) {
                        //that.HideHappyLoading();
                        //that.TimeOut && window.clearTimeout(that.TimeOut);

                        if (result.Successful) {
                            that.RefreshView.apply(that);
                        }
                        else {
                            if (result.Refresh) {
                                that.RefreshView.apply(that);
                            }
                            var message = "删除失败!";
                            if (result.Errors && result.Errors.length > 0) {
                                message = result.Errors[0];
                            }
                            $.IShowWarn(message);
                        }
                    });
            }
        });
    },

    ShowHappyLoading: function () {
        var random = Math.floor(Math.random() * 2);
        var infos = ["系统正在玩命儿执行您的旨意", "阿里云正在计算那些无法计算的价值"];
        $("#modal_loading .loading-info").text(infos[random]);
        var cls = ["cutie", "bugme", "wastelife"];
        random = Math.floor(Math.random() * 3);
        $("#modal_loading .loading-image").addClass(cls[random]);

        this.loadingModal = new $.IModal({
            Title: '配置向导',
            Height: '400px',
            Width: '400px',
            Type: 0,
            Class: 'modal_loading_dialog',
            ShowHeader: false,
            ShowFooter: false,
            Content: $('#modal_loading'),
            OnShowCallback: function () {
                var timeSpan = $("#modal_loading .loading-time>span");
                var time = 0;
                setInterval(function () {
                    timeSpan.text(++time);
                    if (time % 5 == 0) {
                        var $img = $("#modal_loading .loading-image");
                        for (var i = 0; i < cls.length; i++) {
                            if ($img.hasClass(cls[i])) {
                                $img.removeClass(cls[i]);
                                if (i == cls.length - 1) {
                                    i = -1;
                                }
                                $img.addClass(cls[i + 1]);
                                break;
                            }
                        }
                    }
                }, 1000);
            },
            OnHiddenCallback: function () { }
        });
    },
    HideHappyLoading: function () {
        if (this.loadingModal) {
            this.loadingModal.hide();
        }
    },

    PrintQrCode: function (response) {
        var that = this;
        if (!this.ViewContext.Selectable) {
            $.IShowWarn("提示", "请联系管理员，开启批量选择");
            return;
        }
        var Rows = this.GetSelected();
        if (Rows.length == 0) {
            $.IShowWarn("提示", "没有选中任何行");
            return;
        }
        if (Rows.length > 50) {
            $.IShowWarn("提示", "打印二维码个数请一次不要超过50个");
            return;
        }
        var ids = Array();
        for (var i = 0; i < Rows.length; i++) {
            ids.push(Rows[i].ObjectId);
        }
        var dataUrl = "/Form/OnAction";
        ////生成二维码页面内容
        var $contentContainer = $("<div></div>")
        var $newContent = $('<div class="container-fluid sheet_container" style="padding-left:20;padding-right:0;margin-top:15px;">');//新的容器
        $contentContainer.append($newContent);
        //
        var isTest = false;
        var printWindow = window.parent.open('/Form/Print/');

        var userAgent = navigator.userAgent;
        var isIE = userAgent.indexOf("MSIE") > -1 || userAgent.indexOf("Edge") > -1
            || (userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv") > -1);

        printWindow.document.write('<link href="/Content/bootstrap.min.css" rel="stylesheet">');
        printWindow.document.write('<link href="/Content/print.css" rel="stylesheet">');
        printWindow.document.write('<script src="../../Scripts/jquery-1.10.2.min.js"></script>');
        printWindow.document.write('<script src="../../Scripts/plugins/qrCode/jquery.qrcode.min.js"></script>');

        if (isIE) {
            printWindow.document.write('<link href="../../Scripts/Plugins/jquery-print-preview/css/print-preview.css" rel="stylesheet" />');
            printWindow.document.write('<script src="../../Scripts/plugins/jquery-print-preview/jquery.print-preview.js"></script>');
        }

        var paramData = { ActionName: "GetBizObjectsForQrCode", SchemaCode: that.QueryCode, ObjectIds: ids.join(";") }
        var row;
        var title = "";
        $.ajax({
            type: "POST",
            url: dataUrl,
            data: { PostData: JSON.stringify(paramData) },
            dataType: "json",
            async: false,
            success: function (data) {
                if (data && data.ReturnData.Items.length > 0) {
                    title = data.ReturnData.Items[0].Title;
                    $.each(data.ReturnData.Items, function (index, item) {

                        var bizObjectId = item.ObjectId;
                        var schemaCode = item.SchemaCode;
                        var name = item.Name;
                        if (name == undefined || name == null) {
                            name = "";
                        }
                        var summary = item.Summary;
                        var hostAddress = item.HostAddress;
                        // isTest = item.IsTest;
                        var corpId = item.CorpId;
                        var agentId = item.AgentId;
                        var isISV = item.IsISV;
                        var suiteKey = item.SuiteKey;
                        var enableAssociation = item.EnableAssociation;
                        var sheetUrl = hostAddress + "/Mobile/?";
                        sheetUrl += 'CorpId=' + corpId + '&sc=' + schemaCode + '&bo=' + bizObjectId + '&mt=Task';
                        if (suiteKey) {
                            sheetUrl += '&IsIsv=1&sk=' + suiteKey;
                        } else {
                            sheetUrl += '&ai=' + agentId;
                        }
                        if (enableAssociation == "1") {
                            sheetUrl += '&ao=1';
                        }
                        if ((index + 1) % 15 == 0) {
                            var pagebreak = $("<div style='page-break-after:always;'></div>");
                            $newContent.append(pagebreak);
                            var pageMargin = $('<div style="height:80px" class="noprint"></div>');
                            $newContent.append(pageMargin);
                        }

                        if (index == 0) {
                            var pageMargin = $('<div style="height:80px"></div>');
                            $newContent.append(pageMargin);
                        }
                        if (index % 3 == 0) {

                            row = $('<div class="row sheet-control form-group"></div>');
                            $newContent.append(row);
                        }

                        //name显示不超过30个字符
                        if (name == undefined) {
                            name = "";
                        }
                        if (name.length > 30) {
                            name = name.substr(0, 30);
                        }
                        row.append('<div class="col-sm-4 col-xs-4 col-md-4"><div class="row"><div class ="col-sm-4 col-xs-4 col-md-4" style="padding:5" ><p style="word-wrap:break-word;margin-left:10px;">' + name + '</p></div><div class ="col-sm-8 col-xs-8 col-md-8 qrCodeContainer" style="padding:5px;" data-url="' + sheetUrl + '" ></div></div>');
                    })
                }

                printWindow.document.write($contentContainer.html());
                printWindow.document.write('<title>' + title + '</title>');

                if (isIE) {
                    printWindow.document.write('<script>$("div.qrCodeContainer").each(function(){var qrCodeUrl = $(this).attr("data-url");$(this).qrcode({width:150,height:150,text:qrCodeUrl});});setTimeout(function(){$.printPreview.loadPrintPreview();},100)</script>');
                } else {
                    printWindow.document.write('<script>$("div.qrCodeContainer").each(function(){var qrCodeUrl = $(this).attr("data-url");$(this).qrcode({width:150,height:150,text:qrCodeUrl});});</script>');
                    printWindow.document.write('<script>setTimeout(function(){window.print();},50)</script>');
                    if (userAgent.indexOf('Firefox') > -1) {
                        printWindow.print();
                    }
                    //关闭打印页面（不管是点击“打印”还是“取消”，点击后2s自动关闭打印页面）
                    //需要注意页面关闭后打印是否继续？如果window关闭了仍然可以打印则可以将关闭页面时间缩短
                    var close = '<script>setTimeout("window.close()",100)</script>';
                    printWindow.document.write(close);
                }



                return;
            },
            error: function (err) { }
        });
        return;
    },

    InitBody: function () { },

    GetSelected: function () {
        return [];
    },

    RefreshView: function () {

    },

    RefreshViewIncludeHeader: function () {

    },

    GetResetHeight: function () {
        try {
            var bodyHeight = $(window).height() - $(this.$Table.parent()).offset().top - 40;
            $(this.$Table.parent()).height(bodyHeight);
        } catch (e) { }
    },

    DebugLog: function (logs) {
        if (logs != null) {
            for (var i = 0; i < logs.length; i++) {
                console.log(logs[i]);
            }
        }
    },

    Post: function (action, data, callback, errorhandler) {
        var that = this;
        var paramData = $.extend({ Command: action, ActionName: "DoAction", QueryCode: this.QueryCode }, data);
        $.ajax({
            type: "POST",
            url: this.AjaxUrl,
            data: { PostData: JSON.stringify(paramData) },
            dataType: "json",
            success: function (data) {
                data = data.ReturnData.Response;
                that.DebugLog(data.DebugLogs);
                var handle = function (d) {
                    if ($.isFunction(callback)) {
                        callback.apply(this, [d]);
                    }
                };

                //Debugging = 0,
                //Exceptional = 1,
                //Finished = 2
                if (data.DebugTrack != null && data.DebugTrack.DebugState == 0) {
                    $.IPushDebugTrack(data, that, handle);
                }
                else {
                    handle(data);
                }
            },
            error: errorhandler
        });
    }
});;
var ModImportFirstContentResult;
var ModImportFirst;
// 导入选择匹配字段新增页面
var ModImportSelectMatchContentResult;
var ModImportSelectMatch;
var ModImportSecondContentResult;
var ModImportSecond;
var ModImportThirdContentResult;
var ModImportThird;
var ModImportFourthContentResult;
var ModImportFourth;
var ImportFileType = ''; //文件后缀名
var ImportGuid;
var ImportInterval;
var pauseImportExport = false; //切换模式导致导入暂停

var ModExportFirstContentResult;
var ModExportFirst;
var ModExportSecondContentResult;
var ModExportSecond;

var ImportExportProcess = 0;
//上传文件时的配置
var option = {
    success: HandelSuccess,
    error: HandelError,
    url: '/ExcelImport/OnAction',
    type: 'post',
    uploadProgress: function (event, position, total, percentComplete) {
        $('#process1 .progress-bar').addClass('progress-bar-ing');
        $('#process .progress-bar-inner').css('width', percentComplete + '%');
        $('#processtext1').html('<div style="padding-top:1.5px;">文件上传(' + percentComplete + '%)</div>');
        if (percentComplete == 100) {
            $('#process1 .progress-bar')
                .removeClass('progress-bar-ing')
                .addClass('progress-bar-ok');
            $('#processtext1').html('<div style="padding-top:1.5px;">文件上传(完成)</div>').css('color', 'rgba(0,0,0,.45)');
            $('#processtext1').prepend("<span class='ok'></span>");
        }
    }
};
var ExportGuid;
var $topbody = $(top.document.body);

//导入
var mod1;
var modselect2;
var mod2;
var mod3;
var mod4;
//导出
var mod5;

var modMini; //迷你modal
var modFull; //全屏modal，只针对在线编辑
$tableTip = $('.table-tip');//tip框

var ImportListExcelRow; //在线修改时的错误对象
var HasSeqNo = false;
var IsUpdate = false;  //新增 or更新导入
var IsWorkflow = true;//是否为流程表单
var SchemaCode = '';   // 应用id
var AppName = '';      // 应用name
var importTitle = '';//导入方式name
var importErrorClass = 'import-alert aufont icon-base-close-circle';
var importMoadlClass = ' import-export-modal import-modal';
var closeTipText = '关闭对话框';      //关闭按钮 hover 提示文字
var nextTipText = '请先选择文件';       //下一步按钮 hover 提示文字
var MatchField = 'Name';   //默认匹配字段
var ImportNoInitNum = 0;  //必填项为初始化的个数，标识是否可以进行下一步，只计算选人和关联字段
var needClearCache = true;
var switchMode;//导入方式切换回调
var importProcessFlag = false;//是否开始导入
// TODO 导入、导出在终止、完成后要清楚缓存（包括页面关闭，刷新）
/**
 * 导入
 */
//导入入口
var internetInterval;//断网判断
function ShowCheckColums(Code) {
    if (modMini && !pauseImportExport) {
        showImportError('系统正在导入或导出数据，请导入或导出完成后再点击');
        return false;
    }
    IsUpdate = false;
    SchemaCode = Code;
    pauseImportExport = false;
    ImportExportProcess = 0;
    ImportNoInitNum = 0;
    closeTipText = '关闭对话框';
    nextTipText = '请先选择文件';
    importTitle = '新增导入';
    try {
        var index = window.document.title.indexOf('-') + 1;
        AppName = window.document.title.slice(index).trim();
    } catch (e) { }

    var columnType = '0'; //0:导入;1:导出;
    var datas = {};
    datas['SchemaCode'] = Code;
    datas['ActionName'] = 'GetSchemaSeqNoAndName';
    datas['IsUpdate'] = 'true';
    datas = { PostData: JSON.stringify(datas) };
    $.ajax({
        data: datas,
        datatype: 'json',
        type: 'POST',
        url: '/ExcelImport/OnAction',
        async: true,
        success: function (result) {
            if (result.Successful) {
                var data = result.ReturnData.Result;
                HasSeqNo = data.HasSeqNo;
                IsWorkflow = data.IsWorkflow;
                ModImportFirstContentResult = ModImportFirstContent(Code);
                ModImportFirstBuild(Code);

                //导入方式切换
                switchMode = function (e) {
                    pauseImportExport = true;
                    nextTipText = '请先选择文件';
                    mod1.find('.myuploada span').html('选择文件');
                    var target = $(e.target);
                    var $importdownload = mod1.find('.importdownload');
                    var $upLoadForm = mod1.find('#upLoadForm');
                    ModImportFirstReInit();
                    mod1.find('.chooseimport').removeClass('choosed');
                    target.addClass('choosed');
                    mod1.find('.modal-header .modal-title .title').html(target.text());
                    if (target.attr('target') == '#updateImport') {
                        $importdownload.hide();
                        $upLoadForm.css('height', '28px');
                    } else {
                        $importdownload.show();
                        $upLoadForm.css('height', '0');
                    }
                    target.parent().nextAll('.choosedbody').each(function () {
                        $(this).addClass('hidebody');
                    });
                    $(target.attr('target')).removeClass('hidebody');
                    if (target.attr('target').indexOf('add') > 0) {
                        IsUpdate = false;
                        importTitle = '新增导入';
                    } else {
                        IsUpdate = true;
                        importTitle = '更新导入';
                    }
                    if (HasSeqNo) {
                        //更新头部
                        var html = GetHeaderHtml(1);
                        $("#importfirst").find('.importheader').remove();
                        $(html).insertBefore($("#importfirst").find('.importbody'));
                    }
                    //删除已选择文件
                    var file = mod1.find('#fileNameUpload')[0];
                    var ie = navigator.appVersion.indexOf('MSIE') != -1;
                    if (ie) {
                        var file2 = file.cloneNode(false);
                        file2.onchange = file.onchange;
                        file.parentNode.replaceChild(file2, file);
                    } else {
                        $(file).val('');
                    }
                    mod1.find('#myfilename').html('');
                }

            } else {
                !pauseImportExport && showImportError(result.ErrorMessage);
            }
        }
    });

    //页面关闭刷新清除缓存
    $(window).bind('beforeunload', function () {
        if (needClearCache) {
            ImportOver();
        }
    });
}
//上传文件 --支持IE浏览器
function fileSelectedNew() {
    ModImportFirstReInit();
    var file = null;
    var name = null;
    var size = 0;

    var unit = 'k';
    if (!(window.File && window.FileList && window.Blob)) {
        file = mod1.find('#fileNameUpload')[0];
        if ($.isEmptyObject(file) && !pauseImportExport) {
            showImportError('请选择文件');
            return false;
        }
        name = file.value;
        name = name.substring(name.lastIndexOf('\\') + 1, name.length);
    } else {
        file = mod1.find('#fileNameUpload')[0].files[0];
        if ($.isEmptyObject(file) && !pauseImportExport) {
            showImportError('请选择文件');
            return false;
        }
        name = file.name;
    }

    pauseImportExport = false;
    closeTipText = '关闭对话框将终止上传';
    nextTipText = '等待上传...';

    var arrays = name.split('.');
    ImportFileType = arrays[arrays.length - 1];
    if (ImportFileType != 'xls' && ImportFileType != 'xlsx' && !pauseImportExport) {
        showImportError('文件格式错误,请上传.xls或.xlsx文件');
        return false;
    }
    size = Math.ceil(file.size / 1024);  //kb

    if (size > 1024) {
        size = Math.ceil(size / 1024);
        unit = 'm';
    }
    if (name.length > 40) {
        var name1 = name.substring(0, 25);
        var name2 = name.substring(name.length - 10);
        name = name1 + ' ... ' + name2;
    }

    name += '&nbsp; &nbsp; &nbsp; &nbsp;' + size + unit;  //kb
    ImportGuid = $.IGuid();
    var postDataJson = {
        ActionName: 'CheckDataRequired',
        SchemaCode: SchemaCode,
        FileType: ImportFileType,
        ImportGuid: ImportGuid,
        IsUpdate: IsUpdate
    };
    option['data'] = {};
    option['data']['PostData'] = JSON.stringify(postDataJson);
    // 上传文件
    mod1.find('.importbody .importdownload').css('padding-bottom', '0px');
    mod1.find('#myfilename').html(name);
    mod1.find('.myuploada span').html('更新文件');
    mod1.find('#process').removeClass('hideprocess');
    mod1.find('#updateImport').height(220).css('overflow-y', 'auto');
    mod1.find('#upLoadForm').ajaxSubmit(option);
}
//上传成功后的回调函数 --两步 1、模板校验  2、数据量校验
function HandelSuccess(JsonResult) {
    var state = JsonResult.Successful;
    var maxProcess = state ? 100 : getRandom(10, 90);
    CheckResultOne($('#process2'), state, maxProcess, $('#processtext2'));
    if (state) {
        // 进行数据量校验 ---- 确保进度条100% 再执行下一步
        setTimeout(function () {
            var nextTickInterval = setInterval(function () {
                var TemplateOK = false;
                if ($('#processtext2').text().indexOf('完成') > -1) {
                    TemplateOK = true;
                }
                if (TemplateOK) {
                    clearInterval(nextTickInterval);
                    CheckExcelEmpty(SchemaCode);
                }
                console.log('TemplateOK')
            }, 100);
        }, maxProcess * 10);
    } else {
        closeTipText = '关闭对话框';
        !pauseImportExport && showImportError(JsonResult.ErrorMessage);
    }
}
//上传失败后的回调函数
function HandelError(error) {
    if (error.status == 0) {
        !pauseImportExport && showImportError('上传失败，网络错误');
    } else {
        !pauseImportExport && showImportError('文件可能已损坏，无法上传！');
    }
    var obj = $('#process1');
    obj
        .find('.progress-bar')
        .removeClass('progress-bar-ing')
        .addClass('progress-bar-error');
    $(obj.attr('target')).html('<div style="padding-top:1.5px;">文件上传(错误)</div>');
    $(obj.attr('target')).prepend("<span class='no'></span>");
}
//导入附加数据量校验
function CheckExcelEmpty(schemaCode) {
    var postDataJson = {
        ActionName: 'CheckExcelEmpty',
        SchemaCode: schemaCode,
        ImportGuid: ImportGuid
    };
    $.ajax({
        data: { PostData: JSON.stringify(postDataJson) },
        url: '/ExcelImport/OnAction',
        type: 'post',
        success: function (data) {
            var state = data.Successful;
            var maxProcess = state ? 100 : getRandom(10, 90);
            CheckResultOne($('#process3'), state, maxProcess, $('#processtext3'));
            setTimeout(function () {
                var nextTickInterval = setInterval(function () {
                    if (state) {
                        var DataQuantityOK = false;
                        if ($('#processtext3').text().indexOf('完成') > -1) {
                            DataQuantityOK = true;
                        }
                        if (DataQuantityOK) { //解锁下一步按钮
                            clearInterval(nextTickInterval);
                            if (!pauseImportExport) {
                                mod1.find(".modal-footer .btn_disabled").removeClass("btn_disabled").addClass("btn_ok");
                            }
                        }
                    } else {
                        clearInterval(nextTickInterval);
                        !pauseImportExport && showImportError(data.ErrorMessage);
                    }
                }, 100);
                closeTipText = '关闭对话框';
            }, maxProcess * 10);
        }
    });
}
//导入第一步校验结果处理 --进度条
function CheckResultOne(obj, state, maxProcess, textobj) {
    var value = 0;
    var that = this;
    var descDom = $($(obj).attr('target'));
    var desc = descDom.attr('title');
    var stateclass = state ? 'progress-bar-ok' : 'progress-bar-error';
    var stateicon = state ? 'ok' : 'no';
    $(obj).find('.progress-bar-inner').width(0);
    $(obj).find('.progress-bar').addClass('progress-bar-ing');
    clearInterval(ImportInterval);
    ImportInterval = setInterval(function () {
        if (pauseImportExport) {
            closeTipText = '关闭对话框';
            clearInterval(ImportInterval);
        }
        value += 2;
        if (value > 100) {
            clearInterval(ImportInterval);
        }
        $(obj).find('.progress-bar-inner').width(value + '%');
        $(descDom).html('<div style="padding-top:1.5px;">' + desc + '(' + value + '%)</div>');
        if (value >= maxProcess) {
            if (state) {
                textobj.css('color', 'rgba(0,0,0,.45)');
            }
            clearInterval(ImportInterval);
            $(descDom).html('<div style="padding-top:1.5px;">' + desc + '(' + (state ? '完成' : '错误') + ')</div>');
            $(obj)
                .find('.progress-bar')
                .removeClass('progress-bar-ing')
                .addClass(stateclass);
            $(descDom).prepend("<span class='" + stateicon + "'></span>");
        }
    }, 10);
}
//上传Excel  -- 步骤
var ModImportFirstContent = function (schemacode) {
    var html = '';
    html +=
        '<div class="row"  id="importfirst" style="margin-left:0;margin-right:0;">';
    ///头
    html += GetHeaderHtml(1);

    //体
    html += '<div class="importbody">';
    html += '<div class="introduction">';
    html += '<div class="introductionheader">';
    html += '一、选择导入模式';
    html += '</div>';
    html += '<div class="introductionbody" style="display:inline-block">';
    html += '<div class="choose">';
    html += '<div class="chooseimport choosed" target="#addImport">新增导入</div>';
    html += '<div class="choosesplit1"></div>';
    html += '<div class="chooseimport" target="#updateImport">更新导入</div>';
    html += '<div class="choosesplit2"></div>';
    html += '</div>';
    html += '<div class="choosedbody" id="addImport">';
    html += '<div class="choosedescription">将Excel中的数据追加为表单的新数据</div>';
    html += '<div class="importtips">';
    html += '<div>提示：</div>';
    html += '<div class="introdutionbodyitem">';
    html += '1. 导入文件只支持.xls和.xlsx格式';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '2. 将需要上传的数据放在第一个sheet中';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '3. 数据模版中只有可填写的字段，不包含流水号、创建人等系统自动生成的字段';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '4. 数据模版中可整列调整字段的左右顺序，可删减不需要的字段，但必填字段不能删除';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '5. 同时导入主子表数据，且一条主表数据有多条子表数据时';
    html += '<div>&nbsp;&nbsp;&nbsp;(1) 只需填写第一个子表数据行的主表数据</div>';
    html += '<div>&nbsp;&nbsp;&nbsp;(2) 注意：如果多条子表数据都填写了主表数据，系统会生成多条主表数据</div>';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '6. 关联表单、关联多选控件关联子表时，系统将按上传的excel中该子表的数据标题匹配系统中的数据，后台<div style="float:left;width:14px;height:1px;"></div>务必设置该子表的数据标题';
    html += '</div>';

    html += '</div>';
    html += '</div>';
    html += '<div class="choosedbody hidebody" id="updateImport">';
    html += '<div class="choosedescription">对已有的系统数据进行更新</div>';
    html += '<div class="importtips">';
    html += '<div>提示：</div>';
    html += '<div class="introdutionbodyitem">';
    html += '1. 更新导入前请先导出需要更新的数据并完成修改';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '2. 更新导入只更新草稿和已结束的流程，不更新进行中的流程';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '3. 导入文件只支持.xls和.xlsx格式';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '4. 将需要上传的数据放在第一个sheet中';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '5. 上传的excel中可整列调整字段的左右顺序，可删减不需要的字段，但必填字段不能删除';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '6. 同时导入主子表数据，且一条主表数据有多条子表数据时';
    html += '<div>&nbsp;&nbsp;&nbsp;(1) 只需填写第一个子表数据行的主表数据</div>';
    html += '<div>&nbsp;&nbsp;&nbsp;(2) 注意：如果多条子表数据都填写了主表数据，系统会生成多条主表数据</div>';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html +=
        '7. 系统按匹配字段更新数据，匹配字段默认为数据标题，当表单中有流水号时，也可以选择流水号作为匹配<div style="float:left;width:14px;height:1px;"></div>字段' +
        '（要求上传的excel中有该流水号字段）';
    html += '</div>';
    html += '<div class="introdutionbodyitem">';
    html += '8. 关联表单、关联多选控件关联子表时，后台务必设置该子表的数据标题，且每条数据的数据标题都有值，<div style="float:left;width:14px;height:1px;"></div>否则更新导入会清空已选项';
    html += '</div>';
    html += '</div>';
    html += '</div>';
    html += '</div>';

    html += '<div class="introductionheader">';
    html += '二、请选择要上传的Excel文件';
    html += '</div>';
    html += '<div class="introductionbody">';
    html += '<form id="upLoadForm" method="post">                                                                                                                               ';
    html += '<div style="float:left" class="masBox-btn btn_okfile myuploada">';
    html += '<span style="color:rgba(0,0,0,.65)">选择文件</span>';
    html += '<input type="file" accept=".xls,.xlsx" name="fileName" class="myupload" id="fileNameUpload" value="浏览" style="float:left"  />';
    html += '</div>';
    html += '</form>';
    html += '<div class="importdownload">';
    html += '请';
    var url =
        '/ExcelExport/OnAction?PostData={"ActionName":"GetAddTemplate","SchemaCode":"' +
        schemacode +
        '"}';
    html +=
        '<a href="javascript:;" downurl=' + url + ' style="color:#1890FF;cursor: pointer;margin-left:6px;margin-right:6px;" class="download"><span class="aufont icon-base-download"></span>下载数据模板</a>';
    html += '，并按照模版编辑需导入的数据';
    html += '</div>';
    html += '<div style="margin-top:16px;"><p id="myfilename"></p></div>';

    html += '</div>';
    html += '</div>';
    html += '</div>';

    //进度条
    html += '<div id="process" class="hideprocess">';
    html +=
        '<div id="process1" target="#processtext1"><div class="progress-bar"><div class="progress-bar-outer"><div class="progress-bar-inner"></div></div></div></div>';
    html +=
        '<div id="process2" target="#processtext2"><div class="progress-bar"><div class="progress-bar-outer"><div class="progress-bar-inner"></div></div></div></div>';
    html +=
        '<div id="process3" target="#processtext3"><div class="progress-bar"><div class="progress-bar-outer"><div class="progress-bar-inner"></div></div></div></div>';
    html +=
        '<div id="processtext1" style="float:left;width:194px;" title="文件上传">文件上传</div>';
    html +=
        '<div id="processtext2" style="float:left;width:194px;" title="模板校验"><div style="padding-top:1.5px;">模板校验</div></div>';
    html +=
        '<div id="processtext3" style="float:left;width:194px;" title="数据量校验"><div style="padding-top:1.5px;">数据量校验</div></div>';
    html += '</div>';
    //进度条 END
    html += '<div class="importupload">';
    html += '</div>';
    html += '</div>';
    return html;
};
function ModImportFirstBuild(Code) {
    if (ModImportFirst == null || $.isEmptyObject(ModImportFirst)) {
        ModImportFirst = $.IModal({
            Title:
            "<span class='title'>" + importTitle + "</span><span class='littletitle'>" +
            AppName +
            '</span>',
            OnShowCallback: function () {
                internetInterval = setInterval(function () {
                    if (!window.navigator.onLine && !pauseImportExport) {
                        showImportError('网络中断，请检查网络！');
                        if (mod3 && mod3.find('#importprocess').css('display') != 'none') {
                            mod3.find('.btn_ok').html('关闭').width(35).click(function () {
                                ImportOver();
                                clearInterval(internetInterval);
                                ModImportThird.hide();
                            })
                        }
                        if (mod5 && mod5.find('#exportprocess')) {
                            mod5.find('.btn_ok').html('关闭').width(35).click(function () {
                                ExportOver();
                                clearInterval(internetInterval);
                                ModExportSecond.hide();
                            })
                        }
                    }
                }, 10000);
                mod1.find('.icon-guanbi').click(function () {
                    $tableTip.hide();
                    ImportOver();
                    clearInterval(internetInterval);
                });
                mod1.find('.myuploada').click(function (e) {
                    e.stopPropagation();

                    //删除已选择文件
                    ModImportFirstReInit();
                    var file = mod1.find('#fileNameUpload')[0];
                    var ie = navigator.appVersion.indexOf('MSIE') != -1;
                    if (ie) {
                        var file2 = file.cloneNode(false);
                        file2.onchange = file.onchange;
                        file.parentNode.replaceChild(file2, file);
                    } else {
                        $(file).val('');
                    }
                    mod1.find('#myfilename').html('');

                    $(this).find('.myupload').click();
                });
                mod1.find('.myupload').bind('click', function (e) {
                    e.stopPropagation();
                });
                mod1
                    .find('#fileNameUpload')
                    .unbind('change')
                    .bind('change', function () {
                        fileSelectedNew(Code);
                    }).html('');
                $('.choose .chooseimport').click(function (e) {
                    //判断是否有文件
                    var file;
                    if (!(window.File && window.FileList && window.Blob)) {
                        file = mod1.find('#fileNameUpload')[0];
                        if ($.isEmptyObject(file)) {
                            switchMode(e);
                            return false;
                        }
                    } else {
                        file = mod1.find('#fileNameUpload')[0].files[0];
                        if ($.isEmptyObject(file)) {
                            switchMode(e);
                            return false;
                        }
                    }
                    if (!$(this).hasClass('choosed')) {
                        showImportConfirm.show({
                            title: '确定切换页面？',
                            message: '切换导入模式将终止本次导入',
                            callBack: function (result) {
                                if (result) {
                                    switchMode(e);
                                }
                            }
                        });
                    }
                    return false;
                });
            },
            OnShowBeforeCallback: function () {
                mod1 = this.Container;
            },
            OnHiddenCallback: function () {
                var obj = mod1.find('#fileNameUpload')[0];
                obj.outerHTML = obj.outerHTML;
                mod1.find('#myfilename').html('');
                mod1.find('#importorgworkflowinput').prop('checked', false);
                ModImportFirst.destroy();
            },
            Height: $(top).height() - 150,
            Width: 800,
            ShowBack: true,
            HasIframe: false,
            Type: 1,
            Content: ModImportFirstContentResult,
            ShowInRootWindow: true,
            ToolButtons: [
                {
                    Text: '取消',
                    Theme: 'btn_cancel',
                    CallBack: function () {
                        ImportOver();
                        clearInterval(internetInterval);
                        ModImportFirst.hide();
                    }
                },
                {
                    Text: '下一步',
                    Theme: 'btn_disabled',
                    CallBack: function () {
                        $tableTip.hide();
                        if (!this.Element.hasClass('btn_disabled')) {
                            ModImportFirst.hide();
                            if (HasSeqNo && IsUpdate) {
                                ModImportSelectMatchContentResult = ModImportSelectMatchContent();
                                ModImportSelectMatchBuild();
                            } else {
                                ModImportSecondContentResult = ModImportSecondContent();
                                ModImportSecondBuild();
                                SecondDo();
                            }
                        }
                    }
                }
            ],
            Class: importMoadlClass
        });
    } else {
        ModImportFirst.show();
    }
    initTipAndGuide();
};
//上传Excel重新格式化 -- 重新上传文件、切换导入模式
function ModImportFirstReInit() {
    ImportOver();
    mod1.find('#updateImport').height(260).css('overflow-y', 'visible')
    mod1.find(".modal-footer .btn_ok").removeClass("btn_ok").addClass("btn_disabled");
    $('#process .progress-bar').each(function () {
        $(this).removeClass('progress-bar-ing')
            .removeClass('progress-bar-ok')
            .removeClass('progress-bar-error');
    });
    mod1.find('#myfilename').html('');
    mod1.find('#process').addClass('hideprocess');
    $('#processtext1').html('<div style="padding-top:1.5px;">文件上传</div>');
    $('#processtext2').html('<div style="padding-top:1.5px;">模板校验</div>');
    $('#processtext3').html('<div style="padding-top:1.5px;">数据量校验</div>');
};

var ModImportSelectMatchContent = function () {
    var html = '';
    html += '<div class="row"  id="importselectmatch" style="margin-left:0;margin-right:0;">';
    ///头
    html += GetHeaderHtml(2);
    html += '<div class="selectmatchbody" style="padding-top: 24px;">';
    html += '<div class="currentform">当前表单</div>';
    html += '<div class="split"></div>';
    html += '<div class="currentformname">' + AppName + '</div>';
    html += '<div class="select off">';
    html += '<div class="optiondefault">数据标题</div>';
    html += '<span class="aufont icon-base-down arrow"></span>';
    html += '<div class="options off">';
    html += '<div class="option" value="SeqNo">流水号</div>';
    html += '<div class="option" value="Name">数据标题</div>';
    html += '</div>';
    html += '</div>';
    html += '<div class="selectmatchtip">将按照选择的字段匹配数据，如更新导入时根据所选匹配字段找到系统中已有数据，并对其进行更新。</div>';

    html += '</div>';
    return html;
};
function ModImportSelectMatchBuild(Code) {
    if (ModImportSelectMatch == null || $.isEmptyObject(ModImportSelectMatch)) {
        ModImportSelectMatch = $.IModal({
            Title: "<span class='title'>" + importTitle + "</span><span class='littletitle'>" + AppName + '</span>',
            OnShowBeforeCallback: function () {
                modselect2 = this.Container;
            },
            OnShowCallback: function () {
                modselect2.find('.icon-guanbi').click(function () {
                    $tableTip.hide();
                    ImportOver();
                    clearInterval(internetInterval);
                });
                modselect2.find(".optiondefault").click(function (e) {
                    e = e || event;
                    e.stopPropagation();
                    modselect2.find(".arrow").removeClass("icon-base-down").addClass("icon-base-up");
                    modselect2.find(".options").removeClass("off").addClass("on");
                    modselect2.find(".select").removeClass("off").addClass("on");
                });
                modselect2.find(".option").click(function (e) {
                    e = e || event;
                    MatchField = $(this).attr('value');
                    modselect2.find(".arrow").removeClass("icon-base-up").addClass("icon-base-down");
                    modselect2.find(".options").removeClass("on").addClass("off");
                    modselect2.find(".select").removeClass("on").addClass("off");
                    modselect2.find(".optiondefault").html($(e.target).html());
                });
                $(document).click(function () {
                    modselect2.find(".arrow").removeClass("icon-base-up").addClass("icon-base-down");
                    modselect2.find(".options").removeClass("on").addClass("off");
                    modselect2.find(".select").removeClass("on").addClass("off");
                });
            },
            OnHiddenCallback: function () {
                ModImportSelectMatch.destroy();
            },
            Height: $(top).height() - 150,
            Width: 800,
            ShowBack: true,
            HasIframe: false,
            Type: 1,
            Content: ModImportSelectMatchContentResult,
            ShowInRootWindow: true,
            ToolButtons: [
                {
                    Text: '取消',
                    Theme: 'btn_cancel',
                    CallBack: function () {
                        ImportOver();
                        clearInterval(internetInterval);
                        ModImportSelectMatch.hide();
                    }
                },
                {
                    Text: '下一步',
                    Theme: 'btn_ok',
                    CallBack: function () {
                        ModImportSelectMatch.hide();
                        ModImportSecondContentResult = ModImportSecondContent();
                        ModImportSecondBuild();
                        SecondDo();
                    }
                }
            ],
            Class: importMoadlClass
        });
    } else {
        ModImportSelectMatch.show();
    }
    initTipAndGuide();
};
//校验数据  -- 步骤
var ModImportSecondContent = function () {
    var html = '';
    html +=
        '<div class="row" id="importsecond" style="margin-left:0;margin-right:0;">';
    ///头
    html += GetHeaderHtml(HasSeqNo && IsUpdate ? 3 : 2);
    ///体
    html += '<div class="importbody">';
    //进度条
    html += '<div class="check-progress">';
    html += '<div class="progress-bar progress-bar-ing"><div class="progress-bar-outer"><div class="progress-bar-inner bar-transition" style="width: 1%;"></div></div></div>';
    html += '<div class="check-desc">正在对必填值、重复值、非法值进行校验...</div>';
    html += '</div>'
    //校验成功 -- 只修改进度条内容
    //校验失败 -- 下载模板修改
    html += '<div class="import-error-download" style="display:none;">';
    html += '<span class="desc">文件中有</span>';
    html += '<span class="desc error-number"></span>';
    html += '<span class="desc">条错误数据，请</span>';
    html += '<a href="javascript:;" class="error-report download" target="_blank" >';
    html += '<span class="aufont icon-base-download"></span>下载错误报告';
    html += '</a>';
    html += '<span class="desc">修改后<a id="reupload">重新上传</a>。</span>';
    html += '</div>';
    //校验失败 -- 在线修改
    html += '<div class="importerrorbody" style="display:none;">';
    html += '<div class="desc">文件中有<span class="desc error-number"></span>条错误数据，请在下表中修改，并点击 "下一步" 按钮继续导入</div>';
    html += '<div class="errortablecontainer">';

    // 新的表格
    html += '<div class="fixed-table-box row-col-fixed">';
    html += '<div class="fixed-table-header-wraper"></div>';  //表头
    html += '<div class="fixed-table_body-wraper"></div>';  //表内容
    html += '<div class="fixed-table_fixed fixed-table_fixed-left"></div>'; //固定列
    html += '<div class="fixed-table_action"><span class="aufont icon-base-fullscreen-o tool-tip" tooltip-title="全屏模式"></span></div>'
    html += '</div>';

    html += '<table class="importerrortable">';
    html += '</table>';
    html += '</div>';
    return html;
};
function ModImportSecondBuild() {
    if (ModImportSecond == null || $.isEmptyObject(ModImportSecond)) {
        ModImportSecond = $.IModal({
            Title: "<span class='title'>" + importTitle + "</span><span class='littletitle'>" + AppName + '</span>',
            OnShowCallback: function () {
                mod2.find('.icon-guanbi').click(function () {
                    $tableTip.hide();
                    ImportOver();
                    clearInterval(internetInterval);
                });
            },
            OnHiddenCallback: function () {
                ModImportSecond.destroy();
            },
            Height: $(top).height() - 100,
            Width: 820,
            ShowBack: true,
            HasIframe: false,
            Type: 1,
            Content: ModImportSecondContentResult,
            ShowInRootWindow: true,
            OnShowBeforeCallback: function () {
                mod2 = this.Container;
            },
            ToolButtons: [
                {
                    Text: '取消',
                    Theme: 'btn_cancel',
                    CallBack: function () {
                        ImportOver();
                        clearInterval(internetInterval);
                        ModImportSecond.hide();
                    }
                },
                {
                    Text: '下一步',
                    Theme: 'btn_disabled',
                    CallBack: function () {
                        $tableTip.hide();
                        if (!this.Element.hasClass('btn_disabled')) {
                            var next = $(this.Element).attr('next');
                            var mergeData = $(this.Element).data().MergeData;
                            if (next != 'close') {  // next校验结果对应不同的步骤, 
                                //下一步, 判断是否需要合并数据
                                if (mergeData) {
                                    // 是否是全屏
                                    var isFullMode = $(this.Element).parents('.full-screen-container').length ? true : false;
                                    SecondMergeData(isFullMode);
                                } else {
                                    
                                    ModImportSecond.hide();
                                    ModImportThirdContentResult = ModImportThirdContent();
                                    ModImportThirdBuild();
                                }
                            } else {
                                ImportOver();
                                ModImportSecond.hide();
                            }
                        }
                    }
                }
            ],
            Class: importMoadlClass
        });
        mod2 = ModImportSecond.Container;
    } else {
        ModImportSecond.show();
        $.MsgFilter.show();
    }
    closeTipText = '关闭对话框将终止校验';
    nextTipText = '正在校验...';
    initTipAndGuide();
}
function SecondDo(JsonResult) {
    var process = 0;
    var checkExcelResult = null;
    var checkValidity = function (fromNum) {
        //通知后台进行数据校验，同时监听校验进度
        var datas = {};
        datas['ActionName'] = 'CheckExcelValidity';
        datas['SchemaCode'] = SchemaCode;
        datas['ImportGuid'] = ImportGuid;
        datas['Type'] = MatchField;
        datas['FromNum'] = fromNum || 2;
        datas = { PostData: JSON.stringify(datas) };
        $.ajax({
            data: datas,
            datatype: 'json',
            type: 'POST',
            url: '/ExcelImport/OnAction',
            async: true,
            success: function (result) {
                if (result.Successful) {
                    if (result.ReturnData.CheckAll) {
                        checkExcelResult = result.ReturnData;
                        handle();
                    } else {
                        checkValidity(result.ReturnData.FromNum);
                    }
                } else if (!pauseImportExport){
                    !pauseImportExport && showImportError(result.ErrorMessage);
                }
            },
            error: function (error) {
                console.log(' ' + error);
            }
        });
    }
    checkValidity();

    //请求获取 process
    var datas = {};
    datas['ActionName'] = 'GetExcelValidPercent';
    datas['SchemaCode'] = SchemaCode;
    datas['ImportGuid'] = ImportGuid;
    datas = { PostData: JSON.stringify(datas) };
    var timeInterval = 100;
    var checkProcess = function () {
        $.ajax({
            data: datas,
            datatype: 'json',
            type: 'POST',
            url: '/ExcelImport/OnAction',
            async: true,
            success: function (result) {
                if (result.Successful) {
                    process = result.ReturnData.Percent;
                    mod2.find('.progress-bar-inner').width(process + '%');
                    if (process < 100) {
                        if (timeInterval < 1500) {
                            timeInterval += 100;
                        }
                        setTimeout(function () { checkProcess(); }, timeInterval);
                    } else {
                        handle()
                    }
                } else if (!pauseImportExport && !pauseImportExport){
                    showImportError(result.ErrorMessage);
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    };
    checkProcess();
    //防止数据校验完成后，进度条未完成，此时不能显示校验结果页面
    var flag = false;
    var handle = function () {
        if (!flag) {
            flag = true;
            return;
        }
        SecondCheckResultHandle(checkExcelResult);
    }
}
//数据校验结果页面显示
function SecondCheckResultHandle(Result) {
    closeTipText = '关闭对话框';
    mod2.find('.progress-bar').removeClass('progress-bar-ing').addClass('progress-bar-ok');
    //三种结果 1、下载错误报告  2、在线修改  3、校验通过
    var checkState = Result.State;
    if (checkState == 1) {
        var errorNum = Result.Count;
        var downLoadUrl = '/ExcelExport/OnAction' +
            '?PostData={ "ActionName": "ExportErrorReport", "SchemaCode":"' + SchemaCode +
            '", "ActionGuid": "' + ImportGuid + '"}';
        mod2.find('.check-progress').hide();
        mod2.find('.import-error-download .error-number').text(errorNum);
        mod2.find('.import-error-download a.download').attr('downurl', downLoadUrl);
        mod2.find('.import-error-download').show();
        mod2.find('.modal-footer .btn_cancel').hide();
        mod2.find('.modal-footer .btn_disabled').removeClass('btn_disabled').addClass('btn_ok').text('确定').attr('next', 'close');
        mod2.find('#reupload').click(function () {
            ModImportSecond.hide();
            ModImportFirstContentResult = ModImportFirstContent();
            ModImportFirstBuild();
        })
    } else if (checkState == 2) {
        var errorNum = Result.ListExcelRow.length;
        nextTipText = '请先修改错误项';
        mod2.find('.check-progress').hide();
        mod2.find('.importerrorbody .error-number').text(errorNum);
        mod2.find('.importerrorbody').show();
        mod2.find('.modal-footer .btn_disabled').data('MergeData', true);
        BuildErrorTable(Result.ListExcelRow);
        var fixedTableAction = mod2.find('.fixed-table_action');
        var fixedTableHeaderHeight = fixedTableAction.parent().find('.fixed-table-header-wraper').height();
        var fixedTableActionSpan = fixedTableAction.find('span');
        fixedTableAction.height(fixedTableHeaderHeight);
        fixedTableAction.css('line-height', fixedTableHeaderHeight + 'px');
    } else if (checkState == 3) {
        var willImportSummary = Result.SchemaQuantity;
        var successHtml = '<div class="check-result">';
        successHtml += '<span class="icon aufont icon-base-check-circle"></span>';
        successHtml += '校验通过 !';
        successHtml += '</div>';
        //AppName
        for (var i = 0; i < willImportSummary.length; i++) {
            var summary = willImportSummary[i];
            successHtml += '<div class="check-details">';
            if (i == 0) {
                successHtml += '将导入主表数据' + summary.Quantity + '条';
            } else {
                successHtml += summary.SchemaName + '数据' + summary.Quantity + '条';
            }
            successHtml += '</div>';
        }
        mod2.find('.check-progress .check-desc').html(successHtml);
        mod2.find('.modal-footer .btn_disabled').removeClass('btn_disabled').addClass('btn_ok').attr('next', 'next');
    }
}
//初始化在线编辑table
function BuildErrorTable(ListExcelRow) {
    ImportListExcelRow = ListExcelRow;
    var TotalErrorNumber = ListExcelRow.length;
    var $importsecond = mod2.find('#importsecond');
    var $maintable = $importsecond.find('.importerrortable');
    var $thead = $('<thead>');
    var $trfirst = $('<tr>');
    var $thnumber = $('<th fieldname="importNumber" style="min-width:40px;" rowspan="2">行号</th>');
    $trfirst.append($thnumber);
    var $therror = $('<th fieldname="importErrorFieldName" rowspan="2">错误详情</th>');
    $trfirst.append($therror);

    var haschild = false;  //是否是字表
    var loadchildfield = {}; //已近加载的子表字段

    //所有列， 渲染列的顺序以该数组的顺序为准
    //在渲染列时，循环该数组
    var errorTableCells = ListExcelRow[0].Keys;

    var subTabAndChildNum = {};
    for (var i = 0; i < errorTableCells.length; i++) {
        var fieldname = errorTableCells[i];
        if (fieldname.indexOf('.') > -1) {
            var parentfiled = fieldname.split('.')[0];
            if (subTabAndChildNum[parentfiled]) {
                subTabAndChildNum[parentfiled] += 1;
            } else {
                subTabAndChildNum[parentfiled] = 1;
            }
        }
    }

    var propertysummary = ListExcelRow[0].Cells;
    for (var i = 0; i < errorTableCells.length; i++) {
        var fieldname = errorTableCells[i];
        var fielddisplayname = propertysummary[fieldname].DisplayName;
        if (fieldname.indexOf('.') > -1) {
            haschild = true;
            var parentfiled = fieldname.split('.')[0];
            if (!loadchildfield[parentfiled]) {
                loadchildfield[parentfiled] = true;
                var childcount = subTabAndChildNum[parentfiled];
                var paretnFieldDisplayName = fielddisplayname.split('.')[0];
                var $tempth = $(
                    '<th fieldname="' +
                    parentfiled +
                    '" colspan="' +
                    childcount +
                    '">' +
                    paretnFieldDisplayName +
                    '</th>'
                );
                $trfirst.append($tempth);
            }
            continue;
        }
        var $tempth = $(
            '<th fieldname="' +
            fieldname +
            '" rowspan="2">' +
            fielddisplayname +
            '</th>'
        );
        $trfirst.append($tempth);
    }
    $thead.append($trfirst);

    if (haschild) { //表头的第二行
        var $temptr = $('<tr>');
        for (var i = 0; i < errorTableCells.length; i++) {
            var fieldname = errorTableCells[i];
            var fielddisplayname = propertysummary[fieldname].DisplayName;
            if (fieldname.indexOf('.') > -1) {
                var $thtemp = $(
                    '<th fieldname="' +
                    fieldname +
                    '">' +
                    fielddisplayname.split('.')[1] +
                    '</th>'
                );
                $temptr.append($thtemp);
                continue;
            }
        }
        $thead.append($temptr);
    }

    var $tbody = $('<tbody>');
    //生成可编辑行
    for (var i = 0; i < ListExcelRow.length; i++) {
        var rowNum = i + 1;
        var errorRow = ListExcelRow[i];
        var $temptr = $('<tr class="maintr vertical-top" data-row="' + rowNum + '">');

        //序号
        var $numbertd = $(
            '<td fieldname="importNumber" style="min-width:40px;" >' + rowNum + '</td>'
        );
        $temptr.append($numbertd);

        //该行错误详情
        var errors = errorRow.Errors;
        var $temptd = $('<td fieldname="importErrorFieldName" class="importfailtext"></td>');
        for (var errorkey in errors) {
            if ($.inArray(errorkey, errorTableCells) > -1) {
                var anchor = '#error' + errorkey + 'row' + rowNum; //锚点 规则  'error' +  fieldname + 'row' + 行号
                var errordes = errors[errorkey];
                errordes.forEach(function (index, desc) {
                    var errorHref = $('<a href=' + anchor + ' class="error-anchor"></a>').text(errordes)
                    $temptd.append(errorHref);
                });
            }
        }
        $temptr.append($temptd);

        //该行表单字段 -- 子表对应的 主表（除第一行）不需要渲染显示
        for (var k = 0; k < errorTableCells.length; k++) {
            var fieldname = errorTableCells[k];
            var propertysummary = errorRow.Cells[fieldname];
            var datatype = propertysummary['DataType'];
            var controlkey = propertysummary['ControlKey'];
            var boschemacode = propertysummary['BoschemaCode'];
            var fielddisplayname = propertysummary['DisplayName'];
            var required = propertysummary['Required'];
            var bovalue;
            var boname;
            var botext = propertysummary['Text'];
            var isError = errors[fieldname] ? true : false;  //该项是否有错

            //if (rowNum == 1 && required) {
            //    $thead.find('th[fieldname="' + fieldname + '"]')
            //        .append($('<span style="color:red;vertical-align:middle">*</span>'));
            //}

            try {
                bovalue = propertysummary.Value || '';
                boname = propertysummary.Name || '';
            } catch (e) {
            }

            var anchor_target = 'error' + fieldname + 'row' + rowNum;
            var columnNum = k + 3;
            // rowNum 行  columnNum 列
            $temptd = $('<td id=' + anchor_target + '  fieldname="' + fieldname + '"></td>');
            var hasValue = bovalue && bovalue != 'null';
            var needInit = propertysummary.RenderEnable;
            // 人员单选  
            //data-uservisible="true" data-orgunitvisible="false"
            //根据类型加控件
            var $div = null;
            if (needInit) {
                switch (controlkey) {
                    case 'user':  //单人
                        $div = $(
                            '<div class="sheet-control" data-uservisible="true" data-orgunitvisible="false"' +
                            ' data-controlkey="FormUser"></div>'
                        );
                        break;
                    case 'multiuser': //多人
                        $div = $(
                            '<div class="sheet-control" data-uservisible="true" data-orgunitvisible="false"' +
                            ' data-controlkey="FormMultiUser"></div>'
                        );
                        break;
                    case 'department': //单部门
                        $div = $(
                            '<div class="sheet-control" data-uservisible="false" data-orgunitvisible="true"' +
                            ' data-controlkey="FormUser"></div>'
                        );
                        break;
                    case 'multidepartment': //多部门
                        $div = $(
                            '<div class="sheet-control" data-uservisible="false" data-orgunitvisible="true"' +
                            'data-controlkey="FormMultiUser"></div>'
                        );
                        break;
                    case 'multiuserandmultidepartment':  //多人、部门
                        $div = $(
                            '<div class="sheet-control" data-ismultiple="true" data-uservisible="true" data-orgunitvisible="true"' +
                            'data-controlkey="FormMultiUser"></div>'
                        );
                        break;
                    case 'useranddepartment'://单人、部门
                        $div = $(
                            '<div class="sheet-control" data-uservisible="true" data-orgunitvisible="true"' +
                            'data-controlkey="FormUser"></div>'
                        );
                        break;
                    case 'formquery': //关联单选
                        $div = $(
                            '<div class="sheet-control FormQuery SheetQuery" data-controlkey="FormQuery" ' +
                            '" data-boschemacode="' + boschemacode + '" ></div>'
                        );
                        break;
                    case 'formmultiquery':
                        $div = $(
                            '<div class="sheet-control FormQuery SheetQuery" data-controlkey="FormMultiQuery"' +
                            '" data-boschemacode="' + boschemacode + '"></div>'
                        );
                        break;
                    default:
                        break;
                }
                if ($div) {
                    $div.attr('data-name', boname);
                    $div.attr('data-DataField', fieldname);
                    $div.attr('data-defaultvalue', bovalue);
                    $div.attr('data-row', rowNum);
                    $div.attr('data-column', columnNum);
                    $div.attr('data-text', botext);
                } else {
                    needInit = false;
                    $div = $(
                        '<div class="sheet-control" data-DataField="' +
                        fieldname +
                        '">' + bovalue + '</div>'
                    );
                }
            } else {
                $div = $(
                    '<div class="sheet-control sheet-label" data-DataField="' +
                    fieldname +
                    '">' + bovalue + '</div>'
                );
            }
            if (required) {
                $div.attr('data-required', 'true');
            }
            if (needInit) {
                $div = MyCreateElement(fieldname, controlkey, $div);
                // 计算必填有错误的
                if (required && isError) {
                    ++ImportNoInitNum;
                    $div.attr('data-required-error', true);
                }
            }
            $temptd.append($div);
            if (isError) {
                var errorString = '';
                var thisErrors = errors[fieldname];
                for (var errorIndex = 0; errorIndex < thisErrors.length; errorIndex++) {
                    try {
                        var rowError = thisErrors[errorIndex];
                        rowError = rowError.split('】')[1] || '';
                        if (rowError) {
                            rowError = rowError.substr(rowError.indexOf('列') + 1);
                            errorString += rowError + '；';
                        }
                    } catch (e) { }
                }
                $temptd.append($('<div class="error-des">' + errorString + '</div>'))
            }
            $temptr.append($temptd);
            $div.data('propertysummary', propertysummary);
            $temptd.find('.icon-arrow-down-full').removeClass('icon-arrow-down-full'); //去掉下三角
        }
        $tbody.append($temptr);
    }

    $maintable.append($thead);
    $maintable.append($tbody);
    //没有必填且有错误的字段，可直接下一步
    if (!ImportNoInitNum) {
        console.log(ImportNoInitNum);
        mod2.find('.btn_disabled').removeClass('btn_disabled').addClass('btn_ok');
    }
    InitImportFixTable($maintable);
    var guided = !localStorage.getItem('ImportGuide') ? false : true;
    if (!guided) {
        //初始化指引
        var InitImportGuide = function () {
            var guideMask = $('<div class="guide-mask"></div>');
            // 跳转指引
            var guide1 = $('<div class="guide guide-full-screen"></div>');
            var postion1 = $tbody.find('td .error-anchor:first').offset();
            var title1 = $('<div class="title">点击错误项可跳转到对应项进行修改</div>');
            var btn1 = $('<div class="action"><span class="button">我知道了</span></div>');
            var arrow1 = $('<div class="popper-arrow-down"></div>');
            arrow1.css('left', '30px');
            guide1.append(title1).append(btn1).append(arrow1);
            guide1.css({
                left: postion1.left + 100,
                top: postion1.top - 100
            });

            //全屏指引
            var guide2 = $('<div class="guide guide-anchor"></div>');
            var postion2 = mod2.find('.fixed-table_action span').offset();
            var title2 = $('<div class="title">点击全屏查看</div>');
            var btn2 = btn1.clone();
            var arrow2 = arrow1.clone();
            var offsetLeft = 50;
            arrow2.css('left', 50 + 'px');
            guide2.append(title2).append(btn2).append(arrow2);
            guide2.css({
                left: postion2.left - 50,
                top: postion2.top - 100
            })

            var guideContainer = $('<div class="import-guide-container">');
            guideContainer.append(guideMask).append(guide1).append(guide2);
            $('body').append(guideContainer);
            var iknow = 2;
            guideContainer.off('click.iknow').on('click.iknow', '.action', function () {
                --iknow;
                $(this).parents('.guide').remove();
                if (iknow == 0) {
                    guideContainer.remove();
                }
            });
        }
        InitImportGuide();
        localStorage.setItem('ImportGuide', 'true');
    }
}
//合并数据
function SecondMergeData(isFullMode) {
    var postDataJson = {
        ActionName: 'MergeErrorData',
        SchemaCode: SchemaCode,
        ImportGuid: ImportGuid,
        RepairedData: JSON.stringify(ImportListExcelRow)
    };
    $.ajax({
        data: { PostData: JSON.stringify(postDataJson) },
        url: '/ExcelImport/OnAction',
        type: 'post',
        success: function (data) {
            if (data.Successful) {
                if (isFullMode) {
                    //全屏先还原
                    modFull.find('.fixed-table_action span').click();
                }
                //先显示校验结果（即将导入的数据），再设置下一步
                var willImportSummary = data.ReturnData.SchemaQuantity;
                var successHtml = '<div class="check-result">';
                successHtml += '<span class="icon aufont icon-base-check-circle"></span>';
                successHtml += '校验通过 !';
                successHtml += '</div>';
                //AppName
                for (var i = 0; i < willImportSummary.length; i++) {
                    var summary = willImportSummary[i];
                    successHtml += '<div class="check-details">';
                    if (i == 0) {
                        successHtml += '将导入主表数据' + summary.Quantity + '条';
                    } else {
                        successHtml += summary.SchemaName + '数据' + summary.Quantity + '条';
                    }
                    successHtml += '</div>';
                }
                mod2.find('.check-progress .check-desc').html(successHtml);
                mod2.find('.importerrorbody').hide();
                mod2.find('.check-progress').show();
                ModImportSecond.SetFooter([
                    {
                        Text: '下一步',
                        Theme: 'btn_ok',
                        CallBack: function () {
                            ModImportSecond.hide();
                            ModImportThirdContentResult = ModImportThirdContent();
                            ModImportThirdBuild();
                        }
                    }
                ]);
            } else {
                !pauseImportExport && showImportError(data.ErrorMessage);
            }
        }
    });
}
//初始化表单控件
function MyCreateElement(datafield, controlkey, $div) {
    var name = $div.attr('data-name');
    var defaultvalue = $div.attr('data-defaultvalue');
    var text = $div.attr('data-text') || '';
    var required = $div.attr('data-required') == 'true' ? true : false;
    var rowNum = $div.attr('data-row');
    var columnNum = $div.attr('data-column');
    var changeNameSpace = 'change' + name + rowNum + columnNum;
    switch (controlkey) {
        case 'user':
        case 'multiuser':
        case 'department':
        case 'multidepartment':
        case 'useranddepartment':
        case 'multiuserandmultidepartment':
            {
                var name = $div.attr('data-name');
                var $tempdiv = $(
                    '<div class="tempdiv" style="min-width: 100px;">' +
                    '<div name="' + datafield +
                    '" class="form-control form-user-add" style="height: auto; overflow: auto; width: 100%; max-height: 100px;">' +
                    '<span class="SheetUser-Item label label-info" id="' + defaultvalue +
                    '">' + text + '</span>' +
                    '<input class="SheetUser-Input" style="width: 1.5px;">' +
                    '</div>' +
                    '<div class="SheetUser-SelectorPanel" data-formuserpanel="SelectorPanel">' +
                    '</div>'
                );
                $div.append($tempdiv);
                $div.unbind('click').one('click', function () {
                    var $tthis = $(this);
                    $tthis.find('.tempdiv').remove();
                    var defaultvalue = $tthis.attr('data-defaultvalue').split(';');
                    var temp = $tthis.JControl();
                    temp.Required = false;
                    if (required) {
                        temp.Required = required;
                        //必填且有错时
                        if ($tthis.attr('data-required-error') == 'true') {
                            --ImportNoInitNum;
                        }
                    }
                    if (defaultvalue != null && defaultvalue != 'null') {
                        temp.SetValue(defaultvalue);
                    }
                    temp.BindChange(changeNameSpace, function () {
                        setTimeout(function () {
                            ModifyImportDataHandle($tthis);
                        }, 500);
                    });
                    setTimeout(function () {
                        $tthis.find('.form-control').click();
                    }, 300);
                });
            }
            break;
        case 'formquery':
        case 'formmultiquery':
            {
                var name = $div.attr('data-name');
                var $tempdiv = $(
                    '<div class="tempdiv" style="position:relative;">' +
                    '<div class="form-control form-query-add " style="height:32px;" >' +
                    '<a href="javascript:;" class="label label-info" style="position:relative;">' + text + '</a>' +
                    '</div>' +
                    '<a href="javascript:;" class="form-query-addModel icon-newsvg"></a>' +
                    '</div>'
                );
                $div.append($tempdiv);
                $div.unbind('click').one('click', function () {
                    var $tthis = $(this);
                    $tthis.find('.tempdiv').remove();
                    var defaultvalue = $tthis.attr('data-defaultvalue');
                    if (controlkey == 'formmultiquery') {
                        defaultvalue = defaultvalue.split(';');
                    }
                    var temp = $div.JControl();
                    temp.Required = false;
                    if (required) {
                        temp.Required = required;
                        //必填且有错时
                        if ($tthis.attr('data-required-error') == 'true') {
                            --ImportNoInitNum;
                        }
                    }
                    if (defaultvalue != null && defaultvalue != 'null') {
                        temp.SetValue(defaultvalue);
                    }
                    temp.BindChange(changeNameSpace, function () {
                        setTimeout(function () {
                            ModifyImportDataHandle($tthis);
                        }, 500);
                    });
                    setTimeout(function () {
                        $tthis.find('.form-query-add').click();
                    }, 200);
                });
            }
            break;
    }
    return $div;
}
//初始化Table, 表头，序号固定
function InitImportFixTable(oTable) {
    var fixTableBox = mod2.find('#importsecond .fixed-table-box');
    var colWidths = [];  //现有表宽
    var sumWidth = 0;
    var rowHeights = [];  //现有行高
    var sunHeight = 0;
    var $colgroup = $('<colgroup>');
    var dataLength = oTable.find('tbody tr').length;

    oTable.find('tbody tr').each(function () {
        var oHeight = $(this).outerHeight();
        rowHeights.push(oHeight);
        sunHeight += oHeight;
    });
    oTable.find('tbody tr:first td').each(function () {
        var oWidth = $(this).outerWidth();
        colWidths.push(oWidth);
        sumWidth += oWidth;
        $colgroup.append($('<col>').attr('width', oWidth));
    })

    //表头
    var headTableWrap = fixTableBox.find('.fixed-table-header-wraper');
    var headTable = $('<table class="fixed-table_header" cellspacing="0" cellpadding="0" border="0">')
        .width(sumWidth);
    headTable.append($colgroup.clone()).append(oTable.find('thead'));
    headTableWrap.append(headTable);

    //右侧主题内容
    var tbodyTableWrap = fixTableBox.find('.fixed-table_body-wraper');
    var tbodyTable = $('<table class="fixed-table_body" cellspacing="0" cellpadding="0" border="0">')
    tbodyTable.addClass('importerrortable').append($colgroup.clone()).append(oTable.find('tbody'));
    tbodyTableWrap.append(tbodyTable);

    //左侧固定列
    var leftTableWrap = fixTableBox.find('.fixed-table_fixed-left');
    var leftHeadWrap = $('<div class="fixed-table_header-wraper"></div>');
    var leftBodyWrap = $('<div class="fixed-table_body-wraper"></div>');

    var leftHeadTable = $('<table class="fixed-table_header" cellspacing="0" cellpadding="0" border="0"></table>');
    var thead = $('<thead>');
    var tr = $('<tr>');
    var th = $('<th>行号</th>').width(colWidths[0]).height(headTable.height());
    thead.append(tr.append(th));
    leftHeadWrap.append(leftHeadTable.append(thead));

    var leftBodyTable = $('<table class="fixed-table_body" cellspacing="0" cellpadding="0" border="0"></table>');
    var tbody = $('<tbody>');
    //添加固定序号列
    for (var i = 0; i < dataLength; i++) {
        tr = $('<tr class="vertical-top">');
        tr.append($('<th>' + (i + 1) + '</th>').width(colWidths[0]).height(rowHeights[i]));
        tbody.append(tr);
    }
    leftBodyWrap.append(leftBodyTable.append(tbody));
    leftTableWrap.append(leftHeadWrap).append(leftBodyWrap);

    //设置滚动效果
    var tableContainerHeight = 380;  //整个table的高
    fixTableBox.height(tableContainerHeight);
    //设置wrap的高
    tbodyTableWrap.height(tableContainerHeight - headTable.height());
    leftTableWrap.height(tableContainerHeight - 10);
    leftBodyWrap.height(tableContainerHeight - headTable.height());
    //监听scroll事件
    tbodyTableWrap.off('scroll.body').on('scroll.body', function () {
        var left = $(this).scrollLeft();
        var top = $(this).scrollTop();
        headTableWrap.scrollLeft(left);
        leftBodyWrap.scrollTop(top);
    });
    //监听全屏事件
    var fullScreen = fixTableBox.find('.fixed-table_action span');
    var IsFullScreen = false;
    fullScreen.off('click.fullscreen').on('click.fullscreen', function (e) {
        var modalFooter = $('body').find('.modal-footer');
        if (!IsFullScreen) {
            var FSContainer = $('<div class="import-modal full-screen-container"></div>');
            FSContainer.append(fixTableBox.parents('.importerrorbody'));
            FSContainer.append(modalFooter);

            $('body').append(FSContainer);
            var fullTableBox = $('body').find('.full-screen-container .fixed-table-box');
            var fullTableBodyWraper = fullTableBox.find('.fixed-table_body-wraper');
            fullTableBox.height($('body').find('.full-screen-container').height() - 52);
            fullTableBox.find('.fixed-table_action span').attr('tooltip-title', '退出全屏');
            fullTableBodyWraper.height(fullTableBox.height() - 65);
            leftTableWrap.height(fullTableBox.height());
            $('body').find('.fade.in').css('background', 'rgba(0,0,0,.6)');
            FSContainer.find('.fixed-table_action span').removeClass('icon-base-fullscreen-o').addClass('icon-base-fullscreen-restore-o');
            mod2.find('.modal-dialog').hide();
            modFull = FSContainer;
        } else {
            var FSContainer = $('body').find('.full-screen-container');
            var fullTableBox = $('body').find('.full-screen-container .fixed-table-box');
            mod2.find('.modal-dialog').show();
            mod2.find('#importsecond').append(fixTableBox.parents('.importerrorbody'));
            mod2.find('.modal-dialog .modal-content').append(modalFooter);
            fullTableBox.height(380);
            leftTableWrap.height(380);
            fullTableBox.find('.fixed-table_action span').attr('tooltip-title', '全屏模式');
            fixTableBox.find('.fixed-table_body-wraper').height(315);
            fullScreen.removeClass('icon-base-fullscreen-restore-o').addClass('icon-base-fullscreen-o');
            FSContainer.remove();
            $('body').find('.fade.in').css('background', 'rgba(0,0,0,0)');
        }
        IsFullScreen = !IsFullScreen;
    });
}
//在线修改导入数据回调 --  target：控件dom对象
function ModifyImportDataHandle(target) {
    var isFullMode = $(target).parents('.full-screen-container').length ? true : false;// 是否是全屏
    var currentModalContainer = isFullMode ? $(target).parents('.full-screen-container') : mod2;

    var data = $(target).data();
    var rowIndex = data.row;
    var propertysummary = data.propertysummary;
    var jcontrol = data.JControl;
    var val = jcontrol.GetValue();
    //将Value的值格式化后赋值给 propertysummary.Value, 保存时直接传入ImportListExcelRow对象

    //人员，部门单、多 都是对象，取key值   //关联单选是字符串，多选是数组
    var formatVal = '';
    if (data.controlkey == 'FormQuery') {
        formatVal = val;
    } else if (data.controlkey == 'FormMultiQuery') {
        formatVal = val.join(';');
    } else {
        for (var valKey in val) {
            formatVal += ';' + valKey;
        }
        if (formatVal) {
            formatVal = formatVal.slice(1);
        }
    }
    propertysummary.Value = formatVal;
    //处理错误描述
    var errorDes = target.next('.error-des');
    errorDes.hide();
    if (data.required) {
        if ($.isEmptyObject(val) || val.length == 0) {
            //有必填项
            currentModalContainer.find('.btn_ok').removeClass('btn_ok').addClass('btn_disabled');
            errorDes.text('该项必填！');
            errorDes.show();
            changeListHeight(rowIndex)
            return;
        }
    }
    changeListHeight(rowIndex);
    if (ImportNoInitNum) return; //确保所有必填且有错误项都已初始化
    //是否可以下一步
    var state = true;
    currentModalContainer.find('#importsecond').find('[data-required][data-jcontrolid]').each(function (index, div_dom) {
        var jcontrol = $(this).JControl();
        var val = jcontrol.GetValue();
        if ($.isEmptyObject(val) || val.length == 0) {
            state = false;
            return false;
        }
    });
    if (state) {
        currentModalContainer.find('.btn_disabled').removeClass('btn_disabled').addClass('btn_ok');
    } else {
        currentModalContainer.find('.btn_ok').removeClass('btn_ok').addClass('btn_disabled');
    }
}
function changeListHeight(rowIndex) {
    var $maintrs = $(mod2.find('.fixed-table_body-wraper .maintr')[rowIndex - 1]);
    var $listtrs = $(mod2.find('.fixed-table_fixed.fixed-table_fixed-left .fixed-table_body tr')[rowIndex - 1]);

    if (!$maintrs.length) {
        //全屏模式
        var FSContainer = $('body').find('.full-screen-container');
        $maintrs = $(FSContainer.find('.fixed-table_body-wraper .maintr')[rowIndex - 1]);
        $listtrs = $(FSContainer.find('.fixed-table_fixed.fixed-table_fixed-left .fixed-table_body tr')[rowIndex - 1]);
    }

    if ($maintrs.find('.error-des:visible').length == 0) {
        $maintrs.removeClass('vertical-top');
        $listtrs.removeClass('vertical-top');
    } else if (!$maintrs.hasClass('vertical-top')) {
        $maintrs.addClass('vertical-top');
        $listtrs.addClass('vertical-top');
    }
    setTimeout(function () {
        var h = $maintrs.height();
        $listtrs.find('th').css('height', h + 'px');
    }, 100);
}
//导入数据 -- 步骤
var ModImportThirdContent = function () {
    var html = '';
    html += '<div class="row" id="importthird" style="margin-left:0;margin-right:0;">';
    ///头
    html += GetHeaderHtml(HasSeqNo && IsUpdate ? 4 : 3);

    if (IsUpdate) {
        html += '<div class="importbody body-import-state" style="display: none;">';
    } else {
        html += '<div class="importbody body-import-state">';
    }

    //导入状态
    html += '<div class="importtip">请选择导入后的数据状态</div>';
    html += '<div class="importstates">';
    html += '<div class="importstate">';
    html += '<input type="radio" id="temporary" name="state" value="0"/>';
    html += '<label class="importstateheader" for="temporary">草稿</label>';
    html += '<div class="importstatetext"><div class="dot"></div>需要在系统点击提交，方可生效</div>';
    html += '<div class="importstatetext"><div class="dot"></div>导入将执行数据填充规则、计算公式</div>';
    html += '</div>';
    if (IsWorkflow) {
        html += '<div class="importstate">';
        html += '<input type="radio" id="valid" name="state" value="1" checked />';
        html += '<label class="importstateheader" for="valid">生效</label>';
        html += '<div class="importstatetext"><div class="dot"></div>无需在系统点击提交，直接生效</div>';
        html += '<div class="importstatetext"><div class="dot"></div>导入将忽略审批流程</div>';
        html += '<div class="importstatetext"><div class="dot"></div>导入将执行数据填充规则、计算公式、业务规则、表单提交校验规则，表单提交校验不通过的数据将不导入</div>';
        html += '</div>';
    } else {
        html += '<div class="importstate">';
        html += '<input type="radio" id="valid" name="state" value="1" checked />';
        html += '<label class="importstateheader" for="valid">生效</label>';
        html += '<div class="importstatetext"><div class="dot"></div>无需在系统点击提交，直接生效</div>';
        html += '<div class="importstatetext"><div class="dot"></div>导入将执行数据填充规则、计算公式、业务规则、表单提交校验规则，表单提交校验不通过的数据将不导入</div>';
        html += '</div>';
    }
    html += '</div>';
    html += '</div>';

    //导入进度
    if (IsUpdate) {
        html += '<div class="importbody body-import-process" id="importprocess">';
    } else {
        html += '<div class="importbody body-import-process" id="importprocess" style="display: none;">';
    }
    html += '<div class="progresswrapper">'
    html += '<div class="el-progress-circle" style="width:97px;height:97px;">';
    html += '<svg viewBox="0 0 100 100">';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke="#e5e9f2" stroke-width="4" fill="none" class="el-progress-circle__track"></path>';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke-linecap="round" stroke="#1890FF" stroke-width="4" fill="none" class="el-progress-circle__path" style="stroke-dasharray: 224px, 299.08px; stroke-dashoffset: 224.31px; transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>';
    html += '</svg>';
    html += '</div>';
    html += '</div>';
    html += '<div class="importprocessnum">0%</div>';
    html += '<div class="importprocesstext">正在导入...</div>';
    html += '<div class="importprocesstext">注意：导入过程中请勿刷新或关闭页面，否则可能导致导入数据不完全</div>';
    html += '</div>';
    //导入错误页面
    html += '<div class="importbody body-import-error" style="display: none;">';
    html += '<div id="successtext" style="margin-top:33px;"></div>';
    html += '<div id="failtext" style="margin-top:33px;"></div>';
    html += '</div>';
    html += '</div>';
    html += '<div class="modal-body-mini" style="display:none">body-mini</div>';
    return html;
};
function ModImportThirdBuild() {
    if (ModImportThird == null || $.isEmptyObject(ModImportThird)) {
        ModImportThird = $.IModal({
            Title: "<span class='title'>" + importTitle + "</span><span class='littletitle'>" + AppName + '</span>',
            OnShowBeforeCallback: function () {
                mod3 = this.Container;
            },
            OnShowCallback: function () {
                mod3.find('.icon-guanbi').click(function () {
                    if (importProcessFlag) {
                        if (ImportExportProcess != 0 && ImportExportProcess != 100) {
                            return false;
                        } else {
                            clearInterval(internetInterval);
                        }
                    }
                    $tableTip.hide();
                    ImportOver();
                });
                if (IsUpdate) {
                    mod3.find('.btn_ok').click();
                }
            },
            OnHiddenCallback: function () {
                ModImportThird.destroy();
            },
            Height: 550,
            Width: 800,
            ShowBack: true,
            HasIframe: false,
            Type: 1,
            Content: ModImportThirdContentResult,
            ShowInRootWindow: true,
            ToolButtons: [
                {
                    Text: '取消',
                    Theme: 'btn_cancel',
                    CallBack: function () {
                        ImportOver();
                        clearInterval(internetInterval);
                        ModImportThird.hide();
                    }
                },
                {
                    Text: '下一步',
                    Theme: 'btn_ok',
                    CallBack: function () {
                        importProcessFlag = true;
                        mod3.addClass('import-export-ing');
                        closeTipText = "正在导入...";
                        ModImportThird.SetFooter([
                            {
                                Text: '隐藏此窗口',
                                Theme: 'btn_ok',
                                CallBack: function () {
                                    $.MsgFilter.remove();
                                    mod3.hide();
                                    addMiniModal(ImportExportProcess);
                                }
                            }
                        ]);
                        mod3.find('.btn_ok').width(102);
                        mod3.find('.body-import-state').hide();
                        mod3.find('.body-import-process').show();

                        //0 草稿 , 1 生效
                        var status = mod3.find('.importstate [name="state"]:checked').val();
                        var postDataJson = {
                            ActionName: 'ImportData',
                            SchemaCode: SchemaCode,
                            ImportGuid: ImportGuid,
                            Status: status,
                            FromNum: 0
                        };

                        var importData = function (fromNum) {
                            postDataJson.FromNum = fromNum || 0;
                            $.ajax({
                                data: { PostData: JSON.stringify(postDataJson) },
                                url: '/ExcelImport/OnAction',
                                type: 'post',
                                success: function (data) {
                                    if (data.Successful) {
                                        SetImportingPercent(data.ReturnData.Percent);
                                        if (data.ReturnData.CheckAll) {
                                            closeTipText = "关闭对话框";
                                            var hasFail = false;
                                            console.log(data.ReturnData.FailReport)
                                            if (data.ReturnData.FailReport && data.ReturnData.FailReport.length) {
                                                for (var i = 0; i < data.ReturnData.FailReport.length; i++) {
                                                    if (data.ReturnData.FailReport[i].Quantity > 0) {
                                                        hasFail = true;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (hasFail) {
                                                //有未导入数据
                                                mod3.find('.body-import-process').hide();
                                                mod3.find('.body-import-error').show();
                                                var successtext = '';
                                                var failtext = '';
                                                for (var i = 0; i < data.ReturnData.SuccessReport.length; i++) {
                                                    if (i == 0) {
                                                        successtext = '已成功导入主表数据' + data.ReturnData.SuccessReport[i].Quantity + '条';
                                                    } else {
                                                        successtext += '，&nbsp;' + data.ReturnData.SuccessReport[i].Schema + '数据' + data.ReturnData.SuccessReport[i].Quantity + '条';
                                                    }
                                                }
                                                for (var i = 0; i < data.ReturnData.FailReport.length; i++) {
                                                    if (i == 0) {
                                                        failtext = '导入失败主表数据' + data.ReturnData.FailReport[i].Quantity + '条';
                                                    } else {
                                                        failtext += '，&nbsp;' + data.ReturnData.FailReport[i].Schema + '数据' + data.ReturnData.FailReport[i].Quantity + '条';
                                                    }
                                                }
                                                failtext += '，&nbsp;请<a href="javascript: ;" class="error-report download"><span class="aufont icon-base-download"></span>下载未导入数据</a>修改后重新上传。'
                                                mod3.find('#successtext').html(successtext);
                                                mod3.find('#failtext').html(failtext);

                                                closeTipText = "关闭对话框";
                                                ModImportThird.SetFooter([
                                                    {
                                                        Text: '确定',
                                                        Theme: 'btn_ok',
                                                        CallBack: function () {
                                                            ImportOver();
                                                            clearInterval(internetInterval);
                                                            ModImportThird.hide();
                                                        }
                                                    }
                                                ]);
                                                mod3.find('.btn_ok').css('width', 65);
                                                var downLoadUrl = '/ExcelExport/OnAction' +
                                                    '?PostData={ "ActionName": "ReExportWhenImportFaild", "SchemaCode":"' + SchemaCode +
                                                    '", "ActionGuid": "' + ImportGuid + '"}';
                                                mod3.find('.body-import-error a.download').attr('downurl', downLoadUrl);
                                                modMini && modMini.find('.title').text('有未导入数据，点击查看详情');
                                                setTimeout(function () {
                                                    modMini && modMini.find('.process-desc').text('100%');
                                                }, 0)
                                            } else {
                                                var successReport = data.ReturnData.SuccessReport;
                                                ModImportFourthContentResult = ModImportFourthContent(successReport);
                                                if (!modMini) {
                                                    ModImportThird.hide();
                                                    ModImportFourthBuild();
                                                } else {
                                                    modMini.find('.title').text('导入完成!');
                                                    modMini && modMini.find('.progress-bar-inner').width('100%');
                                                    modMini.find('.progress-bar-ing').removeClass('progress-bar-ing').addClass('progress-bar-ok');
                                                    modMini.find('.process-desc').text('').addClass('aufont icon-base-check-circle');
                                                }
                                            }

                                            setTimeout(function () {
                                                $.ListView.RefreshView();
                                            }, 500);
                                        } else {
                                            importData(data.ReturnData.FromNum);
                                        }
                                    } else {
                                        !pauseImportExport && showImportError(data.ErrorMessage);
                                    }
                                },
                                error: function (data) {
                                    mod3.find('.body-import-state').hide();
                                    mod3.find('.body-import-process').show();
                                    mod3.removeClass('import-export-ing');
                                    closeTipText = "关闭对话框";
                                    ModImportThird.SetFooter([
                                        {
                                            Text: '确定',
                                            Theme: 'btn_ok',
                                            CallBack: function () {
                                                ExportOver();
                                                clearInterval(internetInterval);
                                                ModImportThird.hide();
                                            }
                                        }
                                    ]);
                                    !pauseImportExport && showImportError('导入出错');
                                }
                            });
                        }
                        importData();
                    }
                }
            ],
            Class: importMoadlClass
        });
    } else {
        ModImportThirdContent.show();
    }
    initTipAndGuide();
}
function SetImportingPercent(percent) {
    //修改为设置进度条
    ImportExportProcess = percent;
    mod3.find('.importprocessnum').html(ImportExportProcess + '%');
    mod3.find('.el-progress-circle__path').css('stroke-dasharray', (224 + 292 / 100 * ImportExportProcess) + 'px 299.08px');
    modMini && modMini.find('.progress-bar-inner').width(ImportExportProcess + '%');
    modMini && modMini.find('.process-desc').text(ImportExportProcess + '%');

    if (ImportExportProcess == 100) {
        importProcessFlag = false;
        if (modMini) {
            if (modMini.find('.title').text() != '有未导入数据，点击查看详情') {
                modMini.find('.process-desc').text('');
            }
        }
    }
};
function GetImportingPercent(delay) {
    return;
    delay = delay || 1000;
    var postDataJson = {
        ActionName: 'GetImportingPercent',
        SchemaCode: SchemaCode,
        ImportGuid: ImportGuid
    };
    $.ajax({
        data: { PostData: JSON.stringify(postDataJson) },
        url: '/ExcelImport/OnAction',
        type: 'post',
        success: function (data) {
            if (data.Successful) {
                //处理进度条
                ImportExportProcess = data.ReturnData.Percent;
                mod3.find('.importprocessnum').html(ImportExportProcess + '%');
                mod3.find('.el-progress-circle__path').css('stroke-dasharray', (224 + 292 / 100 * ImportExportProcess) + 'px 299.08px');
                modMini && modMini.find('.progress-bar-inner').width(ImportExportProcess + '%');
                modMini && modMini.find('.process-desc').text(ImportExportProcess + '%');
                if (data.ReturnData.Percent < 100) {
                    if (delay < 4000) {  //请求间隔逐步到4000
                        delay += 100;
                    }
                    if (data.ReturnData.Percent > 90) { //最后到2000
                        delay = 2000;
                    }
                    setTimeout(function () { GetImportingPercent(delay); }, delay);
                } else if (data.ReturnData.Percent == 100) {
                    importProcessFlag = false;
                    if (modMini) {
                        if (modMini.find('.title').text() != '有未导入数据，点击查看详情') {
                            modMini.find('.process-desc').text('');
                        }
                    }
                }
            }
        }
    });
}
function addMiniModal(process) {
    if (modMini) {
        modMini.remove();
    }
    var html = '';
    html += '<div class="import-modal-mini" style="cursor:pointer;">';
    if (mod5) {
        html += '<div class="title">数据导出中...</div>';
    } else {
        html += '<div class="title">数据导入中...</div>';
    }
    html += '<div class="process">';
    html += '<div class="progress-bar progress-bar-ing">';
    html += '<div class="progress-bar-outer"><div class="progress-bar-inner bar-transition" style="width: ' + process + '%;"></div></div>';
    html += '</div>';
    html += '</div>';
    html += '<span class="process-desc">' + process + '%</span>';
    html += '</div>';
    modMini = $(html);
    $(document.body).append(modMini);
    modMini.off('click.showDetail').on('click.showDetail', function () {
        var complete = modMini.find('.progress-bar-ok').length;
        modMini.remove();
        modMini = undefined;
        $.MsgFilter.show();
        if (ModImportThird && !$.isEmptyObject(ModImportThird)) {
            //导入
            if (complete) {
                ModImportThird.hide();
                ModImportFourthBuild();
            } else {
                mod3 && mod3.show();
            }
            closeTipText = '正在导入...';
        } else {
            //导出
            if (complete) {
                mod5.find('#exportprocess').hide();
                mod5.find('#exportsuccess').show();
                ModExportSecond.SetFooter([
                    {
                        Text: '确定',
                        Theme: 'btn_ok',
                        CallBack: function () {
                            ExportOver();
                            clearInterval(internetInterval);
                            ModExportSecond.hide();
                        }
                    }
                ])
            } else {
                mod5.find('#exportprocess').show();
                mod5.find('#exportsuccess').hide();
            }
            mod5.show();
            closeTipText = '正在导出...';
        }
    });
}
//完成
var ModImportFourthContent = function (successReport) {
    var html = '';
    html += '<div class="row" id="importprocess" style="margin-left:0;margin-right:0;">';
    ///头
    html += GetHeaderHtml(HasSeqNo && IsUpdate ? 5 : 4);
    html += '<div class="importbody">';
    html += '<div class="progresswrapper">'
    html += '<div class="el-progress-circle" style="width:97px;height:97px;">';
    html += '<svg viewBox="0 0 100 100">';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke="#52c41a" stroke-width="4" fill="none"></path>';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke-linecap="round" stroke="#52c41a" stroke-width="4" fill="none"></path>';
    html += '</svg>';
    html += '</div>';
    html += '</div>';
    html += '<div class="importprocessnum">';
    html += '<span class="aufont icon-base-check" style="color: #52c41a; font-size: 30px;"></span>';
    html += '</div>';
    html += '<div class="importsuccessdes" style="color: rgba(0,0,0,.45);width:302px;height:88px;margin-left:165px;margin-top:40px">';

    var text = '';
    for (var i = 0; i < successReport.length; i++) {
        if (i == 0) {
            text = '已成功导入主表数据' + successReport[i].Quantity + '条';
        } else {
            text += '，&nbsp;' + successReport[i].Schema + '数据' + successReport[i].Quantity + '&nbsp;条';
        }
    }
    text += '！';

    html += text;
    html += '</div>';
    html += '</div>';
    return html;
};
function ModImportFourthBuild() {
    if (ModImportFourth == null || $.isEmptyObject(ModImportFourth)) {
        ModImportFourth = $.IModal({
            Title: "<span class='title'>" + importTitle + "</span><span class='littletitle'>" + AppName + '</span>',
            OnShowBeforeCallback: function () {
                mod4 = this.Container;
            },
            OnShowCallback: function () {
                mod4.find('.icon-guanbi').click(function () {
                    $tableTip.hide();
                    clearInterval(internetInterval);
                    ImportOver();
                });
            },
            OnHiddenCallback: function () {
                ModImportFourth.destroy();
            },
            Height: 550,
            Width: 800,
            ShowBack: true,
            HasIframe: false,
            Type: 1,
            Content: ModImportFourthContentResult,
            ShowInRootWindow: true,
            ToolButtons: [
                {
                    Text: '完成',
                    Theme: 'btn_ok',
                    CallBack: function () {
                        ImportOver();
                        clearInterval(internetInterval);
                        ModImportFourth.hide();
                    }
                }
            ],
            Class: importMoadlClass
        });
    } else {
        ModImportFourthContent.show();
    }
    initTipAndGuide();
}
//取消导入
function ImportOver() {
    pauseImportExport = true;
    if (!ImportGuid) {
        return;
    }
    var datas = {};
    datas['ActionName'] = 'ClearImportCache';
    datas['SchemaCode'] = SchemaCode;
    datas['ImportGuid'] = ImportGuid;
    datas = { PostData: JSON.stringify(datas) };
    $.ajax({
        data: datas,
        datatype: 'json',
        type: 'POST',
        url: '/ExcelImport/OnAction',
        async: false,
        success: function (data) {
        }
    });
    $(window).unbind('beforeunload');
}

/**
 * 导出入口
 */
function ShowExportColums(Code) {
    
    if (modMini && !pauseImportExport) {
        showImportError('系统正在导入或导出数据，请导入或导出完成后再点击');
        return false;
    }
    var listView = $.ListView.Element;
    var hasData = !listView.find('#rightBottomTableContainer .no-records-found').length;
    if (!hasData && !pauseImportExport) {
        showImportError('没有可导出的数据');
        return false;
    }

    ExportGuid = $.IGuid();
    SchemaCode = Code;
    ImportExportProcess = 0;
    var index = window.document.title.indexOf('-') + 1;
    AppName = window.document.title.slice(index).trim();
    var columnType = '1'; //0:导入;1:导出;
    var datas = {};
    datas['ActionName'] = 'GetColumns';
    datas['SchemaCode'] = Code;
    datas = { PostData: JSON.stringify(datas) };
    $.ajax({
        data: datas,
        datatype: 'json',
        type: 'POST',
        url: '/ExcelExport/OnAction',
        async: true,
        success: function (data) {
            if (!ModExportFirstContentResult) ModExportFirstContentResult = ModExportFirstContent();
            ModExportFirstBuild();
            ExportTableBuild(data.ReturnData['Columns']);
        }
    });
}
var ModExportFirstContent = function () {
    var html = '';
    html += '<div class="exportmodal" id="myexportmodal">';
    html += '<div class="exportbody">';
    html += '<div class="exportbodytitle">';
    html += '请选择导出字段';
    html += '</div>';
    html += '<div class="exporttablecontainer">';
    html += "<div > <div class='exportcheckallcontainer'><input type='checkbox' value='' id='exportcolumncheckall' checked /><label for='exportcolumncheckall' style='float: left; margin-left: -9px;color:rgba(0,0,0,.65);'  class='importcolumnlabel importcolumnlabelall'><span class='aufont icon-base-check-square' style='width:16px;height:16px;'></span>&nbsp;&nbsp;全选</label></div></div>";
    html += '<table class="exporttable">';
    html += '<tbody>';
    html += '</tbody>';
    html += '</table>';
    html += '</div>';
    html += '</div>';
    html += '</div>';
    return html;
};
function ModExportFirstBuild() {
    if (ModExportFirst == null || $.isEmptyObject(ModExportFirst)) {
        ModExportFirst = $.IModal({
            Title: "<span class='title'>导出数据</span><span class='littletitle'>" + AppName + '</span>',
            OnShowBeforeCallback: function () {
                mod5 = this.Container;
            },
            OnShowCallback: function () {
                internetInterval = setInterval(function () {
                    if (!window.navigator.onLine && !pauseImportExport) {
                        showImportError('网络中断，请检查网络！');
                        if (mod3 && mod3.find('#importprocess').css('display') != 'none') {
                            mod3.find('.btn_ok').html('关闭').width(35).click(function () {
                                ImportOver();
                                clearInterval(internetInterval);
                                ModImportThird.hide();
                            })
                        }
                        if (mod5 && mod5.find('#exportprocess')) {
                            mod5.find('.btn_ok').html('关闭').width(35).click(function () {
                                ExportOver();
                                clearInterval(internetInterval);
                                ModExportSecond.hide();
                            })
                        }
                    }
                }, 10000);
                //全选逻辑状态
                var $exportcolumncheckall = mod5.find('#exportcolumncheckall');
                var $exceptcheckallcheckboxes = mod5.find('.exporttable input[type=checkbox]');
                $exportcolumncheckall.click(function () {
                    if ($(this).prop('checked')) {
                        mod5.find('.importcolumnlabelall span').removeClass('icon-base-minus-square').addClass('icon-base-check-square')
                    } else {
                        mod5.find('.importcolumnlabelall span').removeClass('icon-base-check-square').addClass('icon-base-minus-square')

                    }
                    $exceptcheckallcheckboxes.each(function () {
                        if (!$(this).prop('disabled')) {
                            $(this).prop('checked', $exportcolumncheckall.prop('checked'));
                            if ($exportcolumncheckall.prop('checked')) {
                                $(this).parent().find('label>span').removeClass('icon-base-rectangle-o').addClass('icon-base-check-square').css('color', '#1890FF');
                            } else {
                                $(this).parent().find('label>span').removeClass('icon-base-check-square').addClass('icon-base-rectangle-o').css('color', '#D9D9D9');
                            }
                        }
                    });
                });
                $exceptcheckallcheckboxes.click(function () {
                    if (!$(this).prop('checked')) {
                        $exportcolumncheckall.prop('checked', false);
                        mod5.find('.importcolumnlabelall span').removeClass('icon-base-check-square').addClass('icon-base-minus-square')
                        $(this).parent().find('label>span').removeClass('icon-base-check-square').addClass('icon-base-rectangle-o').css('color', '#D9D9D9');
                    } else if (mod5.find('.exporttable input[type=checkbox]:not(:checked)').length == 0) {
                        $exportcolumncheckall.prop('checked', true);
                        mod5.find('.importcolumnlabelall span').removeClass('icon-base-minus-square').addClass('icon-base-check-square')
                    }
                    if ($(this).prop('checked')) {
                        $(this).parent().find('label>span').removeClass('icon-base-rectangle-o').addClass('icon-base-check-square').css('color', '#1890FF');
                    }
                });
                //叉号关闭清缓存
                mod5.find('.icon-guanbi').click(function () {
                    $tableTip.hide();
                    clearInterval(internetInterval);
                    ExportOver();
                });
                //字段值个数不超过十个字
                var $labels = mod5.find('.exporttable .exportli label .text');

                for (var i = 0; i < $labels.length; i++) {
                    var $label = $($labels[i]);
                    if ($label.text().length > 12) {
                        $label.text($label.text().slice(0, 12) + '...');
                    }
                }
            },
            OnHiddenCallback: function () {
                ModExportFirst.destroy();
            },
            Height: 544,
            Width: 800,
            ShowBack: true,
            HasIframe: false,
            Type: 1,
            Content: ModExportFirstContentResult,
            ShowInRootWindow: true,
            Class: ' import-export-modal export-modal ModExport',
            ToolButtons: [
                {
                    Text: '导出',
                    Theme: 'btn_ok',
                    CallBack: function () {
                        var PropertyNames = '';
                        mod5
                            .find('#myexportmodal')
                            .find('.exporttable')
                            .find('tbody')
                            .find("[type='checkbox']")
                            .each(function () {
                                var $this = $(this);
                                if ($this.attr('id') == 'exportcolumncheckall') return;
                                if ($this.prop('checked')) PropertyNames += $this.val() + ';';
                            });
                        if (PropertyNames == "") {
                            $.IShowWarn("提示", "请选择字段");
                            return false;
                        }
                        ModExportFirst.hide();
                        if (!ModExportSecondContentResult) ModExportSecondContentResult = ModExportSecondContent();
                        ModExportSecondBuild(PropertyNames);
                    }
                }
            ]
        });
    } else {
        ModExportFirst.show();
    }
    closeTipText = '关闭对话框';
    initTipAndGuide();
}
var ModExportSecondContent = function () {
    var html = '';
    html += '<div class="row" id="exportsecond" style="margin-left:0;margin-right:0;">';
    ///体
    html += '<div class="exportbody body-export-process" id="exportprocess">';
    html += '<div class="progresswrapper">'
    html += '<div class="el-progress-circle" style="width:97px;height:97px;">';
    html += '<svg viewBox="0 0 100 100">';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke="#e5e9f2" stroke-width="4" fill="none" class="el-progress-circle__track"></path>';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke-linecap="round" stroke="#1890FF" stroke-width="4" fill="none" class="el-progress-circle__path" style="stroke-dasharray: 224px, 299.08px; stroke-dashoffset: 224.31px; transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>';
    html += '</svg>';
    html += '</div>';
    html += '</div>';
    html += '<div class="exportprocessnum">0%</div>';
    html += '<div class="exportprocesstext">正在导出...</div>';
    html += '</div>';
    //成功界面
    html += '<div id="exportsuccess" style="display:none;">';
    html += '<div class="progresswrapper">'
    html += '<div class="el-progress-circle" style="width:97px;height:97px;">';
    html += '<svg viewBox="0 0 100 100">';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke="#52c41a" stroke-width="4" fill="none"></path>';
    html += '<path d="M 50 50 m 0 -47 a 47 47 0 1 1 0 94 a 47 47 0 1 1 0 -94" stroke-linecap="round" stroke="#52c41a" stroke-width="4" fill="none"></path>';
    html += '</svg>';
    html += '</div>';
    html += '</div>';
    html += '<div class="importprocessnum" style="text-align:center;">';
    html += '<span class="aufont icon-base-check" style="color: #52c41a; font-size: 30px;"></span>';
    html += '</div>';
    html += '<div class="importsuccessdes">';
    //html += '已成功导出主数据100条， 子表1数据20条,子表2数据30条！';
    html += '</div>';
    html += '</div>';
    return html;
};
function ModExportSecondBuild(PropertyNames) {
    if (ModExportSecond == null || $.isEmptyObject(ModExportSecond)) {
        ModExportSecond = $.IModal({
            Title: "<span class='title'>导出数据</span><span class='littletitle'>" + AppName + '</span>',
            OnShowCallback: function () {
                Export(PropertyNames);
                mod5.find('.icon-guanbi').click(function () {
                    if (ImportExportProcess != 100 && !pauseImportExport) {
                        return false;
                    }
                    pauseImportExport = false;
                    clearInterval(internetInterval);
                    $tableTip.hide();
                    ExportOver();
                });
            },
            OnHiddenCallback: function () {
                ModExportSecond.destroy();
            },
            Height: 544,
            Width: 800,
            ShowBack: true,
            HasIframe: false,
            Type: 1,
            Content: ModExportSecondContentResult,
            ShowInRootWindow: true,
            OnShowBeforeCallback: function () {
                mod5 = this.Container;
                mod5.find('.btn_ok').width(75);
            },
            ToolButtons: [
                {
                    Text: '隐藏此窗口',
                    Theme: 'btn_ok',
                    CallBack: function () {
                        $.MsgFilter.remove();
                        mod5.hide();
                        if (mod5.find('.btn_ok').text() == '隐藏此窗口') {
                            addMiniModal(ImportExportProcess);
                        }
                    }
                }
            ],
            Class: ' import-export-modal export-modal'
        });
    } else {
        ModExportSecond.show();
    }
    closeTipText = '';
    initTipAndGuide();
}
function ExportTableBuild(data) {
    mod5.find(".modal-footer").prepend("<div class='exporttip'>提示：系统将导出筛选后的数据</div>")
    var $tabletbody = mod5
        .find('#myexportmodal')
        .find('.exporttable')
        .find('tbody');
    $tabletbody.html('');
    var html = '';
    var columnLen = data.length;
    var hasSpecialField = false;
    for (var i = 0; i < columnLen; i++) {
        var colObj = data[i];
        var mustCheck = colObj.IsMustBeChecked;
        var specialField = colObj.IsSpecialField;
        html += '<tr class="exportli"><td>';
        {
            var disName = colObj.DisPlayName || '';
            if (disName.length > 10) {
                disName = disName.slice(0, 10);
                disName += '...';
            }
            if (mustCheck) {
                html +=
                    "<div><input class='defaultselectinput' checked disabled type='checkbox' value='" +
                    colObj.FieldName +
                    "' id='" +
                    colObj.FieldName +
                    '_export' +
                    "' /><label for='" +
                    colObj.FieldName +
                    '_export' +
                    "'  style='float: left;color: rgba(0,0,0,0.35);width:210px;' class='importcolumnlabel'>" +
                    '<span class="aufont icon-base-check-square" style="width:16px;height:16px;color:#D9D9D9;"></span>' + '<div class="text" style="display:inline-block;">&nbsp;&nbsp;' + disName + '</div>' +
                    '</label></div>';
            } else {
                if (!hasSpecialField && specialField) {
                    hasSpecialField = true;
                }
                html +=
                    "<div > <input " +
                    (specialField ? '' : 'checked') +
                    " type='checkbox' value='" +
                    colObj.FieldName +
                    "' id='" +
                    colObj.FieldName +
                    '_export' +
                    "' /><label for='" +
                    colObj.FieldName +
                    '_export' +
                    "'  style='float: left;color:rgba(0,0,0,0.65);width:210px;' class='importcolumnlabel'>" +
                    '<span class="aufont ' +
                    (specialField ? 'icon-base-rectangle-o' : 'icon-base-check-square') +
                    ' " ></span>' + '<div class="text">&nbsp;&nbsp;' + disName + '</div>' +
                    '</label></div>';
            }
        }
        html += '</td></tr>';
    }
    $tabletbody.html(html);
    if (hasSpecialField) {
        mod5.find('#exportcolumncheckall').prop("checked", false);
        mod5.find('.exportcheckallcontainer .icon-base-check-square').removeClass('icon-base-check-square').addClass('icon-base-minus-square');
    }
}
//导出数据 -- Excel
function Export(PropertyNames) {
    var mysearchParamsJson = JSON.stringify($.AppFilter.getFiterJson());;
    var myscopeType = $.AppFilter.getScopeType();
    var datas = {};
    datas["ActionName"] = "ExportData";
    datas["SchemaCode"] = mySchemaCode;
    datas["SearchParamsJson"] = mysearchParamsJson;
    datas["PropertyNames"] = PropertyNames;
    datas["SortOrder"] = $.ListView.SortOrder;
    datas["SortName"] = $.ListView.SortName;
    datas["ScopeType"] = myscopeType;
    datas['ActionGuid'] = ExportGuid;
    datas['IsAjax'] = true;
    var params = { PostData: JSON.stringify(datas) };
    ExportProgress();//设置进度条
    $.ajax({
        data: params,
        datatype: 'json',
        type: 'POST',
        url: '/ExcelExport/OnAction',
        async: true,
        success: function (result) {
            var success = result.Successful;
            if (success) {
                datas['IsAjax'] = false;
                var form = $('form.export-hide-form');
                var input = form.find('input');
                if (!form.length) {
                    form = $("<form class='export-hide-form'></form>"); //定义一个form表单  
                    form.attr("style", "display:none");
                    form.attr("target", "");
                    form.attr("method", "post");
                    form.attr("action", "/ExcelExport/OnAction");
                    var input = $("<input>");
                    input.attr("type", "hidden");
                    input.attr("name", "PostData");
                    input.attr("value", JSON.stringify(datas));
                    $("body").append(form);//将表单放置在web中  
                    form.append(input);
                } else {
                    input.attr("value", JSON.stringify(datas));
                }
                form.submit();
                mod5.addClass('import-export-ing');
                closeTipText = "正在导出...";
            } else {
                pauseImportExport = true;
                //!pauseImportExport && showImportError(result.ErrorMessage);
                mod5.find('.el-progress-circle__path').css('stroke', '#F5222D');
                mod5.find('.exportprocesstext').css('margin-top','80px').html('当前导出数据量较多，导出时间较长，请分批导出数据（建议单批导出数据量不超过20000行）');
                mod5.find('.btn_ok').html('关闭').width(35).click(function () {
                    ExportOver();
                    clearInterval(internetInterval);
                    ModExportSecond.hide();
                });

            }
        }
    });
}
//导出数据 -- 获取进度条
function ExportProgress(delay) {
    delay = delay || 0;
    var datas = {};
    datas['ActionName'] = 'GetExportDataProgress';
    datas['ActionGuid'] = ExportGuid;
    datas['SchemaCode'] = SchemaCode;
    datas = { PostData: JSON.stringify(datas) };
    $.ajax({
        data: datas,
        datatype: 'json',
        type: 'POST',
        url: '/ExcelExport/OnAction',
        async: false,  //这里如果使用异步会和表单提交产生冲突
        success: function (data) {
            if (data.Successful) {
                var p = data.ReturnData.ExportDataProgress;
                if (p) {
                    ImportExportProcess = 0;
                    if (p.ProgressTotalNo) {
                        ImportExportProcess = Math.ceil(p.ProgressValue / p.ProgressTotalNo * 100);
                    }
                    //ImportExportProcess = Math.ceil(ImportExportProcess / 2);
                    if (p.ActionName == '查询数据') {
                        ImportExportProcess = Math.ceil(ImportExportProcess * 0.4);
                    } else if (p.ActionName == '构建模型') {
                        ImportExportProcess = 40 + Math.ceil(ImportExportProcess * 0.5);
                    } else if (p.ActionName == '构建Excel') {
                        ImportExportProcess = 90 + Math.ceil(ImportExportProcess * 0.1);
                    } else if (p.ActionName == '完成') {
                        ImportExportProcess = 100;
                    } else {
                        ImportExportProcess = 0;
                    }
                    ExportSettingProcess(ImportExportProcess, data.ReturnData.ExportDataProgress);
                }
                if (ImportExportProcess < 100) {
                    if (delay < 5000) {
                        delay += 400;
                    }
                    if (ImportExportProcess > 80) {
                        delay = 2000;
                    }
                    setTimeout(function () { ExportProgress(delay); }, delay);
                } else {
                    closeTipText = "关闭对话框";
                    mod5.addClass('import-export-ing');
                }
            }
        },
        error: function (error) {}
    });
}
function ExportSettingProcess(exportprocess,progress) {
    mod5.find('.exportprocessnum').html(exportprocess + '%');
    mod5.find('.el-progress-circle__path').css('stroke-dasharray', (224 + 292 / 100 * exportprocess) + 'px 299.08px');
    modMini && modMini.find('.progress-bar-inner').width(exportprocess + '%');
    modMini && modMini.find('.process-desc').text(exportprocess + '%');
    if (exportprocess >= 100) {
        closeTipText = '关闭对话框';
        exportprocess = 100;
        mod5.find('#exportprocess').hide();
        mod5.find('#exportsuccess').show();
        ExportSuccess(progress);
        if (modMini) {
            modMini.find('.title').text('导出完成!');
            modMini.find('.progress-bar-ing').removeClass('progress-bar-ing').addClass('progress-bar-ok');
            modMini.find('.process-desc').text('').addClass('aufont icon-base-check-circle');
        }
        mod5.find('.btn_ok').width(35).text('确定').click(function () {
            if (modMini) {
                modMini.remove();
            }
            ModExportSecond.hide();
            clearInterval(internetInterval);
            ExportOver();
        });
        mod5.find('.icon-guanbi').click(function () {
            clearInterval(internetInterval);
        });
        return;
    }
}
//导出成功
function ExportSuccess(childDetails) {
    var text = '已成功导出主数据' + childDetails.ProgressTotalNo + '条';
    for (var subTab in childDetails.ChildTableDetails) {
        text += '，&nbsp;' + subTab + '数据' + childDetails.ChildTableDetails[subTab] + '条';
    }
    text += '！';
    mod5.find('#exportsuccess .importsuccessdes').html(text);
};
//导出失败
function ExportError(msg) {
    var $exportsecond = mod5.find('#exportsecond');
    $exportsecond.find('.checkerrorloading').hide();
    $exportsecond.find('.importsuccess').hide();
    $exportsecond.find('.importerrorbigtext').html(msg);
    $exportsecond.find('.importerrorbig').show();
}
function ExportOver() {
    var datas = {};
    datas['ActionName'] = 'ExportDataOver';
    datas['SchemaCode'] = mySchemaCode;
    datas['ActionGuid'] = ExportGuid;
    datas = { PostData: JSON.stringify(datas) };
    $.ajax({
        data: datas,
        datatype: 'json',
        type: 'POST',
        url: '/ExcelExport/OnAction',
        async: true,
        success: function (data) { }
    });
}
//end导出


/**
 * 公共方法
 */
//获取导入公共头部
function GetHeaderHtml(currentStep) {
    var html = '';
    var step = 1;
    var stepComplete = false;
    var currentClass = 'notthis';

    html += '<div class="importheader row">';
    if (step < currentStep) {
        stepComplete = true;
        currentClass += ' step-complete';
    } else if (step == currentStep) {
        currentClass = 'isthis';
    }
    html += '<div class="importheaderitem">';
    html += '<div class="importheaderitemnumber ' + currentClass + '">';
    html += '<span class="step ' + (stepComplete ? ' aufont icon-base-check ' : '') + '">'
        + (stepComplete ? '' : step) + '</span>';
    html += '</div>';
    html += '<div class="importheaderitemtext ' + currentClass + '">';
    html += '上传Excel';
    html += '</div>';
    html += '</div>';
    html += '<div class="importdivider ' + currentClass + '"></div>';

    if (HasSeqNo && IsUpdate) {
        ++step;
        stepComplete = false;
        currentClass = 'notthis';
        if (step < currentStep) {
            stepComplete = true;
            currentClass += ' step-complete';
        } else if (step == currentStep) {
            currentClass = 'isthis';
        }
        html += '<div class="importheaderitem">';
        html += '<div class="importheaderitemnumber ' + currentClass + '">';
        html += '<span class="step ' + (stepComplete ? ' aufont icon-base-check ' : '') + '">'
            + (stepComplete ? '' : step) + '</span>';
        html += '</div>';
        html += '<div class="importheaderitemtext ' + currentClass + '">';
        html += '选择匹配字段';
        html += '</div>';
        html += '</div>';
        html += '<div class="importdivider ' + currentClass + '"></div>';
    }

    ++step;
    stepComplete = false;
    currentClass = 'notthis';
    if (step < currentStep) {
        stepComplete = true;
        currentClass += ' step-complete';
    } else if (step == currentStep) {
        currentClass = 'isthis';
    }
    html += '<div class="importheaderitem">';
    html += '<div class="importheaderitemnumber ' + currentClass + '">';
    html += '<span class="step ' + (stepComplete ? ' aufont icon-base-check ' : '') + '">'
        + (stepComplete ? '' : step) + '</span>';
    html += '</div>';
    html += '<div class="importheaderitemtext ' + currentClass + '">';
    html += '校验数据';
    html += '</div>';
    html += '</div>';
    html += '<div class="importdivider ' + currentClass + '"></div>';

    ++step;
    stepComplete = false;
    currentClass = 'notthis';
    if (step < currentStep) {
        stepComplete = true;
        currentClass += ' step-complete';
    } else if (step == currentStep) {
        currentClass = 'isthis';
    }
    html += '<div class="importheaderitem">';
    html += '<div class="importheaderitemnumber ' + currentClass + '">';
    html += '<span class="step ' + (stepComplete ? ' aufont icon-base-check ' : '') + '">'
        + (stepComplete ? '' : step) + '</span>';
    html += '</div>';
    html += '<div class="importheaderitemtext ' + currentClass + '">';
    html += '导入数据';
    html += '</div>';
    html += '</div>';
    html += '<div class="importdivider ' + currentClass + '"></div>';

    ++step;
    stepComplete = false;
    currentClass = 'notthis';
    if (step < currentStep) {
        stepComplete = true;
        currentClass += ' step-complete';
    } else if (step == currentStep) {
        currentClass = 'isthis';
    }
    html += '<div class="importheaderitem">';
    html += '<div class="importheaderitemnumber ' + currentClass + '">';
    html += '<span class="step ' + (stepComplete ? ' aufont icon-base-check ' : '') + '">'
        + (stepComplete ? '' : step) + '</span>';
    html += '</div>';
    html += '<div class="importheaderitemtext ' + currentClass + '">完成</div>';
    html += '</div>';
    html += '</div>';
    html += '<div class="importheaderitemtext ' + currentClass + '">';

    html += '</div>';
    return html;
}
//获取随机数
function getRandom(min, max) {
    var r = Math.random() * (max - min);
    var re = Math.round(r + min);
    re = Math.max(Math.min(re, max), min);
    return re;
}
//初始化下一步按钮、关闭按钮的Tips
function initTipAndGuide() {
    $tableTip.length == 0 && ($tableTip = $('<div class="table-tip" style="display: none;"></div>').appendTo($("body")));
    $(document.body).off('mouseenter')
        .on('mouseenter', '.modal-header .close, .modal-footer .btn_disabled, .tool-tip',
        function (e) {
            var $that = $(this);
            var offset = $that.offset();
            var tooltipText = $that.attr('tooltip-title');

            if (tooltipText) {
            } else if (e.target.tagName == 'BUTTON') {
                tooltipText = nextTipText;
            } else {
                tooltipText = closeTipText;
            }
            if (tooltipText != "") {
                $tableTip.text(tooltipText);
                $tableTip.css('border', 'none');
                var leftpx = offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft();
                var bottompx = e.target.tagName == 'BUTTON' ? $(window).height() - offset.top + 6 + $(window).scrollTop() : $(window).height() - offset.top - 55 + $(window).scrollTop();
                $tableTip.text(tooltipText).css({
                    left: leftpx,
                    bottom: bottompx,
                    background: "rgba(0, 0, 0, .75)"
                }).toggle();;
            }
        });
    $(document.body).off("mouseleave")
        .on("mouseleave", '.modal-header .close, .modal-footer button, .tool-tip',
        function () {
            $tableTip && $tableTip.hide();
        });
}
//导入alert框，临时方案
var showImportError = function (msg, title) {
    msg = msg || '';
    if (!msg) return;
    if (msg.length < 35 && !title) {
        var options = {
            message: '<span style="font-family: initial;">' + msg + '</span>',
            type: "danger",
            fade_in_speed: 1000,
            ShowInRootWindow: true,
            cls: importErrorClass
        };
        $.H3WarningBox.show(options);
    } else {
        var that = this;
        title = title || '出错了！';
        this.$box = $('<div class="alert import-alert import-alert-box" role="alert"></div>');
        this.$boxContent = $('<div class="alert-box-content"></div>');
        this.$boxIcon = $('<div class="icon aufont icon-base-close-circle-o"></div>');
        this.$boxClose = $('<div class="close"><span class="aufont icon-base-close"></span></div>');
        this.$boxMsgWrap = $('<div class="message-wrap"></div>');
        this.$boxMsgTitle = $('<div class="title">' + title + '</div>');
        this.$boxMsg = $('<div class="content" style="font-family: initial;">' + msg + '</div>');

        this.$boxMsgWrap.append(this.$boxMsgTitle).append(this.$boxMsg);
        this.$boxContent.append(this.$boxMsgWrap);
        this.$box.append(this.$boxIcon).append(this.$boxClose).append(this.$boxContent);

        this.$box.off("mouseenter").on("mouseenter", function () {
            //停止淡出
            $(this).stop().css({
                opacity: "",
                height: ""
            });
            if (that.timeOut) {
                clearTimeout(that.timeOut);
            }
            $(this).off("mouseleave").on("mouseleave", function () {
                that.timeOut = setTimeout(function () { that._fadeout() }, option.fade_in_speed);
            });
        })

        //淡出并移除
        this._fadeout = function () {
            this.timeOut = this.$box.fadeOut(1000, function () {
                that.$box.remove();
            })
        }

        this.$box.fadeIn(option.fade_in_speed, function () {
            that.timeOut = setTimeout(
                function () { that._fadeout(); }, 3000
            )
        });

        this.$boxClose.off('click.close').on('click.close', function () {
            that._fadeout();
        });

        this.$box.appendTo($(top.document.body));
    }
}
//导入确认框，临时方案
var showImportConfirm = {
    defaultOptions: {
        title: 'title',
        message: 'message',
        error_detail: '',
        type: 'danger',
        ShowInRootWindow: false,
        showFooter: true,
        callBack: undefined
    },
    show: function (options) {
        try {
            var options = $.extend({}, this.defaultOptions, options);
            this.popup.add(options);
        } catch (msg) { }
    },
    popup: {
        _modal:
        '<div class="modal fade import-confirm" tabindex="-1" role="dialog" data-backdrop="false"></div>',
        _modal_dialog: '<div class="modal-dialog " role="document"></div>',
        _modal_content: '<div class="modal-content"></div>',
        _modal_header: '<div class="modal-header"></div>',
        _modal_body: ' <div class="modal-body"></div></div>',
        _modal_icon: '<div class="icon aufont icon-base-exclamation-circle"></div>',
        _modal_message:
        '<div style="display: block;" class="message-wrap">' +
        '<span class="title"></span></br>' +
        '<span class="content"></span></div>',
        _modal_footer:
        '<div class="modal-footer"><div type="button" class="button btn btn-cancel">取消</div><div type="button" class="button btn btn-ok">确定</div></div>',
        add: function (option) {
            option.ShowInRootWindow = true;
            var that = this;
            $.H3Popup.IsShow = true;
            if (option && option.message) {
                var $modal = $(this._modal);
                var $Header = $(this._modal_header);
                var dialogClassName = 'modal-dialog-' + option.type;
                if (option.title) {
                    $Header.find('h4').html(option.title);
                }
                var $modaldialog = $(this._modal_dialog).addClass(dialogClassName);

                var $message = $(this._modal_message);
                $message.find('.title').html(option.title);
                $message.find('.content').html(option.message);
                var $modalbody = $(this._modal_body)
                    .append($(this._modal_icon))
                    .append($message);

                var $modalfooter = $(this._modal_footer);
                var $modalcontent = $(this._modal_content)
                    .append($modalbody);

                if (option.showFooter) {
                    $modalcontent
                        .append($modalfooter);
                }

                $modaldialog.append($modalcontent);
                if (option.ShowInRootWindow) {
                    $modal.append($modaldialog).appendTo($(top.window.document.body));
                } else {
                    $modal.append($modaldialog).appendTo($('body'));
                }
                $modal.modal('show');
                //高斯模糊处理
                $.MsgFilter.show();
                //确定按钮
                $modalfooter.find('.btn-ok').click(function () {
                    $modal.modal('hide');
                    $(this).attr('disabled', 'disabled').text('处理中');
                    if ($.isFunction(option.callBack)) {
                        option.callBack.apply(that, [true]);
                    }
                });

                //取消操作
                $modalfooter.find('.btn-cancel').click(function () {
                    $modal.modal('hide');
                    if ($.isFunction(option.callBack)) {
                        option.callBack.apply(that, [false]);
                    }
                });

                $modal.on('shown.bs.modal', function () {
                    //设置居中
                    var windowHeight = 0;
                    if (option.ShowInRootWindow) {
                        windowHeight = $(top.window).height();
                    } else {
                        windowHeight = $(window).height();
                    }
                    var topValue = windowHeight / 2 - $modalcontent.height();
                    $modalcontent.css('margin-top', topValue);
                });

                $modal.on('hidden.bs.modal', function () {
                    $.H3Popup.IsShow = false;
                    $modal.remove();
                    $.MsgFilter.remove();
                });
            }
        }
    }
};
//代理所有的下载模板、错误报告按钮
$('body').off('click.downloadreport')
    .on('click.downloadreport', '.import-export-modal a.download', function (e) {
        e.stopPropagation();
        //下载导入导出文件时，先做一些（参数、权限。。。）校验
        var target = $(e.target);
        if (target.hasClass("disabled")) {
            return;
        }
        var url = target.attr('downurl') || '';
        if (target.hasClass('error-report')) {
            target.addClass("disabled");
        }
        if (url) {
            needClearCache = false;
            var paramsIndex = url.indexOf('?');
            var action = url.slice(0, paramsIndex);
            var paramsStr = url.slice(paramsIndex + 1).split('=')[1];
            var params = {};
            try {
                params = JSON.parse(paramsStr);
            } catch (e) {
                paramsStr = paramsStr.replace(new RegExp('"', "gm"), '');
                paramsStr = paramsStr.slice(1, params.length - 1);
                paramsStr = paramsStr.split(',');
                for (var i = 0; i < paramsStr.length; i++) {
                    var kv = paramsStr[i].split(':');
                    params[kv[0]] = params(kv[1]);
                }
            }
            if (!params.ActionGuid) {
                var ActionGuid = $.IGuid();
                params.ActionGuid = ActionGuid;
            }
            params.IsAjax = true;
            var datas = { PostData: JSON.stringify(params) };
            $.ajax({
                data: datas,
                datatype: 'json',
                type: 'POST',
                url: action,
                async: true,
                success: function (result) {
                    if (result.Successful) {
                        params.IsAjax = false;
                        var form = $('form.export-hide-form');
                        var input = form.find('input');
                        if (!form.length) {
                            form = $("<form class='export-hide-form'>"); //定义一个form表单  
                            form.attr("style", "display:none");
                            form.attr("target", "");
                            form.attr("method", "post");
                            form.attr("action", action);
                            var input = $("<input>");
                            input.attr("type", "hidden");
                            input.attr("name", "PostData");
                            input.attr("value", JSON.stringify(params));
                            $("body").append(form);//将表单放置在web中  
                            form.append(input);
                        } else {
                            form.attr("action", action);
                            input.attr("value", JSON.stringify(params));
                        }
                        form.submit();
                        setTimeout(function () {
                            needClearCache = true;
                        }, 1000);
                    } else {
                        needClearCache = true;
                        !pauseImportExport && showImportError(result.ErrorMessage);
                    }
                },
                error: function () {
                    needClearCache = true;
                }
            });

        }
    });;
$.AppFilter = {};

$.AppFilter.init = function (downState) {
    var that = this;
    that.$Controlls = {};
    var throttledOnChangeHandler = $.Throttle(function () {
        $.ListView.RefreshView();
    }, window, 600);

    $(".mycombobox").each(function () {
        var $this = $(this);
        var propertyname = $(this).attr("id");
        var item = $this.FormComboBox({ IsQueryControl:true });
        if (QueryDefaultValues[propertyname]) {
            item.SetValue(QueryDefaultValues[propertyname][0])
        }
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    $(".mycombobox").removeClass("form-group");
    $(".mycomboboxlist").each(function () {
        var $this = $(this);
        var propertyname = $(this).attr("id");
        var item = $this.FormComboBoxList({ IsQueryControl: true });
        if (QueryDefaultValues[propertyname]) {
            item.SetValue(QueryDefaultValues[propertyname][0])
        }
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    $(".mycomboboxlist").removeClass("form-group");
    // 统一初始化datetimepicker
    $(".mydatetime").each(function () {
        var $this = $(this);
        var propertyname = $(this).attr("id");
        var displayFormat = $(this).attr("data-datetimemode");
        var item = $this.AppFilterDateTime({
            "begineValue": QueryDefaultValues[propertyname] ? QueryDefaultValues[propertyname][0] : null,
            "endValue": QueryDefaultValues[propertyname] ? QueryDefaultValues[propertyname][1] : null,
            "DisplayFormat": displayFormat
        });
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    // 统一初始化选人控件
    $(".myuserpicker").each(function () {
        var $this = $(this);
        var propertyname = $this.attr("id");
        var item = $this.AppFilterUser({
            defaultValue: QueryDefaultValues[propertyname] ? QueryDefaultValues[propertyname] : null
        });
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    $(".myuserpicker").removeClass("form-group");

    // 统一初始化关联查询控件
    var $myquerys = $(".mydropdown");
    $(".mydropdown").each(function () {
        var $this = $(this);
        var propertyname = $this.attr("id");
        var item = $this.FormMultiQuery({ IsQueryControl: true });
        //add by xc  
        var v = QueryDefaultValues[propertyname];
        if (v && v.length > 0) {
            item.SetValue(v[0], false);
        }
        //end
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    })
    $(".mydropdown").removeClass("form-group");

    // 统一初始化下拉多选
    $(".mymultiselect").each(function () {
        var propertyname = $(this).attr("id");
        var item = $(this).AppFilterMultiSelect({
            defaultValue: QueryDefaultValues[propertyname] ? QueryDefaultValues[propertyname] : null
        });
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    // 下拉搜索自动获取焦点
    $(".dropdown-toggle").on('click', function () {
        var that = this;
        setTimeout(function () {
            $(that).next().find("input.multiselect-search").focus();
        }, 200);
    });

    $(".FormAreaSelect").each(function () {
        var $this = $(this);
        var item = $this.FormAreaSelect({ IsQueryControl: true});
        var propertyname = $(this).attr("id");
        try {
            if (QueryDefaultValues[propertyname] && QueryDefaultValues[propertyname][0])
                item.SetValue(QueryDefaultValues[propertyname][0])
        }
        catch (e) {
            console.log("address default error");
        }
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    //统一初始化下拉框关联
    $(".FormDropDownList").each(function () {
        var myDropDownList = $(this).FormDropDownList({ IsQueryControl: true });
        var propertyname = $(this).attr("id");
        var v = QueryDefaultValues[propertyname];
        if (v && v.length > 0) {
            myDropDownList.SetValue(v[0]);
        }
        //end
        myDropDownList.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = myDropDownList;
    });
    $(".FormDropDownList").removeClass("form-group");
    //文本，关联下拉框
    $(".FormComboBoxList").each(function () {
        var item = $(this).FormComboBoxList({ IsQueryControl: true });
        var propertyname = $(this).attr("id");
        var v = QueryDefaultValues[propertyname];
        if (v && v.length > 0) {
            item.SetValue(v[0]);
        }
        //end
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    $(".FormComboBoxList").removeClass("form-group");
    //数字
    $(".mynum").each(function () {
        var $this = $(this);
        var propertyname = $(this).attr("id");
        var item = $this.AppFilterNum({
            defaultValue: QueryDefaultValues[propertyname] ? QueryDefaultValues[propertyname] : null
        });
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    //布尔
    $(".mybool").each(function () {
        var $this = $(this);
        var propertyname = $(this).attr("id");
        var item = $this.AppFilterBool({
            "defaultValue": QueryDefaultValues[propertyname] ? QueryDefaultValues[propertyname] : null,
            "propertyname":propertyname
        });
        item.OnChange = throttledOnChangeHandler;
        that.$Controlls[propertyname] = item;
    });
    //权限
    $("#scopeType").unbind("change").bind("change", function () {
        $.ListView.RefreshView();
    });
    //子表
    $("#showchildschemacode").unbind("change").bind("change", function () {
        ResetAppFilter();
        $.ListView.RefreshViewIncludeHeader();
    });

    //模式切换
    $("#toggleMode").unbind("change").bind("change", function () {
        var index = this.selectedIndex;
        var value = this.options[index].value;
        var url = window.location.href;
        if (getUrlParam('mode') != "") {
            var reg = new RegExp("(^|&)mode=([^&]*)(&|$)")
            var r = window.location.search.substr(1).match(reg);
            if (r != null) {
                window.location.href = url.replace(r[0], "&mode=" + value)
            }
        } else {
            //最后一个是#，会有问题
            if (url.charAt(url.length - 1) == "#") {
                url = url.substr(0, url.length - 1);
            }
            window.location.href = url + "&mode=" + value
        }
    });

    // 查询条件展开or收起icon-shang2
    $("#toggleSearch").unbind("click").bind("click", function () {
        var $this = $(this);
        if ($this.find("i").hasClass("icon-arrow-up-double-b")) {
            $this.find("i").removeClass("icon-arrow-up-double-b").addClass("icon-arrow-down-double-b");
            $("#divSearch > div.form-group:gt(0)").hide("fast");
            that.downState = true;
        }
        else {
            $this.find("i").removeClass("icon-arrow-down-double-b").addClass("icon-arrow-up-double-b");
            $("#divSearch > div.form-group").show("fast");
            that.downState = false;
        }
        setTimeout(function () {
            $.ListView.GetResetHeight();
        }, 500)
    });
    // 查询条件多于2行时默认触发收起
    var seachRowCount = $("#divSearch > div.form-group").length;
    if (seachRowCount > 1) {
        $("#toggleSearch").show().trigger("click");
    }
    else { 
        $("#toggleSearch").hide();
        // 没有查询条件时，隐藏查询按钮
        if (seachRowCount === 0) {
            $("#Search").hide();
        }
    }
}

// 获取查询条件
// 返回 {"":[],...}
$.AppFilter.getFiterJson = function () {
    var that = this;
    var searchParams = {};
    for (var key in that.$Controlls) {
        var item = that.$Controlls[key];
        var v = item.GetValue();
        if ($.isArray(v)) {
            searchParams[key] = v;
        } else if (typeof v == "string") {
            if (v && v.length > 0) {
                v = v.split(';');
                var newV = [];
                for (var i = 0; i < v.length; i++) {
                    if (v[i] == undefined || v[i] == 'undefined') {
                        newV.push('');
                    } else if (v[i] != '') {
                        newV.push(v[i]);
                    }
                }
                searchParams[key] = newV;
            }
        } else {
            searchParams[key] = [];
        }
    }
    return searchParams;
};
$.AppFilter.getScopeType = function () {
    return $("#scopeType").val();
};
$.AppFilter.getChildSchemaCode = function () {
    return $("#showchildschemacode").val();
};
//列表多的控件
(function ($) {
    //----------------------------------------时间-------------------------------------------------
    var AppFilterDateTime = function (opt, Base) {
        var that = this;
        this.Options = $.extend({}, opt);
        this.base = $(Base);
        this.StartTime = null;
        this.EndTime = null;
        this.configurable = true;
        this.ConstValue = {
            startClass: "",
            endClass: ""
        }
        this.Init();
    };
    $.fn.AppFilterDateTime = function (opt) {
        return new AppFilterDateTime(opt, this);
    }
    AppFilterDateTime.prototype = {
        Init: function () {
            var that = this;
            if (that.Options.OnChange && $.isFunction(that.Options.OnChange)) {
                that.OnChange = that.Options.OnChange;
            }
            that.Render();
        },
        Render: function () {
            var that = this;
            var $this = this.base;
            var h = new Array();
            h.push('<div class="input-group-addon">从</div>');
            h.push('<input type="text" data-datetimemode="' + that.Options.DisplayFormat + '" class="form-control myform-control mydatetimepicker mytimestart" />');
            h.push('<div class="input-group-addon" style="border-width: 1px 0 1px 0;">至</div>');
            h.push('<input type="text" data-datetimemode="' + that.Options.DisplayFormat + '" class="form-control myform-control mydatetimepicker mytimeend" />');
            $this.html(h.join(""));
            var v = new Array();
            $this.find(".mydatetimepicker").each(function () {
                var $picker = $(this);
                var propertyname = $picker.parent().attr("id");
                var minView = 2;
                var startView = 2;
                var mode = $picker.attr("data-datetimemode");
                if (mode == "yyyy-mm-dd hh:ii") {
                    minView = 0;
                }
                if (mode == "hh:ii") {
                    startView = 0;
                    minView = 0;
                }
                if (mode == "yyyy-mm") {
                    startView = 3;
                    minView = 3;
                }

                $picker.datetimepicker({
                    language: 'zh-CN',
                    format: mode,
                    todayBtn: true,
                    autoclose: true,
                    startView: startView, // 选择器打开后首先显示的视图
                    minView: minView// 选择器能够提供的最精确的视图
                }).on("change", function () {
                    if (!that.configurable)
                        return;
                    if ($picker.hasClass("mytimestart")) {
                        that.StartTime = this.value
                    }
                    if ($picker.hasClass("mytimeend")) {
                        that.EndTime = this.value
                    }
                    that.OnChange();
                });
                if ($picker.hasClass("mytimestart") && that.Options.begineValue) {
                    $picker.val(that.Options.begineValue);
                    v.push(that.Options.begineValue);
                }
                else {
                    v.push(null);
                }
                if ($picker.hasClass("mytimeend") && that.Options.endValue) {
                    $picker.val(that.Options.endValue);
                    v.push(that.Options.endValue);
                } else {
                    v.push(null);
                }
            });
            that.StartTime = that.Options.begineValue;
            that.EndTime = that.Options.endValue;
            that.Value = v;
            var $btnGroup = $('<div class="input-group-btn">');
            var $btn = $('<button data-toggle="dropdown" class="btn btn-default dropdown-toggle"style="width: 15px;padding-left: 0px;padding-right:0px;height:30px;" type="button"><span class="caret"></span></button>');
            var $ul = $('<ul class="dropdown-menu pull-right">');
            $ul.append('<li data-type="1"><a href="#">当天</a></li>');
            $ul.append('<li data-type="6"><a href="#">昨天</a></li>');
            $ul.append('<li data-type="2"><a href="#">本周</a></li>');
            $ul.append('<li data-type="3"><a href="#">本月</a></li>');
            $ul.append('<li data-type="7"><a href="#">上月</a></li>');
            $ul.append('<li data-type="4"><a href="#">本季度</a></li>');
            $ul.append('<li data-type="5"><a href="#">本年度</a></li>');
            $ul.find("li").click(function () {
                var type = $(this).data("type");
                var myDate = new Date();
                switch (type + "")//1=当天；2=本周；3=本月；4=本季度；5=本年度；6=昨天；7=上月
                {
                    case "1":
                        beginvalue = myDate.getFullYear() + "-" + (myDate.getMonth() - 0 + 1) + "-" + myDate.getDate();
                        endvalue = myDate.getFullYear() + "-" + (myDate.getMonth() - 0 + 1) + "-" + myDate.getDate();
                        break;
                    case "2":
                        beginvalue = $.GetFirstAndLastdayweek()[0];
                        endvalue = $.GetFirstAndLastdayweek()[1];
                        break;
                    case "3":
                        beginvalue = myDate.getFullYear() + "-" + (myDate.getMonth() - 0 + 1) + "-" + "01";
                        endvalue = $.GetFirstAndLastMonthDay(myDate.getFullYear(), (myDate.getMonth() - 0 + 1));
                        break;
                    case "4":
                        beginvalue = $.GetFirstAndLastDayQuarter()[0];
                        endvalue = $.GetFirstAndLastDayQuarter()[1];
                        break;

                    case "5":
                        beginvalue = myDate.getFullYear() + "-" + "01" + "-" + "01";
                        endvalue = myDate.getFullYear() + "-" + "12" + "-" + "31";
                        break;
                    case "6":
                        myDate = myDate.AddDays(-1);
                        beginvalue = myDate.getFullYear() + "-" + (myDate.getMonth() - 0 + 1) + "-" + myDate.getDate();
                        endvalue = myDate.getFullYear() + "-" + (myDate.getMonth() - 0 + 1) + "-" + myDate.getDate();
                        break;
                    case "7":
                        myDate = myDate.AddMonths(-1);
                        beginvalue = myDate.getFullYear() + "-" + (myDate.getMonth() - 0 + 1) + "-" + "01";
                        endvalue = $.GetFirstAndLastMonthDay(myDate.getFullYear(), (myDate.getMonth() - 0 + 1));
                        break;
                }
                $this.find("input.mydatetimepicker:first").val(beginvalue);
                $this.find("input.mydatetimepicker:last").val(endvalue);
                that.StartTime = beginvalue;
                that.EndTime = endvalue;
                that.OnChange();
            });
            $btnGroup.append($btn).append($ul);
            $this.append($btnGroup);
        },
        GetValue: function () {
            return [this.StartTime, this.EndTime];
        },
        SetValue: function (v) {
            if ($.isArray(v) && v.length > 1) {
                this.configurable = false;
                this.base.find("input.mydatetimepicker:first").val(v[0]);
                this.base.find("input.mydatetimepicker:last").val(v[1]);
                this.StartTime = v[0];
                this.EndTime = v[1];
                this.OnChange();
                this.configurable = true;
            }
        },
        OnChange: function () {

        }
    }
   
    //----------------------------------------数字-------------------------------------------------
    var AppFilterNum = function (opt, Base) {
        var that = this;
        this.Options = $.extend({}, opt);
        this.base = $(Base);
        this.Value = null;
        this.configurable = true;
        this.Init();

    };
    $.fn.AppFilterNum = function (opt) {
        return new AppFilterNum(opt, this);
    }
    AppFilterNum.prototype = {
        Init: function () {
            var that = this;
            if (that.Options.OnChange && $.isFunction(that.Options.OnChange)) {
                that.OnChange = that.Options.OnChange;
            }
            that.Render();
        },
        Render: function () {
            var that = this;
            var $this = that.base;
            var h = new Array();
            h.push('<div class="input-group-addon">从</div>');
            var value1 = that.Options.defaultValue && that.Options.defaultValue.length > 0 ?(that.Options.defaultValue[0]+""):"";
            h.push(' <input type="text" class="form-control myform-control" value="' + value1 + '" />');
            h.push('<div class="input-group-addon" style="border-width: 1px 0 1px 0;">至</div>');
            var value2 = that.Options.defaultValue && that.Options.defaultValue.length > 1 ? (that.Options.defaultValue[1] + "") : "";
            h.push('<input type="text" class="form-control myform-control" value="' + value2 + '" />');
            $this.html(h.join(""));
            that.Value = [value1, value2];
            $this.find("input").unbind("change").bind("change", function () {
                if (!that.configurable)
                    return;
                var v = new Array();
                if ($.isNumeric($this.find("input:first").val())) {
                    v.push($this.find("input:first").val());
                }
                else {
                    v.push(null);
                }
                if ($.isNumeric($this.find("input:last").val())) {
                    v.push($this.find("input:last").val());
                }
                else {
                    v.push(null);
                }
                that.Value = v;
                that.OnChange();
            })
        },
        GetValue: function () {
            return this.Value;
        },
        SetValue: function (v) {
            if ($.isArray(v)) {
                if (v.length > 1) {
                    this.configurable = false;
                    var vv = new Array();
                    if ($.isNumeric(v[0])) {
                        this.base.find("input:first").val(v[0]);
                        vv.push(v[0]);
                    }
                    else {
                        vv.push(null);
                    }
                    if ($.isNumeric(v[1])) {
                        this.base.find("input:last").val(v[1]);
                    }
                    else {
                        vv.push(null);
                    }
                    this.Value = vv;
                    this.configurable = true;
                    this.OnChange();
                }
            }
        },
        OnChange: function () {

        }
    }
    //----------------------------------------布尔-------------------------------------------------
    var AppFilterBool = function (opt, Base) {
        var that = this;
        this.Options = $.extend({}, opt);
        this.base = $(Base);
        this.Value = null;
        this.configurable = true;
        this.Init();

    };
    $.fn.AppFilterBool = function (opt) {
        return new AppFilterBool(opt, this);
    }
    AppFilterBool.prototype = {
        Init: function () {
            var that = this;
            if (that.Options.OnChange && $.isFunction(that.Options.OnChange)) {
                that.OnChange = that.Options.OnChange;
            }
            that.Render();
        },
        Render: function () {
            var that = this;
            var $this = that.base;
            var h = new Array();
            var defaultValue = new Array();
            if (that.Options.defaultValue == "true") {
                h.push('<input id="' + that.Options.propertyname + 't" type="checkbox" value="true" checked="checked" />');
                defaultValue.push("true");
            }
            else {
                h.push(' <input id="' + that.Options.propertyname + 't" type="checkbox" value="true" />');
            }
            h.push('<label for="' + that.Options.propertyname + 't" class="checkbox-inline" style="margin:2px 10px 0 0">是</label>');
            if (that.Options.defaultValue == "false") {
                h.push('<input id="' + that.Options.propertyname + 'f" type="checkbox" value="false" checked="checked" />');
                defaultValue.push("false");
            }
            else {
                h.push(' <input id="' + that.Options.propertyname + 'f" type="checkbox" value="false" />');
            }
            h.push('<label for="' + that.Options.propertyname + 'f" class="checkbox-inline" style="margin:2px 10px 0 0">否</label>');
            that.Value = defaultValue;
            $this.html(h.join(""));
            $this.find("input").unbind("change").bind("change", function () {
                if (!that.configurable)
                    return;
                var v = [];
                $this.find("input:checked").each(function () {
                    v.push($(this).val());
                });
                that.Value = v;
                that.OnChange();
            })

        },
        GetValue: function () {
            return this.Value;
        },
        SetValue: function (v) {
            if ($.isArray(v)) {
                this.configurable = false;
                var vv = new Array();
                for (var i = 0; i < v.length; i++) {
                    if (v[i] == "false") {
                        this.base.find("input:last").prop("checked", true);
                        vv.push(v[i]);
                    }
                    if (v[i] == "true") {
                        this.base.find("input:first").prop("checked", true);
                        vv.push(v[i]);
                    }
                }
                this.Value = vv;
                this.OnChange();
                this.configurable = true;
            }
        },
        OnChange: function () {

        }
    }
    //----------------------------------------选人-------------------------------------------------
    var AppFilterUser = function (opt, Base) {
        var that = this;
        this.Options = $.extend({}, opt);
        this.configurable = true;
        this.base = $(Base).FormMultiUser({ IsQueryControl: true });
        this.Options.defaultValue ? this.base.SetValue(this.Options.defaultValue) : "";
        this.Value = null;
        this.Init();

    };
    $.fn.AppFilterUser = function (opt) {
        return new AppFilterUser(opt, this);
    }
    AppFilterUser.prototype = {
        Init: function () {
            var that = this;
            if (that.Options.OnChange && $.isFunction(that.Options.OnChange)) {
                that.OnChange = that.Options.OnChange;
            }
            this.base.OnChange = function () {
                if (!that.configurable)
                    return;
                that.OnChange();
            }
        },
        GetValue: function () {
            return this.base.GetUnitIDs();
        },
        SetValue: function (v) {
            if ($.isArray(v)) {
                this.configurable = false;
                this.base.SetValue(v);
                this.configurable = true;
                this.Value = v;
                this.OnChange();
            }
        },
        OnChange: function () {

        }
    }
}(jQuery));
(function (window) {
    var basicContext ={};
    var overflow = null;

    var ITEM      = 'item',
        SEPARATOR = 'separator',
        BUTTON='button',
        CHECKBOX = 'checkbox';
    var DIRECTION={
        UP:'up',
        DOWN:'down',
        LEFT:'left',
        RIGHT:'right'
    };

    basicContext.dom = function(elem) {
        if(elem){
            return document.querySelector('.basicContext ' + elem);
        }
        return document.querySelector('.basicContext');
    }

    basicContext.valid = function(item) {

        var emptyItem = (Object.keys(item).length===0 ? true : false);

        if (emptyItem===true)     item.type    = SEPARATOR;
        if (item.type==null)      item.type    = ITEM;
        if (item.class==null)     item.class   = '';
        if (item.visible!==false) item.visible = true;
        if (item.icon==null)      item.icon    = null;
        if (item.title==null)     item.title   = 'Undefined';

        // Add disabled class when item disabled
        if (item.disabled!==true) item.disabled = false;
        if (item.disabled===true) item.class += ' basicContext__item--disabled';

        // Item requires a function when
        // it's not a separator and not disabled
        if (item.fn==null && item.type!==SEPARATOR && item.disabled===false) {

            console.warn('Missing fn for item' +item.title);
            return false;

        }

        return true;

    }

    basicContext.buildItem = function(item, num) {

        var html = '',
            span = '',
            div = '';
        // Parse and validate item
        if (this.valid(item)===false) return '';

        // Skip when invisible
        if (item.visible===false) return '';

        // Give item a unique number
        item.num = num;

        // Generate span/icon-element
        var className = 'basicContext__icon ' + item.icon + ' ';

        if (item.type === BUTTON) {
            div = '<div class="' + item.icon+'" style="text-align: center;">确定</div >';
        }
        else if (item.type === CHECKBOX) {
            var id = $.IGuid();
            var checked = item.selected ? "checked" : "";
            div = "<div class='chk-box'><input type='checkbox' id='" + id + "' " + checked + "><label for='" + id + "'></label>" + item.title + "</div>";        
        }
        else if (item.icon!==null) span = "<span class='"+className+"'></span>";

        // Generate item
        if (item.type === ITEM) {
            html = "<tr class='basicContext__item " + item.class + "'><td class='basicContext__data' data-num='" + item.num + "'>" + span + item.title + "</td></tr>";

        } else if (item.type === SEPARATOR) {

            html = "<tr class='basicContext__item basicContext__item--separator'></tr>";
        }
        else if (item.type === CHECKBOX) {
            html = "<tr class='basicContext__item " + item.class + "'><td class='basicContext__data' data-num='" + item.num + "'>" + div + "</td></tr>";
        }
        else if (item.type === BUTTON) {
            html = "<tr class='basicContext__item " + item.class + "'><td class='basicContext__data' data-num='" + item.num + "'>" + div  + "</td></tr>";
        }
        return html;

    }

    basicContext.build = function(items,buttonItem) {

        var html = '';
        html+="<div class='basicContextContainer'>";
        html+="<div class='basicContext'>";
        //添加箭头框，模拟伪类:before
        html += "<div class='basicContext_before'></div>";
        html += "<div class='table_div'>";
        html += "<div style='max-height:360px;overflow:auto;'>";
        html+="<table>";
        html+="<tbody>";
        for(var i=0,len=items.length;i<len;i++){
            html+=this.buildItem(items[i], i);
        }
        html+="</tbody>";
        html += "</table>";
        html += "</div>";
       
        html += "</div>";
        //添加箭头框，模拟伪类:after
        html+="<div class='basicContext_after'></div>";
        html+="</div>";
        html+="</div>";
        return html;
    }

    basicContext.getNormalizedEvent = function(e) {
        var pos = {
            x : e.clientX,
            y : e.clientY
        };

        if (e.type==='touchend' && (pos.x==null || pos.y==null)) {

            // We need to capture clientX and clientY from original event
            // when the event 'touchend' does not return the touch position

            var touches = e.changedTouches;

            if (touches!=null&&touches.length>0) {
                pos.x = touches[0].clientX;
                pos.y = touches[0].clientY;
            }

        }

        // Position unknown
        if (pos.x==null || pos.x < 0) pos.x = 0;
        if (pos.y==null || pos.y < 0) pos.y = 0;

        return pos;

    }

    basicContext.getPosition = function(e, context,direction) {
        // Get the click position
        var normalizedEvent = this.getNormalizedEvent(e)

        // Set the initial position
        var x = normalizedEvent.x,
            y = normalizedEvent.y,
            rx=0,ry=0;
        // Get size of browser
        var browserSize = {
            width  : window.innerWidth,
            height : window.innerHeight
        };

        // Get size of context
        var contextSize = {
            width  : context.offsetWidth,
            height : context.offsetHeight
        };
        //if has dierction params
        if(direction){
            var r_direction="",r_left=0,r_top=0;//真实方位 箭头偏移的位置 top left
            var target=e.target;
            var pos=target.getBoundingClientRect();
            // calculate relative position of context
            if(direction==DIRECTION.UP){
                //向上显示
                x=pos.left+(pos.width/2);
                y=pos.top;

                //先判断y轴方向
                if((y-contextSize.height-5)<0){
                    //改为向下显示
                    ry=pos.bottom+5;
                    r_direction=DIRECTION.DOWN;
                    r_top=0;
                }else{
                    ry=y-contextSize.height-5;
                    r_direction=DIRECTION.UP;
                    r_top=contextSize.height;
                }
                //计算context的相对起始位置 x轴方向
                if((x+(contextSize.width/2))>browserSize.width){
                    //右对齐
                    rx=pos.right-contextSize.width;
                    r_left=contextSize.width-(pos.width/2)-3;
                }else if((x-contextSize.width/2)<0){
                    //左对齐
                    rx=pos.left;
                    r_left=pos.width/2-3;
                }else{
                    rx=x-contextSize.width/2;
                    r_left=contextSize.width/2-3;
                }

            }else if(direction==DIRECTION.DOWN){
                //向下显示
                x=pos.left+(pos.width/2);
                y=pos.bottom;
                //先判断y轴方向
                if((y+contextSize.height+5)>browserSize.height){
                    //改为向上显示
                    ry=pos.top-contextSize.height-5;
                    r_direction=DIRECTION.UP;
                    r_top=contextSize.height;
                }else{
                    ry=y+5;
                    r_direction=DIRECTION.DOWN;
                    r_top=0;
                }
                //计算context的相对起始位置 x轴方向
                if((x+(contextSize.width/2))>browserSize.width){
                    //右对齐
                    rx=pos.right-contextSize.width;
                    r_left=contextSize.width-(pos.width/2)-3;
                }else if((x-contextSize.width/2)<0){
                    //左对齐
                    rx=pos.left;
                    r_left=pos.width/2-3;
                }else{
                    rx=x-contextSize.width/2;
                    r_left=contextSize.width/2-3;
                }
            }else if(direction==DIRECTION.LEFT){
                x=pos.left;
                y=pos.top+pos.height/2;
                if((x-contextSize.width-5)<0){
                    //右侧显示
                    rx = pos.right + 5;
                    r_direction = "right";                    
                }else{
                    rx = x - contextSize.width - 5;
                    r_direction = "left";
                    r_left = contextSize.width;
                }
                //计算y轴方向的偏移
                if((y+contextSize.height/2)>browserSize.height){
                    //底部对齐
                    ry=pos.bottom-contextSize.height;
                }else if((y-contextSize.height)<0){
                    //顶部对齐
                    ry = y - contextSize.height / 2;
                }else{
                    ry=y-(contextSize.height/2);
                }
                r_top = contextSize.height / 2 - 6;
                //左侧显示
            }else if(direction==DIRECTION.RIGHT){
                //右侧显示
                x=pos.right;
                y=pos.top+pos.height/2;
                if(x+contextSize.width+5>browserSize.width){
                    //超出范围，左侧显示
                    rx=pos.left-contextSize.width-5;
                    r_direction="left";
                    r_left=contextSize.width;
                }else{
                    rx=x+5;
                    r_left=0;
                    r_direction="right";
                }
                //计算y轴方向的偏移
                if((y+contextSize.height/2)>browserSize.height){
                    //底部对齐
                    ry=pos.bottom-contextSize.height;
                    r_top=contextSize.height-pos.height/2-6;
                }else if((y-contextSize.height)<0){
                    //顶部对齐
                    ry=pos.top;
                    r_top=pos.height/2-6;
                }else{
                    ry=y-(contextSize.height/2);
                    r_top=contextSize.height/2-6;
                }
            }
            return { x: x, y: y, rx: rx, ry: ry, r_direction: r_direction, r_left: r_left, r_top: r_top};

        }else{

            // Fix position based on context and browser size
            if ((x + contextSize.width) > browserSize.width)   x = x - ((x + contextSize.width) - browserSize.width);
            if ((y + contextSize.height) > browserSize.height) y = y - ((y + contextSize.height) - browserSize.height);

            // Make context scrollable and start at the top of the browser
            // when context is higher than the browser
            if (contextSize.height > browserSize.height) {
                y = 0;
                context.classList.add('basicContext--scrollable');
            }

            // Calculate the relative position of the mouse to the context
            var rx = normalizedEvent.x - x,
                ry = normalizedEvent.y - y;

            return { x:x, y:y, rx:rx, ry:ry };
        }
    }

    basicContext.bind = function(item) {

        if (item.fn==null)        return false;
        if (item.visible===false) return false;
        if (item.disabled===true) return false;

        basicContext.dom("td[data-num='"+item.num+"']").onclick       = item.fn;
        //dom("td[data-num='"+item.num+"']").oncontextmenu = item.fn;

        return true;

    }

    basicContext.show = function(items, e, direction, fnClose, fnCallback) {

        // Build context
        var html = this.build(items);

        // Add context to the body
        document.body.insertAdjacentHTML('beforeend', html);

        // Save current overflow and block scrolling of site
        if (overflow==null) {
            overflow = document.body.style.overflow;
            document.body.style.overflow = 'hidden';
        }

        // Cache the context
        var context = this.dom();

        // Calculate position
        var position = this.getPosition(e, context,direction);

        // Set position
        if(direction){
            context.style.left=position.rx+'px';
            context.style.top=position.ry+'px';
            context.style.opacity=1;

            //设置before、after的样式
            var r_direction=position.r_direction;
            var r_left=position.r_left;
            var r_top=position.r_top;
            var before=document.querySelector('.basicContext_before');
            var after=document.querySelector('.basicContext_after');
            if(r_direction==DIRECTION.RIGHT){
                //右侧显示，左侧箭头
                before.style.top=r_top +'px';
                after.style.top=r_top +'px';
                before.style.left='-11px';
                before.style.borderRightColor="rgba(245,245,245,1)";
                after.style.left='-12px';
                after.style.borderRightColor ="rgba(0,0,0,0.22)";
            }else if(r_direction==DIRECTION.LEFT){
                //左侧显示，右侧箭头
                before.style.top=r_top +'px';
                after.style.top=r_top +'px';
                before.style.left=r_left-1+'px';
                before.style.borderLeftColor="rgba(245,245,245,1)";
                after.style.left=r_left+'px';
                after.style.borderLeftColor ="rgba(0,0,0,0.22)";
            }else if(r_direction===DIRECTION.UP){
                //顶部显示，向下箭头
                before.style.left=r_left +'px';
                after.style.left=r_left +'px';
                before.style.top=r_top-1+'px';
                before.style.borderTopColor="rgba(245,245,245,1)";
                after.style.top=r_top+'px';
                after.style.borderTopColor ="rgba(0,0,0,0.22)";

            }else if(r_direction==DIRECTION.DOWN){
                //底部显示，向上箭头
                before.style.left=r_left +'px';
                after.style.left=r_left +'px';
                before.style.top=r_top-11+'px';
                before.style.borderBottomColor="#fff";
                after.style.top=r_top-12+'px';
                after.style.borderBottomColor="#888";
            }
        }else{
            context.style.left            = position.x +'px';
            context.style.top             = position.y +'px';
            context.style.transformOrigin = position.rx+'px ' +position.ry +'px';
            context.style.opacity = 1;
            //此处箭头暂隐藏
            document.querySelector('.basicContext_before').style.display = 'none';
            document.querySelector('.basicContext_after').style.display = 'none';
        }



        // Close fn fallback
        if (fnClose==null) fnClose = this.close;

        // Bind click on background
        context.parentElement.onclick       = fnClose;
        context.parentElement.oncontextmenu = fnClose;

        // Bind click on items
        items.forEach(this.bind);

        // Do not trigger default event or further propagation
        if (typeof e.preventDefault === 'function')  e.preventDefault();
        if (typeof e.stopPropagation === 'function') e.stopPropagation();

        // Call callback when a function
        if (typeof fnCallback === 'function') fnCallback();

        return true;

    }

    basicContext.visible = function() {

        var elem = this.dom();

        if (elem==null || elem.length===0) return false;
        else                               return true;

    }

    basicContext.close = function() {
        if (basicContext.visible()===false) return false;

        var container = document.querySelector('.basicContextContainer');

        container.parentElement.removeChild(container);

        // Reset overflow to its original value
        if (overflow!=null) {
            document.body.style.overflow = overflow;
            overflow = null;
        }

        return true;

    }

    window.basicContext = basicContext;
}(window));




;
(function ($) {
    'use strict';
    function transitionEnd() {
        var el = document.createElement('mm');
        var transEndEventNames = {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd otransitionend',
            transition: 'transitionend'
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                };
            }
        }
        return false;
    }
    $.fn.emulateTransitionEnd = function (duration) {
        var called = false;
        var $el = this;
        $(this).one('mmTransitionEnd', function () {
            called = true;
        });
        var callback = function () {
            if (!called) {
                $($el).trigger($transition.end);
            }
        };
        setTimeout(callback, duration);
        return this;
    };
    var $transition = transitionEnd();
    if (!!$transition) {
        $.event.special.mmTransitionEnd = {
            bindType: $transition.end,
            delegateType: $transition.end,
            handle: function (e) {
                if ($(e.target).is(this)) {
                    return e.handleObj.handler.apply(this, arguments);
                }
            }
        };
    }
    var MetisMenu = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, MetisMenu.DEFAULTS, options);
        this.transitioning = null;
        if (this.options.toggle) { }
        //this.show();
        this.init();
    };
    MetisMenu.TRANSITION_DURATION = 350;
    MetisMenu.DEFAULTS = {
        toggle: true,
        doubleTapToGo: false,
        onlyforOrganization: false,
        AddChildNodes: function () { }
    };
    MetisMenu.prototype.init = function () {
        var $this = this;
        this.$element.find('li.active').has('ul').children('ul').addClass('collapse in');
        this.$element.find('li').not('.active').has('ul').children('ul').addClass('collapse');
        if (this.options.Ctrl) {
            this.$element.data("ctrl", this.options.Ctrl);
        }
        //add the 'doubleTapToGo' class to active items if needed
        if (this.options.doubleTapToGo) {
            this.$element.find('li.active').has('ul').children('a').addClass('doubleTapToGo');
        }
        this.$element.find('li').children('a').children('.fa-arrow,.icon-xiangyou').on('click.metisMenu', { ctrl: this.$element.data("ctrl") }, function (e) {
            var self = $(this);
            var self = self.parent();
            var UnitID = self.attr("id");
            if ($this.options.onlyforOrganization) {
                if (self.attr("HasChild") != "HasChild")
                    return;
            }
            var $parent = self.parent('li');
            var $list = $parent.children('ul');
            e.preventDefault();
            if ($parent.hasClass('active')) {
                $this.hide($list);
            } else {
                if ($this.options.onlyforOrganization) {
                    var selfarray = new Array();
                    selfarray.push(self);
                    $this.options.AddChildNodes.apply(this, selfarray);
                }
                if ($parent.has("ul").length == 0)
                    return;
                $list = $parent.children('ul');
                $this.show($list);
                if (e.data.ctrl) {
                    var units = e.data.ctrl.GetUnitIDs();
                    if (units && units.length > 0) {
                        for (var i = 0; i < units.length; i++) {
                            $list.find("input[type='checkbox'][id='c_" + units[i] + "']").prop("checked", true);
                        }
                    }
                }
            }
            //Do we need to enable the double tap
            if ($this.options.doubleTapToGo) {
                //if we hit a second time on the link and the href is valid, navigate to that url
                if ($this.doubleTapToGo(self) && self.attr('href') !== '#' && self.attr('href') !== '') {
                    e.stopPropagation();
                    document.location = self.attr('href');
                    return;
                }
            }
        });
    };
    MetisMenu.prototype.doubleTapToGo = function (elem) {
        var $this = this.$element;
        //if the class 'doubleTapToGo' exists, remove it and return
        if (elem.hasClass('doubleTapToGo')) {
            elem.removeClass('doubleTapToGo');
            return true;
        }
        //does not exists, add a new class and return false
        if (elem.parent().children('ul').length) {
            //first remove all other class
            $this.find('.doubleTapToGo').removeClass('doubleTapToGo');
            //add the class on the current element
            elem.addClass('doubleTapToGo');
            return false;
        }
    };
    MetisMenu.prototype.show = function (el) {
        var $this = $(el);
        var $parent = $this.parent('li');
        if (this.transitioning || $this.hasClass('in')) {
            return;
        }
        $parent.addClass('active');
        if (this.options.toggle) {
            this.hide($parent.siblings().children('ul.in'));
        }
        $this
            .removeClass('collapse')
            .addClass('collapsing')
            .height(0);
        this.transitioning = 1;
        var complete = function () {
            $this
                .removeClass('collapsing')
                .addClass('collapse in')
                .height('');
            this.transitioning = 0;
        };
        if (!$transition) {
            return complete.call(this);
        }
        if (!$.isEmptyObject($this[0])) {
            $this
                .one('mmTransitionEnd', $.proxy(complete, this))
                .emulateTransitionEnd(MetisMenu.TRANSITION_DURATION)
                .height($this[0].scrollHeight);
        }
        else {
            $this
                .one('mmTransitionEnd', $.proxy(complete, this))
                .emulateTransitionEnd(MetisMenu.TRANSITION_DURATION)
        }
    };
    MetisMenu.prototype.hide = function (el) {
        var $this = $(el);
        if (this.transitioning || !$this.hasClass('in')) {
            return;
        }
        $this.parent('li').removeClass('active');
        $this.height($this.height())[0].offsetHeight;
        $this
            .addClass('collapsing')
            .removeClass('collapse')
            .removeClass('in');
        this.transitioning = 1;
        var complete = function () {
            this.transitioning = 0;
            $this
                .removeClass('collapsing')
                .addClass('collapse');
        };
        if (!$transition) {
            return complete.call(this);
        }
        $this
            .height(0)
            .one('mmTransitionEnd', $.proxy(complete, this))
            .emulateTransitionEnd(MetisMenu.TRANSITION_DURATION);
    };
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data('mm');
            var options = $.extend({}, MetisMenu.DEFAULTS, $this.data(), typeof option === 'object' && option);
            if (!data) {
                $this.data('mm', (data = new MetisMenu(this, options)));
            }
            if (typeof option === 'string') {
                data[option]();
            }
        });
    }
    var old = $.fn.metisMenu;
    $.fn.metisMenu = Plugin;
    $.fn.metisMenu.Constructor = MetisMenu;
    $.fn.metisMenu.noConflict = function () {
        $.fn.metisMenu = old;
        return this;
    };
})(jQuery);
;
/**
               _ _____           _          _     _      
              | |  __ \         (_)        | |   | |     
      ___ ___ | | |__) |___  ___ _ ______ _| |__ | | ___ 
     / __/ _ \| |  _  // _ \/ __| |_  / _` | '_ \| |/ _ \
    | (_| (_) | | | \ \  __/\__ \ |/ / (_| | |_) | |  __/
     \___\___/|_|_|  \_\___||___/_/___\__,_|_.__/|_|\___|
	 
	v1.6 - jQuery plugin c_reated by Alvaro Prieto Lauroba
	
	Licences: MIT & GPL
	Feel free to use or modify this plugin as far as my full name is kept	
	
	If you are going to use this plug-in in production environments it is 
	strongly recommended to use its minified version: colResizable.min.js

*/

(function($){ 	
	
	var d = $(document); 		//window object
	var h = $("head");			//head object
	var drag = null;			//reference to the current grip that is being dragged
	var tables = {};			//object of the already processed tables (table.id as key)
	var	count = 0;				//internal count to create unique IDs when needed.	
	
	//common strings for packing
	var ID = "id";	
	var PX = "px";
	var SIGNATURE ="JColResizer";
    var FLEX = "JCLRFlex";
	
	//short-cuts
	var I = parseInt;
	var M = Math;
	var ie = navigator.userAgent.indexOf('Trident/4.0')>0;
	var S;
	try{S = sessionStorage;}catch(e){}	//Firefox crashes when executed as local file system
	
	//append required CSS rules  
    h.append("<style type='text/css'>  .JColResizer{table-layout:fixed;} .JColResizer > tbody > tr > td, .JColResizer > tbody > tr > th{overflow:hidden;padding-left:0!important; padding-right:0!important;}  .JCLRgrips{ height:0px; position:relative;} .JCLRgrip{margin-left:-5px; position:absolute; z-index:5; } .JCLRgrip .JColResizer{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: e-resize;top:0px} .JCLRLastGrip{position:absolute; width:1px; } .JCLRgripDrag{ border-left:1px dotted black;	} .JCLRFlex{width:auto!important;} .JCLRgrip.JCLRdisabledGrip .JColResizer{cursor:default; display:none;}</style>");
       
	/**
	 * Function to allow column resizing for table objects. It is the starting point to apply the plugin.
	 * @param {DOM node} tb - reference to the DOM table object to be enhanced
	 * @param {Object} options	- some customization values
	 */
	var init = function( tb, options){	
		var t = $(tb);				    //the table object is wrapped
        t.opt = options;                //each table has its own options available at anytime
        t.mode = options.resizeMode;    //shortcuts
        t.dc = t.opt.disabledColumns;
		if(t.opt.disable) return destroy(t);				//the user is asking to destroy a previously colResized table
		var	id = t.id = t.attr(ID) || SIGNATURE+count++;	//its id is obtained, if null new one is generated		
		t.p = t.opt.postbackSafe; 							//short-cut to detect postback safe 		
		if(!t.is("table") || tables[id] && !t.opt.partialRefresh) return; 		//if the object is not a table or if it was already processed then it is ignored.
		if (t.opt.hoverCursor !== 'e-resize') h.append("<style type='text/css'>.JCLRgrip .JColResizer:hover{cursor:"+ t.opt.hoverCursor +"!important}</style>");  //if hoverCursor has been set, append the style
		t.addClass(SIGNATURE).attr(ID, id).before('<div class="JCLRgrips"/>');	//the grips container object is added. Signature class forces table rendering in fixed-layout mode to prevent column's min-width
		t.g = []; t.c = []; t.w = t.width(); t.gc = t.prev(); t.f=t.opt.fixed;	//t.c and t.g are arrays of columns and grips respectively				
		if(options.marginLeft) t.gc.css("marginLeft", options.marginLeft);  	//if the table contains margins, it must be specified
		if(options.marginRight) t.gc.css("marginRight", options.marginRight);  	//since there is no (direct) way to obtain margin values in its original units (%, em, ...)
		t.cs = I(ie? tb.cellSpacing || tb.currentStyle.borderSpacing :t.css('border-spacing'))||2;	//table cellspacing (not even jQuery is fully cross-browser)
		t.b  = I(ie? tb.border || tb.currentStyle.borderLeftWidth :t.css('border-left-width'))||1;	//outer border width (again cross-browser issues)
		// if(!(tb.style.width || tb.width)) t.width(t.width()); //I am not an IE fan at all, but it is a pity that only IE has the currentStyle attribute working as expected. For this reason I can not check easily if the table has an explicit width or if it is rendered as "auto"
		tables[id] = t; 	//the table object is stored using its id as key	
		createGrips(t);		//grips are created 
	
	};


	/**
	 * This function allows to remove any enhancements performed by this plugin on a previously processed table.
	 * @param {jQuery ref} t - table object
	 */
	var destroy = function(t){
		var id=t.attr(ID), t=tables[id];		//its table object is found
		if(!t||!t.is("table")) return;			//if none, then it wasn't processed	 
		t.removeClass(SIGNATURE+" "+FLEX).gc.remove();	//class and grips are removed
		delete tables[id];						//clean up data
	};


	/**
	 * Function to create all the grips associated with the table given by parameters 
	 * @param {jQuery ref} t - table object
	 */
	var createGrips = function(t){	
	
        var th = t.find(">thead>tr:first>th,>thead>tr:first>td"); //table headers are obtained
		if(!th.length) th = t.find(">tbody>tr:first>th,>tr:first>th,>tbody>tr:first>td, >tr:first>td");	 //but headers can also be included in different ways
		th = th.filter(":visible");					//filter invisible columns
		t.cg = t.find("col"); 						//a table can also contain a colgroup with col elements		
		t.ln = th.length;							//table length is stored	
		if(t.p && S && S[t.id])memento(t,th);		//if 'postbackSafe' is enabled and there is data for the current table, its coloumn layout is restored
		th.each(function(i){						//iterate through the table column headers			
			var c = $(this); 						//jquery wrap for the current column		
            var dc = t.dc.indexOf(i)!=-1;           //is this a disabled column?
			var g = $(t.gc.append('<div class="JCLRgrip"></div>')[0].lastChild); //add the visual node to be used as grip
            g.append(dc ? "": t.opt.gripInnerHtml).append('<div class="'+SIGNATURE+'"></div>');
            if(i == t.ln-1){                        //if the current grip is the las one 
                g.addClass("JCLRLastGrip");         //add a different css class to stlye it in a different way if needed
                if(t.f) g.html("");                 //if the table resizing mode is set to fixed, the last grip is removed since table with can not change
            }
            g.bind('touchstart mousedown', onGripMouseDown); //bind the mousedown event to start dragging 
            
            if (!dc){ 
                //if normal column bind the mousedown event to start dragging, if disabled then apply its css class
                g.removeClass('JCLRdisabledGrip').bind('touchstart mousedown', onGripMouseDown);      
            }else{
                g.addClass('JCLRdisabledGrip'); 
            }

			g.t = t; g.i = i; g.c = c;	c.w =c.width();		//some values are stored in the grip's node data as shortcut
			t.g.push(g); t.c.push(c);						//the current grip and column are added to its table object
			c.width(c.w).removeAttr("width");				//the width of the column is converted into pixel-based measurements
			g.data(SIGNATURE, {i:i, t:t.attr(ID), last: i == t.ln-1});	 //grip index and its table name are stored in the HTML 												
		}); 	
		t.cg.removeAttr("width");	//remove the width attribute from elements in the colgroup 

		t.find('td, th').not(th).not('table th, table td').each(function(){  
			$(this).removeAttr('width');	//the width attribute is removed from all table cells which are not nested in other tables and dont belong to the header
		});		
        if(!t.f){
            t.removeAttr('width').addClass(FLEX); //if not fixed, let the table grow as needed
        }
        syncGrips(t); 				//the grips are positioned according to the current table layout			
        //there is a small problem, some cells in the table could contain dimension values interfering with the 
        //width value set by this plugin. Those values are removed
		
	};
	
    
	/**
	 * Function to allow the persistence of columns dimensions after a browser postback. It is based in
	 * the HTML5 sessionStorage object, which can be emulated for older browsers using sessionstorage.js
	 * @param {jQuery ref} t - table object
	 * @param {jQuery ref} th - reference to the first row elements (only set in deserialization)
	 */
	var memento = function(t, th){ 
		var w,m=0,i=0,aux =[],tw;
		if(th){										//in deserialization mode (after a postback)
			t.cg.removeAttr("width");
			if(t.opt.flush){ S[t.id] =""; return;} 	//if flush is activated, stored data is removed
			w = S[t.id].split(";");					//column widths is obtained
			tw = w[t.ln+1];
            if(!t.f && tw){							//if not fixed and table width data available its size is restored
                t.width(tw*=1);
                if(t.opt.overflow) {				//if overfolw flag is set, restore table width also as table min-width
                    t.css('min-width', tw + PX);
                    t.w = tw;
                }
            }
			for(;i<t.ln;i++){						//for each column
				aux.push(100*w[i]/w[t.ln]+"%"); 	//width is stored in an array since it will be required again a couple of lines ahead
				th.eq(i).css("width", aux[i] ); 	//each column width in % is restored
			}			
			for(i=0;i<t.ln;i++)
				t.cg.eq(i).css("width", aux[i]);	//this code is required in order to create an inline CSS rule with higher precedence than an existing CSS class in the "col" elements
		}else{							//in serialization mode (after resizing a column)
			S[t.id] ="";				//clean up previous data
			for(;i < t.c.length; i++){	//iterate through columns
				w = t.c[i].width();		//width is obtained
				S[t.id] += w+";";		//width is appended to the sessionStorage object using ID as key
				m+=w;					//carriage is updated to obtain the full size used by columns
			}
			S[t.id]+=m;							//the last item of the serialized string is the table's active area (width), 
												//to be able to obtain % width value of each columns while deserializing
			if(!t.f) S[t.id] += ";"+t.width(); 	//if not fixed, table width is stored
		}	
	};
	
	
	/**
	 * Function that places each grip in the correct position according to the current table layout	 
	 * @param {jQuery ref} t - table object
	 */
	var syncGrips = function (t){	
        //t.gc.width(t.w);			//the grip's container width is updated		
        t.gc.width($(t[0]).width());
		for(var i=0; i<t.ln; i++){	//for each column
			var c = t.c[i]; 			
			t.g[i].css({			//height and position of the grip is updated according to the table layout
				left: c.offset().left - t.offset().left + c.outerWidth(false) + t.cs / 2 + PX,
				height: t.opt.headerOnly? t.c[0].outerHeight(false) : t.outerHeight(false)				
			});			
		} 	
	};
	
	
	
	/**
	* This function updates column's width according to the horizontal position increment of the grip being
	* dragged. The function can be called while dragging if liveDragging is enabled and also from the onGripDragOver
	* event handler to synchronize grip's position with their related columns.
	* @param {jQuery ref} t - table object
	* @param {number} i - index of the grip being dragged
	* @param {bool} isOver - to identify when the function is being called from the onGripDragOver event	
	*/
    var syncCols = function (t, i, isOver) {
        if ($(t[0]).width() != t.w) {
            t.w = $(t[0]).width();
            for (var kk = 0; kk < t.c.length; kk++) {
                $(t.c[i]).width($(t.c[i]).outerWidth());
            }
        }

		var inc = drag.x-drag.l, c = t.c[i], c2 = t.c[i+1]; 			
		var w = c.w + inc;	var w2= c2.w- inc;	//their new width is obtained					
		c.width( w + PX);			
		t.cg.eq(i).width( w + PX); 
        if(t.f){ //if fixed mode
            c2.width(w2 + PX);
            t.cg.eq(i+1).width( w2 + PX);
        }else if(t.opt.overflow) {				//if overflow is set, incriment min-width to force overflow
            t.css('min-width', t.w + inc);
        }
		if(isOver){
            c.w=w; 
            c2.w= t.f ? w2 : c2.w;
        }
	};

	
	/**
	* This function updates all columns width according to its real width. It must be taken into account that the 
	* sum of all columns can exceed the table width in some cases (if fixed is set to false and table has some kind 
	* of max-width).
	* @param {jQuery ref} t - table object	
	*/
	var applyBounds = function(t){
        var w = $.map(t.c, function(c){			//obtain real widths
            return c.width();
        });
        t.width(t.w = t.width()).removeClass(FLEX);	//prevent table width changes
        $.each(t.c, function(i,c){
            c.width(w[i]).w = w[i];				//set column widths applying bounds (table's max-width)
        });
		t.addClass(FLEX);						//allow table width changes
	};
	
	
	/**
	 * Event handler used while dragging a grip. It checks if the next grip's position is valid and updates it. 
	 * @param {event} e - mousemove event binded to the window object
	 */
	var onGripDrag = function(e){	
		if(!drag) return; 
        var t = drag.t;		//table object reference 
        var oe = e.originalEvent.touches;
        var ox = oe ? oe[0].pageX : e.pageX;    //original position (touch or mouse)
        var x =  ox - drag.ox + drag.l;	        //next position according to horizontal mouse position increment
		var mw = t.opt.minWidth, i = drag.i ;	//cell's min width
		var l = t.cs*1.5 + mw + t.b;
        var last = i == t.ln-1;                 			//check if it is the last column's grip (usually hidden)
        var min = i? t.g[i-1].position().left+t.cs+mw: l;	//min position according to the contiguous cells
		var max = t.f ? 	//fixed mode?
			i == t.ln-1? 
				t.w-l: 
				t.g[i+1].position().left-t.cs-mw:
			Infinity; 								//max position according to the contiguous cells 
		x = M.max(min, M.min(max, x));				//apply bounding		
		drag.x = x;	 drag.css("left",  x + PX); 	//apply position increment	
        if(last){									//if it is the last grip
            var c = t.c[drag.i];					//width of the last column is obtained
			drag.w = c.w + x- drag.l;         
        }              
		if(t.opt.liveDrag){ 			//if liveDrag is enabled
			if(last){
			    c.width(drag.w);
                if(!t.f && t.opt.overflow){			//if overflow is set, incriment min-width to force overflow
                   t.css('min-width', t.w + x - drag.l);
                }else {
                    t.w = t.width();
                }
			}else{
				syncCols(t,i); 			//columns are synchronized
			}
			syncGrips(t);
			var cb = t.opt.onDrag;							//check if there is an onDrag callback
			if (cb) { e.currentTarget = t[0]; cb(e); }		//if any, it is fired			
		}
		return false; 	//prevent text selection while dragging				
	};
	

	/**
	 * Event handler fired when the dragging is over, updating table layout
     * @param {event} e - grip's drag over event
	 */
	var onGripDragOver = function(e){	
		
		d.unbind('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE).unbind('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE);
		$("head :last-child").remove(); 				//remove the dragging cursor style	
		if(!drag) return;
		drag.removeClass(drag.t.opt.draggingClass);		//remove the grip's dragging css-class
        if (!(drag.x - drag.l == 0)) {
            var t = drag.t;
            var cb = t.opt.onResize; 	    //get some values	
            var i = drag.i;                 //column index
            var last = i == t.ln-1;         //check if it is the last column's grip (usually hidden)
            var c = t.g[i].c;               //the column being dragged
            if(last){
                c.width(drag.w);
                c.w = drag.w;
            }else{
                syncCols(t, i, true);	//the columns are updated
            }
            if(!t.f) applyBounds(t);	//if not fixed mode, then apply bounds to obtain real width values
            syncGrips(t);				//the grips are updated
            if (cb) { e.currentTarget = t[0]; cb(e); }	//if there is a callback function, it is fired
            if(t.p && S) memento(t); 	//if postbackSafe is enabled and there is sessionStorage support, the new layout is serialized and stored
        }
		drag = null;   //since the grip's dragging is over									
	};	
	
	
	/**
	 * Event handler fired when the grip's dragging is about to start. Its main goal is to set up events 
	 * and store some values used while dragging.
     * @param {event} e - grip's mousedown event
	 */
	var onGripMouseDown = function(e){
		var o = $(this).data(SIGNATURE);			//retrieve grip's data
		var t = tables[o.t],  g = t.g[o.i];			//shortcuts for the table and grip objects
        var oe = e.originalEvent.touches;           //touch or mouse event?
        g.ox = oe? oe[0].pageX: e.pageX;            //the initial position is kept
		g.l = g.position().left;
        g.x = g.l;
        
		d.bind('touchmove.'+SIGNATURE+' mousemove.'+SIGNATURE, onGripDrag ).bind('touchend.'+SIGNATURE+' mouseup.'+SIGNATURE, onGripDragOver);	//mousemove and mouseup events are bound
		h.append("<style type='text/css'>*{cursor:"+ t.opt.dragCursor +"!important}</style>"); 	//change the mouse cursor
		g.addClass(t.opt.draggingClass); 	//add the dragging class (to allow some visual feedback)				
		drag = g;							//the current grip is stored as the current dragging object
		if(t.c[o.i].l) for(var i=0,c; i<t.ln; i++){ c=t.c[i]; c.l = false; c.w= c.width(); } 	//if the colum is locked (after browser resize), then c.w must be updated		
		return false; 	//prevent text selection
	};
    
    
	/**
	 * Event handler fired when the browser is resized. The main purpose of this function is to update
	 * table layout according to the browser's size synchronizing related grips 
	 */
	var onResize = function(){
		for(var t in tables){
            if( tables.hasOwnProperty( t ) ) {
                t = tables[t];
                var i, mw=0;
                t.removeClass(SIGNATURE);   //firefox doesn't like layout-fixed in some cases
                if (t.f) {                  //in fixed mode
                    t.w = t.width();        //its new width is kept
                    for(i=0; i<t.ln; i++) mw+= t.c[i].w;		
                    //cell rendering is not as trivial as it might seem, and it is slightly different for
                    //each browser. In the beginning i had a big switch for each browser, but since the code
                    //was extremely ugly now I use a different approach with several re-flows. This works 
                    //pretty well but it's a bit slower. For now, lets keep things simple...   
                    for(i=0; i<t.ln; i++) t.c[i].css("width", M.round(1000*t.c[i].w/mw)/10 + "%").l=true; 
                    //c.l locks the column, telling us that its c.w is outdated									
                }else{     //in non fixed-sized tables
                    applyBounds(t);         //apply the new bounds 
                    if(t.mode == 'flex' && t.p && S){   //if postbackSafe is enabled and there is sessionStorage support,
                        memento(t);                     //the new layout is serialized and stored for 'flex' tables
                    }
                }
                syncGrips(t.addClass(SIGNATURE));
            }
		} 
		
	};		


	//bind resize event, to update grips position 
	$(window).bind('resize.'+SIGNATURE, onResize); 


	/**
	 * The plugin is added to the jQuery library
	 * @param {Object} options -  an object that holds some basic customization values 
	 */
    $.fn.extend({  
        colResizable: function(options) {           
            var defaults = {
			
				//attributes:
                
                resizeMode: 'fit',                    //mode can be 'fit', 'flex' or 'overflow'
                draggingClass: 'JCLRgripDrag',	//css-class used when a grip is being dragged (for visual feedback purposes)
				gripInnerHtml: '',				//if it is required to use a custom grip it can be done using some custom HTML				
				liveDrag: false,				//enables table-layout updating while dragging	
				minWidth: 15, 					//minimum width value in pixels allowed for a column 
				headerOnly: false,				//specifies that the size of the the column resizing anchors will be bounded to the size of the first row 
				hoverCursor: "e-resize",  		//cursor to be used on grip hover
				dragCursor: "e-resize",  		//cursor to be used while dragging
				postbackSafe: false, 			//when it is enabled, table layout can persist after postback or page refresh. It requires browsers with sessionStorage support (it can be emulated with sessionStorage.js). 
				flush: false, 					//when postbakSafe is enabled, and it is required to prevent layout restoration after postback, 'flush' will remove its associated layout data 
				marginLeft: null,				//in case the table contains any margins, colResizable needs to know the values used, e.g. "10%", "15em", "5px" ...
				marginRight: null, 				//in case the table contains any margins, colResizable needs to know the values used, e.g. "10%", "15em", "5px" ...
				disable: false,					//disables all the enhancements performed in a previously colResized table	
				partialRefresh: false,			//can be used in combination with postbackSafe when the table is inside of an updatePanel,
                disabledColumns: [],            //column indexes to be excluded

				//events:
				onDrag: null, 					//callback function to be fired during the column resizing process if liveDrag is enabled
				onResize: null					//callback function fired when the dragging process is over
            }			
			var options =  $.extend(defaults, options);		
            
            //since now there are 3 different ways of resizing columns, I changed the external interface to make it clear
            //calling it 'resizeMode' but also to remove the "fixed" attribute which was confusing for many people
            options.fixed = true;
            options.overflow = false;
            switch(options.resizeMode){
                case 'flex': options.fixed = false; break;
                case 'overflow': options.fixed = false; options.overflow = true; break;
            }

            return this.each(function() {				
             	init( this, options);             
            });
        }
    });
})(jQuery);

;
/**
 * @author: Dennis Hernández
 * @webSite: http://djhvscf.github.io/Blog
 * @version: v1.0.0
 */

(function ($) {
    'use strict';

    var initResizable = function (that) {
        //Deletes the plugin to re-create it
        that.$el.colResizable({disable: true});

        //Creates the plugin
        that.$el.colResizable({
            resizeMode: that.options.resizemode || "fit",
            disabledColumns: that.options.disabledColumns || [],
            liveDrag: that.options.liveDrag,
            fixed: that.options.fixed,
            headerOnly: that.options.headerOnly,
            minWidth: that.options.minWidth,
            hoverCursor: that.options.hoverCursor,
            dragCursor: that.options.dragCursor,
            onResize: that.onResize,
            onDrag: that.options.onResizableDrag
        });
    };

    $.extend($.fn.bootstrapTable.defaults, {
        resizable: false,
        liveDrag: false,
        fixed: true,
        headerOnly: false,
        minWidth: 15,
        hoverCursor: 'e-resize',
        dragCursor: 'e-resize',
        onResizableResize: function (e) {
            return false;
        },
        onResizableDrag: function (e) {
            return false;
        }
    });

    var BootstrapTable = $.fn.bootstrapTable.Constructor,
        _toggleView = BootstrapTable.prototype.toggleView,
        _resetView = BootstrapTable.prototype.resetView;

    BootstrapTable.prototype.toggleView = function () {
        _toggleView.apply(this, Array.prototype.slice.apply(arguments));

        if (this.options.resizable && this.options.cardView) {
            //Deletes the plugin
            $(this.$el).colResizable({disable: true});
        }
    };

    BootstrapTable.prototype.resetView = function () {
        var that = this;

        _resetView.apply(this, Array.prototype.slice.apply(arguments));

        if (this.options.resizable) {
            // because in fitHeader function, we use setTimeout(func, 100);
            setTimeout(function () {
                initResizable(that);
            }, 100);
        }
    };

    BootstrapTable.prototype.onResize = function (e) {
        var that = $(e.currentTarget);
        that.bootstrapTable('resetView');
        that.data('bootstrap.table').options.onResizableResize.apply(e);
    }
})(jQuery);
;

//加载插件js、css
function LoadControlJSCSS(ViewContext, callback, version) {
    var DisplayMode = ViewContext.ReturnData.DisplayMode;
    if (constName.ShowMode != "") {
        try {
            var cacheMode = parseInt(constName.ShowMode);
            if (ViewContext.ReturnData.OptionalDisplayMode == null || $.inArray(cacheMode, ViewContext.ReturnData.OptionalDisplayMode) > -1) {
                DisplayMode = cacheMode;
            }
        } catch (e) { }
    }

    $("#toggleMode").val(DisplayMode);

    var loadcss = [];
    var loadscript = [];

    //// 开发者所需资源
    //if (ViewContext.ReturnData.IsDevAndAdmin) {
    //    // 绑定F12事件
    //    $(window).unbind("keydown.debugger").bind("keydown.debugger", function (e) {

    //        if (typeof ($.IMonitorHandle) != "undefined") {
    //            $.IMonitorHandle(e);
    //        }
    //    });
    //}
    // 
    switch (DisplayMode) {
        case 0:
            loadscript = loadscript.concat([
                "/Scripts/h3/FormList/ListModeNew.js?v=" + version
            ]);
            break;
        case 1:
            loadscript = loadscript.concat([
                "/Scripts/plugins/bootstrap-calendar/underscore-min.js?v=" + version,
                "/Scripts/plugins/bootstrap-calendar/jstz.min.js?v=" + version,
                "/Scripts/plugins/bootstrap-calendar/language/zh-CN.js?v=" + version,
                "/Scripts/plugins/bootstrap-calendar/calendar.js?v=" + version,
                "/Scripts/h3/FormList/CalendarMode.js?v=" + version
            ]);
            break;
        case 2:
            loadscript = loadscript.concat([
                "/Scripts/plugins/FormlistTimeline/Timeline.js?v=" + version,
                "/Scripts/h3/FormList/TimelineMode.js?v=" + version
            ]);
            break;
    }

    require(loadscript, function () {
        callback(ViewContext);
    });
}

//初始化数据
function InitData(ViewContext) {
    AppFilterInit(ViewContext.ReturnData);
    $.ListView.Init($("#ListView"), ViewContext.ReturnData.Response);
    $("#ListView").children(".btn-toolbar:first").find("select.form-control").DropDownList();
    var las = $("#ListView").find("div.btn-toolbar").find("span.drop-btn")
    las.each(function (index, el) {
        $(el).removeClass("drop-btn").addClass("fa fa-chevron-down")
    })


    var DisplayMode = 0;
    if (constName.ShowMode != "") {
        if (constName.ShowMode == ListViewDisplayMode.List) {
            DisplayMode = ListViewDisplayMode.List;
        } else if (constName.ShowMode == ListViewDisplayMode.Calendar) {
            DisplayMode = ListViewDisplayMode.Calendar;
        } else {
            DisplayMode = ListViewDisplayMode.Timeline;
        }
    } else {
        DisplayMode = ViewContext.ReturnData.DisplayMode;
    }

    $tableTip = $(".table-tip");
    $tableTip.length == 0 && ($tableTip = $('<div class="table-tip" style="display: none;"></div>').appendTo($("body")));
    if (DisplayMode == ListViewDisplayMode.List) {
        //列表
        $("#ListView").off("mouseenter.list").on("mouseenter.list", '.table td', function () {
            if ($(this).find("table").length > 0) {
                return;
            }
            var $that = $(this);
            //子表
            if ($that.hasClass("inner-table")) {
                if ($that.hasClass("no-tip")) return false;
                if ($that.width() > $that.closest('td:not(.inner-table)').width()) {
                    var offset = $that.offset();
                    $tableTip.text($that.text().substr(0, 150)).css({
                        left: offset.left - $(window).scrollLeft(),
                        bottom: $(window).height() - offset.top + 6 + $(window).scrollTop()
                    }).toggle();
                }
                return false;
            }

            var tooltipText = $that.find("div").attr("data-original-title") || "";
            if (tooltipText != "") {
                var offset = $that.offset();
                $tableTip.text(tooltipText).css({
                    left: offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft(),
                    bottom: $(window).height() - offset.top + 6 + $(window).scrollTop(),
                }).toggle();
                return false;
            }

            $TextLabel.text($that.text());
            if ($TextLabel.width() > $that.width()) {
                var offset = $that.offset();
                var text = $that.text().substr(0, 400);
                var maxWidth = "200px";
                var maxHeight = "300px";
                if (text.length <= 200) {
                    maxWidth = "250px";
                } else if (text.length <= 300) {
                    maxWidth = "350px";
                } else if (text.length <= 400) {
                    maxWidth = "400px";
                }
                $tableTip.text(text).css({
                    left: offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft(),
                    bottom: $(window).height() - offset.top + 6 + $(window).scrollTop() - 5,
                    "max-width": maxWidth,
                    "max-height": maxHeight
                }).toggle();
            }
            return false;
        });
        $("#ListView").off("mouseleave.list").on("mouseleave.list", '.table td', function () {
            $tableTip && $tableTip.hide();
        });
    }
    var $TextLabel = $("<label style='opacity:0;position:fixed;z-index:-1;'>").hide().appendTo("body");
}

function AppFilterInit(data) {
    QueryItems = data[constName.QueryItemsName];

    if (QueryItems != null && QueryItems.length > 0) {
        if (QueryItems.length > 3) {
            $("#toggleSearch").show();
        }
        var $divSearch = $('<div class="form- horizontal myform- horizontal" id="divSearch" style="display:none"></div>');
        var newQueryItems = new Array();
        if (QueryItems) {
            for (var i = 0; i < QueryItems.length; i++) {
                var item = QueryItems[i];
                if (item.DataType == $.BizDataType.Formula) continue;
                var defaultDisplayChildCode = data["DefaultDisplayChildCode"];
                if (defaultDisplayChildCode == "") {
                    //当前显示的主表
                    if (item.PropertyName.indexOf(".") < 0) {
                        newQueryItems.push(item);
                    }
                } else {
                    //当前显示的子表
                    if (item.PropertyName.indexOf(".") < 0) {
                        newQueryItems.push(item);
                    } else {
                        if (item.PropertyName.split(".")[0] == defaultDisplayChildCode) {
                            newQueryItems.push(item);
                        }
                    }
                }
                //if (item.PropertyName.indexOf(".") <= 0 || (item.PropertyName.indexOf(".") > -1 && item.PropertyName.split(".")[0] == data["DefaultDisplayChildCode"])) {
                //    if (data["DefaultDisplayChildCode"] && item.DataType == $.BizDataType.AssociationArray)
                //        continue;
                //    newQeryItems.push(item);
                //}
            }
        }
        var $DivSearchDoms = GetDivSearchDoms(newQueryItems);
        if ($DivSearchDoms)
            $divSearch.append($DivSearchDoms);
        var $body = $("body");
        $body.append($divSearch);
    }
    //初始化搜索控件
    $.AppFilter.init();
}
function GetDivSearchDoms(newQueryItems) {
    var result = null;
    var searchSchemaCode = mySchemaCode;

    if (newQueryItems != null && newQueryItems.length > 0) {
        if (newQueryItems.length > 3) {
            $("#toggleSearch").show();
        }
        var h = new Array();
        for (var i = 0; i < newQueryItems.length; i++) {
            if (i % 3 == 0) {
                h.push("<div class='form-group myform-group' style='margin-bottom:5px;'>");
            }
            var item = newQueryItems[i];
            var defaultValue = item.DefaultValue ? item.DefaultValue : "";
            h.push('<label for="' + item.PropertyName + '" class="col-xs-1 col-lg-1  col-md-1 control-label filter-text" style="">');
            if (item.IsBoReservedPropertiesOnly) {
                switch (item.PropertyName) {
                    case ReservedPropertiesName.PropertyName_CreatedBy:
                        if (item.DisplayName == ReservedPropertiesName.PropertyName_CreatedBy) {
                            h.push("创建人");
                        }
                        else {
                            h.push(item.DisplayName);
                        }
                        break;
                    case ReservedPropertiesName.PropertyName_CreatedTime:
                        if (item.DisplayName == ReservedPropertiesName.PropertyName_CreatedTime) {
                            h.push("创建时间");
                        }
                        else {
                            h.push(item.DisplayName);
                        }
                        break;
                    case ReservedPropertiesName.PropertyName_ModifiedTime:
                        if (item.DisplayName == ReservedPropertiesName.PropertyName_ModifiedTime) {
                            h.push("修改时间");
                        }
                        else {
                            h.push(item.DisplayName);
                        }
                        break;
                    case ReservedPropertiesName.PropertyName_OwnerId:
                        if (item.DisplayName == ReservedPropertiesName.PropertyName_OwnerId) {
                            h.push("拥有者");
                        }
                        else {
                            h.push(item.DisplayName);
                        }
                        break;
                    case ReservedPropertiesName.PropertyName_OwnerDeptId:
                        if (item.DisplayName == ReservedPropertiesName.PropertyName_OwnerDeptId) {
                            h.push("所属部门");
                        }
                        else {
                            h.push(item.DisplayName);
                        }
                        break;
                    case ReservedPropertiesName.PropertyName_Status:
                        h.push("流程状态");
                        break;
                    default:
                        h.push(item.DisplayName);
                        break;
                }
            } else {
                h.push(item.DisplayName);
            }
            h.push('</label>');
            h.push('<div class="col-xs-3 col-lg-3 col-md-3 filter-content">');
            if (item.IsBoReservedPropertiesOnly && item.PropertyName != ReservedPropertiesName.PropertyName_SeqNo) {
                switch (item.PropertyName) {
                    case ReservedPropertiesName.PropertyName_CreatedBy:
                        h.push('<div class="myuserpicker " id="' + item.PropertyName + '" data-displayname="' + item.DisplayName + '" data-width="100%" data-uservisible="true" data-orgunitvisible="false"></div>');
                        break;
                    case ReservedPropertiesName.PropertyName_OwnerDeptId:
                        h.push('<div class="myuserpicker" id="' + item.PropertyName + '" data-displayname="' + item.DisplayName + '" data-width="100%" data-uservisible="false" data-orgunitvisible="true"></div>');
                        break;
                    case ReservedPropertiesName.PropertyName_CreatedTime:
                        h.push('<div class="input-group mydatetime" data-datetimemode="yyyy/mm/dd" id="' + item.PropertyName + '">');
                        h.push('</div>');;
                        break;
                    case ReservedPropertiesName.PropertyName_ModifiedTime:
                        h.push('<div class="input-group mydatetime" data-datetimemode="yyyy/mm/dd"  id="' + item.PropertyName + '">');
                        h.push('</div>');
                        break;
                    case ReservedPropertiesName.PropertyName_OwnerId:
                        h.push('<div class="myuserpicker" id="' + item.PropertyName + '" data-displayname="' + item.DisplayName + '" data-width="100%" data-uservisible="true" data-orgunitvisible="false"></div>');
                        break;
                    case ReservedPropertiesName.PropertyName_Status:
                        h.push('<select id="' + item.PropertyName + '" multiple="multiple" class="mymultiselect">');
                        h.push('<option value="Draft">草稿</option>');
                        h.push('<option value="Running">进行中</option>');
                        h.push('<option value="Effective">已结束</option>');
                        h.push('<option value="Canceled">已取消</option>');
                        h.push('</select>');
                        break;
                    default:
                        continue;
                }
            } else {
                switch (item.DataType) {
                    case $.BizDataType.Address:
                        {
                            h.push('<div class=" myform-control FormAreaSelect" id="' + item.PropertyName + '" style="height:auto !important;"  data-controlkey="FormAreaSelect"  data-displayrule="" data-areamode="P-C-T" data-showdetailaddr="false" value="' + defaultValue + '" />')
                        }; break;
                    case $.BizDataType.ShortString:
                        // 复选框、单选框、下拉框
                        if (item.AssociationSchemaCode) {
                            h.push('<div class="mycomboboxlist" id="' + item.PropertyName + '" data-dataField="' + item.PropertyName + '" data-schemaCode="' + constName.QueryCode + '" data-width="100%" data-defalutvalue="' + defaultValue + '"> </div>');
                        }
                        else if (item.DataDictItemName && item.DataDictItemName != "") {
                            if (item.itemValues != null) {
                                h.push('<select id="' + item.PropertyName + '" multiple="multiple" class="mymultiselect">');
                                h.push('<option value="--">--(空值)</option>');
                                for (var j = 0; j < item.itemValues.length; j++) {
                                    var dictItem = item.itemValues[j];
                                    h.push('<option value="' + dictItem + '">' + dictItem + '</option>');
                                }
                                h.push('</select>');
                            }
                        }
                        else if (item.OptionalValues != null) {
                            var OptionalValues = item.OptionalValues;
                            if (OptionalValues != null && OptionalValues.length > 0) {
                                h.push('<select id="' + item.PropertyName + '" multiple="multiple" class="mymultiselect">');
                                h.push('<option value="--">--(空值)</option>');
                                for (var k = 0; k < OptionalValues.length; k++) {
                                    var OptionalValue = OptionalValues[k]
                                    h.push('<option value="' + OptionalValue + '">' + OptionalValue + '</option>');
                                }
                                h.push(' </select>');
                            }
                            else {
                                h.push('<div class="mycombobox" id="' + item.PropertyName + '" data-dataField="' + item.PropertyName + '" data-schemaCode="' + constName.QueryCode + '" data-width="100%" data-defalutvalue="' + defaultValue + '"> </div>');
                            }
                        }
                        else {
                            if (item.PropertyName == "SeqNo") {
                                h.push('<div class="mycombobox" id="' + item.PropertyName + '" data-dataField="SeqNo" data-schemaCode="' + constName.QueryCode + '" data-width="100%" data-defalutvalue="' + defaultValue + '"> </div>');
                            }
                            else {
                                h.push('<div class="mycombobox" id="' + item.PropertyName + '" data-dataField="' + item.PropertyName + '" data-schemaCode="' + constName.QueryCode + '" data-width="100%" data-defalutvalue="' + defaultValue + '"> </div>');
                            }
                        }
                        break;
                    case $.BizDataType.String:
                        h.push('<div class="mycombobox" id="' + item.PropertyName + '" data-dataField="' + item.PropertyName + '" data-schemaCode="' + constName.QueryCode + '" data-width="100%" data-defalutvalue="' + defaultValue + '"> </div>');
                        break;
                    case $.BizDataType.Double:
                    case $.BizDataType.Int:
                    case $.BizDataType.Long:
                        h.push('<div class="input-group mynum" id="' + item.PropertyName + '">');
                        h.push('</div>');
                        break;
                    case $.BizDataType.DateTime:
                        h.push('<div class="input-group mydatetime" data-datetimemode="' + item.DisplayFormat + '" id="' + item.PropertyName + '">');
                        h.push('</div>');
                        break;
                    case $.BizDataType.SingleParticipant:
                        switch (item.OrganizationType) {
                            case OrganizationType.User:
                                h.push('<div class="myuserpicker" data-datafield="' + item.PropertyName + '"  id="' + item.PropertyName + '" data-displayname="' + item.DisplayName + '" data-unitselectionrange="' + item.UnitSelectRange + '" data-ismultiple="true" data-uservisible="true" data-orgunitvisible="false" data-width="100%"></div>');
                                break;
                            case OrganizationType.Dept:
                                h.push('<div class="myuserpicker" data-datafield="' + item.PropertyName + '"  id="' + item.PropertyName + '" data-displayname="' + item.DisplayName + '" data-unitselectionrange="' + item.UnitSelectRange + '" data-ismultiple="true" data-uservisible="false" data-orgunitvisible="true" data-width="100%"></div>');
                                break;
                            case OrganizationType.All:
                                h.push('<div class="myuserpicker" data-datafield="' + item.PropertyName + '"  id="' + item.PropertyName + '" data-displayname="' + item.DisplayName + '" data-unitselectionrange="' + item.UnitSelectRange + '" data-ismultiple="true" data-uservisible="true" data-orgunitvisible="true" data-width="100%"></div>');
                                break;
                            default:
                                h.push('<div class="myuserpicker" data-datafield="' + item.PropertyName + '"  id="' + item.PropertyName + '" data-displayname="' + item.DisplayName + '" data-unitselectionrange="' + item.UnitSelectRange + '" data-ismultiple="true" data-width="100%"></div>');
                                break;
                        }
                        break;
                    case $.BizDataType.Association:
                    case $.BizDataType.AssociationArray:
                        h.push('<span class="mydropdown" id="' + item.PropertyName + '" data-boschemacode="' + item.AssociationSchemaCode + '"></span>');
                        break;
                    case $.BizDataType.Bool:
                        h.push('<span id="' + item.PropertyName + '" class="mybool">');
                        h.push('</span>');
                        break;
                    default:
                        break;
                }
            }
            h.push("</div>");
            if (i == QueryItems.length - 1 || i % 3 == 2) {
                h.push("</div>");
            }
        }
        result = $(h.join(""));
    }
    return result;
}
function SetFilterToolTip() {
    //处理过滤条件filter-text
    $("#ListView").find(".filter-text").off("mouseenter.filtertext").on("mouseenter.filtertext", function () {
        var clientWidth = this.clientWidth;
        var scrollWidth = this.scrollWidth;
        if (clientWidth < scrollWidth) {
            var $that = $(this);
            var tooltipText = this.innerText;
            var offset = $that.offset();
            $tableTip.text(tooltipText).css({
                left: offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft() - 120,
                bottom: $(window).height() - offset.top + 6 + $(window).scrollTop() - 35
            }).toggle();
            return false;
        }
    });

    $("#ListView").find(".filter-text").off("mouseleave.filtertext").on("mouseleave.filtertext", function () {
        $tableTip && $tableTip.hide();
    });
}

function ResetAppFilter() {
    var defaultDisplayChildCode = $.AppFilter.getChildSchemaCode();
    var $divSearch = $("#divSearch");
    var newQueryItems = new Array();
    if (QueryItems) {
        for (var i = 0; i < QueryItems.length; i++) {
            var item = QueryItems[i];
            if (item.DataType == $.BizDataType.Formula) continue;

            if (defaultDisplayChildCode == "") {
                //当前显示的主表
                if (item.PropertyName.indexOf(".") < 0) {
                    newQueryItems.push(item);
                } 
            } else {
                //当前显示的子表
                if (item.PropertyName.indexOf(".") < 0) {
                    newQueryItems.push(item);
                } else {
                    if (item.PropertyName.split(".")[0] == defaultDisplayChildCode) {
                        newQueryItems.push(item);
                    }
                }
            }
        }
    }
    $divSearch.children().remove();
    var $DivSearchDoms = GetDivSearchDoms(newQueryItems);
    if ($DivSearchDoms)
        $divSearch.append($DivSearchDoms);
    $("#toggleSearch").find("i").removeClass("icon-arrow-down-double-b").addClass("icon-arrow-up-double-b");
    $.AppFilter.init();
    setTimeout(function () {
        $.ListView.GetResetHeight();
    }, 500);
    SetFilterToolTip();
}

function getUrlParam(paramName) {
    var ParamValue = "";
    var reg = new RegExp("(^|&)" + paramName + "=([^&]*)(&|$)")
    var r = window.location.search.substr(1).match(reg);
    if (r != null) {
        ParamValue = unescape(r[2]);
    }
    return ParamValue;
}

function GetNodeUrl(FunctionNode) {
    var url = FunctionNode.Url;
    switch (FunctionNode.NodeType) {
        case FunctionNodeType.FormModule:
        case FunctionNodeType.WorkflowModule:
        case FunctionNodeType.CustomListModule:
            url = "/SubApp/Index?id=" + FunctionNode.Code;
            break;
        case FunctionNodeType.ReportModule:
            url = "/Reporting/?id=" + FunctionNode.Code;
            break;
    }
    return url;
};
(function ($) {
    // 所有的控件，都可以通过这个接口选择
    $.fn.JControl = function () {
        var jControl;
        var args = arguments;
        $(this).each(function () {
            var $control = $(this);

            //add by xc 若已经渲染过该控件，则不进行重新渲染 
            jControl = $control.data("JControl");
            if (!$.isEmptyObject(jControl)) {
                return true;
            }

            //数据项
            var datafield = $control.data($.ControlManager.DataFieldKey.toLocaleLowerCase());
            var controlkey = $control.data($.ControlManager.SheetControlKey.toLocaleLowerCase());
            if (!controlkey) {
                return jControl;
            }
            var dataitem = $.Controls.GetSheetDataItem(datafield, $control);

            if (args.length > 0) {
                dataitem = $.extend(dataitem, args[0]);
            }
            jControl = $.ControlManager.Run.call($control, controlkey, [dataitem]);
            //add by xc 保存JControl值，避免重复渲染同一个控件
            $control.data("JControl", jControl);
        });
        return jControl;
    };

    $.Controls = {};
    //控件属性
    $.Controls.GetDefaultOptions = function (controlKey) {
        var p = {};
        var options = FormControls[controlKey];
        if (options != null) {
            for (var key in options) {
                if (options[key].constructor == String
                    || options[key].constructor == Number
                    || options[key].constructor == Object) {
                    p[key] = options[key] || "";
                }
                else if (options[key].constructor == Array) {
                    for (var i = 0; i < options[key].length; ++i) {
                        p[options[key][i].Name] = options[key][i].DefaultValue == void 0 ? "" : options[key][i].DefaultValue;
                    }
                }
            }
        }
        return p;
    };

    // 读取表单数据
    $.Controls.GetSheetDataItem = function (datafield, $control) {
        if ($.SmartForm.ResponseContext == null) return null;
        // Error:
        if (datafield == "Comments") {
            //审批控件
            return $.IClone($.SmartForm.ResponseContext.Comments);
        }
        var DataItems = $.SmartForm.ResponseContext.ReturnData;
        if (datafield == void 0) return null;
        var dataitem = DataItems[datafield];

        if (dataitem == null && (datafield + "").indexOf(".") > -1) {
            var pDataField = datafield.split(".")[0];
            var pDataItem = DataItems[pDataField];
            var $trRow = $control.closest("tr");
            var ObjectId = $trRow.attr("data-ObjectId");
            //从已存到数据库地方取数据
            if (ObjectId) {
                if (pDataItem != void 0 && pDataItem != null) {
                    var rows = pDataItem.Value.R;
                    dataitem = $.IClone(pDataItem.Value.T[datafield]);
                    for (var i = 0; i < rows.length; i++) {
                        var rowData = rows[i];
                        if (rowData[pDataField + ".ObjectId"].Value == ObjectId) {
                            dataitem.Value = rowData[datafield].Value;
                            dataitem.Editable = rowData[datafield].Editable;
                            // 某单元格的可见属性自己控制
                            if (dataitem.Visible) {
                                dataitem.Visible = rowData[datafield].Visible;
                            }
                            break;
                        }
                    }
                }
            }
            else {
                ObjectId = $.IGuid();
                $trRow.attr("data-ObjectId", ObjectId);
            }

            if (dataitem == null && pDataItem) {
                dataitem = pDataItem.Value.T[datafield];
            }

            if (dataitem) {
                // 为区别子表里不同行的同一字段
                dataitem["ObjectId"] = ObjectId;
            }
        }

        return $.IClone(dataitem);
    };

})(jQuery);

(function ($) {
    //控件基类
    //1,完成界面初始化:设置组件id并存入组件管理器池,初始化参数
    //2,渲染的工作,细节交给子类实现
    //parm [element] 组件对应的dom element对象
    //parm [options] 组件的参数
    $.Controls.BaseControl = function (element, options, ResponseContext) {
        this.IsQueryControl = false; //标记控件是在表单中还是列表过滤中
        // 表单信息
        this.ResponseContext = ResponseContext;

        //外链表单  0/1
        this.IsExternalForm = ResponseContext && ResponseContext.IsExternalForm;

        //是否支持Html5
        this.IsSupportHtml5 = window.applicationCache != undefined;
        this.SchemaCode = ResponseContext == null ? "" : ResponseContext.SchemaCode;
        this.IsMobile = ResponseContext == null ? false : ResponseContext.IsMobile;
        //页面元素，可以通过$(this.Element)得到jquery对象
        this.Element = element;

        //是否发起模式
        this.Originate = $.IQuery("Mode").toLowerCase() == "originate";

        // 记录当前控件是否验证通过
        this.ValidateResult = true;
        //配置参数,包含属性和事件
        this.Options = options || {};

        //样式列表
        this.Css = {
            ControlTitle: "ControlTitle",
            ControlContent: "ControlContent"
        };

        this.ChangeEvents = {};

        //初始化参数
        this.Init();

        // 是否可见
        if (this.Visible == null) {
            this.Visible = true;
        }

        // 是否可编辑
        if (this.Editable == null) {
            this.Editable = true;
        }
        //渲染控件前函数
        this.PreRender();
        //渲染控件
        this.Render();
        //渲染后函数
        //this.Rendered();
        this.RenderDescription();
        //隐藏规则和计算规则可能会耗时较长，所以他们异步执行
        //这种情况导致的问题是，如果A的规则中配置了B，B的规则中配置了C。
        //在初始化A的时候需要给B绑定事件，但是B的初始化函数中由于InitHideRule和InitComputationRule函数执行时间较长没有返回，导致A的初始化函数中无法取到B对象无法绑定事件
        //隐藏规则
        //this.InitHideRule();
        //计算规则
        //this.InitComputationRule();

        //异步执行
        var that = this;
        //setTimeout(function () {
        that.InitHideRule.apply(that, []);
        that.InitComputationRule.apply(that, []);
        //}, 0);
    };

    //基础属性
    $.Controls.BaseControl.prototype = {
        // 从页面读取参数,将页面上 data-***的设置读取到Options里面
        // 初始化参数，转为容易用的方式this.***
        // 循环所有默认属性事件,构造成 this.***的格式
        Init: function () {
            var that = this;
            var options = this.Options;
            for (var key in options) {
                var elementkey = key.toLowerCase();
                var $el = $(that.Element);
                var val = $el.data(elementkey);
                if (val != void 0) {
                    if (options[key] == null) {
                        options[key] = val;
                    } else if (options[key].constructor == Boolean) {
                        if (val.constructor == Boolean) {
                            options[key] = val;
                        } else {
                            val = val.toString().toLowerCase();
                            options[key] = val == "true" || val == "1";
                        }
                    } else if (options[key].constructor == Number) {
                        options[key] = parseInt(val);
                    } else if (key.toLocaleLowerCase() != "displayname" || options[key] == "" || options[key] == "CreatedBy.FullName") {
                        options[key] = val;
                    }
                }
            }

            for (var key in options) {
                this[key] = options[key];
            }
        },

        // 控件渲染前函数
        PreRender: function () {
            //PC
            var spanCss = "col-sm-2 col-xs-2";
            var inputCss = "col-sm-10 col-xs-10";
            var $el = $(this.Element);
            if ($el.parent().hasClass("col-sm-6")) {
                spanCss = "col-sm-4 col-xs-4";
                inputCss = "col-sm-8 col-xs-8";
            }
            //标题列模式
            if (this.TitleDirection == "Vertical") {
                spanCss = "col-sm-12";
                inputCss = "col-sm-12";
            }

            $el.addClass("form-group");
            //标题
            //this.$Title = $("<span></span>").text(this.DisplayName).addClass(spanCss).addClass(this.Css.ControlTitle);
            this.$Title = $("<span class='" + spanCss + " " + this.Css.ControlTitle + "'>" + this.DisplayName + "</span>");
            if (this.Editable && this.Required) {
                this.$Title.append("<span style='color:red;vertical-align:middle'>*<span>");
            }
            var controlkey = $el.attr("data-controlkey");
            this.$InputBody = $("<div>");
            //添加样式    
            if (($.isEmptyObject(this.Options.DataField)
                || this.Options.DataField.indexOf('.') == -1
                || this.Options.DataField == "CreatedBy.FullName")
                && (this.DisplayName || this.DataField) && controlkey) {
                if (controlkey != "FormButton") {
                    $el.append(this.$Title);
                    if (controlkey == "FormCheckBoxList" && !this.isCheckbox) {
                        //this.$display = $("<sapn class='display'></span>");
                        //$el.append(this.$display);
                        $el.append("<span class='display'></span>");
                    }
                }
                this.$InputBody.addClass(inputCss);
            }

            $el.append(this.$InputBody);
            //对于可见的字段，添加是否打印属性
            if (this.Visible) {
                //如果字段没有设置是否可打印则默认可打印
                $el.attr("data-printable", this.Printable == void 0 ? true : this.Printable);
            }
            if (controlkey == "FormBoList") {
                $el.empty();
            }
        },

        // 控件渲染
        Render: function () { },
        //计算规则
        InitComputationRule: function () {
            if (!$(this.Element).hasClass('sheet-control')) {
                return;
            }
            //try {
            if (this.DataItem == null || this.DataItem.ComputationRule == null) { return; }
            var computationRule = this.DataItem.ComputationRule;//计算规则
            var computationRuleFields = this.DataItem.ComputationRuleFields;//计算规则使用的字段
            //原来是如果规则没有控件字段则直接执行，修改后只有新建表单时候执行
            //公式型控件每次加载页面都要执行计算
            //子流程第一个节点执行计算规则
            if (this.ResponseContext.IsCreateMode ||
                this instanceof $.Controls.FormFormula ||
                this.ResponseContext.IsChildInstance && (this.ResponseContext.ActivityCode == this.ResponseContext.StartActivityCode)) {
                this.SetComputationResult(computationRule, computationRuleFields);
            }
            var that = this;
            var eventName = "change.cr." + this.DataField;
            for (var fi = 0, flen = computationRuleFields.length; fi < flen; fi++) {
                var field = computationRuleFields[fi];
                if (field == 'CreatedBy') {
                    field += '.FullName';
                }
                // 子表字段
                if (field.indexOf(".") > -1) {//规则字段在子表
                    if (this.DataField.indexOf(".") > -1) {//配置规则的字段在子表
                        eventName = "change.cr." + this.ObjectId + "." + this.DataField;
                        //eidt by xc 不需要选择整列再筛选，直接找出对应的单元格，缩短时间
                        //这里要判断是否是在同一个子表
                        var childSchemaName1 = this.DataField.slice(0, this.DataField.indexOf("."));
                        var childSchemaName2 = field.slice(0, field.indexOf("."));
                        if (childSchemaName1 == childSchemaName2) {//同一个子表
                            var $ctrl = $(this.Element).closest("tr").find("div.sheet-control[data-controlkey][data-datafield='" + field + "']");
                            if ($ctrl && $ctrl.length > 0) {
                                var controlMgr = $ctrl.JControl();
                                if (!controlMgr) continue;
                                controlMgr.UnbindChange(eventName);
                                controlMgr.BindChange(eventName, function () {
                                    that.SetComputationResult(computationRule, computationRuleFields);
                                });
                                if (that.ResponseContext.IsCreateMode) {
                                    // 被绑定的值，已经有可能已经渲染
                                    controlMgr.ChangeEvents[eventName].apply(this);
                                }
                            }
                        } else {//跨子表
                            var $ctrl = $("div.sheet-control[data-controlkey][data-datafield='" + field + "']").not(".table_th");
                            for (var i = 0; i < $ctrl.length; i++) {
                                var controlMgr = $ctrl.JControl();
                                eventName = "change.cr." + controlMgr.ObjectId + "." + controlMgr.DataField;
                                if (!controlMgr) continue;
                                controlMgr.UnbindChange(eventName);
                                controlMgr.BindChange(eventName, function () {
                                    that.SetComputationResult(computationRule, computationRuleFields);
                                });
                                if (that.ResponseContext.IsCreateMode) {
                                    // 被绑定的值，已经有可能已经渲染
                                    controlMgr.ChangeEvents[eventName].apply(this);
                                }
                            }
                            eventName = "change.cr." + field.slice(0, field.indexOf(".")) + this.DataField.slice(this.DataField.indexOf("."));
                            var gridMgr = $("div.sheet-control[data-datafield='" + field.slice(0, field.indexOf(".")) + "']").JControl();
                            if (gridMgr) {
                                if (gridMgr.ChangeEvents[eventName] == undefined) {
                                    gridMgr.BindChange(eventName, function (args) {
                                        if (window[eventName]) {
                                            window.clearTimeout(window[eventName]);
                                            window[eventName] = null;
                                        }
                                        window[eventName] = setTimeout(function () {
                                            var targetCtrls = $("div.sheet-control[data-controlkey][data-datafield='" + that.DataField + "']").not(".table_th");
                                            for (var i = 0; i < targetCtrls.length; i++) {
                                                $(targetCtrls[i]).JControl().SetComputationResult(computationRule, computationRuleFields);
                                            }
                                        }, 600);
                                    });
                                }
                            }
                        }
                    } else {
                        eventName = "change.cr." + this.DataField;

                        // 子表删除行、添加行会触发子表Change，将field的事件绑定放到子表Change事件中
                        var gridMgr = $("div.sheet-control[data-datafield='" + field.slice(0, field.indexOf(".")) + "']").JControl();

                        // 给子表上对应的列绑定Change事件
                        var tdCtrl = $("div.sheet-control[data-controlkey][data-datafield='" + field + "']:not(.table_th)");
                        for (var i = 0; i < tdCtrl.length; i++) {
                            var controlMgr = $(tdCtrl[i]).JControl();
                            if (controlMgr) {
                                controlMgr.UnbindChange(eventName);
                                controlMgr.BindChange(eventName, function () {
                                    that.SetComputationResult(computationRule, computationRuleFields);
                                });
                                if (that.ResponseContext.IsCreateMode) {
                                    // 被绑定的值，已经有可能已经渲染
                                    controlMgr.ChangeEvents[eventName].apply($(tdCtrl[i]));
                                }
                            }
                        }
                        if (gridMgr) {
                            gridMgr.UnbindChange(eventName);
                            gridMgr.BindChange(eventName, function (args) {
                                // 子表删除行前触发change事件，要等待行删除后，才重新计算值，所以用setTimeout
                                // 连续添加行，最后一次新增或者删除行，才执行计算规则

                                if (window[eventName]) {
                                    window.clearTimeout(window[eventName]);
                                    window[eventName] = null;
                                }
                                window[eventName] = setTimeout(function () {
                                    that.SetComputationResult(computationRule, computationRuleFields);
                                }, 600);
                            });
                            if (that.ResponseContext.IsCreateMode) {
                                // 被绑定的值，已经有可能已经渲染
                                gridMgr.ChangeEvents[eventName].apply(this);
                            }
                        }
                    }
                } else {
                    eventName = "change.cr." + this.DataField;
                    var changeControl = $("div.sheet-control[data-datafield='" + field + "']").JControl();
                    if (!changeControl) {
                        continue;
                    }
                    changeControl.UnbindChange(eventName);
                    changeControl.BindChange(eventName, function () {
                        //这里不能调用SetComputationResult,如果子表字段规则配置了主表则在主表字段change的时候要更新同一列所有行的字段
                        var targetCtrls = $('div.sheet-control[data-controlkey][data-datafield="' + that.DataField + '"]:not(.table_th)');
                        targetCtrls.each(function () {
                            // Error :主表会自己调用自己
                            var targetCtrl = $(this).JControl();
                            if (targetCtrl != void 0) {
                                var ret = targetCtrl.GetComputationResult(computationRule, computationRuleFields);
                                targetCtrl.SetValue(ret);
                            }
                        });
                    });
                    if (that.ResponseContext.IsCreateMode) {
                        // 被绑定的值，已经有可能已经渲染
                        changeControl.ChangeEvents[eventName].apply(this);
                    }
                }
            }
        },
        SetComputationResult: function (computationRule, computationRuleFields) {
            //设置计算规则时候先判断控件是否是隐藏的，如果控件是隐藏的则不执行计算规则
            var ret = this.GetComputationResult(computationRule, computationRuleFields);
            this.SetValue(ret);
        },
        GetComputationResult: function (rule, fields) {
            if (rule == undefined || fields == undefined) {
                return;
            }
            var ruleTemp = rule;
            for (var j = 0, len = fields.length; j < len; j++) {
                //需要考虑字段是子表情况
                var ctrlField = fields[j];
                var val = [];
                if (ctrlField.indexOf('.') > -1) {
                    //子表外部聚合函数计算规则
                    if (this.DataField.indexOf(".") == -1) {
                        //配置字段在主表，规则字段在子表
                        var ctrls = $('div.sheet-control[data-controlkey][data-datafield="' + ctrlField + '"]:not(.table_th)');
                        var ctrlKey = ctrls.attr('data-controlkey');
                        //var ctrl = ctrls.JControl();
                        if (ctrls.length > 0) {
                            for (var childFieldIndex = 0, childFieldLen = ctrls.length; childFieldIndex < childFieldLen; childFieldIndex++) {
                                var ctrl = $(ctrls[childFieldIndex]).JControl();
                                if (ctrl) {
                                    if (ctrlKey == 'FormNumber' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Number)) {
                                        val.push(ctrl.GetNum());
                                    } else if (ctrlKey == 'FormCheckbox' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Bool)) {
                                        val.push(ctrl.GetValue());
                                    } else if (ctrlKey == 'FormTextBox') {
                                        val.push('"' + ctrl.GetValue() + '"');
                                    } else if (ctrlKey == 'FormTextArea') {
                                        val.push('"' + ctrl.GetValue().replace(/[\r\n]/g, "") + '"');
                                    } else if (ctrlKey == 'Formuser') {
                                        val.push('"' + ctrl.GetUnitIDs()[0] + '"');
                                    } else if (ctrlKey == 'FormMultiKey') {
                                        //不支持多人
                                        val.push('""');
                                    } else if (ctrlKey == 'FormFormula') {
                                        var ctrlVal = ctrl.GetValue();
                                        val.push('"' + ctrlVal + '"');
                                    } else {
                                        //其他类型控件，取值后判断是否是输入，不是数字则转成字符串
                                        var ctrlVal = ctrl.GetValue();
                                        if ($.isNumeric(ctrlVal)) {
                                            val.push(ctrlVal);
                                        } else {
                                            val.push('"' + ctrlVal + '"');
                                        }
                                    }
                                } else {
                                    val.push(ctrlKey == "FormNumber" ? 0 : "''");
                                }
                            }
                        } else {
                            val.push('""');
                        }
                    } else {//行内字段计算规则
                        //配置字段在子表，规则字段在子表
                        //eidt byxc 优化不需要选择整列再筛选，直接渠道对应的单元格
                        var childSchemaName1 = this.DataField.slice(0, this.DataField.indexOf("."));//当前子表
                        var childSchemaName2 = ctrlField.slice(0, ctrlField.indexOf("."));//规则字段子表
                        if (childSchemaName1 == childSchemaName2) {
                            //同一个子表，取与当前字段在同一行的字段
                            var ctrls = $(this.Element).closest("tr").find("div.sheet-control[data-controlkey][data-datafield='" + ctrlField + "']");
                            if (ctrls.length == 0) continue;
                            var ctrlKey = ctrls.attr('data-controlkey');
                            var ctrl = ctrls.JControl();
                            if (ctrl) {
                                if (ctrlKey == 'FormNumber' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Number)) {
                                    val.push(ctrl.GetNum());
                                } else if (ctrlKey == 'FormCheckbox' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Bool)) {
                                    val.push(ctrl.GetValue());
                                } else if (ctrlKey == 'FormTextBox') {
                                    val.push('"' + ctrl.GetValue() + '"');
                                } else if (ctrlKey == 'FormTextArea') {
                                    val.push('"' + ctrl.GetValue().replace(/[\r\n]/g, "") + '"');
                                } else if (ctrlKey == 'FormUser') {
                                    val.push('"' + ctrl.GetUnitIDs()[0] + '"');
                                } else if (ctrlKey == 'FormMultiUser') {
                                    //不支持多人
                                    val.push('""');
                                } else if (ctrlKey == 'FormFormula') {
                                    var ctrlVal = ctrl.GetValue();
                                    val.push('"' + ctrlVal + '"');
                                } else {
                                    var ctrlVal = ctrl.GetValue();
                                    if ($.isNumeric(ctrlVal)) {
                                        val.push(ctrlVal);
                                    } else {
                                        val.push('"' + ctrlVal + '"');
                                    }
                                }
                            } else {
                                val.push(ctrlKey == "FormNumber" ? 0 : "''");
                            }
                        } else {
                            //跨子表
                            var ctrls = $("div.sheet-control[data-controlkey][data-datafield='" + ctrlField + "']").not('.table_th');
                            if (ctrls.length > 0) {
                                for (var i = 0; i < ctrls.length; i++) {
                                    var ctrlKey = $(ctrls[i]).attr("data-controlkey");
                                    var ctrl = $(ctrls[i]).JControl();
                                    if (ctrl) {
                                        if (ctrlKey == 'FormNumber' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Number)) {
                                            val.push(ctrl.GetNum());
                                        } else if (ctrlKey == 'FormCheckbox' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Bool)) {
                                            val.push(ctrl.GetValue());
                                        } else if (ctrlKey == 'FormTextBox') {
                                            val.push('"' + ctrl.GetValue() + '"');
                                        } else if (ctrlKey == 'FormTextArea') {
                                            val.push('"' + ctrl.GetValue().replace(/[\r\n]/g, "") + '"');
                                        } else if (ctrlKey == 'FormUser') {
                                            var uid = ctrl.GetUnitIDs()[0];
                                            val.push('"' + (uid == undefined ? "" : uid) + '"');
                                        } else if (ctrlKey == 'FormMultiUser') {
                                            //不支持多人
                                            val.push('""');
                                        } else if (ctrlKey == 'FormFormula') {
                                            var ctrlVal = ctrl.GetValue();
                                            val.push('"' + ctrlVal + '"');
                                        } else {
                                            var ctrlVal = ctrl.GetValue();
                                            if ($.isNumeric(ctrlVal)) {
                                                val.push(ctrlVal);
                                            } else {
                                                val.push('"' + ctrlVal + '"');
                                            }
                                        }
                                    } else {
                                        val.push(ctrlKey == "FormNumber" ? 0 : "''");
                                    }
                                }
                            } else {
                                val.push('""');
                            }
                        }
                    }
                } else {
                    //非子表字段
                    var ctrl = $('div.sheet-control[data-datafield="' + ctrlField + '"]');
                    var ctrlKey = ctrl.attr('data-controlkey');
                    ctrl = ctrl.JControl();
                    if (ctrl) {
                        if (ctrlKey == 'FormNumber' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Number)) {
                            val.push(ctrl.GetNum());
                        } else if (ctrlKey == 'FormTextBox') {
                            val.push('"' + ctrl.GetValue() + '"');
                        } else if (ctrlKey == 'FormTextArea') {
                            val.push('"' + ctrl.GetValue().replace(/[\r\n]/g, "") + '"');
                        } else if (ctrlKey == void 0) {
                            if (ctrlField == 'CreatedBy') {
                                val.push('"' + $.SmartForm.ResponseContext.Originator + '"');
                            } else if (ctrlField == 'CreatedTime') {
                                val.push('"' + $.SmartForm.ResponseContext.ReturnData.CreatedTime.Value + '"');
                            } else if (ctrlField == 'ModifiedTime') {
                                var modifiedTime = $.SmartForm.ResponseContext.ReturnData.ModifiedTime.Value;
                                val.push(modifiedTime == void 0 ? "''" : modifiedTime);
                            }
                        } else if (ctrlKey == 'FormLabel') {
                            if (ctrlField == 'CreatedTime') {
                                val.push('"' + $.SmartForm.ResponseContext.ReturnData.CreatedTime.Value + '"');
                            } else if (ctrlField == 'ModifiedTime') {
                                var modifiedTime = $.SmartForm.ResponseContext.ReturnData.ModifiedTime.Value;
                                val.push(modifiedTime == void 0 ? "''" : modifiedTime);
                            }
                        } else if (ctrlKey == 'OwnerId') {
                            val.push('"' + $.SmartForm.ResponseContext.ReturnData.OwnerId.Value[0].UnitId + '"');
                        } else if (ctrlKey == 'FormAreaSelect') {
                            val.push("'" + ctrl.GetValue() + "'");
                        } else if (ctrlKey == 'FormCheckbox' || (ctrlKey == "FormFormula" && ctrl.BindType == ctrl.BindControlType.Bool)) {
                            val.push(ctrl.GetValue());
                        } else if (ctrlKey == 'FormUser') {
                            var uid = ctrl.GetUnitIDs()[0];
                            val.push('"' + (uid == undefined ? "" : uid) + '"');
                        } else if (ctrlKey == 'FormMultiUser') {
                            //不支持多人
                            val.push('""');
                        } else if (ctrlKey == 'FormFormula') {
                            var ctrlVal = ctrl.GetValue();
                            val.push('"' + ctrlVal + '"');
                        } else {
                            //其他类型控件，取值后判断是否是输入，不是数字则转成字符串
                            var ctrlVal = ctrl.GetValue();
                            if ($.isNumeric(ctrlVal)) {
                                val.push(ctrlVal);
                            } else {
                                val.push('"' + ctrlVal + '"');
                            }
                        }
                    } else {
                        if (ctrlField == 'CreatedTime') { //创建时间
                            val.push('"' + $.SmartForm.ResponseContext.ReturnData.CreatedTime.Value + '"');
                        } else if (ctrlField == 'ModifiedTime') { //修改时间
                            var modifiedTime = $.SmartForm.ResponseContext.ReturnData.ModifiedTime.Value;
                            val.push(modifiedTime == void 0 ? "''" : modifiedTime);
                        } else if (ctrlField == "CreatedBy") { //创建人
                            val.push('"' + $.SmartForm.ResponseContext.Originator + '"');
                        } else if (ctrlField == "OwnerId") { //拥有者
                            val.push('"' + $.SmartForm.ResponseContext.ReturnData.OwnerId.Value[0].UnitId + '"');
                        } else if (ctrlField == "OwnerDeptId") { //所属部门
                            val.push('"' + $.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0].UnitId + '"');
                        } else {
                            val.push("''");
                        }
                    }
                }
                var replaceField = '{' + ctrlField + '}';
                var reg = new RegExp(replaceField, 'g');
                ruleTemp = ruleTemp.replace(reg, val);
            }
            if (this.Type == 7) {
                //数值类型为了保证精度用逆波兰表达式计算
                var expression = this.CalculateFn(ruleTemp);
                expression = expression.replace(/\(/g, " ( ").replace(/\)/g, " ) ");
                var ret = this.CalcExpression(expression);
                return ret;
            } else {
                return new Function('return ' + ruleTemp)();
            }
        },
        // 计算隐藏规则表达式结果
        GetHideRuleResult: function (rule, fields) {
            //如果字段权限设置了不可见，则隐藏规则不生效
            if (this.Visible == false) {
                return true;
            }
            if (rule == null) {
                return false;
            }
            var ruleTemp = rule;
            for (var j = 0, len = fields.length; j < len; j++) {
                //需要考虑字段是子表情况
                var ctrlField = fields[j];
                var val = [];
                if (ctrlField.indexOf('.') > -1) {
                    //子表字段
                    var ctrls = [];
                    if (this.DataField.indexOf('.') > -1) {
                        //当前字段也是子表字段
                        ctrls = $($(this.Element).closest('tr')).find('div.sheet-control[data-datafield="' + ctrlField + '"]');
                    } else {
                        ctrls = $('div.sheet-control[data-controlkey][data-datafield="' + ctrlField + '"]:not(.table_th)');
                    }
                    var ctrlKey = ctrls.attr('data-controlkey');
                    for (var childFieldIndex = 0, childFieldLen = ctrls.length; childFieldIndex < childFieldLen; childFieldIndex++) {
                        var jCtrl = $(ctrls[childFieldIndex]).JControl();
                        if (jCtrl) {
                            if (ctrlKey == 'FormNumber') {
                                val.push(jCtrl.GetNum());
                            } else if (ctrlKey == 'FormTextBox') {
                                var v = jCtrl.GetValue();
                                val.push(v == "" ? "''" : ("'" + v + "'"));
                            } else if (ctrlKey == 'FormTextArea') {
                                var v = jCtrl.GetValue() + "";
                                val.push('"' + v.replace(/[\r\n]/g, "") + '"');
                            } else if (ctrlKey == 'FormUser' || ctrlKey == 'FormMultiUser') {
                                var units = jCtrl.GetUnitIDs();
                                if (units != null && units != void 0 && units != '') {
                                    for (var i = 0; i < units.length; i++) {
                                        val.push('"' + units[i] + '"');
                                    }
                                } else { val.push('""'); }
                            } else if (ctrlKey == 'FormAreaSelect') {
                                var area = jCtrl.GetValue();
                                val.push(area == '' ? '""' : ("'" + area + "'"));
                            } else if (ctrlKey == 'FormAttachment' || ctrlKey == 'FormPhoto') {
                                var attach = jCtrl.GetValue();
                                if (attach == void 0 || attach == "") {
                                    val.push("''");
                                } else {
                                    val.push(attach.AttachmentIds == '' ? "''" : ('"' + attach.AttachmentIds + '"'));
                                }
                            } else if (ctrlKey == 'FormCheckbox') {
                                var c = jCtrl.GetValue();
                                val.push(c);
                            } else if (ctrlKey == 'FormDropDownList') {
                                var dropDown = jCtrl.GetValue();
                                if (dropDown == void 0 || dropDown == "") {
                                    val.push("''");
                                } else {
                                    val.push('"' + dropDown + '"');
                                }
                            } else {
                                //其他类型控件，取值后判断是否是输入，不是数字则转成字符串
                                var ctrlVal = jCtrl.GetValue();
                                if ($.isNumeric(ctrlVal)) {
                                    val.push(ctrlVal);
                                } else {
                                    val.push((ctrlVal == void 0 || ctrlVal == '') ? '""' : ('"' + ctrlVal + '"'));
                                }
                            }
                        } else {
                            val.push('""');
                        }
                    }
                } else {
                    //非子表字段
                    var ctrl = $('div.sheet-control[data-datafield="' + ctrlField + '"]');
                    var ctrlKey = ctrl.attr('data-controlkey');
                    var jCtrl = ctrl.JControl();
                    if (ctrlKey == 'FormNumber') {
                        val.push(jCtrl == undefined ? 0 : jCtrl.GetNum());
                    } else if (ctrlKey == 'FormTextBox') {
                        var v = jCtrl == undefined ? "" : jCtrl.GetValue();
                        val.push(v == '' ? "''" : ('"' + v + '"'));
                    } else if (ctrlKey == 'FormTextArea') {
                        var v = jCtrl == undefined ? "" : jCtrl.GetValue();
                        val.push(v == '' ? "''" : ('"' + v.replace(/[\r\n]/g, "") + '"'));
                    } else if (ctrlKey == 'FormUser' || ctrlKey == 'FormMultiUser') {
                        var units = jCtrl == undefined ? "" : jCtrl.GetUnitIDs();
                        if (units != null && units != void 0 && units != "") {
                            for (var i = 0; i < units.length; i++) {
                                val.push('"' + units[i] + '"');
                            }
                        } else {
                            val.push('""');
                        }
                    } else if (ctrlKey == 'FormAreaSelect') {
                        var area = jCtrl == undefined ? "" : jCtrl.GetValue();
                        val.push(area == '' ? '""' : ("'" + area + "'"));
                    } else if (ctrlKey == 'FormAttachment' || ctrlKey == 'FormPhoto') {
                        var attach = jCtrl == undefined ? "" : ctrl.JControl().GetValue();
                        if (attach == "") {
                            val.push("''");
                        } else {
                            val.push('"' + attach.AttachmentIds + '"');
                        }
                    } else if (ctrlKey == 'FormCheckbox') {
                        var c = jCtrl == undefined ? "" : jCtrl.GetValue();
                        val.push(c);
                    } else if (ctrlKey == 'FormDropDownList') {
                        var dropDown = jCtrl == undefined ? "" : jCtrl.GetValue();
                        val.push(dropDown == null ? '""' : ('"' + dropDown + '"'));
                    } else if (ctrlKey == 'FormLabel') {
                        if (ctrlField == 'CreatedTime') {
                            val.push('"' + $.SmartForm.ResponseContext.ReturnData.CreatedTime.Value + '"');
                        } else if (ctrlKey == 'ModifiedTime') {
                            var modifiedTime = $.SmartForm.ResponseContext.ReturnData.ModifiedTime.Value;
                            val.push(modifiedTime == void 0 ? "''" : modifiedTime);
                        }
                    } else {
                        //createdby
                        if (ctrlKey == void 0) {
                            if (ctrlField == 'CreatedBy')
                                val.push('"' + $.SmartForm.ResponseContext.Originator + '"');
                            else if (ctrlField == 'OwnerId') {
                                val.push('"' + $.SmartForm.ResponseContext.ReturnData.OwnerId.Value[0].UnitId + '"');
                            } else if (ctrlField == 'OwnerDeptId') {
                                val.push('"' + $.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0].UnitId + '"');
                            }
                        } else {
                            //其他类型控件，取值后判断是否是数字，不是数字则转成字符串
                            for (var childFieldIndex = 0, childFieldLen = ctrl.length; childFieldIndex < childFieldLen; childFieldIndex++) {
                                var jCtrl = $(ctrl[childFieldIndex]).JControl();
                                var ctrlVal = jCtrl == undefined ? "" : jCtrl.GetValue();
                                if ($.isNumeric(ctrlVal)) {
                                    val.push(ctrlVal);
                                } else {
                                    if (ctrlVal) {
                                        val.push("'" + ctrlVal + "'");
                                    } else {
                                        val.push("''");
                                    }
                                }
                            }
                        }
                    }
                }
                var replaceField = '{' + ctrlField + '}';
                var reg = new RegExp(replaceField, 'g');
                ruleTemp = ruleTemp.replace(reg, val);
            }
            return ruleTemp;
        },
        SetHideResult: function (rule, fields, canHideColumn) {
            var ruleTemp = this.GetHideRuleResult(rule, fields);
            var fun = new Function('return ' + ruleTemp)();

            if (!fun) {
                this.SetVisible(true);
            } else {
                this.SetVisible(false);
                if (canHideColumn) {
                    this.HideColumn(true);
                }
            }
            this.HidePreHeaderTitle();
        },
        //只用于主表字段隐藏子表列使用
        //子表字段隐藏规则配置了主表字段，当条件满足时候隐藏子表列
        HideColumn: function (hide) {
            //Error 这里逻辑要重新整理
            if (!hide && !this.Visible) {
                return;
            }
            var dataField = this.DataField;
            var thatCtrl = $('div.sheet-control[data-controlkey][data-datafield="' + dataField + '"]');
            var table = thatCtrl.closest('.SheetGridView').find('.table-body table');
            if (table != void 0 && table.length > 0) {
                var th = table.find('div.sheet-control[data-datafield="' + dataField + '"][class*="table_th"]').parent();
                var td = $('div.sheet-control[data-controlkey][data-datafield="' + dataField + '"]:not(".table_th")').parent();
                if (!hide) {
                    //PC端
                    $(td).show();
                    $(th).show();
                    $(th).trigger('DomProChange.form', dataField);
                } else {
                    //PC端
                    $(td).hide();
                    $(th).hide();
                    $(th).trigger('DomProChange.form', [dataField, 'hide']);
                }
            }
        },
        InitHideRule: function () {
            //如果不在表单中不要执行
            if (!$(this.Element).hasClass('sheet-control')) {
                return;
            }
            //如果有新的规则则使用新的，否则判断是否有旧规则
            var that = this;
            if (this.DataItem != null && this.DataItem.DisplayRule) {
                var rule = this.DataItem.DisplayRule;//规则表达式
                var fields = this.DataItem.DisplayRuleFields;//规则中引用的字段

                //如果规则中没有子表字段且当前字段是子表字段则为true
                //1.先要确定当前控件是否是子表控件
                //2.判断规则中的控件是否都是主表控件
                var canHideColumn = (that.DataField.indexOf('.') > -1) && that.DataField != 'CreatedBy.FullName';
                if (canHideColumn) {
                    for (var i = 0; i < fields.length; i++) {
                        var field = fields[i];
                        if (field.indexOf('.') > -1) {
                            //规则中字段是子表字段，不隐藏该列
                            canHideColumn = false;
                            break;
                        }
                    }
                }
                //如果that是子表控件，且fields里面全是主表字段或者常量，则当子表控件不可见的时候隐藏该列
                if (fields.length == 0) {
                    //规则中没有字段，直接执行
                    that.SetHideResult(rule, fields, canHideColumn);
                    return;
                }

                //给规则中引用到的字段绑定change事件
                for (var i = 0; i < fields.length; i++) {
                    var field = fields[i];
                    if (field == 'CreatedBy') {
                        field += '.FullName';
                    }
                    var ctrl = $('div.sheet-control[data-datafield="' + field + '"]');
                    if (field.indexOf(".") > -1) {
                        if (this.DataField.indexOf(".") > -1) {
                            //规则中字段在子表,配置的字段在子表
                            var eventName = "change.hr." + this.ObjectId + "." + this.DataField;
                            var $ctrl = $(this.Element).closest("tr").find("div.sheet-control[data-controlkey][data-datafield='" + field + "']");
                            if ($ctrl && $ctrl.length > 0) {
                                var controlMgr = $ctrl.JControl();
                                controlMgr && controlMgr.BindChange(eventName, function () {
                                    that.SetHideResult(rule, fields);
                                });
                                if (that.ResponseContext.IsCreateMode || that.Value == null) {
                                    controlMgr && controlMgr.ChangeEvents[eventName].apply(this);
                                }
                            }
                        } else {
                            //规则中字段在子表,配置的字段在主表
                            //子表删除/添加行会触发子表Change，将field的事件绑定放到子表Change事件中
                            var eventName = "change.hr." + this.DataField;
                            var gridMgr = $("div.sheet-control[data-datafield='" + field.slice(0, field.indexOf(".")) + "']").JControl();
                            //给子表上对应列绑定Change事件
                            var tdCtrl = $("div.sheet-control[data-controlkey][data-datafield='" + field + "']:not('.table_th')");
                            for (var j = 0; j < tdCtrl.length; j++) {
                                var controlMgr = $(tdCtrl[j]).JControl();
                                if (controlMgr) {
                                    controlMgr.UnbindChange(eventName);
                                    controlMgr.BindChange(eventName, function () {
                                        that.SetHideResult(rule, fields);
                                    });
                                    if (that.ResponseContext.IsCreateMode || that.Value == null) {
                                        controlMgr.ChangeEvents[eventName].apply($(tdCtrl[j]));
                                    }
                                }
                            }
                            if (gridMgr) {
                                gridMgr.UnbindChange(eventName);
                                gridMgr.BindChange(eventName, function (args) {
                                    if (window[eventName]) {
                                        window.clearTimeout(window[eventName]);
                                        window[eventName] = null;
                                    }
                                    window[eventName] = setTimeout(function () {
                                        that.SetHideResult(rule, fields);
                                    }, 600);
                                });
                                if (that.ResponseContext.IsCreateMode || that.Value == null) {
                                    gridMgr.ChangeEvents[eventName].apply(this);
                                }
                            }
                        }
                    } else {
                        var ruleCtrl = ctrl.JControl();
                        if (ruleCtrl) {
                            ruleCtrl.BindChange('change.' + this.DataField, function () {
                                var ruleTemp = that.GetHideRuleResult(rule, fields);
                                var fun = new Function('return ' + ruleTemp)();
                                var thatCtrl = $('div.sheet-control[data-datafield="' + that.DataField + '"]:not(".table_th")');
                                for (var m = 0; m < thatCtrl.length; m++) {
                                    var jCtrl = $(thatCtrl[m]).JControl();
                                    jCtrl && jCtrl.SetVisible(!fun);
                                }
                                if (!fun) {
                                    if (canHideColumn) {
                                        that.HideColumn(false);
                                    }
                                } else {
                                    if (canHideColumn) {
                                        that.HideColumn(true);
                                    }
                                }
                                that.HidePreHeaderTitle();
                            });
                        }
                    }
                }
                var ruleTemp = that.GetHideRuleResult(rule, fields);
                var func = new Function('return ' + ruleTemp)();
                if (!func) {
                    that.SetVisible(true);
                    if (canHideColumn) {
                        that.HideColumn(false);
                    }
                } else {
                    that.SetVisible(false);
                    if (canHideColumn) {
                        that.HideColumn(true);
                    }
                }
            } else if (this.DisplayRule) {//兼容旧的规则
                if (this.DisplayRule.RuleDataField != void 0) {
                    //旧的
                    var $controls = $('div.sheet-control[data-datafield="' + this.DisplayRule.RuleDataField + '"]');
                    if (this.DataField.toString().indexOf('.') > -1) {
                        $controls = $(this.Element).closest('tr').find('div.sheet-control[data-datafield="' + this.DisplayRule.RuleDataField + '"]');
                    }
                    var ruleControl = $controls.JControl();
                    if (ruleControl) {
                        ruleControl.BindChange('OnChange.' + this.DataField, function () {
                            if (this.GetValue() + '' == that.DisplayRule.RuleValue) {
                                that.SetVisible(true);
                            } else {
                                that.SetVisible(false);
                            }
                        });
                        ruleControl.OnChange();
                    }
                }
            }
        },
        //如果控件设置了不可见，且控件后面没有可见控件，则隐藏控件前面的标题栏
        HidePreHeaderTitle: function () {
            var $headerDescribles, $headerTitles;
            if (this.ResponseContext.SheetView) {//移动端
                $headerDescribles = $(this.ResponseContext.SheetView).find(".page-header.page-describle");
                $headerTitles = $(this.ResponseContext.SheetView).find(".page-header").not(".page-describle");
            } else {//pc端
                $headerDescribles = $(".page-header.page-describle");
                $headerTitles = $(".page-header").not(".page-describle");
            }
            $headerTitles.css("display", "block");
            $headerDescribles.css("display", "block");
            $.SmartForm.HideEmptyHeader();
        },

        // 增加验证消息显示
        AddInvalidText: function ($el, invalidText) {
            $el = $el || $(this.Element);
            this.invalidText = invalidText;
            //单选框，复选框
            if ($el.length > 0 && $el[0].tagName.toLowerCase() === "label") {
                $el.closest(".radiolistwrap").css({
                    "border": "1px solid red ",
                    "box-shadow": "0 0 3px rgba(255,0,0,0.7)"
                });
            } else {
                if (($el.length > 0 && $el[0].tagName.toLowerCase() === "select") || $(this.Element).data("controlkey") == "FormDropDownList") {
                    //下拉框
                    $el.css({
                        "outline": "1px solid red ",
                        "box-shadow": "0 0 3px rgba(255,0,0,0.7)"
                    }).siblings(".btn-group").css({
                        "outline": "1px solid red ",
                        "box-shadow": "0 0 3px rgba(255,0,0,0.7)"
                    });
                    $el.prev("span").css({
                        "outline": "1px solid red ",
                        "box-shadow": "0 0 3px rgba(255,0,0,0.7)"
                    });
                } else if ($el.find(".AreaSelectWrap").length > 0) {
                    //地址
                    $el.find(".AreaSelectWrap").css({
                        "border": "1px solid red",
                        "box-shadow": "0 0 3px rgba(255,0,0,0.7)"
                    });
                }
                //其它
                else if ($el.attr("class") && $el.attr("class").indexOf("col-") > -1) {
                    $el.find(".form-control").css({
                        "border": "1px solid red",
                        "box-shadow": "0 0 3px rgba(255,0,0,0.7)"
                    });
                } else {
                    $el.css({
                        "border": "1px solid red",
                        "box-shadow": "0 0 3px rgba(255,0,0,0.7)"
                    });
                }
            }
            $el.addClass('invalid');//添加这个类的目的是判断控件是否校验过，并无样式


            if (invalidText != "必填" && invalidText.length > 0) {
                top.$.IShowWarn("抱歉，[" + this.DisplayName + "]选项" + invalidText);
            }

            //add by xc定位到相应位置
            var Offset = $el.offset();
            var Top = Offset.top - $(window).scrollTop();
            if (Top > $(window).height()) {
                $(window).scrollTop(Offset.top + $el.outerHeight() - $(window).height());
            } else if (Top < 0) {
                $(window).scrollTop(Offset.top - 40);
            }
            //子表内部定位
            var $par = $el.closest(".SheetGridView[data-controlkey='FormGridView']");
            if ($par.length > 0) {
                var $scroll = $par.find("div.table-scroll");
                var Left = Offset.left - $par.scrollLeft() - $par.width();
                if (Left > 5) {
                    $scroll.scrollLeft(Offset.left + $el.outerWidth() - $par.width() + 100);
                }
            }
        },

        // 移除验证显示信息
        RemoveInvalidText: function ($el) {
            $el = $el || $(this.Element);
            this.invalidText = "";
            $el.removeClass('invalid').css({ "border": "", "box-shadow": "" });
            //if (($el.length > 0 && $el[0].tagName.toLowerCase() === "select") || $(this.Element).data("controlkey") == "FormDropDownList") {
            //    $el.siblings(".btn-group").removeClass('invalid');
            //    $el.siblings(".btn-group").css({ "border": "", "outline": "", "box-shadow": "" });
            //    $el.prev("span").removeClass('invalid');
            //    $el.prev("span").css({ "outline": "", "box-shadow": "" });
            //}

            if ($el.length > 0 && $el[0].tagName.toLowerCase() === "label") {
                $el.closest(".radiolistwrap").css({ "border": "", "box-shadow": "" });
            } else {
                if ($el.length > 0 && $el[0].tagName.toLowerCase() === "select" || $(this.Element).data("controlkey") == "FormDropDownList") {
                    $el.css({ "outline": "", "box-shwdow": "" }).siblings(".btn-group").css({ "outline": "", "box-shadow": "" });
                    $el.prev("span").css({ "outline": "", "box-shadow": "" });
                } else if ($el.find(".AreaSelectWrap").length > 0) {
                    //地址
                    $el.find(".AreaSelect").css({ "border": "", "box-shadow": "" });
                } else if ($el.attr("class") && $el.attr("class").indexOf("col-") > -1) {
                    $el.find(".form-control").css({ "border": "", "box-shadow": "" });
                } else {
                    $el.css({ "border": "", "box-shadow": "" });
                }
            }
        },

        // 控件的保存函数
        SaveDataField: function () {
            return {
            };
        },

        // 获取值
        GetValue: function () {
            return this.$InputBody.val();
        },

        //设置值:复杂控件必须重写该接口
        SetValue: function (obj) {
            this.$InputBody.val(obj);
        },

        // 对应复杂控件，Value可能是ID或Code，但是Text是显示名称
        GetText: function () {
            return this.$InputBody.text();
        },

        //设置是否可编辑
        SetReadonly: function (flag) {
        },

        //设置是否可见
        SetVisible: function (flag) {
            var lastVisible = this.Visible || $(this.Element).css('visibility') == 'visible';
            var $el = $(this.Element);
            if (flag) {
                //Error:如果原来是隐藏的话，有可能控件就没渲染，需要渲染后在显示
                //如果权限控制了visible则不执行隐藏规则的结果
                //edit by xc
                if (this.DataField.indexOf(".") == -1 || this.DataField == 'CreatedBy.FullName') {
                    $el.show();
                } else {
                    $el.css("visibility", 'visible');
                }
                //end
                if (($el.attr('data-controlkey') == 'FormTextBox' || $el.attr('data-controlkey') == 'FormTextArea') && !this.Editable) {
                    $el.find('pre').css('border', 'none');
                }
                //如果控件有计算规则，要重新计算
                if (this.DataItem.ComputationRule && lastVisible == false) {
                    var rule = this.DataItem.ComputationRule;
                    var fields = this.DataItem.ComputationRuleFields;
                    var ret = this.GetComputationResult(rule, fields);
                    this.SetValue(ret);
                }
                if (this.$Element && this.$Element.attr("data-controlkey") == "FormGridView") {
                    this.AdapteHeight();
                }
            } else {
                //先清除再隐藏
                if (($.SmartForm.IsLoaded || this.ResponseContext.IsCreateMode) && this.Editable) {
                    // 表单加载完，才隐藏清空值
                    this.ClearValue();
                }
                //edit by xc
                if (this.DataField.indexOf(".") == -1 || this.DataField == 'CreatedBy.FullName') {
                    $el.hide();
                } else {
                    $el.css("visibility", 'hidden');
                }
            }
        },

        //中缀表达式解析成后缀表达式
        //1）如果遇到操作数，我们就直接将其输出。
        //2）如果遇到操作符，则我们将其放入到栈中，遇到左括号时我们也将其放入栈中。
        //3）如果遇到一个右括号，则将栈元素弹出，将弹出的操作符输出直到遇到左括号为止。注意，左括号只弹出并不输出。
        //4）如果遇到任何其他的操作符，如（“+”， “*”，“（”）等，从栈中弹出元素直到遇到发现更低优先级的元素(或者栈为空)为止。弹出完这些元素后，才将遇到的操作符压入到栈中。有一点需要注意，只有在遇到" ) "的情况下我们才弹出" ( "，其他情况我们都不会弹出" ( "。
        //5）如果我们读到了输入的末尾，则将栈中所有元素依次弹出。
        ParseExpression: function (expression) {
            //输入的表达式每一个运算数和运算符之间都会是空格分割
            //先将表达式分割成数组并去掉空的
            var items = expression.split(" ");
            var temp = [];
            for (var i = 0; i < items.length; i++) {
                if (items[i] != "") {
                    temp.push(items[i]);
                }
            }
            items = temp;
            var outItems = []; //输出队列
            var stack = new Stack(); //保存运算符的栈
            var reg = /\d/;
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (reg.test(item)) {
                    //操作数直接输出
                    outItems.push(item);
                    continue;
                }
                if (item == "(") {
                    //左括号直接入栈
                    stack.push(item);
                } else if (item == ")") {
                    //右括号弹出栈中运算符，直到遇到左括号
                    while (stack.store.length > 0 && stack.store[stack.top - 1] != "(") {
                        outItems.push(stack.pop());
                    }
                    //弹出左括号
                    stack.pop();
                } else if (item == "+" || item == "-") {
                    //如果栈顶不是左括号则将栈中运算符出栈，最后再入栈
                    while (stack.store.length > 0 && stack.store[stack.top - 1] != "(") {
                        outItems.push(stack.pop());
                    }
                    stack.push(item);
                } else if (item == "*" || item == "/") {
                    //如果栈顶元素是左括号，直接入栈
                    //如果栈顶元素优先级比当前运算符高则先出栈再入栈
                    if (stack.store.length == 0 || stack.store[stack.top - 1] == "(") {
                        stack.push(item);
                    } else {
                        while (stack.store.length > 0 && (stack.store[stack.top - 1] == "*" || stack.store[stack.top - 1] == "/")) {
                            outItems.push(stack.pop());
                        }
                        stack.push(item);
                    }
                }
            }
            while (stack.store.length > 0) {
                outItems.push(stack.pop());
            }
            return outItems;
        },

        CalcExpression: function (expression) {
            var cal = new CalcEval();
            var stack = new Stack();
            var char = this.ParseExpression(expression);
            var p = 0;
            var s = 0;
            var str = "";
            var reg = /\d/;
            for (var i = 0; i < char.length; i++) {
                if (reg.test(char[i])) {
                    stack.push(char[i]);
                } else {
                    switch (char[i]) {
                        case "-":
                            p = stack.pop();
                            s = stack.pop();
                            str = s + "-" + p;
                            stack.push(cal.eval(str));
                            break;
                        case "+":
                            p = stack.pop();
                            s = stack.pop();
                            str = s + "+" + p;
                            stack.push(cal.eval(str));
                            break;
                        case "*":
                            p = stack.pop();
                            s = stack.pop();
                            str = s + "*" + p;
                            stack.push(cal.eval(str));
                            break;
                        case "/":
                            p = stack.pop();
                            s = stack.pop();
                            str = s + "/" + p;
                            stack.push(cal.eval(str));
                            break;
                        default:
                    }
                }
            }
            return stack.store[0];
        },
        //计算表达式

        //去掉规则中的函数:$.fn
        CalculateFn: function (rule) {
            var functionExpression = [];//方法表达式
            var functionValue = [];//方法计算值
            var startIndex = 0;
            while (rule.indexOf("$.fn.", startIndex) > -1) {
                var fnIndex = rule.indexOf("$.fn.", startIndex);
                var leftBracket = rule.indexOf("(", fnIndex + 1);//左括号位置
                var rightBracket = rule.indexOf(")", leftBracket + 1);//右括号位置
                leftBracket = rule.indexOf("(", leftBracket + 1);//下一个左括号位置
                while (leftBracket > -1 && rightBracket > leftBracket) {
                    rightBracket = rule.indexOf(")", rightBracket + 1);
                    leftBracket = rule.indexOf("(", leftBracket + 1);
                }
                //截取fnIndex到rightBracket之间的字符串为函数体
                //先把函数计算出来，再替换到表达式中
                var fn = rule.slice(fnIndex, rightBracket + 1);
                var val = new Function("return " + fn)();
                functionExpression.push(fn);
                functionValue.push(val);
                startIndex = rightBracket + 1;
            }

            for (var i = 0; i < functionExpression.length; i++) {
                rule = rule.replace(functionExpression[i], functionValue[i]);
            }
            return rule;
        },

        ClearValue: function () {
            //对于配置了隐藏规则的字段，字段隐藏的时候Visible是true，值会被清掉，如果该字段参与了其他字段的计算则会出现问题
            if (this.Visible && $(this.Element).is(':visible')) {
                this.SetValue("");
            }
        },

        // 设置为焦点
        SetFocus: function () {
            if (this.$InputBody) {
                if (this.$InputBody.is("div")) {
                    this.$InputBody.find("input,select").focus();
                } else {
                    this.$InputBody.focus();
                }
            }
        },

        //值改变事件
        OnChange: function () {
            if (this.ChangeEvents == null || $.isEmptyObject(this.ChangeEvents)) return;
            for (var key in this.ChangeEvents) {
                if ($.isFunction(this.ChangeEvents[key])) {
                    this.ChangeEvents[key].apply(this, [arguments]);
                }
            }
        },

        //绑定改变值事件
        BindChange: function (key, fn) {
            this.ChangeEvents[key] = fn;
        },

        ///解除绑定
        UnbindChange: function (key) {
            delete this.ChangeEvents[key];
        },

        //如果控件有添加描述信息，则渲染
        RenderDescription: function () {
            var that = this;
            var description = that.Description || that.Describe || "";
            if (description != "") {
                var $title = that.$Title;
                var $element = $(that.Element);
                var h_title = $title.height();

                var $icon = $("<i>i</i>");
                $icon.css({
                    "height": "12px",
                    "width": "12px",
                    "line-height": "12px",
                    "color": "#fff",
                    "background-color": "#2d7fff",
                    "margin-left": "4px",
                    "cursor": "pointer",
                    "position": "absolute",
                    "top": (h_title - 12) / 2,
                    "border": "1px solid #2d7fff",
                    "border-radius": "6px",
                    "display": "inline-block",
                    "font-style": "normal",
                    "font-size": "12px",
                    "font-weight": "bold",
                    "text-align": "center"
                });
                $icon.off("click").on("click", function () {
                    $(that.Element).find("div.description").toggle();
                });
                $title.append($icon);

                //描述信息容器
                var $description = $("<div class='description'>" + description + "</div>").hide();
                //描述信息的宽度
                var w_element = $element.width();
                var padding_right = parseInt(that.$InputBody.css("padding-right"));
                var w_description = w_element - padding_right;

                $description.css({
                    "color": "#666",
                    "background-color": "#f5f5f5",
                    "font-size": "14px",
                    "position": "relative",
                    "margin-top": $element.height() + 10,
                    "width": w_description,
                    "padding": "8px 12px",
                    "word-wrap": "break-word",
                    "word-break": "break-all"
                });

                //描述信息的箭头
                var $arrowUp = $("<i></i>");
                //计算箭头的位置
                var left_arrow = parseInt($icon.css("left")) + 1;

                $arrowUp.css({
                    "height": "0",
                    "width": "0",
                    "position": "absolute",
                    "top": "-8px",
                    "left": left_arrow + "px",
                    "border-right": "8px solid transparent",
                    "border-bottom": "8px solid #f5f5f5",
                    "border-left": "8px solid transparent"
                });

                $description.append($arrowUp);
                $element.append($description);
            }
        },

        //
        // Error : 这里需要去掉，统一从 $.SmartForm.PostForm 入口
        //异步取数
        //@url:地址
        //@type:类型，post、get
        //@dataParam:传入的json数据
        //@successCallBack:回调，可不传
        //@isAsync:是否异步，可不传
        //@errorCallBack:回调，可不传
        Ajax: function (url, type, dataParam, successCallBack, isAsync, errorCallBack) {
            console.log("Ajax 这个接口后续将移除，请关注!");
            if(!window.isExpAccount){
                url = window.zuul + url   //配置接口地址
            }
            var sharingKey = $.IQuery("SharingKey");
            var engineCode = $.IQuery("EngineCode");
            var data = $.extend({
                SharingKey: sharingKey, EngineCode: engineCode
            }, dataParam);

            $.ajax({
                type: type,
                url: url,
                data: data,
                dataType: "json",
                xhrFields:{
                    withCredentials: true
                },
                crossDomain:true,
                async: isAsync == null ? true : isAsync,
                success: function (data) {
                    if ($.isFunction(successCallBack))
                        successCallBack.apply(this, [data]);
                },
                error: function (data) {
                    if ($.isFunction(errorCallBack))
                        errorCallBack.apply(this, [data]);
                }
            });
        }
    }
    function Stack() {
        this.store = [];
        this.top = 0;
        this.push = function (ele) {
            this.store[this.top++] = ele;
        };
        this.pop = function () {
            var top = --this.top;
            if (top >= 0) {
                var val = this.store[top];
                this.store.splice(this.top, 1);
                return val;
            } else {
                return "";
            }
        };
    };
})(jQuery);;
// 控件管理器
(function ($) {
    //核心属性
    $.ControlManager = {
        //页面参数属性、事件的属性
        PreDataKey: "data-",
        //已经渲染过后的标示前缀
        SheetIDKey: "jcontrolid",
        //数据项属性
        DataFieldKey: "DataField",
        //控件名称
        SheetControlKey: "controlkey",

        // 控件数量
        ControlCount: 0,
        // 管理器
        Controls: {},
        // 管理器备份，在移动端多个表单间切换时使用
        Controls_bak: {},
        //表单自定义js脚本，在移动端多个表单间切换时使用
        CustomJSScript_bak: {},

        // ** $.fn.Sheet{control}
        // ** 会调用这个方法,并传入作用域(this)
        // ** control [control]  控件名
        // ** parm [args] 参数(数组):从后台加载出来的相关数据
        Run: function (control, args) {
            // 读取默认属性
            var p;

            // 当前的ID
            var currentSheetIDKey = 0;
            //如果只有一个的话，就会返回
            var isOneControl = 0;

            //循环页面上的控件
            this.each(function () {
                if (!$(this).attr("data-" + $.ControlManager.SheetIDKey)) {
                    //edit by xc
                    p = $.Controls.GetDefaultOptions(control);
                    //ERROR这里把开发者没有更改的数据，也传到浏览器了，没有更改的这一部分不传;
                    if (args.length > 0) {
                        // Error:DataItem 应该是没必要的
                        $.extend(p, { DataItem: args[0] });
                        // 后台属性覆盖
                        $.extend(p, args[0]);
                    }
                    //edit end

                    // 控件数量加1
                    $.ControlManager.ControlCount++;
                    // 添加控件属性
                    currentSheetIDKey = $.ControlManager.SheetIDKey + "-" + $.ControlManager.ControlCount.toString();
                    var datafield = $(this).attr("data-" + $.ControlManager.DataFieldKey.toLocaleLowerCase());
                    p[$.ControlManager.DataFieldKey] = $(this).attr("data-" + $.ControlManager.DataFieldKey.toLocaleLowerCase());
                    $(this).attr("data-" + $.ControlManager.SheetIDKey, currentSheetIDKey);
                    // new 控件
                    $.ControlManager.Controls[currentSheetIDKey] = new $.Controls[control](this, p, $.SmartForm.ResponseContext);
                }
                isOneControl++;
            });

            //如果是一个的话，返回当前控件管理器
            if (isOneControl == 1) {
                return $.ControlManager.Controls[$(this).attr("data-" + $.ControlManager.SheetIDKey)];
            }
        },

        ClearControls: function () {

            this.Controls = {};
            this.ControlCount = 0;
        },

        // 保存事件，获取所有控件的保存后返回的值
        SaveSheetData: function() {
            var SheetData = {};
            for (var control in this.Controls) {
                var controlManager = this.Controls[control];
                //过滤掉过滤条件中的控件
                var controlKey = $(controlManager.Element).attr("data-controlkey");
                if (controlKey == undefined) {
                    continue;
                }
                //关联属性控件有sourceType属性,其数据不保存到数据库
                var sourceType = $(controlManager.Element).attr("data-sourcetype");
                if (sourceType != undefined) {
                    continue;
                }
                //字表中的control不调用SaveDataField，由子表自己调用SaveDataField保存值
                if (!$.isFunction(controlManager.SaveDataField) || controlManager.DataField == void 0 || (controlManager.DataField + "").indexOf(".") != -1 || controlManager.DataField == "Comments") continue;
                $.extend(SheetData, controlManager.SaveDataField());
            }
            return SheetData;
        },

        // 获取控件Dom元素(JQuery对象)，参数可以是数据项名称，也可以是#id
        GetElement: function (datafiled, bizObjectId) {
            var element, $sheet;
            if ($.SmartForm.ResponseContext.IsMobile) {
                $sheet = $.SmartForm.ResponseContext.SheetView;
            }
            else {
                $sheet = $("#SheetContent");
            }
            if (datafiled.indexOf("#") == 0) {
                element = $(datafiled);
            }
            else {
                if (datafiled.indexOf('.') > -1) {
                    //如果是子表，创建的时候，得先处理子表的渲染
                    this.GetElement(datafiled.split('.')[0]).JControl();
                }
                if ($.isEmptyObject(bizObjectId)) {
                    element = $sheet.find("[" + this.PreDataKey + this.DataFieldKey.toLowerCase() + "='" + datafiled + "']:not(.table_th)");
                }
                else {
                    element = $sheet.find("[data-ObjectId='" + bizObjectId + "']").find("[" + this.PreDataKey + this.DataFieldKey.toLowerCase() + "='" + datafiled + "']:not(.table_th)");
                }
            }
            return element;
        },

        // 读取数据，参数可以是数据项名称，也可以是#id
        GetControlValue: function (datafiled) {
            var control = this.GetElement(datafiled);
            var vals = new Array();
            for (var i = 0; i < control.length; i++) {
                var manager = $(control[i]).JControl();
                if (manager) {
                    vals.push(manager.GetValue());
                }
            }
            return vals.length == 0 ? null : (vals.length == 1 ? vals[0] : vals);
        },

        // 设置数据项前端控件的值
        // 参数1：数据项名称，参数2：数据项的值
        SetControlValue: function (datafiled, val, BizObjectId) {
            var control = this.GetElement(datafiled, BizObjectId);
            for (var i = 0; i < control.length; i++) {
                var manager = $(control[i]).JControl();
                if (manager) {
                    manager.SetValue(val);
                }
            }

        },

        // 函数：控件校验
        Validate: function (ActionControl) {
            var flag = true;
            for (var control in this.Controls) {
                var controlManager = this.Controls[control];

                if (ActionControl != null && ActionControl.Action == $.SmartForm.Action_Save && !(controlManager instanceof $.Controls.FormAttachment)) {
                    //保存的时候，需要校验附件是上传完整
                    continue;
                }

                if (!$.isFunction(controlManager.Validate)) continue;
                if (controlManager.DataField == void 0) continue;
                //控件不可见不校验
                if (!$(controlManager.Element).is(":visible") || $(controlManager.Element).css('visibility') == 'hidden') continue;
                if (!controlManager.Validate(ActionControl.Action) && flag) {
                    flag = false;
                    if (ActionControl.doingWork != undefined) {
                        ActionControl.doingWork = false;
                    }

                    // 自动定位到验证失败的控件
                    if (controlManager.IsMobile) {
                        var $elment = $(controlManager.Element);
                        //edit by xc
                        //// 滚动高度为，当前元素相对页面顶部的top+元素自身height - 手机页口可视高度 - 底部操作按钮高度
                        //var $par = $elment.closest(".ionic-scroll.sheetcontent").children(".scroll");
                        //var bottomToolBarHeight = 50;
                        ////获取$par的translateY值
                        //var ty = $par.length > 0 ? -parseInt(getTranslateY($par[0])) : 0;
                        //var top = $elment.offset().top - $(window).height() + bottomToolBarHeight + $elment.height() + ty;
                        var top = $elment.position().top;
                        //end
                        H3Config.GlobalScrollDelegate.scrollTo(null, top, true);

                        $.IShowError("提示", "抱歉，[" + controlManager.DisplayName.replace(/(^\s*)|(\s*$)/g, "") + "]选项" + controlManager.invalidText);
                        $elment.find("input").focus();
                    }
                }
            }
            if (!flag) {
                $("#SheetContent").trigger("ValidateFail");//必填验证失败的提示框可能会撑高子表行高
            }
            return flag;
        }
    };

    //var getTranslateY = function (node) {
    //    var regRule = /translate(Y|\dd)?\(\s*(\w+\s*,)?\s*([^,]+)(\s*,[^)]+)?\s*\)/;
    //    var regRule2 = /matrix\(.*,\s*(\w+)\s*\)/;
    //    var transform = node.style.transform;
    //    var reg;
    //    if (!transform) {
    //        return null;
    //    }
    //    reg = regRule.exec(transform);
    //    if (null === reg) {
    //        reg = regRule2.exec(transform);
    //        return reg ? reg[1] : null;
    //    }
    //    return reg[3];
    //}


})(jQuery);;
// JS框架,JS框架加载所有JS部件，提供与后台通讯方法
// 属性定义
// 定义Form命名控件
jQuery.extend({
    SmartForm: {
        // 所有的请求入口
        AjaxUrl: "/Form/OnAction",
        BaseActionName: "DoAction",
        // 表单编码
        FormCode: "",
        // 加载参数值,会根据各种信息，构造出是流程表单加载还是Bo开发平台加载,替换原来
        RequestParameters: {},

        // 所有跟后台交互，都通过Action_****
        // 加载
        Action_Load: "Load",
        // 加载表单标示
        LOADKEY: "Load",
        // 所有事件集合
        Actions: [],
        // 保存表单标示
        Action_Save: "Save",
        // 删除表单标示
        Aciton_Remove: "Remove",
        // 打印表单
        Action_Print: "Print",
        // 取消流程
        Action_CancelInstance: "CancelInstance",
        // 驳回
        Action_Reject: "Reject",
        // 提交
        Action_Submit: "Submit",
        // 取回流程
        Action_RetrieveInstance: "RetrieveInstance",
        // 结束流程
        Action_FinishInstance: "FinishInstance",
        // 查看流程实例
        Action_ViewInstance: "ViewInstance",
        // 转发
        Action_Forward: "Forward",
        // 查看二维码
        Action_QrCode: "ViewQrCode",
        // 关闭
        Action_Close: "Close",
        //提交中
        IsPosting: false,

        //表单是否加载完
        IsLoaded: false,

        // 审批节点类型
        WorkItemType: {
            // 普通工作项
            Fill: 0,
            // 审批节点
            Approve: 2
        },

        //// 提交并添加
        //SubmitAndAdd: {
        //    Action: "SubmitAndAdd", Icon: "icon-ok", Text: "提交并添加", OnActionDone: function (data) {
        //        if (data.Successful) {
        //            if (window.parent.$.ListView != null && $.isFunction(window.parent.$.ListView.RefreshView)) {
        //                window.parent.$.ListView.RefreshView();
        //            }
        //            var href = window.location.href;
        //            href = href.replace("&mid=", "&mid=" + Math.round(Math.random() * 100, 0));
        //            window.location.href = href;
        //        } else {
        //            if (data.Errors != void 0 && data.Errors != null && data.Errors.length > 0) {
        //                $.IShowError('错误', data.Errors[0]);
        //            }
        //        }
        //        return false;
        //    }
        //},

        // 表单数据类型
        SmartFormDataType: {
            /// 未指定
            Unspecified: 0,
            /// 流程数据
            Workflow: 1,
            /// 业务对象
            BizObject: 2
        },

        // 表单状态
        SmartFormMode: {
            // 未指定
            Unspecified: -1,
            // 编辑模式
            Edit: 0,
            // 查看模式
            Readonly: 1,
            // 发起流程
            Create: 2,
            // 打印模式
            Print: 3
        },

        //  表单状态
        BizObjectStatus: {
            Draft: 0, //草稿
            Effective: 1, //审批通过或表单提交后
            Running: 2, //流程运行中
            Canceled: 3 //被取消
        }
    }
});

// 函数定义
jQuery.extend(
    $.SmartForm,
    {
        // 初始化
        // Error: 移动端参数需要打包传递
        Init: function (ResponseContext) {
            this.IsLoaded = false;
            // 是否调试状态
            if (ResponseContext.DebugTrack != null && ResponseContext.DebugTrack.DebugState == 0) {
                parent.$.IPushDebugTrack(ResponseContext, this, this.Run);
            }
            else {
                // 运行表单
                this.Run(ResponseContext);
            }
            this.IsLoaded = true;
        },

        // 运行
        Run: function (ResponseContext) {
            if (ResponseContext.constructor != Object) {
                //经过apply返回的参数，constructor是判断不了的
                ResponseContext = JSON.parse(JSON.stringify(ResponseContext));
            }

            var that = this;
            that.ResponseContext = ResponseContext;
            that.RequestParameters = ResponseContext.RequestParameters;
            // 失败
            if (!ResponseContext.Successful) {

                // 提示错误信息
                for (var i = 0; i < ResponseContext.Errors.length; i++) {
                    $.IShowError('错误', ResponseContext.Errors[i]);

                }
                return;
            }
            // 输出Debug日志
            that.DebugLog(ResponseContext.DebugLogs);

            that.UpgradeHtml();

            // 渲染表单属性：动态、关联列表、任务
            that.RenderFormProperty(ResponseContext);
            that.IsPosting = false;

            // 移动端处理
            if (that.ResponseContext.IsMobile) {
                if (ResponseContext != null && ResponseContext.Actions != void 0) {
                    // 初始化Action集合
                    that.Actions = [];
                    for (var action in ResponseContext.Actions) {
                        that.Actions.push(ResponseContext.Actions[action]);
                    }
                }

                // 移动端去掉一行两列布局
                var $layouts = [];
                var $colsm6;
                if (ResponseContext.SheetView) {
                    $colsm6 = $(ResponseContext.SheetView).find(".col-sm-6");
                }
                else {
                    $colsm6 = $(".col-sm-6");
                }
                $colsm6.each(function () {
                    var $control = $(this).children(".sheet-control");
                    var $parent = $(this).parent();
                    $parent.before($control);
                    $layouts.push($parent);
                });
                for (var i = 0; i < $layouts.length; i++) {
                    $layouts[i].remove();
                }
            }
            // 加载所有的控件
            that.Load(ResponseContext);

            //清空Invalid状态
            that.ClearInvalidState();

            // 清空描述
            that.HideEmptyHeader();

            // 隐藏空的tab页签
            that.HideEmptyTab(ResponseContext);
        },

        // Html 升级
        UpgradeHtml: function () {
            // 1. 读取所有控件
            // 2. 控件标示修改：Sheet =》 Form
            // 3. 多行文本 =》 换控件
            // 4. 多人参与者 =》 多人控件

            var $sheet = "";
            if (this.ResponseContext.IsMobile) {
                $sheet = this.ResponseContext.SheetView;
            }
            else {
                $sheet = $("#SheetContent");
            }
            $sheet.find('.col-sm-6').addClass('col-xs-6 col-md-6');//兼容其他屏幕尺寸
            var rows = $sheet.find("div.sheet-control[data-controlkey^='Sheet']");
            for (var i = 0; i < rows.length; i++) {
                var $row = $(rows[i]);
                var controlkey = $row.attr("data-controlkey");
                controlkey = "Form" + controlkey.substring("sheet".length, controlkey.length);
                if (controlkey.toLocaleLowerCase() == "formtextbox") {
                    var isMultiple = $row.attr("data-IsMultiple");
                    if (isMultiple != null && (isMultiple.toLocaleLowerCase() == "true" || isMultiple == true)) {
                        controlkey = "FormTextArea";
                    }
                }
                else if (controlkey.toLocaleLowerCase() == "formuser") {
                    var isMultiple = $row.attr("data-IsMultiple");
                    if (isMultiple != null && (isMultiple.toLocaleLowerCase() == "true" || isMultiple == true)) {
                        controlkey = "FormMultiUser";
                    }
                }
                else if (controlkey.toLocaleLowerCase() == "formuser") {
                    var isCheckbox = $row.attr("data-isCheckbox");
                    if (isCheckbox != null && (isCheckbox.toLocaleLowerCase() == "true" || isCheckbox == true)) {
                        controlkey = "FormCheckbox";
                    }
                }
                $row.attr("data-controlkey", controlkey);
            }
        },

        // 绑定数据
        Load: function (ResponseContext) {
            var that = this;
            // 编码不存在
            if ($.isEmptyObject(ResponseContext.SchemaCode)) {
                $.IShowError(ResponseContext.Message);
                // Error: 调用this.Close();
                if (ResponseContext.IsMobile && H3Config.GlobalHistory) {
                    H3Config.GlobalHistory.goBack();
                }
                return;
            }

            // 设置从后台加载过来的数据
            this.ResponseContext = ResponseContext;

            // 判断元素类型，渲染成MvcControl
            if (this.ResponseContext.IsMobile) {
                $.ControlManager.ClearControls();
                this.ResponseContext.SheetView.find("div[data-controlkey]:not(.table_th)").each(function () {
                    // 初始化控件
                    $(this).JControl();
                });
            }
            else {
                // PC端
                $("div[data-controlkey]:not(.table_th)").each(function () {
                    //初始化控件
                    $(this).JControl();
                });
            }

            // 初始化工具栏
            this.InitToolBar();

            if (this.ResponseContext.IsMobile) {
                // 审批控件且有审批意见
                if (!this.ResponseContext.IsCreateMode && this.ResponseContext.InstanceId) {
                    //审批环节,需要添加审批控件  
                    var $CommentControl = $("<div class='row sheet-control form-group'>").attr({
                        "data-DataField": "Comments",
                        "data-controlkey": "FormComment",
                        "data-DisplayName": "审批"
                    });//.addClass("row sheet-control form-group");
                    if (this.ResponseContext.SheetView) {
                        $(this.ResponseContext.SheetView).find(".sheetcontentdiv").prepend($CommentControl);
                    }
                    else {
                        $(".sheetcontentdiv:last").prepend($CommentControl);
                    }
                    this.CommentManager = $CommentControl.FormComment(this.ResponseContext.Comments);
                }
            } else {
                // 审批控件且有审批意见
                if (this.ResponseContext.WorkItemType == 2 || (!$.isEmptyObject(this.ResponseContext.Comments) && this.ResponseContext.Comments.length > 0)) {
                    //审批环节,需要添加审批控件  
                    var $CommentControl = $("<div class='row sheet-control form-group'>").attr({
                        "data-DataField": "Comments",
                        "data-controlkey": "FormComment",
                        "data-DisplayName": "审批"
                    });//.addClass("row sheet-control form-group");
                    $("#SheetContent").append($CommentControl);
                    this.CommentManager = $CommentControl.FormComment(this.ResponseContext.Comments);
                }
            }


            // 调用自定义加载事件
            $.JForm._OnLoad(this);
        },

        // 渲染表单属性，动态，任务，关联列表
        RenderFormProperty: function (ResponseContext) {
            if (this.ResponseContext.IsMobile ||
                ResponseContext.IsCreateMode ||
                ResponseContext.BizObjectStatus == this.BizObjectStatus.Draft ||
                ResponseContext.BizObjectStatus == this.BizObjectStatus.Running) return;

            var $newTabs = [];
            var tabNames = [];
            if (ResponseContext.EnableFormSns) {
                var $snsTab = $("<div class='tab-pane'>")/*.addClass("tab-pane")*/.append($("<div data-controlkey='FormSns' class='row sheet-control SheetSns'>")/*.addClass("row sheet-control SheetSns")*/);
                $newTabs.push($snsTab);
                tabNames.push("动态");
            }
            if (ResponseContext.EnableTask) {
                var $taskTab = $('<div class="tab-pane">').append($('<div data-controlkey="FormTaskTips" class="row sheet-control SheetTaskTips">'));
                $newTabs.push($taskTab);
                tabNames.push("任务提醒 ");
            }

            if (!$.isEmptyObject(ResponseContext.AssociationLists)) {
                for (var code in ResponseContext.AssociationLists) {
                    var $boListTab = $("<div class='tab-pane'>");//.addClass("tab-pane");
                    var $boList = $("<div data-controlkey='FormBoList' class='row sheet-control SheetBoList'>")/*.addClass("row sheet-control SheetBoList")*/.attr("data-BOSchemaCode", code);
                    $boListTab.append($boList);
                    $newTabs.push($boListTab);
                    tabNames.push(ResponseContext.AssociationLists[code]);
                }
            }


            if ($newTabs.length > 0 && !this.ResponseContext.IsMobile) {
                var $tabs = $("<ul class='nav nav-tabs'>");//.addClass("nav nav-tabs");
                var $tabcontent = $("<div class='tab-content'>");//.addClass("tab-content");

                var tabId = $.IGuid();
                var $li = $("<li class='active'>");
                var $a = $('<a href="#' + tabId + '" data-toggle="tab" aria-expanded="true"><strong>' + ResponseContext.DisplayName + '信息</strong></a>')
                var $sheetTab = $("<div id='" + tabId + "' class='tab-pane active'>")/*.addClass("tab-pane active")*/.html($("#SheetContent").html());

                $tabs.append($li.append($a));
                $tabcontent.append($sheetTab);

                for (var i = 0; i < $newTabs.length; i++) {
                    var tabId = $.IGuid();
                    var $li = $("<li>");
                    var $a = $('<a href="#' + tabId + '" data-toggle="tab" aria-expanded="true"><strong>' + tabNames[i] + '</strong></a>')
                    $tabs.append($li.append($a));
                    $tabcontent.append($newTabs[i].attr("id", tabId));
                }

                $("#SheetContent").html("").append($("<div class='nav-tabs-wrap'></div>").append($tabs)).append($tabcontent);//edit by xc
            }
        },

        // 隐藏空的tab页签
        HideEmptyTab: function (ResponseContext) {
            var that = this;
            var isCreateMode = ResponseContext.IsCreateMode;
            var isApproving = ResponseContext.BizObjectStatus == this.BizObjectStatus.Draft || ResponseContext.BizObjectStatus.Running;
            if (isCreateMode || isApproving) {
                var tabpanels;
                if (ResponseContext.SheetView) {
                    tabpanels = $(ResponseContext.SheetView).find("#tabContent>.tab-pane");
                }
                else {
                    tabpanels = $("#tabContent>.tab-pane");
                }

                if (tabpanels == null || tabpanels.length == 0) return;

                var $sheetTabpanel;
                for (var ti = 0, tlen = tabpanels.length; ti < tlen; ti++) {
                    var $tabpanel = $(tabpanels[ti]);
                    var controls = $tabpanel.children();
                    var needHide = true;
                    for (var ci = 0, clen = controls.length; ci < clen; ci++) {
                        var $control = $(controls[ci]);
                        var controlKey = $control.attr("data-controlkey");
                        var visiable = false;
                        // 一行两列布局控件
                        if (!controlKey) {
                            $control.find(".sheet-control").each(function () {
                                if ($(this).css("display") != "none") {
                                    visiable = true;
                                }
                            });
                        }
                        else {
                            visiable = $control.css("display") != "none";
                        }

                        // 审批中时，把只含关联列表、隐藏控件的标签隐藏起来
                        if (isCreateMode && controlKey != "SheetBoList" && controlKey != "SheetSns" && visiable
                            || !isCreateMode && isApproving && controlKey != "SheetBoList" && visiable) {
                            needHide = false;
                            break;
                        }
                    }
                    if (needHide) {
                        $tabpanel.hide();
                        if (ResponseContext.SheetView) {
                            $(ResponseContext.SheetView).find("#navTabs").find("li[data-panelid='" + $tabpanel.attr("id") + "']").hide();
                        }
                        else {
                            $("#navTabs").find("li[data-panelid='" + $tabpanel.attr("id") + "']").hide();
                        }
                    }
                    else {
                        if (!$sheetTabpanel) {
                            $sheetTabpanel = $tabpanel;
                        }
                    }
                }
            }
            // 只有一个可见的navTab时，将其隐藏
            var $visibleTabs;
            if (ResponseContext.SheetView) {
                $visibleTabs = $(ResponseContext.SheetView).find("#navTabs>li:visible");
            }
            else {
                $visibleTabs = $("#navTabs>li:visible");
            }
            if ($visibleTabs.length == 1) {
                $visibleTabs.hide();
            }

            // Panel都不显示时，将包含表单内容的Panel显示出来
            var $visiblePanel;
            if (ResponseContext.SheetView) {
                $visiblePanel = $(ResponseContext.SheetView).find("#tabContent>.tab-pane:visible");
            }
            else {
                $visiblePanel = $("#tabContent>.tab-pane:visible");
            }
            if ($visiblePanel.length == 0) {
            }
        },

        // 清空描述
        HideEmptyHeader: function () {
            //如果"分组标题"后面的控件都隐藏，则隐藏"分组标题"
            //确定哪些describle显示
            //显示所有描述
            var $headerDescribles = $(".page-header.page-describle"); //描述
            var $headerTitles = $(".page-header").not(".page-describle"); //分组标题
            $headerDescribles.css({ "display": "block" });

            for (var i = 0; i < $headerTitles.length; i++) {
                var isEmpty = true;
                var $headerTitle = $($headerTitles[i]);
                var $nextControl = $headerTitle.next();
                var $nextControlIsDescrible = false;
                var $nextControlIsTitle = false
                var $nextControlIsDisplay = $nextControl.css("display") != "none";

                //如果当前"分组标题"不可见，则不执行以下操作
                if ($headerTitle.css("display") == "none") {
                    continue;
                }
                //如果当前"分组标题"后面的控件也是"分组标题",则隐藏当前"分组标题"
                //如果当前"分组标题"后面的控件都不可见，则隐藏当前"分组标题"
                while ($nextControl.length > 0) {
                    $nextControlIsDescrible = $nextControl.hasClass("page-header") && $nextControl.hasClass("page-describle");
                    $nextControlIsTitle = $nextControl.hasClass("page-header") && !$nextControl.hasClass("page-describle");
                    $nextControlIsDisplay = $nextControl.css("display") != "none";

                    if ($nextControlIsDescrible && $nextControlIsDisplay) {
                        isEmpty = false;
                        break;
                    }
                    if ($nextControlIsTitle) break;
                    var controlKey = $nextControl.attr("data-controlKey");
                    if (!controlKey) {
                        $nextControl.find(".sheet-control").each(function () {
                            if ($(this).css("display") != "none") {
                                isEmpty = false;
                                return false;
                            }
                        });
                    } else {
                        if (controlKey != "FormComment") {
                            if ($nextControl.css("display") != "none") {
                                isEmpty = false;
                                break;
                            }
                        }
                    }
                    $nextControl = $nextControl.next();
                }
                if (isEmpty) {
                    $headerTitle.css({ "display": "none" });
                }
            }
        },

        // 开放给开发者的接口:校验
        ValidateAction: function (ActionControl) {
            if ($.JForm._OnValidate(this, ActionControl)) {
                return $.ControlManager.Validate(ActionControl);
            }
            else {
                return false;
            }
        },

        // 初始化工具栏  
        InitToolBar: function () {
            //添加默认的操作
            if (this.Actions && this.Actions.length == 0) {
                this.AddDefaultActions();
            }

            // 调用自定义按钮
            $.JForm._OnLoadActions(this, this.Actions);

            // 移动端不直接显示工具栏
            if (this.ResponseContext && !this.ResponseContext.IsMobile) {
                //表单显示在弹出框时，ToolBar显示到表单底部
                if (this.ResponseContext.ShowInModal) {
                    $("ul[data-sheettoolbar='true']").closest("nav.sheet-navbar").addClass("hide");
                    $("ul[data-sheettoolbar-bottom='true']").closest("nav.sheet-navbar").removeClass("hide");

                    //去掉关闭按钮和二维码
                    var temp = [];
                    for (var i = 0; i < this.Actions.length; i++) {
                        if (this.Actions[i].Action != "ViewQrCode" && this.Actions[i].Action != "Code") {
                            temp.push(this.Actions[i]);
                        }
                    }
                    $("ul[data-sheettoolbar-bottom='true']").FormToolBar(temp);
                } else {
                    $("ul[data-sheettoolbar='true']").FormToolBar(this.Actions);
                }
            } else {
                //显示更多按钮逻辑
            }
        },

        // 执行动作: {Action:"方法名称",Datas:[{数据项1},{数据项2}]}
        OnAction: function (actionControl) {
            //执行动作标示
            var actionName = actionControl.Action;
            //参数：[{数据项1},{数据项2},...]或["#ID1"，"#ID2",...]或["数据1","数据2"]或混合
            var datas = actionControl.Datas;

            if (actionName == "ViewQrCode") {
                return false;
            }
            //全屏
            if (actionName == 'FullScreen') {
                var url = window.location.href;
                var h = window.top.document.body.offsetHeight;
                var w = window.top.document.body.offsetWidth;
                var fullWindow = window.open(url, 'big', 'fullscreen=yes,height=' + h + ',width=' + w);
                this.ClosePage();
                return false;
            }
            
            if (actionName != "Remove" && actionName != "Read") {
                if (!$.JForm._OnValidate(this, actionControl)) {
                    return false;
                }
            }
            //构造数据项的值
            var CommandParams = {
                Command: actionName
            };
            var params = [];
            if (typeof (actionControl.LoadControlValue) == "undefined" || actionControl.LoadControlValue) {
                if (datas) {
                    for (var i = 0; i < datas.length; i++) {
                        if (datas[i].toString().indexOf("{") == 0) {
                            var key = datas[i].replace("{", "").replace("}", "");
                            params.push($.ControlManager.GetControlValue(key));
                        }
                        else if (datas[i].toString().indexOf("#") == 0) {
                            var key = datas[i].replace("#");
                            params.push($.ControlManager.GetControlValue(datas[i]));
                        }
                        else {
                            params.push(datas[i]);
                        }
                    }
                }
            }
            else {
                params = datas;
            }
            CommandParams["Param"] = JSON.stringify(params);
            CommandParams["PostValue"] = JSON.stringify(this.GetPostValue(this.actionName));

            var that = this;
            //提交到后台执行
            this.PostForm(actionName,
                CommandParams,
                function (data) {
                    that.ResultHandler.apply(that, [actionControl, data]);
                    if (actionControl.CloseAfterAction) {
                        this.ClosePage();
                    }
                }
            );
        },

        // Error: 交互提示
        ConfirmAction: function (message, doneCallback) {

            // 判断是否移动端
            if (this.ResponseContext.IsMobile) {
                if (H3Config.GlobalIonicPopup) {
                    var confirmPopup = H3Config.GlobalIonicPopup.confirm({
                        template: message,
                        title: '操作',
                        cancelText: '取消',
                        okText: '确定'
                    });
                    confirmPopup.then(function (res) {
                        if (res) {
                            doneCallback();
                        }
                    });
                }
            }

            else {
                $.IConfirm("", message, function (isTrue) {
                    if (isTrue) {
                        doneCallback.call();
                    }
                });
            }
        },

        // 保存
        Save: function (actionControl) {
            if (!this.ValidateAction(actionControl)) return false;
            var SheetPostValue = this.GetPostValue(this.Action_Save);
            var that = this;
            if (that.IsPosting) return;
            this.IsPosting = true;

            $.IShowPreLoader('提交中');
            this.PostForm(this.Action_Save,
                { PostValue: JSON.stringify(SheetPostValue) },
                function (data) {
                    $.IHidePreLoader();
                    that.ResultHandler.apply(that, [actionControl, data]);
                });
        },

        // 删除
        Remove: function (actionControl) {
            //移动端标识，是否是提交类型的操作，不缓存当前表单
            if (typeof (MobileCacheManager) != 'undefined') {
                MobileCacheManager.CurMobileFormObj.IsSubmit = true;
            }
            var that = this;
            $.IConfirm("提示", "删除后将无法恢复，确定删除？", function (isConfirm) {
                if (isConfirm) {
                    $.IShowPreLoader('提交中');
                    //that.TimeOut = setTimeout(function () {
                    //    that.ShowHappyLoading();
                    //}, 1500);

                    var SheetPostValue = that.GetPostValue(that.Aciton_Remove);
                    that.PostForm(that.Aciton_Remove, { PostValue: JSON.stringify(SheetPostValue) },
                        function (data) {
                            $.IHidePreLoader();
                            //that.HideHappyLoading();
                            //that.TimeOut && window.clearTimeout(that.TimeOut);
                            that.ResultHandler.apply(that, [actionControl, data]);
                        });
                }
            });
        },

        // 转发
        Forward: function (actionControl) {
            if (!this.ForwardModal) {
                var $divForward = $("#divForward").show();
                var $participant = $divForward.find("#forwardParticipant");
                var $comment = $divForward.find('#forwardComment');
                var sheetUserMgr = $participant.FormUser();
                $participant.removeClass("form-group");

                var that = this;
                var Actions = [{
                    Key: "btn_Ok",
                    Text: "确定",
                    Theme: 'btn_ok',
                    CallBack: function () {
                        var participants = sheetUserMgr.GetUnitIDs();
                        if (!participants || participants.length == 0) {
                            $.IShowError("提示", "请选择转发人");
                            return;
                        }
                        var comment = $comment.val();


                        var SheetPostValue = that.GetPostValue(that.Action_Forward);
                        SheetPostValue.ForwardTo = participants[0];
                        if (comment) {
                            SheetPostValue.Comment = {
                                CommentId: $.IGuid(),
                                Text: comment,
                                IsNewComment: true
                            };
                        }
                        that.PostForm(that.Action_Forward,
                            { PostValue: JSON.stringify(SheetPostValue) },
                            function (data) {
                                that.ResultHandler.apply(that, [actionControl, data]);
                            });
                    }
                },
                {
                    Text: '取消',
                    Theme: 'btn_cancel',
                    CallBack: function () {
                        that.ForwardModal.hide();

                    }
                }];
                this.ForwardModal = $.IModal({
                    Title: '转发',
                    Width: 500,
                    Height: 300,
                    ShowBack: true,
                    HasIframe: false,
                    Content: $divForward,
                    ToolButtons: Actions,
                    ContentUrl: ''
                });
            }
            else {
                this.ForwardModal.show();
            }
        },

        // 提交
        Submit: function (actionControl, text, destActivity, postValue, groupValue) {
            var that = this;
            //if (that.IsPosting) return;
            if (that.IsPosting) {
                //$.IShowWarn('','正在努力提交中...');
                return;
            }
            //移动端标识，是否是提交类型的操作，不缓存当前表单
            if (typeof (MobileCacheManager) != 'undefined') {
                MobileCacheManager.CurMobileFormObj.IsSubmit = true;
            }
            if (actionControl.Text != "已阅" && !this.ValidateAction(actionControl)) {
                if (this.ResponseContext.IsMobile) {
                    MobileCacheManager.CurMobileFormObj.Submitting = false;
                }
                return false;
            }
            $.IShowPreLoader('提交中');
            //that.TimeOut = setTimeout(function () {
            //    that.ShowHappyLoading();
            //}, 1500);

            this.IsPosting = true;
            var SheetPostValue = that.GetPostValue(that.Action_Submit, destActivity, postValue, groupValue);
            if (this.ResponseContext.IsMobile) {
                if (text) {
                    var result = {
                        CommentId: $.IGuid(),
                        Text: text,
                        IsNewComment: true
                    };
                    SheetPostValue.Comment = result;
                } else {
                    var result = {
                        CommentId: $.IGuid(),
                        Text: '',
                        IsNewComment: true
                    };
                    SheetPostValue.Comment = result;
                }
            }
            that.PostForm(that.Action_Submit, { PostValue: JSON.stringify(SheetPostValue) }, function (data) {
                $.IHidePreLoader();
                //that.HideHappyLoading();
                //that.TimeOut && window.clearTimeout(that.TimeOut);

                // 从关联查询跳转到非流程表单中新增关联对象，在提交后，将值反写回去
                var sheetQueryField = $.IQuery("SheetQueryField");
                if (sheetQueryField && that.ResponseContext.FormDataType == that.SmartFormDataType.BizObject) {
                    var rowId = $.IQuery("SheetQueryRowId");
                    if (window.parent != window && window.parent.$.SmartForm) {
                        window.parent.$.SmartForm.WritebackSheetQuery(rowId, sheetQueryField, data.BizObjectId, data.InstanceName);
                    }
                }
                that.ResultHandler.apply(that, [actionControl, data]);
            });

            return true;
        },

        // 关联查询新增，返写回界面
        WritebackSheetQuery: function (rowId, fieldName, ObjectId, displayName) {
            var $element;
            if (rowId) {
                $element = $("tr[data-ObjectId='" + rowId + "']").find("[data-datafield='" + fieldName + "']").not('.table_th');
            }
            else {
                $element = $("[data-datafield='" + fieldName + "']").not('.table_th');
            }
            if ($element.length > 0) {
                var controlManager = $element.JControl();
                if (controlManager) {
                    controlManager.SetValue({ ObjectId: ObjectId, Name: displayName });
                    controlManager._refreshTable();
                }
            }
        },

        // 驳回
        Reject: function (actionControl, destActivity, text) {
            if (!$.JForm._OnValidate(this, actionControl)) {
                return false;
            }

            var SheetPostValue = this.GetPostValue(this.Action_Reject, destActivity);
            if (this.ResponseContext.IsMobile) {
                if (text) {
                    var result = {
                        CommentId: $.IGuid(),
                        Text: text,
                        IsNewComment: true
                    };
                    SheetPostValue.Comment = result;
                } else {
                    var result = {
                        CommentId: $.IGuid(),
                        Text: '',
                        IsNewComment: true
                    };
                    SheetPostValue.Comment = result;
                }
            }
            var that = this;
            this.PostForm(that.Action_Reject, { PostValue: JSON.stringify(SheetPostValue) }, function (data) {
                that.ResultHandler.apply(that, [actionControl, data]);
            });
        },

        //结束流程
        FinishInstance: function (actionControl) {
            IsSubmit = true;
            var SheetPostValue = this.GetPostValue(this.Action_FinishInstance);
            var that = this;
            this.PostForm(that.Action_FinishInstance,
                { PostValue: JSON.stringify(SheetPostValue) },
                function (data) {
                    that.ResultHandler.apply(that, [actionControl, data]);
                });
        },

        // 取回流程
        RetrieveInstance: function (actionControl) {
            var that = this;
            this.PostForm(this.Action_RetrieveInstance,
                {},
                function (data) {
                    that.ResultHandler.apply(that, [actionControl, data]);
                });
        },

        ViewQrCode: function (actionControl) {
            var that = this;
            //二维码提示框
            var $action = actionControl.Element;
            $("#action_more").parent().hide();//
            if ($("#dvQrCode").length > 0) {
                $("#dvQrCode").parent().show();//鼠标移入按钮时一直显示
                return false;
            }

            var tipText = "钉钉扫码查看数据";
            var fontSize = 16;
            if (that.ResponseContext.IsCreateMode) {
                tipText = "钉钉扫码添加数据";
                if (that.ResponseContext.IsExternalForm) {
                    tipText = "复制二维码，分享给好友";
                    fontSize = 14;
                }
            }

            var $QrCodeTip = $('<div class="qrcode-tip" style="height:220px;width:200px;text-align:center;padding:10px;font-size:' + fontSize + 'px;display:none"><div id="dvQrCode"></div><div>' + tipText + '<div></div>').appendTo($("body"));
            $("body").off("click.tooltip").on("click.tooltip", function (e) {
                var $target = $(e.target);
                if ($target.hasClass("fa-qrcode") || $target.hasClass("qrcode-tip") || $target.attr("id") == "dvQrCode"
                    || $target[0].tagName == "CANVAS" || $target.closest("li[data-action='ViewQrCode']").length > 0) {
                    return false;
                }
                else {
                    $QrCodeTip.hide();
                }
            })

            $QrCodeTip.off("dbclick.ToolTip").on("dbclick.ToolTip", function (e) {
                e.preventDefault();
            });
            //鼠标移开时隐藏二维码
            $QrCodeTip.off("mouseout.tooltip").on("mouseout.tooltip", function (e) {
                // console.log(e);
                var e = event || window.event;
                var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                var x = e.pageX || e.clientX + scrollX;
                var y = e.pageY || e.clientY + scrollY;

                var offset = $QrCodeTip.offset();
                var minx = offset.left;
                var minY = offset.top;
                var maxX = offset.left + $QrCodeTip.width();
                var maxY = offset.top + $QrCodeTip.height();

                if (x < minx || x > maxX || y < minY || y > maxY) {
                    $QrCodeTip.hide();
                }
            });

            var offset = $action.offset();
            var tipDiv = $("div.qrcode-tip");
            $QrCodeTip.css({ left: offset.left + ($action.outerWidth() - $QrCodeTip.outerWidth()) / 2 - $(window).scrollLeft() - 56, bottom: $(window).height() - $action.outerHeight() - tipDiv.outerHeight() - 16 });

            $QrCodeTip.show(); //第一次显示
            var qrcodeUrl = that.ResponseContext.QrCodeUrl;
            qrcodeUrl = decodeURIComponent(qrcodeUrl);
            $("#dvQrCode").qrcode({ width: 160, height: 160, text: qrcodeUrl });

            return false;
        },

        // 获取Mvc表单传给后台的数据
        GetPostValue: function (actionName, destActivity, postValue, groupValue) {
            var SheetPostValue = {
                Command: actionName,
                DestActivityCode: destActivity,
                InstanceName: "",
                Data: {},//当前表单的数据项集合值
                Comment: {}
            };

            if (actionName == this.Aciton_Remove || actionName == this.Action_Forward) {
                return SheetPostValue;
            }
            SheetPostValue.Data = $.ControlManager.SaveSheetData();
            //区分移动端和pc端
            if (this.ResponseContext.IsMobile) { }
            else {
                if (this.CommentManager) {
                    SheetPostValue.Comment = this.CommentManager.SaveDataField();
                    if (SheetPostValue.Comment.Text == null || SheetPostValue.Comment.Text == "") {
                        if (actionName == "Submit") {
                            var result = {
                                CommentId: $.IGuid(),
                                Text: "同意",
                                IsNewComment: true
                            };
                            SheetPostValue.Comment = result;
                        } else if (actionName == "Reject") {
                            var result = {
                                CommentId: $.IGuid(),
                                Text: "不同意",
                                IsNewComment: true
                            };
                            SheetPostValue.Comment = result;
                        }
                    }
                }
            }

            SheetPostValue.Priority = $.ControlManager.Priority;
            SheetPostValue.HiddenFields = $.ControlManager.HiddenFields;
            return SheetPostValue;
        },

        // 回调函数处理
        ResultHandler: function (actionControl, data) {
            if (actionControl.OnActionDone) {
                if (!actionControl.OnActionDone.apply(actionControl, [data])) {
                    this.IsPosting = false;
                    return;
                }
            }
            if (data.Successful) {
                if (data.ClosePage) {
                    // TODO:关闭当前页面，并且刷新父页面
                    //传入当前Action

                    if (data.Message) {
                        $.IShowTip(data.Message);
                    }

                    var param = { Action: actionControl.Action };
                    this.ClosePage(param);
                }
                else if (data.Url) {
                    if (window.parent.$.ListView != null && $.isFunction(window.parent.$.ListView.RefreshView)) {
                        window.parent.$.ListView.RefreshView();
                    }
                    window.location.href = data.Url;
                }
                else if (data.Refresh) {
                    if (data.Message) {
                        $.IShowTip(data.Message);
                    }
                    var href = window.location.href;
                    href = href.replace("&mid=", "&mid=" + Math.round(Math.random() * 100, 0));
                    window.location.href = href;
                }
            }
            else {
                //Error:错误提示方式需要修改
                if (data.Errors) {
                    for (var i = 0; i < data.Errors.length; i++) {
                        top.$.IShowError('提示', data.Errors[i]);
                    }
                }
                //虽然有错误信息，但是不是异常
                if (data.Infos && data.Infos.length > 0) {
                    for (var i = 0; i < data.Infos.length; i++) {
                        top.$.IShowError('提示', data.Infos[i]);
                    }
                }
                //不满足提交规则,修改标记，还可以继续提交
                this.IsPosting = false;
            }
            if (data.Message) {
                $.IShowTip(data.Message);
            }
        },

        // 关闭页面
        ClosePage: function (data) {
            //判断是否是移动端
            if (this.ResponseContext.IsMobile && H3Config.GlobalHistory) {
                //判断是否通过消息传过来的 
                if (H3Config.messageType) {
                    MessageProcessed();
                } else {
                    H3Config.GlobalHistory.goBack();
                }
            } else {
                //if (window.parent.frames.length > 0) {
                if ((window.parent.frames.length > 0 && !this.ResponseContext.IsExternalForm) || (this.ResponseContext.IsExternalForm && window.parent.frames.length > window.parent.$("div[data-controlkey='FormMap']").length)) {
                    window.opener = null;
                    if (data != void 0 && data != null && data.Action == "Close") {
                    }
                    else {
                        //刷新列表
                        if (window.parent.$.ListView != null && $.isFunction(window.parent.$.ListView.RefreshView)) {
                            window.parent.$.ListView.RefreshView();
                        }
                        else if ($.isFunction(window.parent.RefreshView)) {
                            window.parent.RefreshView.call();
                        }
                    }
                    if (data != undefined) {

                    }
                    //传递action到sidemodal
                    var param = null;
                    if (data != undefined) {
                        param = { Action: data.Action };
                    }

                    //关闭弹出框
                    if (top.$.IDialogModal.ModalIdArray.length > 0) {
                        //计算表单弹出框回调函数需要传递的表单数据
                        //关闭按钮不需要执行回调函数
                        if (data && (data.Action == "Close" || data.NoFunction)) {
                            window.parent.$.IDialogModal.ExecuteHideFunction = false;
                        } else {
                            var actionName = "";
                            if (data && data.Action) { actionName = data.Action; }
                            window.parent.$.IDialogModal.SheetData = this.GetPostValue(actionName);
                        }
                        window.parent.$.IDialogModal.Close(null);
                        return;
                    }

                    window.parent.$.ISideModal.Close(null, param);
                    return;
                }

                if (navigator.userAgent.indexOf("MSIE") > 0) {
                    if (navigator.userAgent.indexOf("MSIE 6.0") > 0) {
                        window.opener = null; window.close();
                    }
                    else {
                        window.open('', '_top'); window.top.close();
                    }
                }
                else if (navigator.userAgent.indexOf("Firefox") > 0 || navigator.userAgent.indexOf("Chrome") > 0) {
                    window.location.href = 'about:blank ';
                    window.close();
                    //window.history.go(-2);  
                }
                else {
                    window.opener = null;
                    window.open('', '_self', '');
                    window.close();
                }
            }
        },

        // 添加默认的事件
        AddDefaultActions: function () {
            if (!this.ResponseContext || $.isEmptyObject(this.ResponseContext.Actions)) return;

            for (var key in this.ResponseContext.Actions) {
                //新建流程不应该有查看流程按钮
                if (this.ResponseContext.IsCreateMode
                    && this.ResponseContext.Actions[this.Action_Submit]) {
                    if (this.ResponseContext.Actions[key].Action == "ViewInstance") {
                        continue;
                    }
                }

                this.Actions.push(this.ResponseContext.Actions[key]);
            }
        },

        // 显示调试信息
        DebugLog: function (logs) {
            if (logs != null) {
                for (var i = 0; i < logs.length; i++) {
                    console.log(logs[i]);
                }
            }
        },

        //当使用POST方式时，浏览器把各表单字段元素及其数据作为HTTP消息的实体内容发送给Web服务器，
        //而不是作为URL地址的参数进行传递，使用POST方式传递的数据量要比使用GET方式传送的数据量大的多
        PostForm: function (action, data, callback, errorhandler, async) {
            var that = this;
            if (data.PostValue) {
                var PostValue = JSON.parse(data.PostValue);
                var beforSubmitResult = $.JForm._BeforeSubmit(this, action, PostValue);
                if (typeof (beforSubmitResult) != "undefined" && !beforSubmitResult) {
                    return;
                }

                data.PostValue = JSON.stringify(PostValue);
            }

            var paramData = $.extend({ Command: action }, data, this.RequestParameters);
            paramData.ActionName = this.BaseActionName;
            $.ajax({
                type: "POST",
                url: this.AjaxUrl,
                data: { PostData: JSON.stringify(paramData) },
                dataType: "json",
                async: async == null ? true : async,
                success: function (data) {
                    that.DebugLog(data.ReturnData.StartFormResponse.DebugLogs);
                    var handle = function (data) {
                        $.JForm._AfterSubmit(that, action, data);
                        if ($.isFunction(callback))
                            callback.apply(this, [data]);
                    };

                    if (data.ReturnData.StartFormResponse.DebugTrack != null && data.ReturnData.StartFormResponse.DebugTrack.DebugState == 0) {
                        parent.$.IPushDebugTrack(data.ReturnData.StartFormResponse, that, handle);
                    }
                    else {

                        handle(data.ReturnData.StartFormResponse);
                    }
                },
                error: errorhandler,
                complete: function () {
                    // that.IsPosting = false;//重置提交状态
                }
            });
        },
        ClearInvalidState: function () {
            for (var key in $.ControlManager.Controls) {
                var control = $.ControlManager.Controls[key];
                var $invalidControl = $(control.Element).find(".invalid");

                if ($invalidControl.length && control.RemoveInvalidText) {
                    control.RemoveInvalidText($invalidControl);
                }
            }
        }
    });


//封装自定义代码扩展接口
jQuery.extend({
    JForm: {
        // 已经初始化
        _isInitialization: false,
        _Init: function (form) {
            if (this._isInitialization) return;
            // 把所有控件转为 this.DataField的模式,如  this.F****.SetValue();
            for (var key in $.ControlManager.Controls) {
                if ($.ControlManager.Controls[key].DataField != null && $.ControlManager.Controls[key].DataField.toString().indexOf(".") < 0) {
                    this[$.ControlManager.Controls[key].DataField] = $.ControlManager.Controls[key];
                }
            }
            this._isInitialization = true;
            //var inp = null;
            //var inputs = $('input[type="text"]');
            //for (var i = 0, len = inputs.length; i < len; i++) {
            //    inputs[i].addEventListener('focus', function () {
            //        inp = this;
            //    }, false);
            //}
            //window.onresize = function () {
            //    var inpPos = inp.getBoundingClientRect();
            //    if (inpPos.bottom > window.innerHeight) {
            //        inp.scrollIntoView();
            //    }
            //};
        },

        // 表单加载
        _OnLoad: function (form) {
            if ($.isFunction($.JForm.OnLoad)) {
                this._Init(form);
                $.JForm.OnLoad();
            }
        },

        // 加载菜单
        _OnLoadActions: function (form, actions) {
            if ($.isFunction($.JForm.OnLoadActions)) {
                this._Init(form);
                $.JForm.OnLoadActions(actions);
            }
        },

        // 表单校验
        _OnValidate: function (Form, ActionControl) {
            if ($.isFunction($.JForm.OnValidate)) {
                this._Init(Form);
                ActionControl.doingWork = false;
                return $.JForm.OnValidate(ActionControl);
            }
            return true;
        },

        // 提交前事件
        _BeforeSubmit: function (Form, action, postValue) {
            if ($.isFunction($.JForm.BeforeSubmit)) {
                this._Init(Form);
                return $.JForm.BeforeSubmit(action, postValue);
            }
        },

        // 提交后事件
        _AfterSubmit: function (Form, action, postValue) {
            if ($.isFunction($.JForm.AfterSubmit)) {
                this._Init(Form);
                return $.JForm.AfterSubmit(action, postValue);
            }
        },

        // 清理所有自定义事件
        CleanEvents: function () {
            this.OnLoad = null;
            this.OnLoadActions = null;
            this.OnValidate = null;
            this._isInitialization = false;
        }
    }
});;
// 所有控件的定义
// Error:这里改名字
FormControls = {
    FormSeqNo: {
        Text: "流水号",
        Icon: "fa-barcode",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "流水号", Description: "" },
            { Name: "Prefix", Text: "前置字符(最多4位字母或数字)", DefaultValue: "", MaxLength: 4 },
            { Name: "DateTimeMode", Text: "日期格式", DefaultValue: "YYYY", ValueRange: [{ Val: "None", Text: "无" }, { Val: "YYYY", Text: "年" }, { Val: "YYYYMM", Text: "年月" }, { Val: "YYYYMMDD", Text: "年月日" }] },
            { Name: 'IncrementNum', Text: '自增序号位数', DefaultValue: 8 },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },
    FormTextArea: {
        Text: "多行文本",
        Icon: "fa-bars",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "多行文本", Description: "普通字段,记录文本信息" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "Rows", Text: "可见行数", DefaultValue: 3 },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "ComputationRule", Text: "计算公式", DefaultValue: "" },
            { Name: "PlaceHolder", Text: "提示语", DefaultValue: "", Description: "普通字段,记录文本信息" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormTextBox: {
        Text: "单行文本",
        Icon: "fa-tag",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "单行文本", Description: "普通字段,记录文本信息" },
            { Name: "TransferItems", Text: "控件转换", DefaultValue: "FormTextBox", ValueRange: [{ Val: "FormTextBox", Text: "文本框" }, { Val: "FormDropDownList", Text: "下拉框" }, { Val: "FormRadioButtonList", Text: "单选框" }, { Val: "FormCheckboxList", Text: "复选框" }] },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "ComputationRule", Text: "计算公式", DefaultValue: "" },
            { Name: "Mode", Text: "格式", DefaultValue: "Normal", ValueRange: [{ Val: "Normal", Text: "普通文本" }, { Val: "Email", Text: "邮箱" }, { Val: "Card", Text: "身份证" }, /*{ Val: "Mobile", Text: "手机" },*/ { Val: "Telephone", Text: "固话/手机" }] },
            { Name: "InputByScan", Text: "允许扫码输入", DefaultValue: false },
            { Name: "ScanUpdateEnable", Text: "可修改扫码结果", DefaultValue: false },
            { Name: "NoRepeat", Text: "不允许重复录入", DefaultValue: false },
            //{ Name: "IsMultiple", Text: "模式", DefaultValue: false, ValueRange: [{ Val: false, Text: "单行" }, { Val: true, Text: "多行" }] },
            { Name: "DefaultItems", Text: "选项", DefaultValue: ["选项1", "选项2", "选项3"] },
            { Name: "PlaceHolder", Text: "提示语", DefaultValue: "", Description: "普通字段,记录文本信息" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormDateTime: {
        Text: "日期",
        Icon: "fa-bell-o",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "日期", Description: "普通字段,存储日期、时间信息" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "ComputationRule", Text: "计算公式", DefaultValue: "" },
            { Name: "DateTimeMode", Text: "格式", DefaultValue: "yyyy-mm-dd", ValueRange: [{ Val: "yyyy-mm-dd", Text: "年-月-日" }, { Val: "yyyy-mm", Text: "年-月" }, { Val: "yyyy-mm-dd hh:ii", Text: "年-月-日 时:分" }, { Val: "hh:ii", Text: "时:分" }] },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },
    FormDateTimeStamp: {
        Text: "日期区间",
        Icon: "fa-bell-o",
        Designable: false,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "", Description: "普通字段,存储日期、时间信息" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "DateTimeMode", Text: "日期格式", DefaultValue: "yyyy-mm-dd", ValueRange: [{ Val: "yyyy-mm-dd", Text: "年-月-日" }, { Val: "yyyy-mm-dd hh:ii", Text: "年-月-日 时:分" }] },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormNumber: {
        Text: "数字",
        Icon: "fa-sort-numeric-asc",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "数字", Description: "普通字段,记录数值信息" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "ComputationRule", Text: "计算公式", DefaultValue: "" },
            { Name: "DecimalPlaces", Text: "格式", DefaultValue: "" },
            { Name: "DecimalPlaces", Text: "小数位数", Visiable: false, DefaultValue: "0", ValueRange: [{ Val: "0", Text: "整数" }, { Val: "2", Text: "两位小数" }, { Val: "3", Text: "三位小数" }, { Val: "4", Text: "四位小数" }] },
            { Name: "ShowMode", Text: "显示模式", Visiable: false, DefaultValue: "0", ValueRange: [{ Val: "0", Text: "正常" }, { Val: "1", Text: "显示千位分隔符" }] },
            // { Name: "PlaceHolder", Text: "提示语",Visiable: false, DefaultValue: "", Description: "普通字段,记录数值信息" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },
    FormNumberStamp: {
        Text: '数值区间',
        Icon: "fa-sort-numeric-asc",
        Designable: false,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "", Description: "普通字段,记录数值信息" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "ComputationRule", Text: "计算规则", DefaultValue: "" },
            { Name: "DecimalPlaces", Text: "格式", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "整数" }, { Val: "2", Text: "两位小数" }, { Val: "3", Text: "三位小数" }, { Val: "4", Text: "四位小数" }] },
            { Name: "PlaceHolder", Text: "提示语", DefaultValue: "", Description: "普通字段,记录数值信息" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormRadioButtonList: {
        Text: "单选框",
        Icon: "fa-bullseye",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "单选框", Description: "普通字段,可与数据字典关联,存储选择项" },
            { Name: "TransferItems", Text: "控件转换", DefaultValue: "FormRadioButtonList", ValueRange: [{ Val: "FormTextBox", Text: "文本框" }, { Val: "FormDropDownList", Text: "下拉框" }, { Val: "FormRadioButtonList", Text: "单选框" }, { Val: "FormCheckboxList", Text: "复选框" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "SelectShowMode", Text: "移动端显示模式", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "侧滑选择" }, { Val: "1", Text: "平铺显示" }] },
            { Name: "DataDictItemName", Text: "绑定数据字典", Visiable: false, DefaultValue: "" },
            { Name: "DefaultItems", Text: "选项", DefaultValue: ["选项1", "选项2", "选项3"] },
            { Name: "DefaultValue", Text: "默认值", Visiable: false },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormCheckboxList: {
        Text: "复选框",
        Icon: "fa-check-square-o",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "复选框", Description: "普通字段,可与数据字典关联,存储选择项" },
            { Name: "TransferItems", Text: "控件转换", DefaultValue: "FormCheckboxList", ValueRange: [{ Val: "FormTextBox", Text: "文本框" }, { Val: "FormDropDownList", Text: "下拉框" }, { Val: "FormRadioButtonList", Text: "单选框" }, { Val: "FormCheckboxList", Text: "复选框" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "SelectShowMode", Text: "移动端显示模式", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "侧滑选择" }, { Val: "1", Text: "平铺显示" }] },
            { Name: "DataDictItemName", Text: "绑定数据字典", DefaultValue: "", Visiable: false },
            { Name: "DefaultItems", Text: "选项", DefaultValue: ["选项1", "选项2", "选项3"] },
            { Name: "DefaultValue", Text: "默认值", Visiable: false },
            { Name: "IsCheckbox", Text: "模式", DefaultValue: "false", ValueRange: [{ Val: "false", Text: "复选框" }] },
            //级联新增属性-过滤
            { Name: "BOSchemaCode", Text: "关联表单", Visiable: false, DefaultValue: "" },
            { Name: "MappingField", Text: "关联字段", Visiable: false, DefaultValue: "" },
            { Name: "AssociationFilter", Text: "表单过滤条件", Visiable: false, DefaultValue: "" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormCheckbox: {//是/否控件
        Text: "是/否",
        Icon: "fa-check-circle-o",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "是/否", Description: "普通字段,可与数据字典关联,存储选择项" },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "DefaultItems", Text: "选项", DefaultValue: ["是/否"] },
            { Name: "DefaultValue", Text: "默认值", Visiable: false }
        ]
    },

    FormDropDownList: {
        Text: "下拉框",
        Icon: "fa-tasks",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "下拉框", Description: "普通字段,可与数据字典关联,存储选择项" },
            { Name: "TransferItems", Text: "控件转换", DefaultValue: "FormDropDownList", ValueRange: [{ Val: "FormTextBox", Text: "文本框" }, { Val: "FormDropDownList", Text: "下拉框" }, { Val: "FormRadioButtonList", Text: "单选框" }, { Val: "FormCheckboxList", Text: "复选框" }] },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "SelectShowMode", Text: "移动端显示模式", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "侧滑选择" }, { Val: "1", Text: "平铺显示" }] },
            { Name: "DataSource", Text: "数据来源", DefaultValue: "Custom", ValueRange: [{ Val: "Custom", Text: "自定义" }, { Val: "DictItem", Text: "数据字典" }, { Val: "Association", Text: "关联表单" }] },
            { Name: "DataDictItemName", Text: "绑定数据字典", Visiable: false, DefaultValue: "" },
            { Name: "DefaultItems", Text: "选项", DefaultValue: ["选项1", "选项2", "选项3"] },
            { Name: "DefaultValue", Text: "默认值", Visiable: false },
            //级联新增属性
            { Name: "BOSchemaCode", Text: "关联表单", Visiable: true, DefaultValue: "" },
            { Name: "MappingField", Text: "关联字段", Visiable: true, DefaultValue: "" },
            { Name: "AssociationFilter", Text: "数据范围限定", Visiable: true, DefaultValue: "" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ],
    },

    FormMultiUser: {
        Text: "人员多选",
        Icon: "fa-sitemap",
        Designable: true,
        //可设计属性
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "人员多选", Description: "从组织机构中选择人员" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "IsMultiple", Text: "模式", Visiable: false, DefaultValue: true, ValueRange: [{ Val: false, Text: "单选" }, { Val: true, Text: "多选" }] },
            { Name: "UnitSelectionRange", Text: "仅以下人员可被选择", DefaultValue: "", placeholder: '添加人员范围' },
            { Name: "OrgUnitVisible", Text: "部门可见", Visiable: false, DefaultValue: false, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }] },
            { Name: "UserVisible", Text: "用户可见", Visiable: false, DefaultValue: true, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }] },
            // { Name: "IsRelatedMember", Text: "启动表单相关权限控制", DefaultValue: false, ValueRange: [{ Val: false, Text: "不启动" }, { Val: true, Text: "启动" }] },
            { Name: "MappingControls", Text: "关联配置", Visiable: false },
            { Name: "IsRelatedMember", Text: "允许控件所选人员查看数据", DefaultValue: false, ValueRange: [{ Val: true, Text: "允许" }, { Val: false, Text: "不允许" }] },
            { Name: "UseDataCache", Text: "是否缓存", DefaultValue: true, Visiable: false, ValueRange: [{ Val: true, Text: "是" }, { Val: false, Text: "否" }] },
            { Name: "DefaultValue", Text: "默认值", Visiable: false },
            { Name: "ShowUnActive", Text: "显示离职人员", Visiable: true, DefaultValue: false, ValueRange: [{ Val: false, Text: "不显示" }, { Val: true, Text: "显示" }] },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ],
    },

    FormUser: {
        Text: "人员单选",
        Icon: "fa-user",
        Designable: true,
        //可设计属性
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "人员单选", Description: "从组织机构中选择人员" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "IsMultiple", Text: "模式", Visiable: false, DefaultValue: false, ValueRange: [{ Val: false, Text: "单选" }, { Val: true, Text: "多选" }] },
            { Name: "UnitSelectionRange", Text: "仅以下人员可被选择", DefaultValue: "", placeholder: '添加人员范围' },
            { Name: "OrgUnitVisible", Text: "部门可见", Visiable: false, DefaultValue: false, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }] },
            { Name: "UserVisible", Text: "用户可见", Visiable: false, DefaultValue: true, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }] },
            // { Name: "IsRelatedMember", Text: "启动表单相关权限控制", DefaultValue: false, ValueRange: [{ Val: false, Text: "不启动" }, { Val: true, Text: "启动" }] },
            { Name: "MappingControls", Text: "人员信息填充" },
            { Name: "IsRelatedMember", Text: "允许控件所选人员查看数据", DefaultValue: false, ValueRange: [{ Val: true, Text: "允许" }, { Val: false, Text: "不允许" }] },
            { Name: "ShowUnActive", Text: "显示离职人员", Visiable: true, DefaultValue: false, ValueRange: [{ Val: false, Text: "不显示" }, { Val: true, Text: "显示" }] },
            { Name: "UseDataCache", Text: "是否缓存", DefaultValue: true, Visiable: false, ValueRange: [{ Val: true, Text: "是" }, { Val: false, Text: "否" }] },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ],
    },

    FormDepartment: {
        Text: "部门单选",
        Icon: "fa-user",
        Designable: true,
        //可设计属性
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "部门单选", Description: "从组织机构中选择部门" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "IsMultiple", Text: "模式", Visiable: false, DefaultValue: false, ValueRange: [{ Val: false, Text: "单选" }, { Val: true, Text: "多选" }] },
            { Name: "UnitSelectionRange", Text: "仅以下部门可被选择", DefaultValue: "", placeholder: '添加部门范围' },
            { Name: "OrgUnitVisible", Text: "部门可见", DefaultValue: true, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }], Visiable: false },
            { Name: "UserVisible", Text: "用户可见", DefaultValue: false, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }], Visiable: false },
            { Name: "IsRelatedMember", Text: "启动表单相关权限控制", DefaultValue: false, ValueRange: [{ Val: false, Text: "不启动" }, { Val: true, Text: "启动" }], Visiable: false },
            { Name: "IsRelatedMember", Text: "启动表单相关权限控制", DefaultValue: false, ValueRange: [{ Val: false, Text: "不启动" }, { Val: true, Text: "启动" }], Visiable: false },
            { Name: "MappingControls", Text: "关联配置", Visiable: false },
            { Name: "ShowUnActive", Text: "显示离职人员", Visiable: true, DefaultValue: false, ValueRange: [{ Val: false, Text: "不显示" }, { Val: true, Text: "显示" }] },
            { Name: "UseDataCache", Text: "是否缓存", DefaultValue: true, Visiable: false, ValueRange: [{ Val: true, Text: "是" }, { Val: false, Text: "否" }] },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ],
    },
    FormMultiDepartment: {
        Text: "部门多选",
        Icon: "fa-sitemap",
        Designable: true,
        //可设计属性
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "部门多选", Description: "从组织机构中选择部门" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "IsMultiple", Text: "模式", Visiable: false, DefaultValue: true, ValueRange: [{ Val: false, Text: "单选" }, { Val: true, Text: "多选" }] },
            { Name: "UnitSelectionRange", Text: "仅以下部门可被选择", DefaultValue: "", placeholder: '添加部门范围' },
            { Name: "OrgUnitVisible", Text: "部门可见", DefaultValue: true, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }], Visiable: false },
            { Name: "UserVisible", Text: "用户可见", DefaultValue: false, ValueRange: [{ Val: true, Text: "可选" }, { Val: false, Text: "不可选" }], Visiable: false },
            { Name: "IsRelatedMember", Text: "启动表单相关权限控制", DefaultValue: false, ValueRange: [{ Val: false, Text: "不启动" }, { Val: true, Text: "启动" }], Visiable: false },
            { Name: "MappingControls", Text: "关联配置", Visiable: false },
            { Name: "UseDataCache", Text: "是否缓存", DefaultValue: true, Visiable: false, ValueRange: [{ Val: true, Text: "是" }, { Val: false, Text: "否" }] },
            { Name: "DefaultValue", Text: "默认值", Visiable: false },
            { Name: "ShowUnActive", Text: "显示离职人员", Visiable: true, DefaultValue: false, ValueRange: [{ Val: false, Text: "不显示" }, { Val: true, Text: "显示" }] },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ],
    },

    FormAttachment: {
        Text: "附件",
        Icon: "fa-chain-broken",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "附件", Description: "普通字段,存储文件信息" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "MaxUploadSize", Text: "文件限制大小", DefaultValue: 10, ValueRange: [{ Val: "1", Text: "1MB" }, { Val: "5", Text: "5MB" }, { Val: "10", Text: "10MB" }, { Val: "50", Text: "50MB" }] }
        ]
    },

    FormPhoto: {
        Text: "图片",
        Icon: "icon-picture",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "图片" },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "UpLoadMultiple", Text: "允许上传多张图片", Visiable: true, DefaultValue: false },
            { Name: "CameraOnly",Text:"仅允许拍照上传", Visiable:true, DefaultValue:false}
        ]
    },

    FormQuery: {
        Text: "关联表单",
        Icon: "fa-file-o",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "关联表单", Description: "表单引用另一个表单时使用，比如：项目汇报需要先输入项目，这个“项目”就是关联查询类型" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "BOSchemaCode", Text: "关联表单", DefaultValue: "" },
            { Name: "AssociationFilter", Text: "数据范围限定", DefaultValue: "" },
            { Name: "InputByScan", Text: "允许扫码输入", DefaultValue: false },
            { Name: "ScanUpdateEnable", Text: "允许手动修改扫码结果", DefaultValue: false },
            { Name: "DataRule", Text: "数据填充规则", DefaultValue: "" },
            { Name: "BOSchemaName", Text: "关联表单名称", DefaultValue: "", Visiable: false },//针对应用树类型选择添加的属性，还原选择的表单名称
            { Name: "IsListView", Text: "是否列表视图", Visiable: false, DefaultValue: false },
            { Name: "MappingControls", Text: "关联配置", Visiable: false },
            { Name: "MappingProperties", Text: "关联属性", Visiable: false },
            { Name: "IsMultiple", Text: "是否多选", Visiable: false, DefaultValue: false },
            { Name: "BOSchemaInfo", Text: "关联表单信息", Visiable: false, DefaultValue: "" },//关联表单的信息，{AppPackage：xxx，AppGroup：xxx，AppMenu:xxx,IsChildSchema:xxx}
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },
    FormMultiQuery: {
        Text: "关联多选",
        Icon: "fa-files-o",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "关联多选", Description: "表单引用另一个表单时使用，比如：项目汇报需要先输入项目，这个“项目”就是关联查询类型" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "BOSchemaCode", Text: "关联表单", DefaultValue: "" },
            { Name: "AssociationFilter", Text: "数据范围限定", DefaultValue: "" },
            { Name: "BOSchemaName", Text: "关联表单名称", DefaultValue: "", Visiable: false },//针对应用树类型选择添加的属性，还原选择的表单名称
            { Name: "IsListView", Text: "是否列表视图", Visiable: false, DefaultValue: false },
            { Name: "IsMultiple", Text: "是否多选", Visiable: false, DefaultValue: true },
            { Name: "BOSchemaInfo", Text: "关联表单信息", Visiable: false, DefaultValue: "" },//关联表单的信息，{AppPackage：xxx，AppGroup：xxx，AppMenu:xxx,IsChildSchema:xxx}
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },
    FormAssociateProperty: {
        Text: "关联属性",
        Icon: "fa-chain",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "关联属性", Description: "" },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "BOSchemaField", Text: "关联表单字段", DefaultValue: "" },//针对应用树类型选择添加的属性，还原选择的表单名称
            { Name: "AsFilter", Text: "作为关联表单搜索项", DefaultValue: false },
            { Name: "IsMappingProperty", Visiable: false, DefaultValue: true },
            { Name: "SourceType", Visiable: false, DefaultValue: "" }
            // { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },
    FormAreaSelect: {
        Text: "地址",
        Icon: "fa-flag",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "地址", Description: "普通字段,记录文本信息" },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "AreaMode", Text: "格式", DefaultValue: "P-C-T", ValueRange: [{ Val: "P-C-T", Text: "省-市-县" }, { Val: "P-C", Text: "省-市" }, { Val: "P", Text: "省" }] },
            { Name: "ShowDetailAddr", Text: "显示详细地址", DefaultValue: "true" }
        ]
    },

    FormMap: {
        Text: "位置",
        Icon: "fa-map-marker",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "位置", Description: "普通字段,存储地理位置" },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "Range", Text: "位置范围", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "限定附近位置" }, { Val: "1", Text: "允许任意位置" }] }
        ],
    },

    //关联列表控件
    FormBoList: {
        Text: "关联列表",
        Icon: "fa-align-justify",
        Designable: false,
        DesignProperties: [
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "关联列表", Description: "自动列出关联的表单，无实质保存字段，而是方便查阅" },
            { Name: "BOSchemaCode", Text: "关联对象" },
            { Name: "MappingDataField", Text: "关联字段" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormGridView: {
        Text: "子表",
        Icon: "fa-table",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "子表", Description: "表单中的多行重复数据录入" },
            { Name: "NameItems", Text: "数据标题", DefaultValue: "", Description: "" },
            { Name: "DisplayName", Text: "标题", DefaultValue: "", Description: "", Visiable: false },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "GridViewFields", Text: "子表字段", DefaultValue: "" },
            { Name: "GridViewMode", Text: "移动端显示模式", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "平铺显示" }, { Val: "1", Text: "矩阵显示" }] },
            { Name: "DisplayFields", Text: "移动端显示字段" }
        ]
    },
    FormFormula: {
        Text: "公式型控件",
        Designable: true,
        Icon: "icon-formula",
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "公式型控件", Description: "" },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "ComputationRule", Text: "计算公式", DefaultValue: "" },
            { Name: "BindType", Text: "类型", DefaultValue: "number", ValueRange: [{ Val: "number", Text: "数值" }, { Val: "text", Text: "文本" }, { Val: "datetime", Text: "日期" }, { Val: "boolean", Text: "是否" }] },
            { Name: "DecimalPlaces", Text: "格式", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "整数" }, { Val: "2", Text: "两位小数" }, { Val: "3", Text: "三位小数" }, { Val: "4", Text: "四位小数" }] },
            { Name: "ShowMode", Text: "显示模式", DefaultValue: "0", ValueRange: [{ Val: "0", Text: "正常" }, { Val: "1", Text: "显示千位分隔符" }] },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },
    FormLabel: {
        Text: "",
        Icon: "fa-italic",
        Designable: false,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "创建人" },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "Description", Text: "描述", DefaultValue: "", Description: "" }
        ]
    },

    FormButton: {
        Text: "按钮",
        Icon: "fa-hand-o-up",
        Designable: true,
        DesignProperties: [
            { Name: "DataField", Text: "方法名", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "" }
        ]
    },


    FormSns: {
        Text: "动态",
        Icon: "fa-comments",
        Designable: false,
        DesignProperties: []
    },

    FormTaskTips: {
        Text: "任务提醒",
        Icon: "fa-comments",
        Designable: false,
        DesignProperties: []
    },

    FormComment: {
        Text: "审批",
        Designable: false,
        DesignProperties: [
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "审批" },
            { Name: "TitleDirection", Text: "标题布局", DefaultValue: "Vertical", ValueRange: [{ Val: "Horizontal", Text: "横" }, { Val: "Vertical", Text: "列" }] },
            { Name: "Width", Text: "控件大小", DefaultValue: "100%", ValueRange: [{ Val: "100%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] }
        ]
    },


    FormAclScope: {
        Text: '查询范围',
        Designable: false,
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "查询范围" },
            { Name: "DefaultItems", Text: "选项", DefaultValue: ["选项1", "选项2", "选项3"] },
            { Name: "Width", Text: "控件大小", DefaultValue: "100%", ValueRange: [{ Val: "100%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] }
        ]
    },

    FormComboBox: {
        Text: "组合框",
        Designable: false,
        //可设计属性
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "", Description: "普通字段,记录文本信息" },
            { Name: "TransferItems", Text: "控件转换", DefaultValue: "FormTextBox", ValueRange: [{ Val: "FormTextBox", Text: "文本框" }, { Val: "FormDropDownList", Text: "下拉框" }, { Val: "FormRadioButtonList", Text: "单选框" }, { Val: "FormCheckboxList", Text: "复选框" }] },
            { Name: "Width", Text: "控件大小", Visiable: false, DefaultValue: "100%", ValueRange: [{ Val: "25%", Text: "小尺寸" }, { Val: "75%", Text: "标准尺寸" }, { Val: "100%", Text: "大尺寸" }] },
            { Name: "DisplayRule", Text: "隐藏条件", DefaultValue: "" },
            { Name: "ComputationRule", Text: "计算规则", DefaultValue: "" },
            { Name: "Mode", Text: "校验模式", DefaultValue: "Normal", ValueRange: [{ Val: "Normal", Text: "普通文本" }, { Val: "Email", Text: "邮箱" }, { Val: "Card", Text: "身份证" }, /*{ Val: "Mobile", Text: "手机" },*/ { Val: "Telephone", Text: "固话/手机" }] },
            //{ Name: "IsMultiple", Text: "模式", DefaultValue: false, ValueRange: [{ Val: false, Text: "单行" }, { Val: true, Text: "多行" }] },
            { Name: "DefaultItems", Text: "选项", DefaultValue: ["选项1", "选项2", "选项3"] },
            { Name: "PlaceHolder", Text: "提示语", DefaultValue: "", Description: "普通字段,记录文本信息" },
            { Name: "SchemaCode", Text: "关联表单", DefaultValue: "", Description: "关联数据的表单" },
            { Name: "DefaultValue", Text: "默认值", DefaultValue: "", Description: "默认值" }
        ]
    },
    FormComboBoxList: {
        Text: "组合框多选",
        Designable: false,
        //可设计属性
        DesignProperties: [
            { Name: "DataField", Text: "控件编码", DefaultValue: "" },
            { Name: "DisplayName", Text: "控件名称", DefaultValue: "", Description: "普通字段,记录文本信息" },
            { Name: "SchemaCode", Text: "关联表单", DefaultValue: "", Description: "关联数据的表单" },
            { Name: "DefaultValue", Text: "默认值", DefaultValue: "", Description: "默认值" }
        ]
    }
};

// 所有控件对开发者开放的API
FormControlAPI = {
    FormSeqNo: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormTextArea: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormTextBox: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange", "BindClickEvent"],

    FormDateTime: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormNumber: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange", "BindClickEvent"],

    FormRadioButtonList: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange", "AddItem", "ClearItems"],

    FormCheckboxList: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange", "AddItem", "ClearItems"],

    FormCheckbox: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormDropDownList: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange", "AddItem", "ClearItems"],

    FormMultiUser: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormUser: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormApapt: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormMultiApapt: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormAttachment: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormQuery: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormMultiQuery: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormAreaSelect: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormMap: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    FormGridView: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange", "AddRow", "ClearRows", "UpdateRow"],

    FormLabel: ["GetValue", "SetValue", "SetVisible", "BindChange", "UnBindChange"],

    $extend: ["IGuid", "IClone", "IQuery", "IShowForm", "IGetParams", "ILocation", "IShowGraph", "IShowList", "IReloadForm", "IShowSuccess", "IShowError", "IShowWarn", "IShowTip", "IConfirm", "IDownloadAttachments", "IShowPreLoader", "IHidePreLoader", "IScanBarCode", "IScanQrCode", "IScanCard", "IShowUserInfo", "IShowChatPage", "IShowFreeCall", "IPostImageDing", "IPostLinkDing", "SmartForm"],

    SmartForm: ["ResponseContext", "PostForm"],

    ControlAPIDetails: {
        "ResponseContext": { Type: "property", Demo: "（property）$.SmartForm.ResponseContext", Summary: "" },
        "SmartForm": { Type: "property", Demo: "（property）$.SmartForm", Summary: "表单操作对象" },
        "PostForm": { Type: "function", Demo: "（method）$.SmartForm.PostForm(actionName,data,callBack,errorBack,async)", Summary: "表单提交，参数说明：actionName:提交的ActionName;data:提交后台的数据;callback:回调函数;errorBack:错误回调函数;async:是否异步;" },
        "GetValue": { Type: "function", Demo: "（method）this.DataFieldID.GetValue()", Summary: "读取控件的值" },
        "SetValue": { Type: "function", Demo: "（method）this.DataFieldID.SetValue(value)", Summary: "给控件赋值，参数说明：value:控件的值" },
        "SetVisible": { Type: "function", Demo: "（method）this.DataFieldID.SetVisible(true/false)", Summary: "显示/隐藏控件，参数说明：bool，true显示，false隐藏" },
        "BindChange": { Type: "function", Demo: "（method）this.DataFieldID.BindChange(key, callback)", Summary: "给控件绑定一个变更事件，当控件值变化执行自定义函数，参数说明：key:事件标识，callback：回调函数" },
        "BindClickEvent": { Type: "function", Demo: "（method）this.DataFieldID.BindClickEvent(function(){自定义代码})", Summary: "给控件绑定一个单击事件，控件后面会多出一个图标，点击触发绑定的事件，参数说明：function：绑定的函数" },
        "UnBindChange": { Type: "function", Demo: "（method）this.DataFieldID.UnBindChange(key)", Summary: "解除控件值变化事件，参数说明：" },
        "AddItem": { Type: "function", Demo: "（method）$.DataFieldID.AddItem(value,text)", Summary: "给控件添加选项，参数说明：" },
        "ClearItems": { Type: "function", Demo: "（method）$.DataFieldID.ClearItems()", Summary: "清除控件选项，参数说明：" },
        "AddRow": { Type: "function", Demo: "（method）this.SubTable.AddRow(subObjectId,{“SubTable.ColumnName”:Value})", Summary: "新建子表行，并给子表字段赋值，参数说明：" },
        "ClearRows": { Type: "function", Demo: "（method）this.SubTable.ClearRows()", Summary: "清除子表的所有数据，参数说明：" },
        "UpdateRow": { Type: "function", Demo: "（method）this.SubTable.UpdateRow(subObjectId,{“SubTable.ColumnName”:Value})", Summary: "更新子表行记录，参数说明：" },
        "IGuid": { Type: "function", Demo: "$.IGuid()", Summary: "创建Guid" },
        "IClone": { Type: "function", Demo: "$.IClone(Obj)", Summary: "对象克隆,只对对象有效，参数说明：obj:被克隆对象" },
        "IQuery": { Type: "function", Demo: "$.IQuery", Summary: "" },
        "IShowForm": { Type: "function", Demo: "$.IShowForm", Summary: "显示表单" },
        "IGetParams": { Type: "function", Demo: "$.IGetParams", Summary: "获取参数值" },
        "ILocation": { Type: "function", Demo: "$.ILocation", Summary: "定位" },
        "IShowGraph": { Type: "function", Demo: "$.IShowGraph", Summary: "显示地图" },
        "IShowList": { Type: "function", Demo: "$.IShowList", Summary: "" },
        "IReloadForm": { Type: "function", Demo: "$.IReloadForm", Summary: "重新加载表单" },
        "IShowSuccess": { Type: "function", Demo: "$.IShowSuccess(title,message)", Summary: "成功弹出框，参数说明：title：消息框标题，message：消息体" },
        "IShowError": { Type: "function", Demo: "$.IShowError(title,message)", Summary: "失败弹出框，参数说明：title：消息框标题，message：消息体" },
        "IShowWarn": { Type: "function", Demo: "$.IShowWarn(title,message)", Summary: "警告弹出框，参数说明：title：消息框标题，message：消息体" },
        "IShowTip": { Type: "function", Demo: "$.IShowTip(title,message)", Summary: "提示弹出框，参数说明：title：消息框标题，message：消息体" },
        "IConfirm": { Type: "function", Demo: "$.IConfirm(title,message,callback)", Summary: "使用bootstrap扩展插件pnotify弹出确认框，参数说明：title:消息标题，message:消息体，callback:回调函数" },
        "IDownloadAttachments": { Type: "function", Demo: "$.IDownloadAttachments(attachmentIds)", Summary: "批量下载附件,移动端不支持，参数说明：attachmentIds：array 附件ID数组" },
        "IShowPreLoader": { Type: "function", Demo: "$.IShowPreLoader(text)", Summary: "显示加载提示框，参数说明：text:弹出信息" },
        "IHidePreLoader": { Type: "function", Demo: "$.IHidePreLoader()", Summary: "隐藏加载提示框" },
        "IScanBarCode": { Type: "function", Demo: "$.IScanBarCode(callback)", Summary: "(移动端)扫描条形码，参数说明：callback:回调函数" },
        "IScanQrCode": { Type: "function", Demo: "$.IScanQrCode(callback)", Summary: "(移动端)扫描二位码，参数说明：callback:回调函数" },
        "IScanCard": { Type: "function", Demo: "$.IScanCard(callback)", Summary: "(移动端)扫描名片，参数说明：callback：回调函数" },
        "IShowUserInfo": { Type: "function", Demo: "$.IShowUserInfo(userId,corpId)", Summary: "(移动端)显示钉钉个人资料页，参数说明：userId:用户ID，corpId：企业ID" },
        "IShowChatPage": { Type: "function", Demo: "$.IShowChatPage(sers, corpId)", Summary: "(移动端)显示钉钉聊天页面，参数说明：userId:用户ID，corpId：企业ID" },
        "IShowFreeCall": { Type: "function", Demo: "$.IShowFreeCall()", Summary: "(移动端)拨打免费电话" },
        "IPostImageDing": { Type: "function", Demo: "$.IPostImageDing(users, corpId, text, success, fail)", Summary: "(移动端)图片类型钉消息，参数说明：userId:用户ID，corpId：企业ID，text:消息体，success：成功回调，fail:失败回调" },
        "IPostLinkDing": { Type: "function", Demo: "$.IPostLinkDing(users, corpId, text, title, url, imageUrl, subText, success, fail)", Summary: "(移动端)Link类型钉消息，参数说明：userId:用户ID，corpId：企业ID，text:消息体，title:标题，url:链接地址，imageUrl:图片地址，subText:描述，success：成功回调，fail:失败回调" }
    }
};

//选人控件数据,单个页面所有数据库共用
$.FormMultiUserData = {
    //部门
    OrgUnitItems: [],
    //标签
    OrgTagItems: [],
    //部门用户:{部门ID:[]}
    DepUserItems: {},
    //用户
    UserItems: [],
};;
//add by xc 2016-11-12
(function ($) {
    function DropDownList(opt) {
        this.Opt = opt || {};
        this.Width = opt.Width;
        this.Init();
    }
    DropDownList.prototype = {
        Init: function () {
            this.GetOptions();
            this.Render();
            this.BindEvent();
        },
        GetOptions: function () {
            this.Options = {};
            this.OptionAyy = [];
            var ops = this.Opt.Target.options;
            for (var i = 0, len = ops.length; i < len; i++) {
                var item = ops[i];
                this.OptionAyy.push(item.value);
                this.Options[item.value] = item.text;
            }
        },
        Render: function () {
            var that = this;
            var html = '<div class="dropdownlist">' +
                '<div class="drop-handle">' +
                '<div class="drop-text"></div>' +
                '<span class="drop-btn"></span>' +
                '</div>' +
                '</div>';
            that.Height = $(that.Opt.Target).outerHeight();
            that.Height = that.Height < 26 ? 26 : that.Height;
            var w = $(that.Opt.Target).outerWidth();

            var pec = parseInt($(that.Opt.Target).outerWidth()) * 100 / parseInt($(that.Opt.Target).parent().width());
            pec = pec > 100 ? 100 : pec;
            that.$DropDown = $(html).attr("style", $(that.Opt.Target).attr("style")).css("width", (that.Width || pec + "%"));
            that.$DropList = $('<ul class="drop-list drop-list_s"></ul>').appendTo($("body"));
            that.$DropDown.height(that.Height);
            that.$DropHandle = that.$DropDown.children('.drop-handle').css({
                "height": that.Height + 'px',
                "line-height": that.Height - 2 + 'px'
            });
            that.$DropText = that.$DropHandle.children('.drop-text');
            var $target = $(that.Opt.Target);
            $target.before(that.$DropDown.css("display", "inline-block")).hide();
           
            //if ($target.attr('disabled') != undefined && $target.attr('disabled') == 'disabled') {
            //    that.$DropDown.children('.drop-handle').css('background-color', 'rgb(235,235,228)');
            //    that.$DropDown.children('.drop-btn').css('background-color','rgb(235,235,228)');
            //}
            that.RenderOptions();
        },
        RenderOptions: function () {
            var that = this;
            that.$DropList.html("");
            for (var i = 0, len = that.OptionAyy.length; i < len; i++) {
                var opt = that.OptionAyy[i];
                that.$DropList.append('<li class="dropdownlist-item ' + (that.Opt.Target.value == opt ? 'active' : null) + '" data-index="' + i + '" data-value="' + opt + '"><a class="drop-item-btn">' + that.Options[opt] + '</a></li>');
            }

            that.SetValue.apply(that, [that.Opt.Target.value]);
        },
        BindEvent: function () {
            //如果target设置了disable则不要绑定事件
            var that = this;

            var $target = $(that.Opt.Target);
            //if ($target.attr('disabled')!=undefined&&$target.attr('disabled')=='disabled') {
            //    return;
            //}
            that.$DropHandle.bind('click', function (e) {
                if ($(that.$DropHandle).find(".fa-chevron-down").length == 1) {
                    $(that.$DropHandle).find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
                } else {
                    $(that.$DropHandle).find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
                }
                
                var $Tar = that.$DropList;
                $("ul.drop-list").not($Tar).hide();
                that.$DropList.css("min-width", that.$DropDown.width());
                var w = 30 * that.OptionAyy.length;
                w = w > 300 ? 300 : w;
                var offset = that.$DropDown.offset();
                var left = 0;
                var $par = that.$DropDown.parent();
                while ($par.length > 1 && $par[0].tagName.toLowerCase() != "window") {
                    left += $par.scrollLeft();
                    $par = that.$DropDown.parent();
                }
                var top = $(window).height() - offset.top + $(window).scrollTop() - that.Height - 10;
                if (top < w) {
                    that.$DropList.css({ "top": offset.top - that.$DropList.outerHeight(), "left": offset.left - left });
                } else {
                    that.$DropList.css({ "top": offset.top + that.Height, "left": offset.left - left });
                }
                $Tar.toggle();
                return false;
            });
            that.$DropList.on("click", ".dropdownlist-item", function () {
                if ($(this).hasClass("active")) return;
                $(this).addClass("active").siblings(".dropdownlist-item").removeClass("active");
                that.SetValue.apply(that, [$(this).attr("data-value")]);
                $(this).parent().hide();
                $(that.Opt.Target).change();
                return false;
            })

            $(that.Opt.Target).unbind("change.dropdownlist-select").bind("change.dropdownlist-select", function () {
                that.$DropText.html(that.Options[this.value]);
                that.$DropList.children("li.dropdownlist-item").removeClass("active").end().children("li.dropdownlist-item[data-value='" + this.value + "']").addClass("active");

                $(that.$DropHandle).find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
                return false;
            });

            $(document).unbind("click.dropdownlist-cl").bind("click.dropdownlist-cl", function () {
                $("ul.drop-list.drop-list_s").hide();
                $(document).find("#ListView .fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
            })
        },
        SetValue: function (val, index) {
            this.$DropText.html(this.Options[val]);
            if (index) {
                this.Opt.Target.selectedIndex = index;
            }
            this.Opt.Target.value = val;
            this.$DropList.children("li.dropdownlist-item").removeClass("active").end().children("li.dropdownlist-item[data-value='" + val + "']").addClass("active");
        },
        Destroy: function () {
            var that = this;
            that.$DropDown.remove();
            that.$DropList.remove();
            $(that.Opt.Target).show().removeData("DropDownList");
        },
        Refresh: function (width) {
            this.GetOptions();
            this.RenderOptions();
            width && this.$DropDown.css("width", width);
            return this;
        },
        AddItem: function (value, text) {
            var that = this;
            that.OptionAyy = this.OptionAyy || [];
            that.Options = this.Options || {};
            that.OptionAyy.push(value);
            that.Options[value] = text;

            that.$DropList.append('<li class="dropdownlist-item" data-index="' + that.OptionAyy.length-1 + '" data-value="' + value + '"><a class="drop-item-btn">' + text + '</a></li>');
        },
        ClearItems: function () {
            this.$DropText.html("");
            this.$DropList.children("li.dropdownlist-item").removeClass("active")
        }
    }

    $.fn.DropDownList = function (param) {
        var args = Array.prototype.slice.call(arguments, 1);
        
        $(this).each(function () {
            var $this = $(this), DropDown = $this.data("DropDownList");

            if (DropDown && param && typeof param === "string") {
                DropDown[param].apply(DropDown, args);
            } else if (DropDown) {
                DropDown.Refresh.call(DropDown);
            } else {
                var opt = { Target: this };
                typeof param === "object" && (opt = $.extend(opt, param));
                $(this).data("DropDownList", new DropDownList(opt));
            }
        });
        return $(this);
    }

}(jQuery));


//支持单选和多选下拉框（多选情况下多个Value值以分号隔开）
(function ($) {
    function SelectForm(opt) {
        this.Options = $.extend({}, DefaultOpt, opt);
        this.$Wrapper = $('<div ' + (this.Options.ID ? ('ID="' + this.Options.ID + '"') : '') + ' class="dropdownlist">' +
               '<div class="drop-handle">' +
               '<div class="drop-text"></div>' +
               '<span class="drop-btn"></span>' +
               '</div>' +
               '<ul class="drop-list"></ul>' +
               '</div>');
        this.$Items = this.$Wrapper.find(".drop-list");
        this.$Text = this.$Wrapper.find(".drop-text");
        this.$Btn = this.$Wrapper.find(".drop-btn");
        this.$DropHandle = this.$Wrapper.find(".drop-handle");
        this.LiHTML = this.Options.IsMultiple ? '<li class="dropdownlist-item" data-index="{{0}}" data-value="{{1}}" style="padding-left:1em;"><input type="checkbox" class="input-drop" id="{{2}}"><label for="{{2}}" class="drop-item-btn">{{3}}</label></li>' : '<li class="dropdownlist-item" data-index="{{0}}" data-value="{{1}}"><a class="drop-item-btn">{{2}}</a></li>';

        this._Init();
    }

    SelectForm.prototype = {
        _Init: function () {
            var that = this;
            that.ItemLength = that.Options.DropList.length
            var index = 0;
            this.ListItems = {};
            //全选
            if (that.Options.IsMultiple) {
                var ID = $.IGuid();
                this.$Items.append('<li class="dropdownlist-item" style="padding-left:1em;"><input type="checkbox" class="input-drop selectall" id="'+ID+'"><label for="'+ID+'" class="drop-item-btn">全选</label></li>');
            }

            for (var i = 0; i < that.ItemLength; i++) {
                var obj = this.Options.DropList[i];
                obj.Index = index;
                this.ListItems[obj.Value] = obj;
                if (that.Options.IsMultiple) {
                    var ID = $.IGuid();
                    this.$Items.append(that.LiHTML.replace(/\{{0\}}/g, index++).replace(/\{{1\}}/g, obj.Value).replace(/\{{2\}}/g, ID).replace(/\{{3\}}/g, obj.Text));
                }
                else {
                    this.$Items.append(that.LiHTML.replace(/\{{0\}}/g, index++).replace(/\{{1\}}/g, obj.Value).replace(/\{{2\}}/g, obj.Text));
                }
            }

            that.$DropHandle = that.$Wrapper.children('.drop-handle').css({
                "height": that.Options.Height + 'px',
                "line-height": that.Options.Height - 2 + 'px'
            });
            this.$Wrapper.width(this.Options.Width).height(this.Options.Height);
            that.$Items.css({ "left": 0, 'min-width': "100%" });
            this.SetValue(this.Options.DefaultValue);

            this._BindEvent();

            that.Options.Target && $(that.Options.Target).append(this.$Wrapper);
        },
        _BindEvent: function () {
            var that = this;
            that.$DropHandle.bind('click', function (e) {
                //var $Tar = that.$Items;
                $("ul.drop-list").not(that.$Items).hide();
                var w = 20 * that.ItemLength;
                w = w > 200 ? 200 : w;
                var offset = that.$Wrapper.offset();

                var top = $(window).height() - offset.top + $(window).scrollTop() - that.Options.Height - 1;
                if (top < w) {
                    that.$Items.css({ bottom: "100%", top: "auto" });
                } else {
                    that.$Items.css({ bottom: "auto", top: "100%" });
                }
                that.$Items.toggle();
                return false;
            });

            if (that.Options.IsMultiple) {
                that.$Items.on("click", "input[type=checkbox].input-drop", function (e) {
                    //全选
                    if ($(this).hasClass("selectall")) {
                        if (this.checked) {
                            var texts = [];
                            for(var key in that.ListItems){
                                texts.push(key);
                            }
                            that.SetValue.call(that, texts.join(";"));

                            that.$Items.find("input[type=checkbox].input-drop").prop("checked", true);
                        } else {
                            that.SetValue.call(that, "");
                            that.$Items.find("input[type=checkbox].input-drop:checked").prop("checked", false);
                        }
                    } else {
                        var value = "";
                        var len = 0;
                        that.$Items.find("input[type=checkbox].input-drop:checked").not(".selectall").each(function () {
                            len++;
                            value = value ? value + ";" + $(this).parent(".dropdownlist-item").attr("data-value") : $(this).parent(".dropdownlist-item").attr("data-value");
                        })
                        if (this.checked) {
                            len === that.ItemLength && that.$Items.find("input[type=checkbox].selectall").prop("checked", true);
                        } else {
                            that.$Items.find("input[type=checkbox].selectall").prop("checked",false);
                        }
                        that.SetValue.call(that, value);
                    }
                    e.stopPropagation();
                })


                that.$Items.on("click", "input[type=checkbox]+label", function (e) {
                    e.stopPropagation();
                })
            } else {
                that.$Items.on("click", ".dropdownlist-item", function () {
                    if ($(this).hasClass("active")) return;
                    $(this).addClass("active").siblings(".dropdownlist-item").removeClass("active");
                    that.SetValue.apply(that, [$(this).attr("data-value")]);
                    //下拉框选择后关闭 --wangj
                    that.$Items.hide();
                })

                $(document).unbind("click.dropdownlist-cl").bind("click.dropdownlist-cl", function (e) {
                    $(".drop-handle + ul.drop-list").hide();
                });
            }
        },
        SetValue: function (val) {
            var that = this;
            if (val) {
                var items = (val+"").split(';');
                var text = '';
                for (var i = 0, len = items.length; i < len; i++) {
                    var obj = this.ListItems[items[i]];
                    if (obj) {
                        text += obj.Text + (i == len - 1 ? "" : ';');
                        that.Options.IsMultiple == false ? this.$Items.children("li.dropdownlist-item[data-value='" + obj.Value + "']").addClass("active") : this.$Items.children("li.dropdownlist-item[data-value='" + obj.Value + "']").find("input[type=checkbox]").prop("checked", true);
                    }
                    else {
                        console.log("设置的值不存在");
                    }
                }
                this.$Text.text(text);
            }
            else {
                this.$Text.text(this.Options.DefaultText);
            }
            this.Value = val || "";
            this.$Wrapper.attr("data-value", val);
            if (this.Options.Change)
            {
                this.Options.Change(this);
            }
        },
        AddItem: function (obj, index) {
            var that = this;
            index = index || that.ItemLength;
            obj.Index = index;
            that.ListItems[obj.Value] = obj;
            that.Refresh();
            that.ItemLength++;
        },
        RemoveItem: function (val) {
            var that = this;
            var item = that.ListItems[val];
            for (var key in that.ListItems) {
                if (that.ListItems[key].Index > item.Index) that.ListItems[key].Index--;
            }
            that.ItemLength--;
            delete that.ListItems[val];
            this.Refresh();
        },
        RemoveAt: function (index) {
            //待新增
        },
        Refresh: function () {
            var that = this;
            var l = 0, html = "";
            while (l < that.ItemLength) {
                html += "{{" + i + "}}";
            }

            if (that.Options.IsMultiple) {
                var ID = $.IGuid();
                this.$Items.append('<li class="dropdownlist-item" style="padding-left:1em;"><input type="checkbox" class="input-drop selectall" id="' + ID + '"><label for="' + ID + '" class="drop-item-btn">全选</label></li>');
            }

            for (var key in that.ListItems) {
                var obj = that.ListItems[key];
                var reg = new RegExp("\\{" + obj.Index + "\\}", "g");

                var lihtml = "";
                if (that.Options.IsMultiple) {
                    var ID = $.IGuid();
                    lihtml = that.LiHTML.replace(/\{{0\}}/g, obj.Index).replace(/\{{1\}}/g, obj.Value).replace(/\{{2\}}/g, ID).replace(/\{{3\}}/g, obj.Text);
                }
                else {
                    lihtml = that.LiHTML.replace(/\{{0\}}/g, obj.Index).replace(/\{{1\}}/g, obj.Value).replace(/\{{2\}}/g, obj.Text);
                }
                html.replace(reg, lihtml);
            }
            that.$Items.append(html);
        },
        AppendTo: function ($tar) {
            var that = this;
            $tar && $tar.append(that.$Wrapper);
            return that;
        },
        AppendAftar: function ($tar) {
            var that = this;
            $tar && $tar.after(that.$Wrapper);
            return that;
        },
    }

    var DefaultOpt = {
        Height: 30,
        Width: '100%',
        DropList: [],//object 数组{Value:xxx,Text:xxx}
        DefaultValue: null,
        DefaultText: "--请选择--",
        IsMultiple: false,  //是否多选
        ID: null,
        Target: null,
        Change:null
    }

    $.SelectForm = function (opt) {
        return new SelectForm(opt);
    }

    $.fn.SelectForm = function (opt) {
        var args = Array.prototype.slice.call(arguments, 1);
        $(this).each(function () {
            var $this = $(this), DropDown = $this.data("SelectForm");

            if (DropDown && typeof opt === 'string') {
                DropDown[opt].apply(DropDown, args);
            } else if (DropDown) {
                DropDown.Refresh.call(DropDown);
            } else {
                var option = $.extend({ Target: this }, opt);
                $(this).data("SelectForm", new SelectForm(opt));
            }
        })
        return $(this);
    }
}(jQuery));;
/* =========================================================
 * bootstrap-datetimepicker.js
 * =========================================================
 * Copyright 2012 Stefan Petre
 *
 * Improvements by Andrew Rowls
 * Improvements by Sébastien Malot
 * Improvements by Yun Lai
 * Improvements by Kenneth Henderick
 * Improvements by CuGBabyBeaR
 * Improvements by Christian Vaas <auspex@auspex.eu>
 *
 * Project URL : http://www.malot.fr/bootstrap-datetimepicker
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function (factory) {
    if (typeof define === 'function' && define.amd)
        define(['jquery'], factory);
    else if (typeof exports === 'object')
        factory(require('jquery'));
    else
        factory(jQuery);
}(function ($, undefined) {
    // Add ECMA262-5 Array methods if not supported natively (IE8)
    if (!('indexOf' in Array.prototype)) {
        Array.prototype.indexOf = function (find, i) {
            if (i === undefined) i = 0;
            if (i < 0) i += this.length;
            if (i < 0) i = 0;
            for (var n = this.length; i < n; i++) {
                if (i in this && this[i] === find) {
                    return i;
                }
            }
            return -1;
        }
    }

    // Add timezone abbreviation support for ie6+, Chrome, Firefox
    function timeZoneAbbreviation() {
        var abbreviation, date, formattedStr, i, len, matchedStrings, ref, str;
        date = (new Date()).toString();
        formattedStr = ((ref = date.split('(')[1]) != null ? ref.slice(0, -1) : 0) || date.split(' ');
        if (formattedStr instanceof Array) {
            matchedStrings = [];
            for (var i = 0, len = formattedStr.length; i < len; i++) {
                str = formattedStr[i];
                if ((abbreviation = (ref = str.match(/\b[A-Z]+\b/)) !== null) ? ref[0] : 0) {
                    matchedStrings.push(abbreviation);
                }
            }
            formattedStr = matchedStrings.pop();
        }
        return formattedStr;
    }

    function UTCDate() {
        return new Date(Date.UTC.apply(Date, arguments));
    }

    // Picker object
    var Datetimepicker = function (element, options) {
        var that = this;
        this.element = $(element);
        // add container for single page application
        // when page switch the datetimepicker div will be removed also.
        this.container = options.container || "body";//$($(this.element).closest("body")[0]);

        this.language = /*options.language || this.element.data('date-language') ||*/ 'en';
        this.formatType = /*options.formatType || this.element.data('format-type') ||*/ 'standard';
        this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || DPGlobal.getDefaultFormat(this.formatType, 'input'), this.formatType);
        this.isInline = false;
        this.isVisible = false;
        this.isInput = this.element.is('input');

        this.component = this.element.is('.date') ? (/*this.bootcssVer === 3 ?*/ this.element.find('.input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-remove, .input-group-addon .glyphicon-calendar, .input-group-addon .fa-calendar, .input-group-addon .fa-clock-o').parent()/* : this.element.find('.add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar, .add-on .fa-calendar, .add-on .fa-clock-o').parent()*/) : false;
        this.componentReset = this.element.is('.date') ? (/*this.bootcssVer === 3 ?*/ this.element.find('.input-group-addon .glyphicon-remove, .input-group-addon .fa-times').parent() /*: this.element.find('.add-on .icon-remove, .add-on .fa-times').parent()*/) : false;
        this.hasInput = this.component && this.element.find('input').length;
        if (this.component && this.component.length === 0) {
            this.component = false;
        }
        this.linkField = options.linkField || this.element.data('link-field') || false;
        this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || DPGlobal.getDefaultFormat(this.formatType, 'link'), this.formatType);
        this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
        this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
        this.showMeridian = options.showMeridian || this.element.data('show-meridian') || false;
        this.initialDate = options.initialDate || new Date();
        this.zIndex = options.zIndex || this.element.data('z-index') || undefined;
        this.title = typeof options.title === 'undefined' ? false : options.title;
        this.timezone = options.timezone || timeZoneAbbreviation();

        // 修正位置
        this.fixTop = options.fixTop || 0;

        this._attachEvents();

        this.clickedOutside = function (e) {
            //日期控件下拉出现的情况下再次点击日期控件不会执行任何操作
            if (e.target == e.data.element[0]) {
                return;
            }
            // Clicked outside the datetimepicker, hide it
            if ($(e.target).closest('.datetimepicker').length === 0) {
                that.hide();
            }
        }

        this.formatViewType = 'datetime';
        if ('formatViewType' in options) {
            this.formatViewType = options.formatViewType;
        } else if ('formatViewType' in this.element.data()) {
            this.formatViewType = this.element.data('formatViewType');
        }

        this.minView = 0;
        if ('minView' in options) {
            this.minView = options.minView;
        } else if ('minView' in this.element.data()) {
            this.minView = this.element.data('min-view');
        }
        this.minView = DPGlobal.convertViewMode(this.minView);

        this.maxView = DPGlobal.modes.length - 1;
        if ('maxView' in options) {
            this.maxView = options.maxView;
        } else if ('maxView' in this.element.data()) {
            this.maxView = this.element.data('max-view');
        }
        this.maxView = DPGlobal.convertViewMode(this.maxView);

        this.wheelViewModeNavigation = false;

        this.wheelViewModeNavigationInverseDirection = false;


        this.startViewMode = 2;
        if ('startView' in options) {
            this.startViewMode = options.startView;
        } else if ('startView' in this.element.data()) {
            this.startViewMode = this.element.data('start-view');
        }
        this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
        //如果只是显示时间则要修改打开视图位选择时间的
        if (this.format.parts.length == 3 || this.format.parts.length == 2) {
            var partArr = this.format.parts;
            if (partArr[0] == 'hh' && partArr[1] == 'ii') {
                this.startViewMode = 1;
            }
        }
        this.viewMode = this.startViewMode;

        this.viewSelect = this.minView;
        if ('viewSelect' in options) {
            this.viewSelect = options.viewSelect;
        } else if ('viewSelect' in this.element.data()) {
            this.viewSelect = this.element.data('view-select');
        }
        this.viewSelect = DPGlobal.convertViewMode(this.viewSelect);

        this.forceParse = true;
        if ('forceParse' in options) {
            this.forceParse = options.forceParse;
        } else if ('dateForceParse' in this.element.data()) {
            this.forceParse = this.element.data('date-force-parse');
        }
        var template = DPGlobal.templateV3;
        //根据日期类型处理view
        var $tmp = $(template);
        if (this.startViewMode == 1) {
            //var $tmp = $(template).find('div.datetimepicker-hours span.back').remove();
            //template = $tmp[0].outerHTML;
            $tmp.find('div.datetimepicker-hours span.back').remove();
        }
        this.picker = $tmp
            .appendTo(this.isInline ? this.element : this.container) // 'body')
            .on({
                click: $.proxy(this.click, this),
                mousedown: $.proxy(this.mousedown, this)
            });


        if (this.isInline) {
            this.picker.addClass('datetimepicker-inline');
        } else {
            this.picker.addClass('datetimepicker-dropdown-' + this.pickerPosition + ' dropdown-menu');
        }

        $(document).on('mousedown touchend', this, this.clickedOutside);

        this.autoclose = true;//点击后自动关闭
        if ('autoclose' in options) {
            this.autoclose = options.autoclose;
        } else if ('dateAutoclose' in this.element.data()) {
            this.autoclose = this.element.data('date-autoclose');
        }

        this.keyboardNavigation = true;
        if ('keyboardNavigation' in options) {
            this.keyboardNavigation = options.keyboardNavigation;
        } else if ('dateKeyboardNavigation' in this.element.data()) {
            this.keyboardNavigation = this.element.data('date-keyboard-navigation');
        }

        this.todayBtn = true;
        this.clearBtn = true;
        this.todayHighlight = false;

        this.weekStart = 0;
        if (typeof options.weekStart !== 'undefined') {
            this.weekStart = options.weekStart;
        } else if (typeof this.element.data('date-weekstart') !== 'undefined') {
            this.weekStart = this.element.data('date-weekstart');
        } else if (typeof dates[this.language].weekStart !== 'undefined') {
            this.weekStart = dates[this.language].weekStart;
        }
        this.weekStart = this.weekStart % 7;
        this.weekEnd = ((this.weekStart + 6) % 7);
        this.onRenderDay = function (date) {
            var render = (options.onRenderDay || function () { return []; })(date);
            if (typeof render === 'string') {
                render = [render];
            }
            var res = ['day'];
            return res.concat((render ? render : []));
        };
        this.onRenderHour = function (date) {
            var render = (options.onRenderHour || function () { return []; })(date);
            var res = ['hour'];
            if (typeof render === 'string') {
                render = [render];
            }
            return res.concat((render ? render : []));
        };
        this.onRenderMinute = function (date) {
            var render = (options.onRenderMinute || function () { return []; })(date);
            var res = ['minute'];
            if (typeof render === 'string') {
                render = [render];
            }
            if (date < this.startDate || date > this.endDate) {
                res.push('disabled');
            } else if (Math.floor(this.date.getUTCMinutes() / this.minuteStep) === Math.floor(date.getUTCMinutes() / this.minuteStep)) {
                res.push('active');
            }
            return res.concat((render ? render : []));
        };
        this.onRenderYear = function (date) {
            var render = (options.onRenderYear || function () { return []; })(date);
            var res = ['year'];
            if (typeof render === 'string') {
                render = [render];
            }
            if (this.date.getUTCFullYear() === date.getUTCFullYear()) {
                res.push('active');
            }
            var currentYear = date.getUTCFullYear();
            var endYear = this.endDate.getUTCFullYear();
            if (date < this.startDate || currentYear > endYear) {
                res.push('disabled');
            }
            return res.concat((render ? render : []));
        }
        this.onRenderMonth = function (date) {
            var render = (options.onRenderMonth || function () { return []; })(date);
            var res = ['month'];
            if (typeof render === 'string') {
                render = [render];
            }
            return res.concat((render ? render : []));
        }
        this.startDate = new Date(-8639968443048000);
        this.endDate = new Date(8639968443048000);
        this.datesDisabled = [];
        this.daysOfWeekDisabled = [];
        this.setStartDate(options.startDate || this.element.data('date-startdate'));
        this.setEndDate(options.endDate || this.element.data('date-enddate'));
        this.setDatesDisabled(options.datesDisabled || this.element.data('date-dates-disabled'));
        this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));
        this.setMinutesDisabled(options.minutesDisabled || this.element.data('date-minute-disabled'));
        this.setHoursDisabled(options.hoursDisabled || this.element.data('date-hour-disabled'));
        this.fillDow();
        this.fillMonths();
        this.update();
        this.showMode();

        if (this.isInline) {
            this.show();
        }
    };

    Datetimepicker.prototype = {
        constructor: Datetimepicker,

        _events: [],
        _attachEvents: function () {
            this._detachEvents();
            if (this.isInput) { // single input
                this._events = [
                    [this.element, {
                        focus: $.proxy(this.show, this),
                        keyup: $.proxy(this.update, this),
                        keydown: $.proxy(this.keydown, this)
                    }]
                ];
            }
            else if (this.component && this.hasInput) { // component: input + button
                this._events = [
                    // For components that are not readonly, allow keyboard nav
                    [this.element.find('input'), {
                        focus: $.proxy(this.show, this),
                        keyup: $.proxy(this.update, this),
                        keydown: $.proxy(this.keydown, this)
                    }],
                    [this.component, {
                        click: $.proxy(this.show, this)
                    }]
                ];
                if (this.componentReset) {
                    this._events.push([
                        this.componentReset,
                        { click: $.proxy(this.reset, this) }
                    ]);
                }
            }
            else if (this.element.is('div')) {  // inline datetimepicker
                this.isInline = true;
            }
            else {
                this._events = [
                    [this.element, {
                        click: $.proxy(this.show, this)
                    }]
                ];
            }
            for (var i = 0, el, ev; i < this._events.length; i++) {
                el = this._events[i][0];
                ev = this._events[i][1];
                el.on(ev);
            }
        },

        _detachEvents: function () {
            for (var i = 0, el, ev; i < this._events.length; i++) {
                el = this._events[i][0];
                ev = this._events[i][1];
                el.off(ev);
            }
            this._events = [];
        },

        show: function (e) {
            //先隐藏其他的日期控件
            $(".datetimepicker").hide();
            this.picker.show();
            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
            if (this.forceParse) {
                this.update();
            }
            this.place();
            $(window).on('resize', $.proxy(this.place, this));

            //绑定滚动事件
            var that = this;
            this.element.parents().each(function (index, obj) {
                $(obj).scroll(function () {
                    that.place();
                });
            })


            if (e) {
                e.stopPropagation();
                e.preventDefault();
            }
            this.isVisible = true;
            this.element.trigger({
                type: 'show',
                date: this.date
            });
        },

        hide: function () {
            if (!this.isVisible) return;
            if (this.isInline) return;
            this.picker.hide();
            $(window).off('resize', this.place);
            this.viewMode = this.startViewMode;
            this.showMode();
            if (!this.isInput) {
                $(document).off('mousedown', this.hide);
            }

            if (
                this.forceParse &&
                (
                    this.isInput && this.element.val() ||
                    this.hasInput && this.element.find('input').val()
                )
            )
                this.setValue();
            this.isVisible = false;
            this.element.trigger({
                type: 'hide',
                date: this.date
            });
        },

        remove: function () {
            this._detachEvents();
            $(document).off('mousedown', this.clickedOutside);
            this.picker.remove();
            delete this.picker;
            delete this.element.data().datetimepicker;
        },

        getDate: function () {
            var d = this.getUTCDate();
            //if (d === null) {
            //    return null;
            //}
            if (d == null) {
                //return null;
                return new Date();
            }
            return new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
        },

        getUTCDate: function () {
            return this.date;
        },

        getInitialDate: function () {
            return this.initialDate
        },

        setInitialDate: function (initialDate) {
            this.initialDate = initialDate;
        },

        setDate: function (d) {
            this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset() * 60000)));
        },

        setUTCDate: function (d) {
            if (d >= this.startDate && d <= this.endDate) {
                this.date = d;
                this.setValue();
                this.viewDate = this.date;
                this.fill();
            } else {
                this.element.trigger({
                    type: 'outOfRange',
                    date: d,
                    startDate: this.startDate,
                    endDate: this.endDate
                });
            }
        },

        setFormat: function (format) {
            this.format = DPGlobal.parseFormat(format, this.formatType);
            var element;
            if (this.isInput) {
                element = this.element;
            } else if (this.component) {
                element = this.element.find('input');
            }
            if (element && element.val()) {
                this.setValue();
            }
        },

        setValue: function () {
            var formatted = this.getFormattedDate();
            if (!this.isInput) {
                if (this.component) {
                    this.element.find('input').val(formatted);
                }
                this.element.data('date', formatted);
            } else {
                this.element.val(formatted);
            }
            if (this.linkField) {
                $('#' + this.linkField).val(this.getFormattedDate(this.linkFormat));
            }
        },

        getFormattedDate: function (format) {
            format = format || this.format;
            return DPGlobal.formatDate(this.date, format, this.language, this.formatType, this.timezone);
        },

        setStartDate: function (startDate) {
            this.startDate = startDate || this.startDate;
            if (this.startDate.valueOf() !== 8639968443048000) {
                this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language, this.formatType, this.timezone);
            }
            this.update();
            this.updateNavArrows();
        },

        setEndDate: function (endDate) {
            this.endDate = endDate || this.endDate;
            if (this.endDate.valueOf() !== 8639968443048000) {
                this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language, this.formatType, this.timezone);
            }
            this.update();
            this.updateNavArrows();
        },

        setDatesDisabled: function (datesDisabled) {
            this.datesDisabled = datesDisabled || [];
            if (!$.isArray(this.datesDisabled)) {
                this.datesDisabled = this.datesDisabled.split(/,\s*/);
            }
            var mThis = this;
            this.datesDisabled = $.map(this.datesDisabled, function (d) {
                return DPGlobal.parseDate(d, mThis.format, mThis.language, mThis.formatType, mThis.timezone).toDateString();
            });
            this.update();
            this.updateNavArrows();
        },

        setTitle: function (selector, value) {
            return this.picker.find(selector)
                .find('th:eq(2)')
                .text(this.title === false ? value : this.title);
        },

        setDaysOfWeekDisabled: function (daysOfWeekDisabled) {
            this.daysOfWeekDisabled = daysOfWeekDisabled || [];
            if (!$.isArray(this.daysOfWeekDisabled)) {
                this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
            }
            this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {
                return parseInt(d, 10);
            });
            this.update();
            this.updateNavArrows();
        },

        setMinutesDisabled: function (minutesDisabled) {
            this.minutesDisabled = minutesDisabled || [];
            if (!$.isArray(this.minutesDisabled)) {
                this.minutesDisabled = this.minutesDisabled.split(/,\s*/);
            }
            this.minutesDisabled = $.map(this.minutesDisabled, function (d) {
                return parseInt(d, 10);
            });
            this.update();
            this.updateNavArrows();
        },

        setHoursDisabled: function (hoursDisabled) {
            this.hoursDisabled = hoursDisabled || [];
            if (!$.isArray(this.hoursDisabled)) {
                this.hoursDisabled = this.hoursDisabled.split(/,\s*/);
            }
            this.hoursDisabled = $.map(this.hoursDisabled, function (d) {
                return parseInt(d, 10);
            });
            this.update();
            this.updateNavArrows();
        },

        place: function () {
            if (this.isInline) return;

            if (!this.zIndex) {
                var index_highest = 0;
                $('div').each(function () {
                    var index_current = parseInt($(this).css('zIndex'), 10);
                    if (index_current > index_highest) {
                        index_highest = index_current;
                    }
                });
                this.zIndex = index_highest + 10;
            }

            var offset, top, left, containerOffset;
            if (this.container instanceof $) {
                containerOffset = this.container.offset();
            } else {
                containerOffset = $(this.container).offset();
            }
            if (this.component) {
                offset = this.component.offset();
                left = offset.left;
                if (this.pickerPosition === 'bottom-left' || this.pickerPosition === 'top-left') {
                    left += this.component.outerWidth() - this.picker.outerWidth();
                }
            } else {
                offset = this.element.offset();
                left = offset.left;
                if (this.pickerPosition === 'bottom-left' || this.pickerPosition === 'top-left') {
                    left += this.element.outerWidth() - this.picker.outerWidth();
                }
            }

            var bodyWidth = document.body.clientWidth || window.innerWidth;
            if (left + 220 > bodyWidth) {
                left = bodyWidth - 220;
            }

            if (this.pickerPosition === 'top-left' || this.pickerPosition === 'top-right') {
                top = offset.top - this.picker.outerHeight();
            } else {
                top = offset.top + (this.height ? this.height : 0);
            }

            top = top - containerOffset.top + this.fixTop;
            left = left - containerOffset.left;
            this.picker.css({
                top: top,
                left: left,
                zIndex: this.zIndex
            });
        },

        hour_minute: "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]",

        update: function () {
            var date, fromArgs = false;
            if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
                date = arguments[0];
                fromArgs = true;
            } else {
                date = (this.isInput ? this.element.val() : this.element.find('input').val()) || this.element.data('date') || this.initialDate;
                if (typeof date === 'string') {
                    date = date.replace(/^\s+|\s+$/g, '');
                }
            }

            if (!date) {
                date = new Date();
                fromArgs = false;
            }

            if (typeof date === "string") {
                if (new RegExp(this.hour_minute).test(date) || new RegExp(this.hour_minute + ":[0-5][0-9]").test(date)) {
                    var flag = false;
                    var partArr = this.format.parts;
                    if (partArr.length == 2 || partArr.length == 3) {
                        if (partArr[0].toLowerCase() == 'hh' && partArr[1].toLowerCase() == 'ii') {
                            flag = true;
                            var tmp = date.split(':');
                            var now = new Date();
                            date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), tmp[0], tmp[1], 0);
                        }
                    }
                    if (!flag)
                        date = this.getDate()
                }
            }

            this.date = DPGlobal.parseDate(date, this.format, this.language, this.formatType, this.timezone);

            if (fromArgs) this.setValue();

            if (this.date < this.startDate) {
                this.viewDate = new Date(this.startDate);
            } else if (this.date > this.endDate) {
                this.viewDate = new Date(this.endDate);
            } else {
                this.viewDate = new Date(this.date);
            }
            this.fill();
        },

        //渲染顶部星期
        fillDow: function () {
            var dowCnt = this.weekStart,
                html = '<tr class="weekdays">';
            while (dowCnt < this.weekStart + 7) {
                html += '<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>';
            }
            html += '</tr>';
            html += '<tr>';
            for (var i = 0; i < 7; i++) {
                html += '<th></th>';
            }
            html += '</tr>';
            this.picker.find('.datetimepicker-days thead').append(html);
        },
        //渲染月
        fillMonths: function () {
            var html = '';
            var d = new Date(this.viewDate);
            for (var i = 0; i < 12; i++) {
                d.setUTCMonth(i);
                var classes = this.onRenderMonth(d);
                html += '<span class="' + classes.join(' ') + '">' + dates[this.language].monthsShort[i] + '</span>';
            }
            this.picker.find('.datetimepicker-months td').html(html);
        },
        //填充日期
        fill: function () {
            if (!this.date || !this.viewDate) {
                return;
            }
            var d = new Date(this.viewDate),
                year = d.getUTCFullYear(),
                month = d.getUTCMonth(),
                dayMonth = d.getUTCDate(),
                hours = d.getUTCHours(),
                startYear = this.startDate.getUTCFullYear(),
                startMonth = this.startDate.getUTCMonth(),
                endYear = this.endDate.getUTCFullYear(),
                endMonth = this.endDate.getUTCMonth() + 1,
                currentDate = (new UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate())).valueOf(),
                today = new Date();
            this.setTitle('.datetimepicker-days', year + '年' + dates[this.language].months[month]);
            if (this.formatViewType === 'time') {
                var formatted = this.getFormattedDate();
                this.setTitle('.datetimepicker-hours', formatted);
                this.setTitle('.datetimepicker-minutes', formatted);
            } else {
                if (this.startViewMode == 1) {
                    //如果是hh:ii不要显示时间
                    this.picker.find('div.datetimepicker-hours thead>tr>th,div.datetimepicker-minutes thead>tr>th').empty().css({ 'height': '10px', 'padding': 0 });
                } else {
                    this.setTitle('.datetimepicker-hours', year + '年' + dates[this.language].months[month] + dayMonth + '日');
                    this.setTitle('.datetimepicker-minutes', year + '年' + dates[this.language].months[month] + dayMonth + '日');
                }
            }
            this.picker.find('tfoot th.today').text(dates[this.language].today || dates['en'].today).toggle(this.todayBtn !== false);
            this.picker.find('tfoot th.clear').text(dates[this.language].clear || dates['en'].clear).toggle(this.clearBtn !== false);
            this.updateNavArrows();
            this.fillMonths();
            var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
                day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
            prevMonth.setUTCDate(day);
            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
            var nextMonth = new Date(prevMonth);
            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var classes;
            while (prevMonth.valueOf() < nextMonth) {
                if (prevMonth.getUTCDay() === this.weekStart) {
                    html.push('<tr>');
                }
                classes = this.onRenderDay(prevMonth);
                if (prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() === year && prevMonth.getUTCMonth() < month)) {
                    classes.push('old');
                } else if (prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() === year && prevMonth.getUTCMonth() > month)) {
                    classes.push('new');
                }
                // Compare internal UTC date with local today, not UTC today
                if (this.todayHighlight &&
                    prevMonth.getUTCFullYear() === today.getFullYear() &&
                    prevMonth.getUTCMonth() === today.getMonth() &&
                    prevMonth.getUTCDate() === today.getDate()) {
                    classes.push('today');
                }
                if (prevMonth.valueOf() === currentDate) {
                    classes.push('active');
                }
                if ((prevMonth.valueOf() + 86400000) <= this.startDate || prevMonth.valueOf() > this.endDate ||
                    $.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1 ||
                    $.inArray(prevMonth.toDateString(), this.datesDisabled) !== -1) {
                    classes.push('disabled');
                }

                html.push('<td class="' + classes.join(' ') + '"><i>' + prevMonth.getUTCDate() + '</i></td>');
                if (prevMonth.getUTCDay() === this.weekEnd) {
                    html.push('</tr>');
                }

                prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
            }
            html.push('<tr class="day-below"><td colspan="7"></td></tr>');
            this.picker.find('.datetimepicker-days tbody').empty().append(html.join(''));

            html = [];
            var txt = '', meridian = '', meridianOld = '';
            var hoursDisabled = this.hoursDisabled || [];
            d = new Date(this.viewDate)
            for (var i = 0; i < 24; i++) {
                d.setUTCHours(i);
                classes = this.onRenderHour(d);
                if (hoursDisabled.indexOf(i) !== -1) {
                    classes.push('disabled');
                }
                var actual = UTCDate(year, month, dayMonth, i);
                // We want the previous hour for the startDate
                if ((actual.valueOf() + 3600000) <= this.startDate || actual.valueOf() > this.endDate) {
                    classes.push('disabled');
                } else if (hours === i) {
                    classes.push('active');
                }
                if (this.showMeridian && dates[this.language].meridiem.length === 2) {
                    meridian = (i < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
                    if (meridian !== meridianOld) {
                        if (meridianOld !== '') {
                            html.push('</fieldset>');
                        }
                        html.push('<fieldset class="hour"><legend>' + meridian.toUpperCase() + '</legend>');
                    }
                    meridianOld = meridian;
                    txt = (i % 12 ? i % 12 : 12);
                    if (i < 12) {
                        classes.push('hour_am');
                    } else {
                        classes.push('hour_pm');
                    }
                    html.push('<span class="' + classes.join(' ') + '">' + txt + '</span>');
                    if (i === 23) {
                        html.push('</fieldset>');
                    }
                } else {
                    txt = i + ':00';
                    html.push('<span class="' + classes.join(' ') + '">' + txt + '</span>');
                }
            }
            if (this.startViewMode == 1) {//时间模式
                html.push('<span class="no-title-hour-below"></span>');
                //时间模式要调整底部button居中
                this.picker.find('.datetimepicker-hours span.now').addClass('no-title-now');
                this.picker.find('.datetimepicker-hours span.clear').addClass('no-title-clear');

            } else {//日期模式
                html.push('<span class="hour-below"></span>');
                this.picker.find('.datetimepicker-hours span.now').removeClass('no-title-now');
                this.picker.find('.datetimepicker-hours span.clear').removeClass('no-title-clear');
            }
            //html.push('<span class="hour-below"></>');
            this.picker.find('.datetimepicker-hours td').html(html.join(''));

            html = [];
            txt = '';
            meridian = '';
            meridianOld = '';
            var minutesDisabled = this.minutesDisabled || [];
            d = new Date(this.viewDate);
            for (var i = 0; i < 60; i += this.minuteStep) {
                if (minutesDisabled.indexOf(i) !== -1) continue;
                d.setUTCMinutes(i);
                d.setUTCSeconds(0);
                classes = this.onRenderMinute(d);
                if (this.showMeridian && dates[this.language].meridiem.length === 2) {
                    meridian = (hours < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
                    if (meridian !== meridianOld) {
                        if (meridianOld !== '') {
                            html.push('</fieldset>');
                        }
                        html.push('<fieldset class="minute"><legend>' + meridian.toUpperCase() + '</legend>');
                    }
                    meridianOld = meridian;
                    txt = (hours % 12 ? hours % 12 : 12);
                    html.push('<span class="' + classes.join(' ') + '">' + txt + ':' + (i < 10 ? '0' + i : i) + '</span>');
                    if (i === 59) {
                        html.push('</fieldset>');
                    }
                } else {
                    txt = i + ':00';
                    html.push('<span class="' + classes.join(' ') + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
                }
            }
            if (this.startViewMode == 1) {
                html.push('<span class="no-title-minute-below"></span>');
            } else {
                html.push('<span class="minute-below"></span>');
            }
            this.picker.find('.datetimepicker-minutes td').html(html.join(''));

            var currentYear = this.date.getUTCFullYear();
            var months = this.setTitle('.datetimepicker-months', year)
                .end()
                .find('.month').removeClass('active');
            if (currentYear === year) {
                // getUTCMonths() returns 0 based, and we need to select the next one
                // To cater bootstrap 2 we don't need to select the next one
                months.eq(this.date.getUTCMonth()).addClass('active');
            }
            if (year < startYear || year > endYear) {
                months.addClass('disabled');
            }
            if (year === startYear) {
                months.slice(0, startMonth).addClass('disabled');
            }
            if (year === endYear) {
                months.slice(endMonth).addClass('disabled');
            }

            html = '';
            year = parseInt(year / 10, 10) * 10;
            var yearCont = this.setTitle('.datetimepicker-years', year + '-' + (year + 9))
                .end()
                .find('td');
            year -= 1;
            d = new Date(this.viewDate);
            for (var i = -1; i < 11; i++) {
                d.setUTCFullYear(year);
                classes = this.onRenderYear(d);
                if (i === -1 || i === 10) {
                    classes.push(old);
                }
                html += '<span class="' + classes.join(' ') + '">' + year + '</span>';
                year += 1;
            }
            yearCont.html(html);
            this.place();
        },

        updateNavArrows: function () {
            var d = new Date(this.viewDate),
                year = d.getUTCFullYear(),
                month = d.getUTCMonth(),
                day = d.getUTCDate(),
                hour = d.getUTCHours();
            switch (this.viewMode) {
                case 0:
                //if (year <= this.startDate.getUTCFullYear()
                //  && month <= this.startDate.getUTCMonth()
                //  && day <= this.startDate.getUTCDate()
                //  && hour <= this.startDate.getUTCHours()) {
                //    this.picker.find('.prev').css({ visibility: 'hidden' });
                //    this.picker.find('.prevYear').css({ visibility: 'hidden' });
                //} else {
                //    this.picker.find('.prev').css({ visibility: 'visible' });
                //    this.picker.find('.prevYear').css({ visibility: 'visible' });
                //}
                //if (year >= this.endDate.getUTCFullYear()
                //  && month >= this.endDate.getUTCMonth()
                //  && day >= this.endDate.getUTCDate()
                //  && hour >= this.endDate.getUTCHours()) {
                //    this.picker.find('.next').css({ visibility: 'hidden' });
                //    this.picker.find('.nextYear').css({ visibility: 'hidden' });
                //} else {
                //    this.picker.find('.next').css({ visibility: 'visible' });
                //    this.picker.find('.nextYear').css({ visibility: 'visible' });
                //}
                //break;
                case 1:
                    //if (year <= this.startDate.getUTCFullYear()
                    //  && month <= this.startDate.getUTCMonth()
                    //  && day <= this.startDate.getUTCDate()) {
                    //    this.picker.find('.prev').css({ visibility: 'hidden' });
                    //    this.picker.find('.prevYear').css({ visibility: 'hidden' });
                    //} else {
                    //    this.picker.find('.prev').css({ visibility: 'visible' });
                    //    this.picker.find('.prevYear').css({ visibility: 'visible' });
                    //}
                    //if (year >= this.endDate.getUTCFullYear()
                    //  && month >= this.endDate.getUTCMonth()
                    //  && day >= this.endDate.getUTCDate()) {
                    //    this.picker.find('.next').css({ visibility: 'hidden' });
                    //    this.picker.find('.nextYear').css({ visibility: 'hidden' });
                    //} else {
                    //    this.picker.find('.next').css({ visibility: 'visible' });
                    //    this.picker.find('.nextYear').css({ visibility: 'visible' });
                    //}
                    this.picker.find('.prev').css({ visibility: 'hidden' });
                    this.picker.find('.prevYear').css({ visibility: 'hidden' });
                    this.picker.find('.next').css({ visibility: 'hidden' });
                    this.picker.find('.nextYear').css({ visibility: 'hidden' });
                    break;
                case 2:
                    if (year <= this.startDate.getUTCFullYear()
                        && month <= this.startDate.getUTCMonth()) {
                        this.picker.find('.prev').css({ visibility: 'hidden' });
                        this.picker.find('.prevYear').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.prev').css({ visibility: 'visible' });
                        this.picker.find('.prevYear').css({ visibility: 'visible' });
                    }
                    if (year >= this.endDate.getUTCFullYear()
                        && month >= this.endDate.getUTCMonth()) {
                        this.picker.find('.next').css({ visibility: 'hidden' });
                        this.picker.find('.nextYear').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.next').css({ visibility: 'visible' });
                        this.picker.find('.nextYear').css({ visibility: 'visible' });
                    }
                    break;
                case 3:
                case 4:
                    if (year <= this.startDate.getUTCFullYear()) {
                        this.picker.find('.prev').css({ visibility: 'hidden' });
                        this.picker.find('.prevYear').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.prev').css({ visibility: 'visible' });
                        this.picker.find('.prevYear').css({ visibility: 'visible' });
                    }
                    if (year >= this.endDate.getUTCFullYear()) {
                        this.picker.find('.next').css({ visibility: 'hidden' });
                        this.picker.find('.nextYear').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.next').css({ visibility: 'visible' });
                        this.picker.find('.nextYear').css({ visibility: 'visible' });
                    }
                    break;
            }
        },


        click: function (e) {
            e.stopPropagation();
            e.preventDefault();
            var target = $(e.target).closest('span, td, th, legend');
            if (target.is('.' + this.icontype)) {
                target = $(target).parent().closest('span, td, th, legend');
            }
            if (target.length === 1) {
                if (target.is('.disabled')) {
                    this.element.trigger({
                        type: 'outOfRange',
                        date: this.viewDate,
                        startDate: this.startDate,
                        endDate: this.endDate
                    });
                    return;
                }
                switch (target[0].nodeName.toLowerCase()) {
                    case 'th':
                        switch (target[0].className) {
                            case 'switch':
                                this.showMode(1);
                                break;
                            case 'prevYear':
                            case 'nextYear':
                                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prevYear' ? -1 : 1);
                                switch (this.viewMode) {
                                    case 0:
                                        this.viewDate = this.moveHour(this.viewDate, dir);
                                        break;
                                    case 1:
                                        this.viewDate = this.moveDate(this.viewDate, dir);
                                        break;
                                    case 2:
                                        this.viewDate = this.moveYear(this.viewDate, dir);
                                        break;
                                    case 3:
                                    case 4:
                                        this.viewDate = this.moveYear(this.viewDate, dir);
                                        break;
                                    default:
                                        break;
                                }
                                this.fill();
                                this.element.trigger({
                                    type: target[0].className + ':' + this.convertViewModeText(this.viewMode),
                                    date: this.viewDate,
                                    startDate: this.startDate,
                                    endDate: this.endDate
                                });
                                break;
                            case 'prev':
                            case 'next':
                                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1);
                                switch (this.viewMode) {
                                    case 0:
                                        this.viewDate = this.moveHour(this.viewDate, dir);
                                        break;
                                    case 1:
                                        this.viewDate = this.moveDate(this.viewDate, dir);
                                        break;
                                    case 2:
                                        this.viewDate = this.moveMonth(this.viewDate, dir);
                                        break;
                                    case 3:
                                    case 4:
                                        this.viewDate = this.moveYear(this.viewDate, dir);
                                        break;
                                }
                                this.fill();
                                this.element.trigger({
                                    type: target[0].className + ':' + this.convertViewModeText(this.viewMode),
                                    date: this.viewDate,
                                    startDate: this.startDate,
                                    endDate: this.endDate
                                });
                                break;
                            case 'clear':
                                this.reset();
                                if (this.autoclose) {
                                    this.hide();
                                }
                                break;
                            case 'today':
                                var date = new Date();
                                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);

                                // Respect startDate and endDate.
                                if (date < this.startDate) date = this.startDate;
                                else if (date > this.endDate) date = this.endDate;

                                this.viewMode = this.startViewMode;
                                this.showMode(0);
                                this._setDate(date);
                                this.fill();
                                if (this.autoclose) {
                                    this.hide();
                                }
                                break;
                        }
                        break;
                    case 'span':
                        if (!target.is('.disabled')) {
                            var year = this.viewDate.getUTCFullYear(),
                                month = this.viewDate.getUTCMonth(),
                                day = this.viewDate.getUTCDate(),
                                hours = this.viewDate.getUTCHours(),
                                minutes = this.viewDate.getUTCMinutes(),
                                seconds = this.viewDate.getUTCSeconds();
                            if (target.is('.clear')) {
                                this.reset();
                                if (this.autoclose) {
                                    this.hide();
                                }
                                break;
                            } else if (target.is('.back')) {
                                this.showMode(1);
                                break;
                            } else if (target.is('.now')) {
                                var date = new Date();
                                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
                                if (date < this.startDate) date = this.startDate;
                                else if (date > this.endDate) date = this.endDate;

                                this.viewMode = this.startViewMode;
                                this.showMode(0);
                                this._setDate(date);
                                this.fill();
                                if (this.autoclose) {
                                    this.hide();
                                }
                                break;
                            } else if (target.is('.month')) {
                                this.viewDate.setUTCDate(1);
                                month = target.parent().find('span').index(target);
                                day = this.viewDate.getUTCDate();
                                this.viewDate.setUTCMonth(month);
                                this.element.trigger({
                                    type: 'changeMonth',
                                    date: this.viewDate
                                });
                                if (this.viewSelect >= 3) {
                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                                }
                            } else if (target.is('.year')) {
                                this.viewDate.setUTCDate(1);
                                year = parseInt(target.text(), 10) || 0;
                                this.viewDate.setUTCFullYear(year);
                                this.element.trigger({
                                    type: 'changeYear',
                                    date: this.viewDate
                                });
                                if (this.viewSelect >= 4) {
                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                                }
                            } else if (target.is('.hour')) {
                                hours = parseInt(target.text(), 10) || 0;
                                if (target.hasClass('hour_am') || target.hasClass('hour_pm')) {
                                    if (hours === 12 && target.hasClass('hour_am')) {
                                        hours = 0;
                                    } else if (hours !== 12 && target.hasClass('hour_pm')) {
                                        hours += 12;
                                    }
                                }
                                this.viewDate.setUTCHours(hours);
                                this.element.trigger({
                                    type: 'changeHour',
                                    date: this.viewDate
                                });
                                if (this.viewSelect >= 1) {
                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                                }
                            } else if (target.is('.minute')) {
                                minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
                                this.viewDate.setUTCMinutes(minutes);
                                this.element.trigger({
                                    type: 'changeMinute',
                                    date: this.viewDate
                                });
                                if (this.viewSelect >= 0) {
                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                                }
                            } else if (
                                target.is('.icon-date_left_2') ||
                                target.is('.icon-date_right_2') ||
                                target.is('.icon-date_left_1') ||
                                target.is('.icon-date_right_1')
                            ) {
                                target.parent().click();
                                return;
                            }
                            if (this.viewMode !== 0) {
                                var oldViewMode = this.viewMode;
                                this.showMode(-1);
                                this.fill();
                                if (oldViewMode === this.viewMode && this.autoclose) {
                                    this.hide();
                                }
                            } else {
                                this.fill();
                                if (this.autoclose) {
                                    this.hide();
                                }
                            }
                        }
                        break;
                    case 'td':
                        if (target.is('.day') && !target.is('.disabled')) {
                            var day = parseInt(target.text(), 10) || 1;
                            var year = this.viewDate.getUTCFullYear(),
                                month = this.viewDate.getUTCMonth(),
                                hours = this.viewDate.getUTCHours(),
                                minutes = this.viewDate.getUTCMinutes(),
                                seconds = this.viewDate.getUTCSeconds();
                            if (target.is('.old')) {
                                if (month === 0) {
                                    month = 11;
                                    year -= 1;
                                } else {
                                    month -= 1;
                                }
                            } else if (target.is('.new')) {
                                if (month === 11) {
                                    month = 0;
                                    year += 1;
                                } else {
                                    month += 1;
                                }
                            }
                            this.viewDate.setUTCFullYear(year);
                            this.viewDate.setUTCMonth(month, day);
                            this.element.trigger({
                                type: 'changeDay',
                                date: this.viewDate
                            });
                            if (this.viewSelect >= 2) {
                                this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                            }
                        }
                        //如果是日期格式则直接关闭弹窗
                        if (this.format.parts.length == 3) {
                            var partArr = this.format.parts;
                            if (partArr[0].toLowerCase() == 'yyyy' && partArr[1].toLowerCase() == 'mm' && partArr[2].toLowerCase() == 'dd') {
                                //this._setDate(UTCDate(year, month, day));
                                this.hide();
                                break;
                            }
                        }
                        var oldViewMode = this.viewMode;
                        this.showMode(-1);
                        this.fill();
                        if (oldViewMode === this.viewMode && this.autoclose) {
                            this.hide();
                        }
                        break;
                }
            }
        },

        _setDate: function (date, which) {
            if (!which || which === 'date')
                this.date = date;
            if (!which || which === 'view')
                this.viewDate = date;
            this.fill();
            this.setValue();
            var element;
            if (this.isInput) {
                element = this.element;
            } else if (this.component) {
                element = this.element.find('input');
            }
            if (element) {
                element.change();
            }
            this.element.trigger({
                type: 'changeDate',
                date: this.getDate()
            });
            if (date === null)
                this.date = this.viewDate;
        },

        moveMinute: function (date, dir) {
            if (!dir) return date;
            var new_date = new Date(date.valueOf());
            //dir = dir > 0 ? 1 : -1;
            new_date.setUTCMinutes(new_date.getUTCMinutes() + (dir * this.minuteStep));
            return new_date;
        },

        moveHour: function (date, dir) {
            if (!dir) return date;
            var new_date = new Date(date.valueOf());
            //dir = dir > 0 ? 1 : -1;
            new_date.setUTCHours(new_date.getUTCHours() + dir);
            return new_date;
        },

        moveDate: function (date, dir) {
            if (!dir) return date;
            var new_date = new Date(date.valueOf());
            //dir = dir > 0 ? 1 : -1;
            new_date.setUTCDate(new_date.getUTCDate() + dir);
            return new_date;
        },

        moveMonth: function (date, dir) {
            if (!dir) return date;
            var new_date = new Date(date.valueOf()),
                day = new_date.getUTCDate(),
                month = new_date.getUTCMonth(),
                mag = Math.abs(dir),
                new_month, test;
            dir = dir > 0 ? 1 : -1;
            if (mag === 1) {
                test = dir === -1
                    // If going back one month, make sure month is not current month
                    // (eg, Mar 31 -> Feb 31 === Feb 28, not Mar 02)
                    ? function () {
                        return new_date.getUTCMonth() === month;
                    }
                    // If going forward one month, make sure month is as expected
                    // (eg, Jan 31 -> Feb 31 === Feb 28, not Mar 02)
                    : function () {
                        return new_date.getUTCMonth() !== new_month;
                    };
                new_month = month + dir;
                new_date.setUTCMonth(new_month);
                // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
                if (new_month < 0 || new_month > 11)
                    new_month = (new_month + 12) % 12;
            } else {
                // For magnitudes >1, move one month at a time...
                for (var i = 0; i < mag; i++)
                    // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
                    new_date = this.moveMonth(new_date, dir);
                // ...then reset the day, keeping it in the new month
                new_month = new_date.getUTCMonth();
                new_date.setUTCDate(day);
                test = function () {
                    return new_month !== new_date.getUTCMonth();
                };
            }
            // Common date-resetting loop -- if date is beyond end of month, make it
            // end of month
            while (test()) {
                new_date.setUTCDate(--day);
                new_date.setUTCMonth(new_month);
            }
            return new_date;
        },

        moveYear: function (date, dir) {
            return this.moveMonth(date, dir * 12);
        },

        dateWithinRange: function (date) {
            return date >= this.startDate && date <= this.endDate;
        },

        keydown: function (e) {
            //if (this.picker.is(':not(:visible)')) {
            //    if (e.keyCode === 27) // allow escape to hide and re-show picker
            //        this.show();
            //    return;
            //}
            //var dateChanged = false,
            //  dir, newDate, newViewDate;
            //switch (e.keyCode) {
            //    case 27: // escape
            //        this.hide();
            //        e.preventDefault();
            //        break;
            //    case 37: // left
            //    case 39: // right
            //        if (!this.keyboardNavigation) break;
            //        dir = e.keyCode === 37 ? -1 : 1;
            //        var viewMode = this.viewMode;
            //        if (e.ctrlKey) {
            //            viewMode += 2;
            //        } else if (e.shiftKey) {
            //            viewMode += 1;
            //        }
            //        if (viewMode === 4) {
            //            newDate = this.moveYear(this.date, dir);
            //            newViewDate = this.moveYear(this.viewDate, dir);
            //        } else if (viewMode === 3) {
            //            newDate = this.moveMonth(this.date, dir);
            //            newViewDate = this.moveMonth(this.viewDate, dir);
            //        } else if (viewMode === 2) {
            //            newDate = this.moveDate(this.date, dir);
            //            newViewDate = this.moveDate(this.viewDate, dir);
            //        } else if (viewMode === 1) {
            //            newDate = this.moveHour(this.date, dir);
            //            newViewDate = this.moveHour(this.viewDate, dir);
            //        } else if (viewMode === 0) {
            //            newDate = this.moveMinute(this.date, dir);
            //            newViewDate = this.moveMinute(this.viewDate, dir);
            //        }
            //        if (this.dateWithinRange(newDate)) {
            //            this.date = newDate;
            //            this.viewDate = newViewDate;
            //            this.setValue();
            //            this.update();
            //            e.preventDefault();
            //            dateChanged = true;
            //        }
            //        break;
            //    case 38: // up
            //    case 40: // down
            //        if (!this.keyboardNavigation) break;
            //        dir = e.keyCode === 38 ? -1 : 1;
            //        viewMode = this.viewMode;
            //        if (e.ctrlKey) {
            //            viewMode += 2;
            //        } else if (e.shiftKey) {
            //            viewMode += 1;
            //        }
            //        if (viewMode === 4) {
            //            newDate = this.moveYear(this.date, dir);
            //            newViewDate = this.moveYear(this.viewDate, dir);
            //        } else if (viewMode === 3) {
            //            newDate = this.moveMonth(this.date, dir);
            //            newViewDate = this.moveMonth(this.viewDate, dir);
            //        } else if (viewMode === 2) {
            //            newDate = this.moveDate(this.date, dir * 7);
            //            newViewDate = this.moveDate(this.viewDate, dir * 7);
            //        } else if (viewMode === 1) {
            //            if (this.showMeridian) {
            //                newDate = this.moveHour(this.date, dir * 6);
            //                newViewDate = this.moveHour(this.viewDate, dir * 6);
            //            } else {
            //                newDate = this.moveHour(this.date, dir * 4);
            //                newViewDate = this.moveHour(this.viewDate, dir * 4);
            //            }
            //        } else if (viewMode === 0) {
            //            newDate = this.moveMinute(this.date, dir * 4);
            //            newViewDate = this.moveMinute(this.viewDate, dir * 4);
            //        }
            //        if (this.dateWithinRange(newDate)) {
            //            this.date = newDate;
            //            this.viewDate = newViewDate;
            //            this.setValue();
            //            this.update();
            //            e.preventDefault();
            //            dateChanged = true;
            //        }
            //        break;
            //    case 13: // enter
            //        if (this.viewMode !== 0) {
            //            var oldViewMode = this.viewMode;
            //            this.showMode(-1);
            //            this.fill();
            //            if (oldViewMode === this.viewMode && this.autoclose) {
            //                this.hide();
            //            }
            //        } else {
            //            this.fill();
            //            if (this.autoclose) {
            //                this.hide();
            //            }
            //        }
            //        e.preventDefault();
            //        break;
            //    case 9: // tab
            //        this.hide();
            //        break;
            //}
            //if (dateChanged) {
            //    var element;
            //    if (this.isInput) {
            //        element = this.element;
            //    } else if (this.component) {
            //        element = this.element.find('input');
            //    }
            //    if (element) {
            //        element.change();
            //    }
            //    this.element.trigger({
            //        type: 'changeDate',
            //        date: this.getDate()
            //    });
            //}
        },

        showMode: function (dir) {
            if (dir) {
                var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
                if (newViewMode >= this.minView && newViewMode <= this.maxView) {
                    this.element.trigger({
                        type: 'changeMode',
                        date: this.viewDate,
                        oldViewMode: this.viewMode,
                        newViewMode: newViewMode
                    });

                    this.viewMode = newViewMode;
                }
            }
            /*
             vitalets: fixing bug of very special conditions:
             jquery 1.7.1 + webkit + show inline datetimepicker in bootstrap popover.
             Method show() does not set display css correctly and datetimepicker is not shown.
             Changed to .css('display', 'block') solve the problem.
             See https://github.com/vitalets/x-editable/issues/37

             In jquery 1.7.2+ everything works fine.
             */
            //this.picker.find('>div').hide().filter('.datetimepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
            this.picker.find('>div').hide().filter('.datetimepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
            this.updateNavArrows();
        },

        reset: function () {
            this._setDate(null, 'date');
        },

        convertViewModeText: function (viewMode) {
            switch (viewMode) {
                case 4:
                    return 'decade';
                case 3:
                    return 'year';
                case 2:
                    return 'month';
                case 1:
                    return 'day';
                case 0:
                    return 'hour';
            }
        }
    };

    var old = $.fn.datetimepicker;
    $.fn.datetimepicker = function (option) {
        var args = Array.apply(null, arguments);
        args.shift();
        var internal_return;
        this.each(function () {
            var $this = $(this),
                data = $this.data('datetimepicker'),
                options = typeof option === 'object' && option;
            if (!data) {
                $this.data('datetimepicker', (data = new Datetimepicker(this, $.extend({}, $.fn.datetimepicker.defaults, options))));
            }
            if (typeof option === 'string' && typeof data[option] === 'function') {
                internal_return = data[option].apply(data, args);
                if (internal_return !== undefined) {
                    return false;
                }
            }
        });
        if (internal_return !== undefined)
            return internal_return;
        else
            return this;
    };

    $.fn.datetimepicker.defaults = {
    };
    $.fn.datetimepicker.Constructor = Datetimepicker;
    var dates = $.fn.datetimepicker.dates = {
        en: {
            days: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'],
            daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六", "周日"],
            //daysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
            daysMin: ['日', '一', '二', '三', '四', '五', '六', '日'],
            //months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            months: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
            monthsShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
            meridiem: ['上午', '下午'],
            suffix: [],
            today: '今天',
            clear: '清空'
        }
    };

    var DPGlobal = {
        modes: [
            {
                clsName: 'minutes',
                navFnc: 'Hours',
                navStep: 1
            },
            {
                clsName: 'hours',
                navFnc: 'Date',
                navStep: 1
            },
            {
                clsName: 'days',
                navFnc: 'Month',
                navStep: 1
            },
            {
                clsName: 'months',
                navFnc: 'FullYear',
                navStep: 1
            },
            {
                clsName: 'years',
                navFnc: 'FullYear',
                navStep: 10
            }
        ],
        isLeapYear: function (year) {
            return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))
        },
        getDaysInMonth: function (year, month) {
            return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
        },
        getDefaultFormat: function (type, field) {
            if (type === 'standard') {
                if (field === 'input')
                    return 'yyyy-mm-dd hh:ii';
                else
                    return 'yyyy-mm-dd hh:ii:ss';
            } else if (type === 'php') {
                //if (field === 'input')
                //    return 'Y-m-d H:i';
                //else
                //    return 'Y-m-d H:i:s';
            } else {
                throw new Error('Invalid format type.');
            }
        },
        validParts: function (type) {
            if (type === 'standard') {
                return /t|hh?|HH?|p|P|z|Z|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g;
            } else if (type === 'php') {
                return /[dDjlNwzFmMnStyYaABgGhHis]/g;
            } else {
                throw new Error('Invalid format type.');
            }
        },
        nonpunctuation: /[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,
        parseFormat: function (format, type) {
            // IE treats \0 as a string end in inputs (truncating the value),
            // so it's a bad format delimiter, anyway
            var separators = format.replace(this.validParts(type), '\0').split('\0'),
                parts = format.match(this.validParts(type));
            if (!separators || !separators.length || !parts || parts.length === 0) {
                throw new Error('Invalid date format.');
            }
            return { separators: separators, parts: parts };
        },
        parseDate: function (date, format, language, type, timezone) {
            if (date instanceof Date) {
                var dateUTC = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
                dateUTC.setMilliseconds(0);
                return dateUTC;
            }
            if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
                format = this.parseFormat('yyyy-mm-dd', type);
            }
            if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
                format = this.parseFormat('yyyy-mm-dd hh:ii', type);
            }
            if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
                format = this.parseFormat('yyyy-mm-dd hh:ii:ss', type);
            }
            if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
                var part_re = /([-+]\d+)([dmwy])/,
                    parts = date.match(/([-+]\d+)([dmwy])/g),
                    part, dir;
                date = new Date();
                for (var i = 0; i < parts.length; i++) {
                    part = part_re.exec(parts[i]);
                    dir = parseInt(part[1]);
                    switch (part[2]) {
                        case 'd':
                            date.setUTCDate(date.getUTCDate() + dir);
                            break;
                        case 'm':
                            date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
                            break;
                        case 'w':
                            date.setUTCDate(date.getUTCDate() + dir * 7);
                            break;
                        case 'y':
                            date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
                            break;
                    }
                }
                return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), 0);
            }
            var parts = date && date.toString().match(this.nonpunctuation) || [],
                date = new Date(0, 0, 0, 0, 0, 0, 0),
                parsed = {},
                setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'D', 'DD', 'd', 'dd', 'H', 'HH', 'p', 'P', 'z', 'Z'],
                setters_map = {
                    hh: function (d, v) {
                        return d.setUTCHours(v);
                    },
                    h: function (d, v) {
                        return d.setUTCHours(v);
                    },
                    HH: function (d, v) {
                        return d.setUTCHours(v === 12 ? 0 : v);
                    },
                    H: function (d, v) {
                        return d.setUTCHours(v === 12 ? 0 : v);
                    },
                    ii: function (d, v) {
                        return d.setUTCMinutes(v);
                    },
                    i: function (d, v) {
                        return d.setUTCMinutes(v);
                    },
                    ss: function (d, v) {
                        return d.setUTCSeconds(v);
                    },
                    s: function (d, v) {
                        return d.setUTCSeconds(v);
                    },
                    yyyy: function (d, v) {
                        return d.setUTCFullYear(v);
                    },
                    yy: function (d, v) {
                        return d.setUTCFullYear(2000 + v);
                    },
                    m: function (d, v) {
                        v -= 1;
                        while (v < 0) v += 12;
                        v %= 12;
                        d.setUTCMonth(v);
                        while (d.getUTCMonth() !== v)
                            if (isNaN(d.getUTCMonth()))
                                return d;
                            else
                                d.setUTCDate(d.getUTCDate() - 1);
                        return d;
                    },
                    d: function (d, v) {
                        return d.setUTCDate(v);
                    },
                    p: function (d, v) {
                        return d.setUTCHours(v === 1 ? d.getUTCHours() + 12 : d.getUTCHours());
                    },
                    z: function () {
                        return timezone
                    }
                },
                val, filtered, part;
            setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
            setters_map['dd'] = setters_map['d'];
            setters_map['P'] = setters_map['p'];
            setters_map['Z'] = setters_map['z'];
            date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
            if (parts.length === format.parts.length) {
                for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
                    val = parseInt(parts[i], 10);
                    part = format.parts[i];
                    if (isNaN(val)) {
                        switch (part) {
                            case 'MM':
                                filtered = $(dates[language].months).filter(function () {
                                    var m = this.slice(0, parts[i].length),
                                        p = parts[i].slice(0, m.length);
                                    return m === p;
                                });
                                val = $.inArray(filtered[0], dates[language].months) + 1;
                                break;
                            case 'M':
                                filtered = $(dates[language].monthsShort).filter(function () {
                                    var m = this.slice(0, parts[i].length),
                                        p = parts[i].slice(0, m.length);
                                    return m.toLowerCase() === p.toLowerCase();
                                });
                                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                                break;
                            case 'p':
                            case 'P':
                                val = $.inArray(parts[i].toLowerCase(), dates[language].meridiem);
                                break;
                            case 'z':
                            case 'Z':
                                timezone;
                                break;
                        }
                    }
                    parsed[part] = val;
                }
                for (var i = 0, s; i < setters_order.length; i++) {
                    s = setters_order[i];
                    if (s in parsed && !isNaN(parsed[s]))
                        setters_map[s](date, parsed[s])
                }
            }
            return date;
        },
        formatDate: function (date, format, language, type, timezone) {
            if (date === null) {
                return '';
            }
            var val;
            if (type === 'standard') {
                val = {
                    t: date.getTime(),
                    // year
                    yy: date.getUTCFullYear().toString().substring(2),
                    yyyy: date.getUTCFullYear(),
                    // month
                    m: date.getUTCMonth() + 1,
                    M: dates[language].monthsShort[date.getUTCMonth()],
                    MM: dates[language].months[date.getUTCMonth()],
                    // day
                    d: date.getUTCDate(),
                    D: dates[language].daysShort[date.getUTCDay()],
                    DD: dates[language].days[date.getUTCDay()],
                    p: (dates[language].meridiem.length === 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
                    // hour
                    h: date.getUTCHours(),
                    // minute
                    i: date.getUTCMinutes(),
                    // second
                    s: date.getUTCSeconds(),
                    // timezone
                    z: timezone
                };

                if (dates[language].meridiem.length === 2) {
                    val.H = (val.h % 12 === 0 ? 12 : val.h % 12);
                }
                else {
                    val.H = val.h;
                }
                val.HH = (val.H < 10 ? '0' : '') + val.H;
                val.P = val.p.toUpperCase();
                val.Z = val.z;
                val.hh = (val.h < 10 ? '0' : '') + val.h;
                val.ii = (val.i < 10 ? '0' : '') + val.i;
                val.ss = (val.s < 10 ? '0' : '') + val.s;
                val.dd = (val.d < 10 ? '0' : '') + val.d;
                val.mm = (val.m < 10 ? '0' : '') + val.m;
            } else if (type === 'php') {
                // php format
                //val = {
                //    // year
                //    y: date.getUTCFullYear().toString().substring(2),
                //    Y: date.getUTCFullYear(),
                //    // month
                //    F: dates[language].months[date.getUTCMonth()],
                //    M: dates[language].monthsShort[date.getUTCMonth()],
                //    n: date.getUTCMonth() + 1,
                //    t: DPGlobal.getDaysInMonth(date.getUTCFullYear(), date.getUTCMonth()),
                //    // day
                //    j: date.getUTCDate(),
                //    l: dates[language].days[date.getUTCDay()],
                //    D: dates[language].daysShort[date.getUTCDay()],
                //    w: date.getUTCDay(), // 0 -> 6
                //    N: (date.getUTCDay() === 0 ? 7 : date.getUTCDay()),       // 1 -> 7
                //    S: (date.getUTCDate() % 10 <= dates[language].suffix.length ? dates[language].suffix[date.getUTCDate() % 10 - 1] : ''),
                //    // hour
                //    a: (dates[language].meridiem.length === 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
                //    g: (date.getUTCHours() % 12 === 0 ? 12 : date.getUTCHours() % 12),
                //    G: date.getUTCHours(),
                //    // minute
                //    i: date.getUTCMinutes(),
                //    // second
                //    s: date.getUTCSeconds()
                //};
                //val.m = (val.n < 10 ? '0' : '') + val.n;
                //val.d = (val.j < 10 ? '0' : '') + val.j;
                //val.A = val.a.toString().toUpperCase();
                //val.h = (val.g < 10 ? '0' : '') + val.g;
                //val.H = (val.G < 10 ? '0' : '') + val.G;
                //val.i = (val.i < 10 ? '0' : '') + val.i;
                //val.s = (val.s < 10 ? '0' : '') + val.s;
            } else {
                throw new Error('Invalid format type.');
            }
            var date = [],
                seps = $.extend([], format.separators);
            for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
                if (seps.length) {
                    date.push(seps.shift());
                }
                date.push(val[format.parts[i]]);
            }
            if (seps.length) {
                date.push(seps.shift());
            }
            return date.join('');
        },
        convertViewMode: function (viewMode) {
            switch (viewMode) {
                case 4:
                case 'decade':
                    viewMode = 4;
                    break;
                case 3:
                case 'year':
                    viewMode = 3;
                    break;
                case 2:
                case 'month':
                    viewMode = 2;
                    break;
                case 1:
                case 'day':
                    viewMode = 1;
                    break;
                case 0:
                case 'hour':
                    viewMode = 0;
                    break;
            }

            return viewMode;
        },
        headTemplateV3: '<thead>' +
        '<tr>' +
        '<th class="prevYear"><span class="icon-date_left_1"></span> </th>' +
        '<th class="prev"><span class="icon-date_left_2"></span> </th>' +
        '<th colspan="3" class="switch"></th>' +
        '<th class="next"><span class="icon-date_right_2"></span> </th>' +
        '<th class="nextYear"><span class="icon-date_right_1"></span> </th>' +
        '</tr>' +
        '</thead>',
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
        footTemplate: function (viewMode) {
            var template = '';
            switch (viewMode) {
                case 4:
                case 'decade':
                    viewMode = 4;
                    break;
                case 3:
                case 'year':
                    viewMode = 3;
                    break;
                case 2:
                case 'month':
                    viewMode = 2;
                    break;
                case 1:
                case 'day':
                    template = '<tfoot>' +
                        '<tr><th colspan="3" class="today"></th><th></th><th colspan="3" class="clear"></th></tr>' +
                        '</tfoot>';
                    break;
                case 0:
                case 'hour':
                    template = '<tfoot>' +
                        '<tr>' +
                        '<th colspan="7">' +
                        '<span class="back">返回</span>' +
                        '<span class="now">当前时刻</span>' +
                        '<span class="clear">清空</span>' +
                        '</th>' +
                        '</tr>' +
                        '</tfoot>'
                    break;
                //case -1:
                //case 'minute':
                //    template = '<tfoot>' +
                //                 '<tr>' +
                //                     '<th colspan="7">' +
                //                         '<span class="back">返回</span>' +
                //                         '<span class="now">当前时刻</span>' +
                //                         '<span class="clear">清空</span>' +
                //                     '</th>' +
                //                 '</tr>' +
                //             '</tfoot>'
                //    break;
            }
            return template;
        }
    };
    //DPGlobal.template = '<div class="datetimepicker">' +
    //  '<div class="datetimepicker-minutes">' +
    //  '<table class=" table-condensed">' +
    //  DPGlobal.headTemplate +
    //  DPGlobal.contTemplate +
    //  DPGlobal.footTemplate(-1) +
    //  '</table>' +
    //  '</div>' +
    //  '<div class="datetimepicker-hours">' +
    //  '<table class=" table-condensed">' +
    //  DPGlobal.headTemplate +
    //  DPGlobal.contTemplate +
    //  DPGlobal.footTemplate(0) +
    //  '</table>' +
    //  '</div>' +
    //  '<div class="datetimepicker-days">' +
    //  '<table class=" table-condensed">' +
    //  DPGlobal.headTemplate +
    //  '<tbody></tbody>' +
    //  DPGlobal.footTemplate(1) +
    //  '</table>' +
    //  '</div>' +
    //  '<div class="datetimepicker-months">' +
    //  '<table class="table-condensed">' +
    //  DPGlobal.headTemplate +
    //  DPGlobal.contTemplate +
    //  DPGlobal.footTemplate(2) +
    //  '</table>' +
    //  '</div>' +
    //  '<div class="datetimepicker-years">' +
    //  '<table class="table-condensed">' +
    //  DPGlobal.headTemplate +
    //  DPGlobal.contTemplate +
    //  DPGlobal.footTemplate(3) +
    //  '</table>' +
    //  '</div>' +
    //  '</div>';
    DPGlobal.templateV3 = '<div class="datetimepicker">' +
        '<div class="datetimepicker-minutes">' +
        '<table class=" table-condensed">' +
        DPGlobal.headTemplateV3 +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate(0) +
        '</table>' +
        '</div>' +
        '<div class="datetimepicker-hours">' +
        '<table class=" table-condensed">' +
        DPGlobal.headTemplateV3 +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate(0) +
        '</table>' +
        '</div>' +
        '<div class="datetimepicker-days">' +
        '<table class=" table-condensed">' +
        DPGlobal.headTemplateV3 +
        '<tbody></tbody>' +
        DPGlobal.footTemplate(1) +
        '</table>' +
        '</div>' +
        '<div class="datetimepicker-months">' +
        '<table class="table-condensed">' +
        DPGlobal.headTemplateV3 +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate(2) +
        '</table>' +
        '</div>' +
        '<div class="datetimepicker-years">' +
        '<table class="table-condensed">' +
        DPGlobal.headTemplateV3 +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate(3) +
        '</table>' +
        '</div>' +
        '</div>';
    $.fn.datetimepicker.DPGlobal = DPGlobal;

    /* DATETIMEPICKER NO CONFLICT
     * =================== */

    $.fn.datetimepicker.noConflict = function () {
        $.fn.datetimepicker = old;
        return this;
    };

    /* DATETIMEPICKER DATA-API
     * ================== */

    $(document).on('focus.datetimepicker.data-api click.datetimepicker.data-api', '[data-provide="datetimepicker"]', function (e) {
        var $this = $(this);
        if ($this.data('datetimepicker')) return;
        e.preventDefault();
        // component click requires us to explicitly show it
        $this.datetimepicker('show');
    });
    $(function () {
        $('[data-provide="datetimepicker-inline"]').datetimepicker();
    });
}));;
/**
 * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)
 * 
 * Apache License, Version 2.0:
 * Copyright (c) 2012 - 2015 David Stutz
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 * 
 * BSD 3-Clause License:
 * Copyright (c) 2012 - 2015 David Stutz
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *    - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    - Neither the name of David Stutz nor the names of its contributors may be
 *      used to endorse or promote products derived from this software without
 *      specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
!function ($) {
    "use strict";// jshint ;_;

    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {
        ko.bindingHandlers.multiselect = {
            after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],

            init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
                var $element = $(element);
                var config = ko.toJS(valueAccessor());

                $element.multiselect(config);

                if (allBindings.has('options')) {
                    var options = allBindings.get('options');
                    if (ko.isObservable(options)) {
                        ko.computed({
                            read: function() {
                                options();
                                setTimeout(function() {
                                    var ms = $element.data('multiselect');
                                    if (ms)
                                        ms.updateOriginalOptions();//Not sure how beneficial this is.
                                    $element.multiselect('rebuild');
                                }, 1);
                            },
                            disposeWhenNodeIsRemoved: element
                        });
                    }
                }

                //value and selectedOptions are two-way, so these will be triggered even by our own actions.
                //It needs some way to tell if they are triggered because of us or because of outside change.
                //It doesn't loop but it's a waste of processing.
                if (allBindings.has('value')) {
                    var value = allBindings.get('value');
                    if (ko.isObservable(value)) {
                        ko.computed({
                            read: function() {
                                value();
                                setTimeout(function() {
                                    $element.multiselect('refresh');
                                }, 1);
                            },
                            disposeWhenNodeIsRemoved: element
                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                    }
                }

                //Switched from arrayChange subscription to general subscription using 'refresh'.
                //Not sure performance is any better using 'select' and 'deselect'.
                if (allBindings.has('selectedOptions')) {
                    var selectedOptions = allBindings.get('selectedOptions');
                    if (ko.isObservable(selectedOptions)) {
                        ko.computed({
                            read: function() {
                                selectedOptions();
                                setTimeout(function() {
                                    $element.multiselect('refresh');
                                }, 1);
                            },
                            disposeWhenNodeIsRemoved: element
                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                    }
                }

                var setEnabled = function (enable) {
                    setTimeout(function () {
                        if (enable)
                            $element.multiselect('enable');
                        else
                            $element.multiselect('disable');
                    });
                };

                if (allBindings.has('enable')) {
                    var enable = allBindings.get('enable');
                    if (ko.isObservable(enable)) {
                        ko.computed({
                            read: function () {
                                setEnabled(enable());
                            },
                            disposeWhenNodeIsRemoved: element
                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                    } else {
                        setEnabled(enable);
                    }
                }

                if (allBindings.has('disable')) {
                    var disable = allBindings.get('disable');
                    if (ko.isObservable(disable)) {
                        ko.computed({
                            read: function () {
                                setEnabled(!disable());
                            },
                            disposeWhenNodeIsRemoved: element
                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });
                    } else {
                        setEnabled(!disable);
                    }
                }

                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
                    $element.multiselect('destroy');
                });
            },

            update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
                var $element = $(element);
                var config = ko.toJS(valueAccessor());

                $element.multiselect('setOptions', config);
                $element.multiselect('rebuild');
            }
        };
    }

    function forEach(array, callback) {
        for (var index = 0; index < array.length; ++index) {
            callback(array[index], index);
        }
    }

    /**
     * Constructor to create a new multiselect using the given select.
     *
     * @param {jQuery} select
     * @param {Object} options
     * @returns {Multiselect}
     */
    function Multiselect(select, options) {

        this.$select = $(select);
        
        // Placeholder via data attributes
        if (this.$select.attr("data-placeholder")) {
            options.nonSelectedText = this.$select.data("placeholder");
        }
        
        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));

        // Initialization.
        // We have to clone to create a new reference.
        this.originalOptions = this.$select.clone()[0].options;
        this.query = '';
        this.searchTimeout = null;
        this.lastToggledInput = null;

        this.options.multiple = this.$select.attr('multiple') === "multiple";
        this.options.onChange = $.proxy(this.options.onChange, this);
        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);
        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);
        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);
        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);
        this.options.onInitialized = $.proxy(this.options.onInitialized, this);
        
        // Build select all if enabled.
        this.buildContainer();
        this.buildButton();
        this.buildDropdown();
        this.buildSelectAll();
        this.buildDropdownOptions();
        this.buildFilter();

        this.updateButtonText();
        this.updateSelectAll(true);

        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {
            this.disable();
        }
        
        this.$select.hide().after(this.$container);
        this.options.onInitialized(this.$select, this.$container);
    }

    Multiselect.prototype = {

        defaults: {
            /**
             * Default text function will either print 'None selected' in case no
             * option is selected or a list of the selected options up to a length
             * of 3 selected options.
             * 
             * @param {jQuery} options
             * @param {jQuery} select
             * @returns {String}
             */
            buttonText: function(options, select) {
                if (this.disabledText.length > 0 
                        && (this.disableIfEmpty || select.prop('disabled')) 
                        && options.length == 0) {
                    
                    return this.disabledText;
                }
                else if (options.length === 0) {
                    return this.nonSelectedText;
                }
                else if (this.allSelectedText 
                        && options.length === $('option', $(select)).length 
                        && $('option', $(select)).length !== 1 
                        && this.multiple) {

                    if (this.selectAllNumber) {
                        return this.allSelectedText + ' (' + options.length + ')';
                    }
                    else {
                        return this.allSelectedText;
                    }
                }
                else if (options.length > this.numberDisplayed) {
                    return options.length + ' ' + this.nSelectedText;
                }
                else {
                    var selected = '';
                    var delimiter = this.delimiterText;
                    
                    options.each(function() {
                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();
                        selected += label + delimiter;
                    });
                    
                    return selected.substr(0, selected.length - 2);
                }
            },
            /**
             * Updates the title of the button similar to the buttonText function.
             * 
             * @param {jQuery} options
             * @param {jQuery} select
             * @returns {@exp;selected@call;substr}
             */
            buttonTitle: function(options, select) {
                if (options.length === 0) {
                    return this.nonSelectedText;
                }
                else {
                    var selected = '';
                    var delimiter = this.delimiterText;
                    
                    options.each(function () {
                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();
                        selected += label + delimiter;
                    });
                    return selected.substr(0, selected.length - 2);
                }
            },
            /**
             * Create a label.
             *
             * @param {jQuery} element
             * @returns {String}
             */
            optionLabel: function(element){
                return $(element).attr('label') || $(element).text();
            },
            /**
             * Create a class.
             *
             * @param {jQuery} element
             * @returns {String}
             */
            optionClass: function(element) {
                return $(element).attr('class') || '';
            },
            /**
             * Triggered on change of the multiselect.
             * 
             * Not triggered when selecting/deselecting options manually.
             * 
             * @param {jQuery} option
             * @param {Boolean} checked
             */
            onChange : function(option, checked) {

            },
            /**
             * Triggered when the dropdown is shown.
             *
             * @param {jQuery} event
             */
            onDropdownShow: function(event) {

            },
            /**
             * Triggered when the dropdown is hidden.
             *
             * @param {jQuery} event
             */
            onDropdownHide: function(event) {

            },
            /**
             * Triggered after the dropdown is shown.
             * 
             * @param {jQuery} event
             */
            onDropdownShown: function(event) {
                
            },
            /**
             * Triggered after the dropdown is hidden.
             * 
             * @param {jQuery} event
             */
            onDropdownHidden: function(event) {
                
            },
            /**
             * Triggered on select all.
             */
            onSelectAll: function(checked) {
                
            },
            /**
             * Triggered after initializing.
             *
             * @param {jQuery} $select
             * @param {jQuery} $container
             */
            onInitialized: function($select, $container) {

            },
            enableHTML: false,
            buttonClass: 'btn btn-default',
            inheritClass: false,
            buttonWidth: 'auto',
            buttonContainer: '<div class="btn-group" />',
            dropRight: false,
            dropUp: false,
            selectedClass: 'active',
            // Maximum height of the dropdown menu.
            // If maximum height is exceeded a scrollbar will be displayed.
            maxHeight: false,
            checkboxName: false,
            includeSelectAllOption: false,
            includeSelectAllIfMoreThan: 0,
            selectAllText: ' Select all',
            selectAllValue: 'multiselect-all',
            selectAllName: false,
            selectAllNumber: true,
            selectAllJustVisible: true,
            enableFiltering: false,
            enableCaseInsensitiveFiltering: false,
            enableFullValueFiltering: false,
            enableClickableOptGroups: false,
            enableCollapsibelOptGroups: false,
            filterPlaceholder: 'Search',
            // possible options: 'text', 'value', 'both'
            filterBehavior: 'text',
            includeFilterClearBtn: true,
            preventInputChangeEvent: false,
            nonSelectedText: 'None selected',
            nSelectedText: 'selected',
            allSelectedText: 'All selected',
            numberDisplayed: 3,
            disableIfEmpty: false,
            disabledText: '',
            delimiterText: ', ',
            templates: {
                button: '<button type="button" class="multiselect dropdown-toggle" data-toggle="dropdown"><span class="multiselect-selected-text"></span> <b class="icon-arrow-down-full"></b></button>',
                ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                filter: '<li class="multiselect-item filter"><div class="input-group"><span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span><input class="form-control multiselect-search" type="text"></div></li>',
                filterClearBtn: '<span class="input-group-btn"><button class="btn btn-default multiselect-clear-filter" type="button"><i class="glyphicon glyphicon-remove-circle"></i></button></span>',
                li: '<li><a tabindex="0"><label></label></a></li>',
                divider: '<li class="multiselect-item divider"></li>',
                liGroup: '<li class="multiselect-item multiselect-group"><label></label></li>'
            }
        },

        constructor: Multiselect,

        /**
         * Builds the container of the multiselect.
         */
        buildContainer: function() {
            this.$container = $(this.options.buttonContainer);
            this.$container.on('show.bs.dropdown', this.options.onDropdownShow);
            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);
            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);
            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);
        },

        /**
         * Builds the button of the multiselect.
         */
        buildButton: function() {
            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);
            if (this.$select.attr('class') && this.options.inheritClass) {
                this.$button.addClass(this.$select.attr('class'));
            }
            // Adopt active state.
            if (this.$select.prop('disabled')) {
                this.disable();
            }
            else {
                this.enable();
            }

            // Manually add button width if set.
            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {
                this.$button.css({
                    'width' : this.options.buttonWidth,
                    'overflow' : 'hidden',
                    'text-overflow' : 'ellipsis'
                });
                this.$container.css({
                    'width': this.options.buttonWidth
                });
            }

            // Keep the tab index from the select.
            var tabindex = this.$select.attr('tabindex');
            if (tabindex) {
                this.$button.attr('tabindex', tabindex);
            }

            this.$container.prepend(this.$button);
        },

        /**
         * Builds the ul representing the dropdown menu.
         */
        buildDropdown: function() {

            // Build ul.
            this.$ul = $(this.options.templates.ul);

            if (this.options.dropRight) {
                this.$ul.addClass('pull-right');
            }

            // Set max height of dropdown menu to activate auto scrollbar.
            if (this.options.maxHeight) {
                // TODO: Add a class for this option to move the css declarations.
                this.$ul.css({
                    'max-height': this.options.maxHeight + 'px',
                    'overflow-y': 'auto',
                    'overflow-x': 'hidden'
                });
            }
            
            if (this.options.dropUp) {
                
                var height = Math.min(this.options.maxHeight, $('option[data-role!="divider"]', this.$select).length*26 + $('option[data-role="divider"]', this.$select).length*19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));
                var moveCalc = height + 34;
                
                this.$ul.css({
                    'max-height': height + 'px',
                    'overflow-y': 'auto',
                    'overflow-x': 'hidden',
                    'margin-top': "-" + moveCalc + 'px'
                });
            }
            
            this.$container.append(this.$ul);
        },

        /**
         * Build the dropdown options and binds all nessecary events.
         * 
         * Uses createDivider and createOptionValue to create the necessary options.
         */
        buildDropdownOptions: function() {

            this.$select.children().each($.proxy(function(index, element) {

                var $element = $(element);
                // Support optgroups and options without a group simultaneously.
                var tag = $element.prop('tagName')
                    .toLowerCase();
            
                if ($element.prop('value') === this.options.selectAllValue) {
                    return;
                }

                if (tag === 'optgroup') {
                    this.createOptgroup(element);
                }
                else if (tag === 'option') {

                    if ($element.data('role') === 'divider') {
                        this.createDivider();
                    }
                    else {
                        this.createOptionValue(element);
                    }

                }

                // Other illegal tags will be ignored.
            }, this));

            // Bind the change event on the dropdown elements.
            $('li input', this.$ul).on('change', $.proxy(function(event) {
                var $target = $(event.target);

                var checked = $target.prop('checked') || false;
                var isSelectAllOption = $target.val() === this.options.selectAllValue;

                // Apply or unapply the configured selected class.
                if (this.options.selectedClass) {
                    if (checked) {
                        $target.closest('li')
                            .addClass(this.options.selectedClass);
                    }
                    else {
                        $target.closest('li')
                            .removeClass(this.options.selectedClass);
                    }
                }

                // Get the corresponding option.
                var value = $target.val();
                var $option = this.getOptionByValue(value);

                var $optionsNotThis = $('option', this.$select).not($option);
                var $checkboxesNotThis = $('input', this.$container).not($target);

                if (isSelectAllOption) {
                    if (checked) {
                        this.selectAll(this.options.selectAllJustVisible);
                    }
                    else {
                        this.deselectAll(this.options.selectAllJustVisible);
                    }
                }
                else {
                    if (checked) {
                        $option.prop('selected', true);

                        if (this.options.multiple) {
                            // Simply select additional option.
                            $option.prop('selected', true);
                        }
                        else {
                            // Unselect all other options and corresponding checkboxes.
                            if (this.options.selectedClass) {
                                $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);
                            }

                            $($checkboxesNotThis).prop('checked', false);
                            $optionsNotThis.prop('selected', false);

                            // It's a single selection, so close.
                            this.$button.click();
                        }

                        if (this.options.selectedClass === "active") {
                            $optionsNotThis.closest("a").css("outline", "");
                        }
                    }
                    else {
                        // Unselect option.
                        $option.prop('selected', false);
                    }
                    
                    // To prevent select all from firing onChange: #575
                    this.options.onChange($option, checked);
                }

                this.$select.change();

                this.updateButtonText();
                this.updateSelectAll();

                if(this.options.preventInputChangeEvent) {
                    return false;
                }
            }, this));

            $('li a', this.$ul).on('mousedown', function(e) {
                if (e.shiftKey) {
                    // Prevent selecting text by Shift+click
                    return false;
                }
            });
        
            $('li a', this.$ul).on('touchstart click', $.proxy(function(event) {
                event.stopPropagation();

                var $target = $(event.target);
                
                if (event.shiftKey && this.options.multiple) {
                    if($target.is("label")){ // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)
                        event.preventDefault();
                        $target = $target.find("input");
                        $target.prop("checked", !$target.prop("checked"));
                    }
                    var checked = $target.prop('checked') || false;

                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range
                        var from = $target.closest("li").index();
                        var to = this.lastToggledInput.closest("li").index();
                        
                        if (from > to) { // Swap the indices
                            var tmp = to;
                            to = from;
                            from = tmp;
                        }
                        
                        // Make sure we grab all elements since slice excludes the last index
                        ++to;
                        
                        // Change the checkboxes and underlying options
                        var range = this.$ul.find("li").slice(from, to).find("input");
                        
                        range.prop('checked', checked);
                        
                        if (this.options.selectedClass) {
                            range.closest('li')
                                .toggleClass(this.options.selectedClass, checked);
                        }
                        
                        for (var i = 0, j = range.length; i < j; i++) {
                            var $checkbox = $(range[i]);

                            var $option = this.getOptionByValue($checkbox.val());

                            $option.prop('selected', checked);
                        }                   
                    }
                    
                    // Trigger the select "change" event
                    $target.trigger("change");
                }
                
                // Remembers last clicked option
                if($target.is("input") && !$target.closest("li").is(".multiselect-item")){
                    this.lastToggledInput = $target;
                }

                $target.blur();
            }, this));

            // Keyboard support.
            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function(event) {
                if ($('input[type="text"]', this.$container).is(':focus')) {
                    return;
                }

                if (event.keyCode === 9 && this.$container.hasClass('open')) {
                    this.$button.click();
                }
                else {
                    var $items = $(this.$container).find("li:not(.divider):not(.disabled) a").filter(":visible");

                    if (!$items.length) {
                        return;
                    }

                    var index = $items.index($items.filter(':focus'));

                    // Navigation up.
                    if (event.keyCode === 38 && index > 0) {
                        index--;
                    }
                    // Navigate down.
                    else if (event.keyCode === 40 && index < $items.length - 1) {
                        index++;
                    }
                    else if (!~index) {
                        index = 0;
                    }

                    var $current = $items.eq(index);
                    $current.focus();

                    if (event.keyCode === 32 || event.keyCode === 13) {
                        var $checkbox = $current.find('input');

                        $checkbox.prop("checked", !$checkbox.prop("checked"));
                        $checkbox.change();
                    }

                    event.stopPropagation();
                    event.preventDefault();
                }
            }, this));

            if(this.options.enableClickableOptGroups && this.options.multiple) {
                $('li.multiselect-group', this.$ul).on('click', $.proxy(function(event) {
                    event.stopPropagation();
                    console.log('test');
                    var group = $(event.target).parent();

                    // Search all option in optgroup
                    var $options = group.nextUntil('li.multiselect-group');
                    var $visibleOptions = $options.filter(":visible:not(.disabled)");

                    // check or uncheck items
                    var allChecked = true;
                    var optionInputs = $visibleOptions.find('input');
                    var values = [];
                    
                    optionInputs.each(function() {
                        allChecked = allChecked && $(this).prop('checked');
                        values.push($(this).val());
                    });

                    if (!allChecked) {
                        this.select(values, false);
                    }
                    else {
                        this.deselect(values, false);
                    }
                    
                    this.options.onChange(optionInputs, !allChecked);
               }, this));
            }

            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {
                $("li.multiselect-group input", this.$ul).off();
                $("li.multiselect-group", this.$ul).siblings().not("li.multiselect-group, li.multiselect-all", this.$ul).each( function () {
                    $(this).toggleClass('hidden', true);
                });
                
                $("li.multiselect-group", this.$ul).on("click", $.proxy(function(group) {
                    group.stopPropagation();
                }, this));
                
                $("li.multiselect-group > a > b", this.$ul).on("click", $.proxy(function(t) {
                    t.stopPropagation();
                    var n = $(t.target).closest('li');
                    var r = n.nextUntil("li.multiselect-group");
                    var i = true;
                    
                    r.each(function() {
                        i = i && $(this).hasClass('hidden');
                    });
                    
                    r.toggleClass('hidden', !i);
                }, this));
                
                $("li.multiselect-group > a > input", this.$ul).on("change", $.proxy(function(t) {
                    t.stopPropagation();
                    var n = $(t.target).closest('li');
                    var r = n.nextUntil("li.multiselect-group", ':not(.disabled)');
                    var s = r.find("input");
                    
                    var i = true;
                    s.each(function() {
                        i = i && $(this).prop("checked");
                    });
                    
                    s.prop("checked", !i).trigger("change");
                }, this));
                
                // Set the initial selection state of the groups.
                $('li.multiselect-group', this.$ul).each(function() {
                    var r = $(this).nextUntil("li.multiselect-group", ':not(.disabled)');
                    var s = r.find("input");
                    
                    var i = true;
                    s.each(function() {
                        i = i && $(this).prop("checked");
                    });
                    
                    $(this).find('input').prop("checked", i);
                });
                
                // Update the group checkbox based on new selections among the
                // corresponding children.
                $("li input", this.$ul).on("change", $.proxy(function(t) {
                    t.stopPropagation();
                    var n = $(t.target).closest('li');
                    var r1 = n.prevUntil("li.multiselect-group", ':not(.disabled)');
                    var r2 = n.nextUntil("li.multiselect-group", ':not(.disabled)');
                    var s1 = r1.find("input");
                    var s2 = r2.find("input");
                    
                    var i = $(t.target).prop('checked');
                    s1.each(function() {
                        i = i && $(this).prop("checked");
                    });
                    
                    s2.each(function() {
                        i = i && $(this).prop("checked");
                    });
                    
                    n.prevAll('.multiselect-group').find('input').prop('checked', i);
                }, this));
                
                $("li.multiselect-all", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');
                $("li.multiselect-group > a, li.multiselect-all > a > label.checkbox", this.$ul).css('padding', '3px 20px 3px 35px');
                $("li.multiselect-group > a > input", this.$ul).css('margin', '4px 0px 5px -20px');
            }
        },

        /**
         * Create an option using the given select option.
         *
         * @param {jQuery} element
         */
        createOptionValue: function(element) {
            var $element = $(element);
            if ($element.is(':selected')) {
                $element.prop('selected', true);
            }

            // Support the label attribute on options.
            var label = this.options.optionLabel(element);
            var classes = this.options.optionClass(element);
            var value = $element.val();
            var inputType = this.options.multiple ? "checkbox" : "radio";

            var $li = $(this.options.templates.li);
            var $label = $('label', $li);
            $label.addClass(inputType);
            $li.addClass(classes);

            if (this.options.enableHTML) {
                $label.html(" " + label);
            }
            else {
                $label.text(" " + label);
            }
        
            var $checkbox = $('<input/>').attr('type', inputType);

            if (this.options.checkboxName) {
                $checkbox.attr('name', this.options.checkboxName);
            }
                        
            //����ʽ
            if ($.IGuid) {
                var id = $.IGuid();
                var $a = $('a', $li);
                $a.addClass("multiselect-item");
                $checkbox.attr("id", id);
                $label.attr("for", id);
                $a.prepend($checkbox);
            } else {
                $label.prepend($checkbox);
            }
            

            var selected = $element.prop('selected') || false;
            $checkbox.val(value);

            if (value === this.options.selectAllValue) {
                $li.addClass("multiselect-item multiselect-all");
                $checkbox.parent().parent()
                    .addClass('multiselect-all');
            }

            $label.attr('title', $element.attr('title'));

            this.$ul.append($li);

            if ($element.is(':disabled')) {
                $checkbox.attr('disabled', 'disabled')
                    .prop('disabled', true)
                    .closest('a')
                    .attr("tabindex", "-1")
                    .closest('li')
                    .addClass('disabled');
            }

            $checkbox.prop('checked', selected);

            if (selected && this.options.selectedClass) {
                $checkbox.closest('li')
                    .addClass(this.options.selectedClass);
            }
        },

        /**
         * Creates a divider using the given select option.
         *
         * @param {jQuery} element
         */
        createDivider: function(element) {
            var $divider = $(this.options.templates.divider);
            this.$ul.append($divider);
        },

        /**
         * Creates an optgroup.
         *
         * @param {jQuery} group
         */
        createOptgroup: function(group) {            
            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {
                var label = $(group).attr("label");
                var value = $(group).attr("value");
                var r = $('<li class="multiselect-item multiselect-group"><a href="javascript:void(0);"><input type="checkbox" value="' + value + '"/><b> ' + label + '<b class="icon-arrow-down-full"></b></b></a></li>');

                if (this.options.enableClickableOptGroups) {
                    r.addClass("multiselect-group-clickable")
                }
                this.$ul.append(r);
                if ($(group).is(":disabled")) {
                    r.addClass("disabled")
                }
                $("option", group).each($.proxy(function($, group) {
                    this.createOptionValue(group)
                }, this))
            }
            else {
                var groupName = $(group).prop('label');

                // Add a header for the group.
                var $li = $(this.options.templates.liGroup);

                if (this.options.enableHTML) {
                    $('label', $li).html(groupName);
                }
                else {
                    $('label', $li).text(groupName);
                }

                if (this.options.enableClickableOptGroups) {
                    $li.addClass('multiselect-group-clickable');
                }

                this.$ul.append($li);

                if ($(group).is(':disabled')) {
                    $li.addClass('disabled');
                }

                // Add the options of the group.
                $('option', group).each($.proxy(function(index, element) {
                    this.createOptionValue(element);
                }, this));
            }
        },

        /**
         * Build the select all.
         * 
         * Checks if a select all has already been created.
         */
        buildSelectAll: function() {
            if (typeof this.options.selectAllValue === 'number') {
                this.options.selectAllValue = this.options.selectAllValue.toString();
            }
            
            var alreadyHasSelectAll = this.hasSelectAll();

            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple
                    && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {

                // Check whether to add a divider after the select all.
                if (this.options.includeSelectAllDivider) {
                    this.$ul.prepend($(this.options.templates.divider));
                }

                var $li = $(this.options.templates.li);
                $('label', $li).addClass("checkbox");
                
                if (this.options.enableHTML) {
                    $('label', $li).html(" " + this.options.selectAllText);
                }
                else {
                    $('label', $li).text(" " + this.options.selectAllText);
                }
                
                if (this.options.selectAllName) {
                    $('label', $li).prepend('<input type="checkbox" name="' + this.options.selectAllName + '" />');
                }
                else {
                    $('label', $li).prepend('<input type="checkbox" />');
                }
                
                var $checkbox = $('input', $li);
                $checkbox.val(this.options.selectAllValue);

                $li.addClass("multiselect-item multiselect-all");
                $checkbox.parent().parent()
                    .addClass('multiselect-all');

                this.$ul.prepend($li);

                $checkbox.prop('checked', false);
            }
        },

        /**
         * Builds the filter.
         */
        buildFilter: function() {

            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.
            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {
                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);

                if (this.$select.find('option').length >= enableFilterLength) {

                    this.$filter = $(this.options.templates.filter);
                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);
                    
                    // Adds optional filter clear button
                    if(this.options.includeFilterClearBtn){
                        var clearBtn = $(this.options.templates.filterClearBtn);
                        clearBtn.on('click', $.proxy(function(event){
                            clearTimeout(this.searchTimeout);
                            this.$filter.find('.multiselect-search').val('');
                            $('li', this.$ul).show().removeClass("filter-hidden");
                            this.updateSelectAll();
                        }, this));
                        this.$filter.find('.input-group').append(clearBtn);
                    }
                    
                    this.$ul.prepend(this.$filter);

                    this.$filter.val(this.query).on('click', function(event) {
                        event.stopPropagation();
                    }).on('input keydown', $.proxy(function(event) {
                        // Cancel enter key default behaviour
                        if (event.which === 13) {
                          event.preventDefault();
                        }
                        
                        // This is useful to catch "keydown" events after the browser has updated the control.
                        clearTimeout(this.searchTimeout);

                        this.searchTimeout = this.asyncFunction($.proxy(function() {

                            if (this.query !== event.target.value) {
                                this.query = event.target.value;

                                var currentGroup, currentGroupVisible;
                                $.each($('li', this.$ul), $.proxy(function(index, element) {
                                    var value = $('input', element).length > 0 ? $('input', element).val() : "";
                                    var text = $('label', element).text();

                                    var filterCandidate = '';
                                    if ((this.options.filterBehavior === 'text')) {
                                        filterCandidate = text;
                                    }
                                    else if ((this.options.filterBehavior === 'value')) {
                                        filterCandidate = value;
                                    }
                                    else if (this.options.filterBehavior === 'both') {
                                        filterCandidate = text + '\n' + value;
                                    }

                                    if (value !== this.options.selectAllValue && text) {

                                        // By default lets assume that element is not
                                        // interesting for this search.
                                        var showElement = false;

                                        if (this.options.enableCaseInsensitiveFiltering) {
                                            filterCandidate = filterCandidate.toLowerCase();
                                            this.query = this.query.toLowerCase();
                                        }

                                        if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {
                                            var valueToMatch = filterCandidate.trim().substring(0, this.query.length);
                                            if (this.query.indexOf(valueToMatch) > -1) {
                                                showElement = true;
                                            }
                                        }
                                        else if (filterCandidate.indexOf(this.query) > -1) {
                                            showElement = true;
                                        }

                                        // Toggle current element (group or group item) according to showElement boolean.
                                        $(element).toggle(showElement).toggleClass('filter-hidden', !showElement);
                                        
                                        // Differentiate groups and group items.
                                        if ($(element).hasClass('multiselect-group')) {
                                            // Remember group status.
                                            currentGroup = element;
                                            currentGroupVisible = showElement;
                                        }
                                        else {
                                            // Show group name when at least one of its items is visible.
                                            if (showElement) {
                                                $(currentGroup).show().removeClass('filter-hidden');
                                            }
                                            
                                            // Show all group items when group name satisfies filter.
                                            if (!showElement && currentGroupVisible) {
                                                $(element).show().removeClass('filter-hidden');
                                            }
                                        }
                                    }
                                }, this));
                            }

                            this.updateSelectAll();
                        }, this), 300, this);
                    }, this));
                }
            }
        },

        /**
         * Unbinds the whole plugin.
         */
        destroy: function() {
            this.$container.remove();
            this.$select.show();
            this.$select.data('multiselect', null);
        },

        /**
         * Refreshs the multiselect based on the selected options of the select.
         */
        refresh: function () {
            var inputs = $.map($('li input', this.$ul), $);
            
            $('option', this.$select).each($.proxy(function (index, element) {
                var $elem = $(element);
                var value = $elem.val();
                var $input;
                for (var i = inputs.length; 0 < i--; /**/) {
                    if (value !== ($input = inputs[i]).val())
                        continue; // wrong li

                    if ($elem.is(':selected')) {
                        $input.prop('checked', true);

                        if (this.options.selectedClass) {
                            $input.closest('li')
                                .addClass(this.options.selectedClass);
                        }
                    }
                    else {
                        $input.prop('checked', false);

                        if (this.options.selectedClass) {
                            $input.closest('li')
                                .removeClass(this.options.selectedClass);
                        }
                    }

                    if ($elem.is(":disabled")) {
                        $input.attr('disabled', 'disabled')
                            .prop('disabled', true)
                            .closest('li')
                            .addClass('disabled');
                    }
                    else {
                        $input.prop('disabled', false)
                            .closest('li')
                            .removeClass('disabled');
                    }
                    break; // assumes unique values
                }
            }, this));

            this.updateButtonText();
            this.updateSelectAll();
        },

        /**
         * Select all options of the given values.
         * 
         * If triggerOnChange is set to true, the on change event is triggered if
         * and only if one value is passed.
         * 
         * @param {Array} selectValues
         * @param {Boolean} triggerOnChange
         */
        select: function(selectValues, triggerOnChange) {
            if(!$.isArray(selectValues)) {
                selectValues = [selectValues];
            }

            for (var i = 0; i < selectValues.length; i++) {
                var value = selectValues[i];

                if (value === null || value === undefined) {
                    continue;
                }

                var $option = this.getOptionByValue(value);
                var $checkbox = this.getInputByValue(value);

                if($option === undefined || $checkbox === undefined) {
                    continue;
                }
                
                if (!this.options.multiple) {
                    this.deselectAll(false);
                }
                
                if (this.options.selectedClass) {
                    $checkbox.closest('li')
                        .addClass(this.options.selectedClass);
                }

                $checkbox.prop('checked', true);
                $option.prop('selected', true);
                
                if (triggerOnChange) {
                    this.options.onChange($option, true);
                }
            }

            this.updateButtonText();
            this.updateSelectAll();
        },

        /**
         * Clears all selected items.
         */
        clearSelection: function () {
            this.deselectAll(false);
            this.updateButtonText();
            this.updateSelectAll();
        },

        /**
         * Deselects all options of the given values.
         * 
         * If triggerOnChange is set to true, the on change event is triggered, if
         * and only if one value is passed.
         * 
         * @param {Array} deselectValues
         * @param {Boolean} triggerOnChange
         */
        deselect: function(deselectValues, triggerOnChange) {
            if(!$.isArray(deselectValues)) {
                deselectValues = [deselectValues];
            }

            for (var i = 0; i < deselectValues.length; i++) {
                var value = deselectValues[i];

                if (value === null || value === undefined) {
                    continue;
                }

                var $option = this.getOptionByValue(value);
                var $checkbox = this.getInputByValue(value);

                if($option === undefined || $checkbox === undefined) {
                    continue;
                }

                if (this.options.selectedClass) {
                    $checkbox.closest('li')
                        .removeClass(this.options.selectedClass);
                }

                $checkbox.prop('checked', false);
                $option.prop('selected', false);
                
                if (triggerOnChange) {
                    this.options.onChange($option, false);
                }
            }

            this.updateButtonText();
            this.updateSelectAll();
        },
        
        /**
         * Selects all enabled & visible options.
         *
         * If justVisible is true or not specified, only visible options are selected.
         *
         * @param {Boolean} justVisible
         * @param {Boolean} triggerOnSelectAll
         */
        selectAll: function (justVisible, triggerOnSelectAll) {
            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;
            
            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;
            var allCheckboxes = $("li input[type='checkbox']:enabled", this.$ul);
            var visibleCheckboxes = allCheckboxes.filter(":visible");
            var allCheckboxesCount = allCheckboxes.length;
            var visibleCheckboxesCount = visibleCheckboxes.length;
            
            if(justVisible) {
                visibleCheckboxes.prop('checked', true);
                $("li:not(.divider):not(.disabled)", this.$ul).filter(":visible").addClass(this.options.selectedClass);
            }
            else {
                allCheckboxes.prop('checked', true);
                $("li:not(.divider):not(.disabled)", this.$ul).addClass(this.options.selectedClass);
            }
                
            if (allCheckboxesCount === visibleCheckboxesCount || justVisible === false) {
                $("option:not([data-role='divider']):enabled", this.$select).prop('selected', true);
            }
            else {
                var values = visibleCheckboxes.map(function() {
                    return $(this).val();
                }).get();
                
                $("option:enabled", this.$select).filter(function(index) {
                    return $.inArray($(this).val(), values) !== -1;
                }).prop('selected', true);
            }
            
            if (triggerOnSelectAll) {
                this.options.onSelectAll();
            }
        },

        /**
         * Deselects all options.
         * 
         * If justVisible is true or not specified, only visible options are deselected.
         * 
         * @param {Boolean} justVisible
         */
        deselectAll: function (justVisible) {
            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;
            justVisible = typeof justVisible === 'undefined' ? true : justVisible;
            
            if(justVisible) {              
                var visibleCheckboxes = $("li input[type='checkbox']:not(:disabled)", this.$ul).filter(":visible");
                visibleCheckboxes.prop('checked', false);
                
                var values = visibleCheckboxes.map(function() {
                    return $(this).val();
                }).get();
                
                $("option:enabled", this.$select).filter(function(index) {
                    return $.inArray($(this).val(), values) !== -1;
                }).prop('selected', false);
                
                if (this.options.selectedClass) {
                    $("li:not(.divider):not(.disabled)", this.$ul).filter(":visible").removeClass(this.options.selectedClass);
                }
            }
            else {
                $("li input[type='checkbox']:enabled", this.$ul).prop('checked', false);
                $("option:enabled", this.$select).prop('selected', false);
                
                if (this.options.selectedClass) {
                    $("li:not(.divider):not(.disabled)", this.$ul).removeClass(this.options.selectedClass);
                }
            }
        },

        /**
         * Rebuild the plugin.
         * 
         * Rebuilds the dropdown, the filter and the select all option.
         */
        rebuild: function() {
            this.$ul.html('');

            // Important to distinguish between radios and checkboxes.
            this.options.multiple = this.$select.attr('multiple') === "multiple";

            this.buildSelectAll();
            this.buildDropdownOptions();
            this.buildFilter();

            this.updateButtonText();
            this.updateSelectAll(true);
            
            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {
                this.disable();
            }
            else {
                this.enable();
            }
            
            if (this.options.dropRight) {
                this.$ul.addClass('pull-right');
            }
        },

        /**
         * The provided data will be used to build the dropdown.
         */
        dataprovider: function(dataprovider) {
            
            var groupCounter = 0;
            var $select = this.$select.empty();
            
            $.each(dataprovider, function (index, option) {
                var $tag;
                
                if ($.isArray(option.children)) { // create optiongroup tag
                    groupCounter++;
                    
                    $tag = $('<optgroup/>').attr({
                        label: option.label || 'Group ' + groupCounter,
                        disabled: !!option.disabled
                    });
                    
                    forEach(option.children, function(subOption) { // add children option tags
                        $tag.append($('<option/>').attr({
                            value: subOption.value,
                            label: subOption.label || subOption.value,
                            title: subOption.title,
                            selected: !!subOption.selected,
                            disabled: !!subOption.disabled
                        }));
                    });
                }
                else {
                    $tag = $('<option/>').attr({
                        value: option.value,
                        label: option.label || option.value,
                        title: option.title,
                        class: option.class,
                        selected: !!option.selected,
                        disabled: !!option.disabled
                    });
                    $tag.text(option.label || option.value);
                }
                
                $select.append($tag);
            });
            
            this.rebuild();
        },

        /**
         * Enable the multiselect.
         */
        enable: function() {
            this.$select.prop('disabled', false);
            this.$button.prop('disabled', false)
                .removeClass('disabled');
        },

        /**
         * Disable the multiselect.
         */
        disable: function() {
            this.$select.prop('disabled', true);
            this.$button.prop('disabled', true)
                .addClass('disabled');
        },

        /**
         * Set the options.
         *
         * @param {Array} options
         */
        setOptions: function(options) {
            this.options = this.mergeOptions(options);
        },

        /**
         * Merges the given options with the default options.
         *
         * @param {Array} options
         * @returns {Array}
         */
        mergeOptions: function(options) {
            return $.extend(true, {}, this.defaults, this.options, options);
        },

        /**
         * Checks whether a select all checkbox is present.
         *
         * @returns {Boolean}
         */
        hasSelectAll: function() {
            return $('li.multiselect-all', this.$ul).length > 0;
        },

        /**
         * Updates the select all checkbox based on the currently displayed and selected checkboxes.
         */
        updateSelectAll: function(notTriggerOnSelectAll) {
            if (this.hasSelectAll()) {
                var allBoxes = $("li:not(.multiselect-item):not(.filter-hidden) input:enabled", this.$ul);
                var allBoxesLength = allBoxes.length;
                var checkedBoxesLength = allBoxes.filter(":checked").length;
                var selectAllLi  = $("li.multiselect-all", this.$ul);
                var selectAllInput = selectAllLi.find("input");
                
                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {
                    selectAllInput.prop("checked", true);
                    selectAllLi.addClass(this.options.selectedClass);
                    this.options.onSelectAll(true);
                }
                else {
                    selectAllInput.prop("checked", false);
                    selectAllLi.removeClass(this.options.selectedClass);
                    if (checkedBoxesLength === 0) {
                        if (!notTriggerOnSelectAll) {
                            this.options.onSelectAll(false);
                        }
                    }
                }
            }
        },

        /**
         * Update the button text and its title based on the currently selected options.
         */
        updateButtonText: function() {
            var options = this.getSelected();
            
            // First update the displayed button text.
            if (this.options.enableHTML) {
                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));
            }
            else {
                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));
            }
            
            // Now update the title attribute of the button.
            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));
        },

        /**
         * Get all selected options.
         *
         * @returns {jQUery}
         */
        getSelected: function() {
            return $('option', this.$select).filter(":selected");
        },

        /**
         * Gets a select option by its value.
         *
         * @param {String} value
         * @returns {jQuery}
         */
        getOptionByValue: function (value) {

            var options = $('option', this.$select);
            var valueToCompare = value.toString();

            for (var i = 0; i < options.length; i = i + 1) {
                var option = options[i];
                if (option.value === valueToCompare) {
                    return $(option);
                }
            }
        },

        /**
         * Get the input (radio/checkbox) by its value.
         *
         * @param {String} value
         * @returns {jQuery}
         */
        getInputByValue: function (value) {

            var checkboxes = $('li input', this.$ul);
            var valueToCompare = value.toString();

            for (var i = 0; i < checkboxes.length; i = i + 1) {
                var checkbox = checkboxes[i];
                if (checkbox.value === valueToCompare) {
                    return $(checkbox);
                }
            }
        },

        /**
         * Used for knockout integration.
         */
        updateOriginalOptions: function() {
            this.originalOptions = this.$select.clone()[0].options;
        },

        asyncFunction: function(callback, timeout, self) {
            var args = Array.prototype.slice.call(arguments, 3);
            return setTimeout(function() {
                callback.apply(self || window, args);
            }, timeout);
        },

        setAllSelectedText: function(allSelectedText) {
            this.options.allSelectedText = allSelectedText;
            this.updateButtonText();
        }
    };

    $.fn.multiselect = function(option, parameter, extraOptions) {
        return this.each(function() {
            var data = $(this).data('multiselect');
            var options = typeof option === 'object' && option;

            // Initialize the multiselect.
            if (!data) {
                data = new Multiselect(this, options);
                $(this).data('multiselect', data);
            }

            // Call multiselect method.
            if (typeof option === 'string') {
                data[option](parameter, extraOptions);
                
                if (option === 'destroy') {
                    $(this).data('multiselect', false);
                }
            }
        });
    };

    $.fn.multiselect.Constructor = Multiselect;

    $(function() {
        $("select[data-role=multiselect]").multiselect();
    });

}(window.jQuery);
;
//选人控件
(function ($) {
    // 控件执行
    // 参数{AutoTrim:true,DefaultValue:datavalue,OnChange:""}
    //可以通过  $("#id").SheetTextBox(参数)  来渲染控件和获取控件对象
    $.fn.FormUser = function (opt) {
        return $.ControlManager.Run.call(this, "FormUser", arguments);
    };

    //选人控件数据,单个页面所有数据库共用
    //原来没有对选人控件设定选择范围，所有控件加载出来unit相同，控件共用一个缓存，增加选择范围后控件各自缓存
    //20161130注释FormUserData，用this.UserData替代
    //$.FormUserData = {
    //    //部门
    //    OrgUnitItems: {},
    //    //标签
    //    //OrgTagItems: [],
    //    //部门用户:{部门ID:[]}
    //    DepUserItems: {},
    //    //用户
    //    UserItems: {},
    //};

    // 构造函数
    $.Controls.FormUser = function (element, ptions, sheetInfo) {
        //原来是$.FormUserData,修改为每个控件各自缓存
        this.UserData = {
            //部门
            OrgUnitItems: {},
            //标签
            //OrgTagItems: [],
            //部门用户:{部门ID:[]}
            DepUserItems: {},
            //用户
            UserItems: {},
        };
        //选择数据集合
        this.Units = {};
        //所有选择的元素
        this.UnitsElement = null;
        //搜索输入框元素
        this.SearchElement = null;
        this.SearchTxtElement = null;

        //组织机构容器
        this.SelectorPanel = null;
        this.OrgTreePanel = null;
        this.OrgListPanel = null;
        this.IsOverSelectorPanel = false;
        this.FormUserHandler = "/Form/OnAction"; //SheetUserAction
        this.Options = ptions;
        this.CpLock = false;
        $.Controls.FormUser.Base.constructor.call(this, element, ptions, sheetInfo);
        this.FromNum = 0;
        this.ToNum = 10;
        // this.IsQueryControl = false;//true为查询条件使用，false：作为表单控件使用
    };

    // 继承及控件实现
    $.Controls.FormUser.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            this.CurrentDocument = $(this.Element).closest("html").length == 1 ? $(this.Element).closest("html").parent() : $(document);
            this.CurrentBody = $(this.Element).closest("body").length == 1 ? $(this.Element).closest("body") : $("body");
            //是否在子表里面子表
            this.IsInGridView = !$.isEmptyObject(this.ObjectId);

            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }
            // 拥有者不能选部门
            if (this.DataField == "OwnerId") {
                this.OrgUnitVisible = false;
                $(this.Element).attr("data-OrgUnitVisible", false);
            }
            //拥有者，所属部门必填写
            if (this.DataField == "OwnerId" || this.DataField == "OwnerDeptId") {
                this.Required = true;
            }
            //渲染界面
            this.HtmlRender();

            //初始化默认值
            this.InitValue();

            //绑定事件
            this.BindEvents();
        },

        //初始化值
        InitValue: function () {
            if (this.Value) {
                this.SetValue(this.Value);
                if ($.SmartForm.ResponseContext.IsCreateMode) {
                    var val = this.Value.constructor == Array ? this.Value[0] : this.Value;
                    this.MappingControlsHandler(val);
                }
            }
        },
        //判断默认只是否在给定选人范围内
        CheckUnitValidate: function (Obj) {
            //2017/6/12修改，原因是关联携带了大量数据过来校验导致超时
            return Obj;

            var that = this;
            var newObj = [];
            if ($.isEmptyObject(that.UserData.OrgUnitItems)) {
                //if ($.SmartForm.ResponseContext && !$.SmartForm.ResponseContext.IsCreateMode) {
                //如果不是创建模式则不执行check，因为非创建模式的数据已经check过
                //if (Obj.constructor == String || Obj.constructor == Object) {
                //    newObj.push(Obj);
                //}
                //else if (Obj.constructor == Array) {
                //    newObj = Obj;
                //}
                //return newObj;
                //}
                var UnitIds = [];
                if (Obj.constructor == Object) {
                    UnitIds.push(Obj.UnitID || Obj.UnitId);
                } else if (Obj.constructor == Array) {
                    for (var i = 0; i < Obj.length; i++) {
                        if (Obj[i].constructor == Object) {
                            UnitIds.push(Obj[i].UnitID || Obj[i].UnitId);
                        }
                        else if (Obj[i].constructor == String) {
                            UnitIds.push(Obj[i]);
                        }
                    }
                } else if (Obj.constructor == String) {
                    UnitIds.push(Obj);
                }
                //请求后台，判断Obj是否在给定范围内，如果在给定范围内则返回Unit对象，后续调用AddChoice
                var unitTemp = '';
                for (var i = 0; i < UnitIds.length; i++) {
                    unitTemp += UnitIds[i] + ';';
                }

                var params = {
                    ActionName: "SheetUserAction",
                    Command: "CheckUnitValidate",
                    UnitSelectionRange: that.UnitSelectionRange,
                    UnitIds: unitTemp
                }
                this.Ajax(
                    that.FormUserHandler,
                    "POST",
                    { PostData: JSON.stringify(params) },
                    function (data) {
                        newObj = data.ReturnData.UnitItems;
                    }, false);
            }
            return newObj;
        },
        //设置值
        SetValue: function (Obj) {
            //对于设置默认值的情况，开始时候没有LoadUnitsTree
            //需要考虑到值是否在选人范围内以及是否显示离职人员
            //这里要加载所有的unit，判断值是否在给定unit内
            //加载树
            var that = this;
            if (Obj == void 0 || Obj == null || Obj == "" || Obj.length == 0) {
                this.ClearChoices();
                return;
            }

            //if (!that.SelectorPanel) {
            //    that.RenderNext();
            //    $(that.$InputBody).unbind("click.UserOnce");
            //}

            //要校验的情况
            //1.创建模式
            //2.修改模式可写且没有值
            if (this.UnitSelectionRange) {
                //有设置选人范围
                if ($.SmartForm && $.SmartForm.ResponseContext && $.SmartForm.ResponseContext.IsCreateMode) {
                    //创建模式
                    Obj = that.CheckUnitValidate(Obj);
                } else {
                    //修改模式
                    if (this.Editable && (Obj == void 0 || Obj == null || Obj == "" || Obj.length == 0)) {
                        //可编辑
                        Obj = that.CheckUnitValidate(Obj);
                    }
                }
            }

            //if (this.UnitSelectionRange && this.Editable)
            //    Obj = that.CheckUnitValidate(Obj);

            if (!Obj) { return; } //CheckUnitValidate可能返回空

            if (Obj.constructor == Object) {
                this.AddChoice(Obj);
            }
            else if (Obj.constructor == Array) {
                for (var i = 0; i < Obj.length; i++) {
                    if (Obj[i].constructor == Object) {
                        this.AddChoice(Obj[i]);
                    }
                    else if (Obj[i].constructor == String) {
                        this.AddUserID(Obj);
                        break;
                    }
                }
            }
            else if (Obj.constructor == String) {
                date = new Date();
                this.AddUserID(Obj);
            }
            //this.OnChange();
        },

        //返回 {UnitID1:{UnitID: , Code:, DisplayName:Type, Icon ,ParentId},UnitID1:{UnitID: , Code:, DisplayName: }}对象
        GetValue: function () {
            return $.IClone(this.Units);
        },

        GetUnitIDs: function () {
            return this.GetUnitIds();
        },

        //读取选中的UnitID
        GetUnitIds: function () {
            var ValObjs = this.GetValue();
            var UintIDs = new Array();
            for (var key in ValObjs) {
                UintIDs.push(key);
            }
            return UintIDs;
        },

        //获取显示
        GetText: function () {
            var userNames;
            for (var ObjectId in this.Units) {
                if (this.IsMultiple) {
                    if (userNames == void 0) userNames = new Array();
                    userNames.push(this.Units[ObjectId].DisplayName);
                }
                else {
                    userNames = this.Units[ObjectId].DisplayName;
                }
            }
            return userNames == void 0 ? "" : userNames.toString();
        },

        //保存数据
        SaveDataField: function () {
            var result = {
            };
            if (!this.Visible) return result;
            var oldresult = this.DataItem;
            if (!oldresult) {
                return {
                };
            }

            var UnitIDs = this.GetUnitIDs();
            if (oldresult.Value != UnitIDs) {
                result[this.DataField] = UnitIDs;
                return result;
            }
            result[this.DataField] = [];
            return result;
        },

        //根据ChoiceID，获取已经选择的组织
        GetSelectUnitByChoiceID: function (choiceID) {
            if (this.Units == null || this.Units.length == 0) return null;
            for (var key in this.Units) {
                if (this.Units[key].ChoiceID == choiceID) {
                    return this.Units[key];
                }
            }
            return null;
        },

        //渲染样式
        HtmlRender: function () {
            var $Element = $(this.Element);
            $Element.addClass("SheetUser");
            if (!this.IsInGridView) {
                //不在子表里面
                $Element.css("position", "relative")
            }
            if (!this.Editable) {
                this.$Input = $("<pre>").css("border", "none");
                this.$InputBody.append(this.$Input);
                return;
            }
            //设置当前控件的ID
            this.ID = $.IGuid();

            //this.$InputBody.attr("ID", this.ID);

            //this.UnitsElement = $("<div>").attr("data-targetid", this.ID).attr("name", this.DataField).addClass("form-control form-query-add").css("overflow", "auto").css("width", "100%").css("min-height", "30px").css("max-height", "100px");//.width(this.Width);
            this.UnitsElement = $('<div data-targetid="' + this.ID + '" name="' + this.DataField + '" class="form-control form-user-add icon-arrow-down-full" style="overflow:auto; width:100%; min-height:32px; max-height：100px;"></div>')
            //this.$Input = $("<input>").addClass("SheetUser-Input");
            this.$Input = $("<input class='SheetUser-Input' style='width:1px;display:none'>");
            var that = this;
            this.$Input.on("compositionstart", function () {
                that.CpLock = true;
            });
            this.$Input.on("compositionend", function () {
                that.CpLock = false;
            });
            //this.UnitsElement.append(this.$Input);
            this.$InputBody.attr("ID", this.ID).css({ "min-width": "100px" }).append(this.UnitsElement.append(this.$Input));

            //作为筛选条件时显示样式
            //if (this.IsQueryControl) {
            //this.UnitsElement.removeClass("icon-arrow-down-full");
            //this.UnitsElement.removeClass("icon-arrow-down-full").css("border", "1px dashed #cccccc");
            //this.$tipDiv = $("<div style='width:98%;height:30px;float:right;text-align:center;'><div><span class='sp_placeholder'>点击选择" + this.DisplayName.replace(/^\s+|\s+$/g, '') + "</span></div></div>")
            //this.UnitsElement.append(this.$tipDiv);
            //}

            var placeHolder = "点击选择";

            if (this.IsQueryControl) {
                placeHolder += this.DisplayName.replace(/^\s+|\s+$/g, '');
            } else {
                if (this.OrgUnitVisible && this.UserVisible) {
                    placeHolder += "人员/部门";
                } else if (this.OrgUnitVisible && !this.UserVisible) {
                    placeHolder += "部门";
                } else if (!this.OrgUnitVisible && this.UserVisible) {
                    placeHolder += "人员";
                }
            }
            this.UnitsElement.removeClass("icon-arrow-down-full");
            this.UnitsElement.removeClass("icon-arrow-down-full").css("border", "1px dashed #cccccc");
            this.$tipDiv = $("<div style='width:98%;height:30px;float:right;text-align:center;'><div><span class='sp_placeholder'>" + placeHolder + "</span></div></div>")
            this.UnitsElement.append(this.$tipDiv);
        },

        RenderNext: function () {
            var that = this;

            that.$SearchDiv = $("<div data-targetid='" + that.ID + "' data-formmultiuserpanel='searchdiv' class='searchdiv' ><input class='searchinput' type='text'></input></div>")
            that.$SearchInput = that.$SearchDiv.find("input"); //搜索输入框
            that.Placeholder = "输入" + that.DisplayName + "查找";
            that.$SearchInput.attr("placeholder", that.Placeholder);

            that.$SearchInput.on("compositionstart", function () {
                that.CpLock = true;
            });
            that.$SearchInput.on("compositionend", function () {
                that.CpLock = false;
            });

            //搜索面板
            //that.$SearchPanel = $("<div>").attr("data-targetid", that.ID).addClass("SheetUser-SelectorPanel").attr("data-FormUserPanel", "SearchPanel");
            that.$SearchPanel = $("<div data-targetid='" + that.ID + "' class='SheetUser-SelectorPanel' data-FormUserPanel='SearchPanel' style='overflow-y: auto;'>");
            $(that.$SearchPanel).on('scroll', 'ul', function () { });

            //组织机构选择面板
            //that.SelectorPanel = $("<div>").attr("data-targetid", that.ID).addClass("SheetUser-SelectorPanel").attr("data-FormUserPanel", "SelectorPanel");//.width(this.Width);
            that.SelectorPanel = $("<div data-targetid='" + that.ID + "' class='SheetUser-SelectorPanel' data-FormUserPanel='SelectorPanel'>");
            //that.SelectorPanel.append(that.$SearchDiv);
            //组织标签
            //that.SelectorTabs = $("<ul>").addClass("nav").addClass("nav-tabs user-tabs");
            that.SelectorTabs = $("<ul class='nav nav-tabs user-tabs'>");
            if (that.UserVisible) {
                //that.SelectorTabs.append($("<li>").append("<a>用户</a>").attr("data-tabtype", "tab_Users").css("cursor", "pointer"));
                that.SelectorTabs.append($("<li data-tabtype='tab_Users' style='cursor:pointer;'><a>用户</a></li>"));
            }
            if (that.OrgUnitVisible) {
                //that.SelectorTabs.append($("<li>").append("<a>部门</a>").attr("data-tabtype", "tab_Deps").css("cursor", "pointer"));
                that.SelectorTabs.append($("<li data-tabtype='tab_Deps' style='cursor:pointer;'><a>部门</a></li>"));
            }
            that.SelectorPanel.append(that.SelectorTabs);

            //用户面板
            //that.UsersDataPanel = $("<div>").addClass("SheetUser_DataPanel").addClass("row").addClass("SheetUser_tab_Users");
            that.UsersDataPanel = $("<div class='SheetUser_DataPanel row SheetUser_tab_Users'>");
            //部门面板
            //that.DepsDataPanel = $("<div>").addClass("SheetUser_DataPanel").addClass("row").addClass("SheetUser_tab_Deps");
            that.DepsDataPanel = $("<div class='SheetUser_DataPanel row SheetUser_tab_Deps'>");

            that.SelectorPanel.append(that.DepsDataPanel);
            that.SelectorPanel.append(that.UsersDataPanel);

            that.$UserPanel = $("<div class='userpanel'>");
            that.$UserPanel.append(that.$SearchDiv).append(that.SelectorPanel).append(that.$SearchPanel);

            //that.$UserPanel.appendTo("body");
            that.$UserPanel.appendTo(this.CurrentBody);

            //绑定对应事件
            //页签切换
            that.SelectorTabs.find("li").unbind("click.SelectorTabs").bind("click.SelectorTabs", that, function (e) {
                if ($(this).hasClass("active")) return;
                var that = e.data;
                var $parent = $(this).parent();
                $parent.find("li").removeClass("active");
                $(this).addClass("active");

                var tabType = $(this).attr("data-tabtype");
                that.SelectorPanel.find(".SheetUser_DataPanel").hide();
                that.SelectorPanel.find(".SheetUser_" + tabType).show();
                that.LoadOrgByTabType(tabType);
                setTimeout(function () {
                    e.data.$SearchInput[0].focus();
                }, 50)
            });

            //点击到当前元素，设置input焦点
            $(that.$InputBody).children("div").unbind("click.FormUser").bind("click.FormUser", that, function (e) {
                var $target = $(e.target);
                if (!$target.closest("span").hasClass("SheetUser-Item")) {
                    e.data.FocusInput.apply(e.data);
                    //弹出对话框后手动获取搜索框焦点,不执行绑定的focusin事件
                    setTimeout(function () {
                        e.data.$SearchInput[0].focus();
                    }, 50)
                    // 停止冒泡，防止与SheetQuery冲突而添加
                    e.stopPropagation();
                }
            });

            that.$UserPanel.children("div").unbind("click.FormUser").bind("click.FormUser", that, function (e) {
                var $target = $(e.target);
                if (!$target.closest("li").hasClass("SheetUser-LiItem")) {
                    //e.data.$Input.focus();
                    //e.data.$SearchInput.focus();
                    // 停止冒泡，防止与SheetQuery冲突而添加
                    e.stopPropagation();
                }
            });

            //得到焦点显示
            $(that.$SearchInput).unbind("focusin.Input").bind("focusin.Input", that, function (e) {
                //e.data.FocusInput.apply(e.data);
                e.data.$SearchInput.removeAttr("placeholder");
            });

            $(that.$SearchInput).off("input propertychange").on("input propertychange", that, function (e) {
                //IE下才执行
                var isIE = navigator.userAgent.indexOf("MSIE") > -1 || navigator.userAgent.indexOf("Edge") > -1
                    || (navigator.userAgent.indexOf("Trident") > -1 && navigator.userAgent.indexOf("rv") > -1);
                if (isIE) {
                    var that = e.data;
                    that.TimeOut && window.clearTimeout(that.TimeOut);
                    that.TimeOut = setTimeout(function () {
                        that.SearchOrg.apply(that, [that]);
                    }, 500);
                }
            });

            //控件输入
            $(that.$SearchInput).unbind("keyup.SearchTxtElement").bind("keyup.SearchTxtElement", that, function (e) {
                e.data.SetSearchTxtElementWidth.apply(e.data);

                var that = e.data;
                that.TimeOut && window.clearTimeout(that.TimeOut);
                that.TimeOut = setTimeout(function () {
                    that.SearchOrg.apply(that, [that]);
                }, 500);
            });

            $(that.$SearchInput).unbind("keydown.SearchTxtElement").bind("keydown.SearchTxtElement", that, function (e) {
                if (e.keyCode == 8 && $(this).val() == "" && $(this).prev().length > 0) {
                    var unit = e.data.GetSelectUnitByChoiceID.apply(e.data, [$(this).prev().attr("id")]);
                    e.data.RemoveChoice.apply(e.data, [unit.UnitID]);
                }
            });

            //点击屏幕的其他地方 $(document)
            $(this.CurrentDocument).unbind("mousedown." + that.ID).bind("mousedown." + that.ID, that, function (e) {
                //edit by xc 特殊情况处理
                if ($(e.target).hasClass("row") && $(e.target).children(".col-md-6").children("div[data-controlkey='FormUser']").length > 0) {
                    return false;
                }
                else if ($(e.target).closest("div[data-targetid='" + e.data.ID + "']").length == 0) {
                    e.data.FocusOutput.apply(e.data);
                    e.stopPropagation();
                }
            });
        },

        //绑定事件
        BindEvents: function () {
            var that = this;
            //不可用
            if (!this.Editable) {
                return;
            }

            //点击选人控件再渲染
            $(this.$InputBody).one("click.UserOnce", function () {
                that.RenderNext.apply(that);
                that.FocusInput();
            });
            //获取焦点选人控件再渲染
            $(this.$InputBody).find("input").on("focus.UserOnce", function () {
                if (!that.$UserPanel) {
                    that.RenderNext.apply(that);
                }
                that.FocusInput();
                $(that.$InputBody).unbind("click.UserOnce");
            });

            //映射关系
            if (!$.isEmptyObject(this.MappingControls)) {
                this.BindChange("sys_MappingControlsHandler", function () {
                    var val = that.GetValue();
                    if (val != null) {
                        for (var key in val) {
                            that.MappingControlsHandler.apply(that, [val[key]]);
                            break;
                        }
                    }
                });
            }

        },

        //设置输入框的宽度
        SetSearchTxtElementWidth: function () {
            //var w = "1px";
            //var length = this.$Input.val().length;
            //if (length > 0) {
            //    w = length * 15 + "px";
            //    this.$Input.removeAttr("PlaceHolder", this.PlaceHolder);
            //}
            //$(this.$Input).width(w);
        },

        //获取焦点焦点
        FocusInput: function () {
            //if (this.IsInGridView) {
            //    var position = this.$InputBody.offset();
            //    this.SelectorPanel.css("top", position.top + this.$InputBody.height());
            //    this.SelectorPanel.css("left", position.left);
            //    this.SelectorPanel.width(this.UnitsElement.width());
            //}
            // edit by xiechang
            var padding = this.$InputBody.css("padding-left");
            padding = padding ? parseInt(padding) : 0;
            var position = this.$InputBody.offset();
            var WindowW = $(this.CurrentBody).outerWidth(); // $(window).outerWidth();




            if (this.IsInGridView) {
                if (WindowW - position.left < 500) {
                    this.$UserPanel.css("right", WindowW - position.left - this.$InputBody.outerWidth());
                } else {
                    this.$UserPanel.css("left", position.left);
                }
            }
            else {
                if (WindowW - position.left < 500) {
                    this.$UserPanel.css("right", this.$InputBody.css("paddingRight"));
                } else {
                    this.$UserPanel.css("left", position.left + padding);
                }
            }


            ////判断控件距离底部的可视高度
            //var bottom = $(window).height() - position.top - this.$InputBody.height() + $(window).scrollTop();
            //var userPanelHeight = $(this.$UserPanel).height();

            //if (bottom > userPanelHeight) {
            //    this.$UserPanel.css("top", position.top + this.$InputBody.height());
            //} else {
            //    this.$UserPanel.css("top", position.top - userPanelHeight);
            //}

            this.$UserPanel.css("top", position.top + this.$InputBody.height());

            //this.$SearchDiv.css("top", position.top + this.$InputBody.height());
            //this.SelectorPanel.css("top", position.top + this.$InputBody.height() + this.$SearchDiv.height());
            //this.$SearchPanel.css("top", position.top + this.$InputBody.height() + this.$SearchDiv.height());

            //绑定元素父元素的滚动事件，重新赋值$UserPanel的高度和left
            var that = this;
            $.each($(this.Element).parents(), function (index, obj) {
                $(obj).scroll(function () {
                    that.$UserPanel.css("top", that.$InputBody.height() + that.$InputBody.offset().top);
                });
            });

            if (this.SelectorPanel.is(":visible")) return;



            //其他的选人控件都隐藏(包括单人和多人 edit by xc)
            //$("div[data-FormUserPanel='SelectorPanel']").hide();
            $("div[data-FormMultiUserPanel='SelectorPanel'],div[data-FormUserPanel='SelectorPanel'],div[data-formmultiuserpanel='searchdiv']").hide();
            //下拉框隐藏
            $("ul.drop-list.drop-list_s").hide();
            //关联表单隐藏
            $(".form-query-dropdown").hide();
            if (this.SelectorTabs.find("li.active").length == 0) {
                this.SelectorTabs.find("li:first").click();
            }
            var searchkey = $(this.$SearchInput).val().trim();
            if (!searchkey) {
                this.SelectorPanel.show();
                this.$SearchPanel.hide();
                this.$SearchDiv.show();
            } else {
                //有搜索关键字时，点击搜索结果div
                this.$SearchDiv.show();
                this.$SearchPanel.show();
            }

            //弹窗中（非表单中）选人控件超出bottom处理
            if ($(this.$InputBody).parents(".sheet_container").length == 0) {
                if (this.$InputBody.parents(".modal-dialog").length == 1) {
                    var bottom = $(window).height() - position.top - this.$InputBody.height();
                    var userPanelHeight = $(this.$UserPanel).height();
                    if (bottom < userPanelHeight) {
                        this.SelectorPanel.css("height", bottom - 50);
                        this.SelectorPanel.find(".SheetUser_DataPanel").css("height", bottom - 90);
                    }
                }
            }
        },

        //失去焦点
        FocusOutput: function () {
            if (this.SelectorPanel) {
                this.SelectorPanel.hide();
                this.$SearchPanel.hide();
                this.$SearchDiv.hide();
                //this.$Input.val("");
                this.$SearchInput.val("");
                this.Required && (this.UnitsElement.text() != "" && this.UnitsElement.css({ "border": "1px solid #ddd", "box-shadow": "none" }));

                $("body").css("overflow", "auto");
            }
        },

        //添加:UserID/UserCode
        AddUserID: function (UserID) {
            var that = this;
            //需要后台取数的id
            var ids = [];
            var cacheItems = [];
            if (UserID.constructor == Array) {
                for (var i = 0; i < UserID.length; i++) {
                    var id = UserID[i];
                    if (!that.UserData.UserItems[id]) {
                        ids.push(id);
                    }
                    else {
                        cacheItems.push(that.UserData.UserItems[id]);
                    }
                }
            }
            else {
                if (!that.UserData.UserItems[UserID]) {
                    ids.push(UserID);
                }
            }

            if (ids.length > 0) {
                var param = {
                    ActionName: "SheetUserAction", Command: "GetUserProperty", UnitID: JSON.stringify(ids)
                };
                //添加已经存在缓存中的对象
                if (cacheItems && cacheItems.length > 0) {
                    for (var item in cacheItems) {
                        that.AddChoice.apply(that, item);
                    }
                }

                //  从后台添加没在缓存中的对象
                this.Ajax(
                    that.FormUserHandler,
                    "POST",
                    { PostData: JSON.stringify(param) },
                    function (data) {
                        if (data && data.ReturnData.UnitItems) {
                            that.AddUserData.apply(that, [data.ReturnData.UnitItems]);
                            that.AddChoice.apply(that, data.ReturnData.UnitItems);
                        }
                    },
                    true);
            }
            else if (UserID.constructor == Array) {
                for (var i = 0; i < UserID.length; i++) {
                    var id = UserID[i];
                    if (that.UserData.UserItems[id]) {
                        that.AddChoice(that.UserData.UserItems[id]);
                    }
                }
            } else if (that.UserData.UserItems[UserID]) {
                that.AddChoice(that.UserData.UserItems[UserID]);
            }
        },

        //添加用户数据到缓存中
        AddUserData: function (UnitItems) {
            for (var i = 0; i < UnitItems.length; i++) {
                this.UserData.UserItems[UnitItems[i].id] = UnitItems[i];
            }
        },

        //添加选择
        AddChoice: function (UnitObject) {
            console.log("addchoice!!!!!!!!!!")
            if (!UnitObject) return;
            if (UnitObject.ObjectId && !UnitObject.id)
                UnitObject.id = UnitObject.ObjectId;
            if (UnitObject.Name && !UnitObject.name)
                UnitObject.name = UnitObject.Name;
            if (UnitObject.userName && !UnitObject.name)
                UnitObject.name = UnitObject.userName;
            if (!UnitObject.id) return;
            // if (this.Units[UnitObject.id]) return;
            if (this.Units[UnitObject.id]) {
                if (!this.IsMultiple) {
                    this.FocusOutput();
                }
                return;
            }

            if (!this.IsMultiple) {
                this.ClearChoices(true);
            }
            var NewUnitObject = $.extend(true, {}, UnitObject);

            this.Units[NewUnitObject.id] = NewUnitObject;


            this.OnChange(NewUnitObject);
            this.Validate();
            if (!this.Editable) {
                if (this.Visible)
                    this.$Input.text(NewUnitObject.name);
                return;
            }

            var choiceID = $.IGuid();
            NewUnitObject.ChoiceID = choiceID;
            var choice = $("<span class='SheetUser-Item label label-info icon-close-middle'></span>");

            var icon = "";
            switch (NewUnitObject.Type) {
                case 1:
                    icon = "ivu-icon ivu-icon-ios-briefcase";
                    break;
                case 2:
                    icon = "ivu-icon ivu-icon-person-stalker";
                    break;
                case 4:
                    icon = "ivu-icon ivu-icon-people"; //glyphicon glyphicon-user
                    break;
            }
            //choice.append($("<i>").addClass(icon));
            choice.append(NewUnitObject.name);
            choice.attr("id", choiceID).data("id", NewUnitObject.id);
            this.$Input.before(choice);

            var that = this;
            //可用
            if (this.Editable) {
                choice.unbind("click.choice").bind("click.choice", this, function (e) {
                    e.data.RemoveChoice.apply(e.data, [$(this).data("id")]);
                    e.data.ClearMapping.apply(e.data);
                    // //
                    that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                });

                // 放到onchage事件里面， 映射关系
                //if (!$.isEmptyObject(this.MappingControls)) {
                //    this.MappingControlsHandler(NewUnitObject);
                //}
            }

            if (!this.IsMultiple) {
                this.FocusOutput();
            }

            //作为筛选控件时，添加元素时需要移除
            if (this.$tipDiv) {
                this.$tipDiv.remove();
            }
            console.log(NewUnitObject);
            $(this.DepsDataPanel).find("i[data-id='" + NewUnitObject.id + "']").addClass("icon-Check");
            $(this.UserListPanel).find("i[data-id='" + NewUnitObject.id + "']").addClass("icon-Check");
            //$(this).find("i:last").removeClass("icon-Check");
        },

        //清楚所有的选择
        ClearChoices: function (notApplyOnChange) {
            for (var id in this.Units) {
                this.RemoveChoice(id, notApplyOnChange);
            }
            //清空的时候，清空缓存
            if (!this.UseDataCache) {
                //不用缓存，每次都清空
                this.UserData = {
                    //部门
                    OrgUnitItems: {
                    },
                    //标签
                    //OrgTagItems: [],
                    //部门用户:{部门ID:[]}
                    DepUserItems: {
                    },
                    //用户
                    UserItems: {},
                };
                if (this.DepsDataPanel) {
                    this.DepsDataPanel.data("IsLoad", false);
                    this.UsersDataPanel.data("IsLoad", false);
                    this.SelectorTabs.find("li.active").removeClass("active");
                }
            }
        },

        //移除选择
        RemoveChoice: function (id, notApplyOnChange) {
            if (!id) return;
            if (this.Units[id]) {
                if (this.Editable) {
                    $(this.Element).find("#" + this.Units[id].ChoiceID).remove();
                }
                else {
                    this.$Input.text("");
                }
                var typeStr = this.Units[id].Type || this.Units[id].UnitType;
                $(this.$UserPanel).find("i[data-unitid='" + id + "']").removeClass("icon-Check").parent().data("Exist", false);
                delete this.Units[id];
            }
            this.Validate();
            if (!notApplyOnChange)
                this.OnChange(this.Units[id]);
        },

        //判断是存在选项
        ExistChoice: function (UnitID) {
            if (this.Units[UnitID])
                return true;
            else
                return false;
        },

        //加载类型
        LoadOrgByTabType: function (tabType) {
            switch (tabType) {
                case "tab_Deps":
                    this.LoadDepsData();
                    break;
                case "tab_Users":
                    this.LoadUsersData();
                    break;
            }
        },

        //加载组织机构树
        LoadDepsData: function ($el, UnitID) {
            if (this.DepsDataPanel.data("IsLoad")) return;
            this.DepsDataPanel.data("IsLoad", true)
            this.DepsDataPanel.html("");
            this.LoadUnitsTree(this.DepsDataPanel, "tab_Deps");
        },

        //加载部门树
        LoadUnitsTree: function ($panel, tabType) {
            var that = this;
            var isDeps = false;
            //是部门页签，可以选择部门
            if (tabType && tabType == "tab_Deps") {
                isDeps = true;
            }

            if (!$.isEmptyObject(that.UserData.OrgUnitItems)) {
                var $ul = $("<ul class='nav'>");//.addClass("nav");
                var root = that.GetUnitsByParentId(that.UserData.OrgUnitItems);
                //$ul.append(that.CreateUnitsItem(root[0], isDeps));
                for (var i = 0; i < root.length; i++) {
                    $ul.append(that.CreateUnitsItem(root[i], isDeps));
                }
                $panel.append($ul);
                //设置树的展开关闭
                if ($ul.metisMenu)
                    $ul.metisMenu();
                $ul.find("a:first,a:first>span.icon-xiangyou").data("IsSystem", true).click();
            }
            else {
                var actionCommand = "LoadUnit";
                if (that.UnitSelectionRange) {
                    //如果设置了选人范围则调用下面
                    actionCommand = "LoadOwnAndChildUnit";//如果设置了选人范围则加载制定组织和其下级
                }

                //更新选人范围
                that.UpdateUnitSelectionRange.apply(that);

                var params = {pid: '0'};
                this.Ajax(
                    '/ctg-workflow/organ/childList',
                    "POST",
                    params,
                    function (data) {
                        that.UserData.OrgUnitItems = data.page.result;
                        if (data.page.result.length == 0) {
                            return;
                        }
                        that.LoadUnitsTree($panel, tabType);
                    });
                // setTimeout(()=>{
                //     console.log(11111111111111)
                //  var data ={"Successful":true,"ErrorMessage":null,"Logined":true,"ReturnData":{"UnitItems":[{"ParentId":"","Type":1,"Icon":"glyphicon-folder-close","UnitID":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Code":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","DisplayName":"mq项目组","DeptId":0,"HasChild":false}]}}
                //  that.UserData.OrgUnitItems = data.ReturnData.UnitItems;
                //         if (data.ReturnData.UnitItems.length == 0) {
                //             return;
                //         }
                //         that.LoadUnitsTree($panel, tabType);
                // },1000)

            }
        },

        //校验
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            if ($.isEmptyObject(val)) {
                //为空时添加
                if (this.IsQueryControl && this.UnitsElement.find(".sp_placeholder").length == 0) {
                    this.UnitsElement.append(this.$tipDiv);
                }
                if (this.Required) {
                    this.AddInvalidText(this.UnitsElement, "必填");
                    return false;
                }
            }

            this.RemoveInvalidText(this.UnitsElement);

            if (this.IsQueryControl) {
                this.UnitsElement.removeClass("icon-arrow-down-full").css("border", "1px dashed #D7D5D5");
            }
            return true;
        },

        //创建部门的<li>对象
        CreateUnitsItem: function (UnitItem, isDeps) {
            var that = this;
            var $li = $("<li>");
            var $a = $("<a>");
            if (UnitItem.HasChild) {
                $a.append("<span class='fa icon-xiangyou sheet-angel'></span>");
            }
            else {
                $a.append("<span class='fa icon-xiangyou sheet-angel no-child'></span>");
            }
            var icon = "fa icon-xiashuguanli";
            if (UnitItem.Type == 1) {
                //公司
                icon = "fa icon-gongsi";
            } else if (UnitItem.Type == 8) {
                if (isDeps) {
                    //如果是角色，且是“部门”面板，则不添加项
                    return;
                }
                //角色
                icon = "fa icon-man";
            } else {
                icon = "fa icon-xiashuguanli";
            }
            $a.append("<i class='" + icon + "'></i>").append(UnitItem.name).data("UnitItem", UnitItem);
            if (isDeps) {
                $li.addClass("SheetUser-LiItem");

                //如果是部门tab的话，炫耀可选
                var $stateIcon = $("<i class='glyphicon'></i>").attr({ "data-UnitID": UnitItem.id, "data-Type": UnitItem.Type });
                $a.append($stateIcon);
                $a.click(function (e) {
                    if (e.target.tagName.toLowerCase() == "span") return;
                    if ($(this).data("IsSystem")) {
                        $(this).data("IsSystem", false)
                        return;
                    }
                    var UnitObject = $(this).data("UnitItem");
                    if ($(this).data("Exist")) {
                        that.RemoveChoice.apply(that, [UnitObject.id]);
                        $(this).find("i:last").removeClass("icon-Check");
                        $(this).data("Exist", false);
                    }
                    else {

                        $(this).find("i:last").addClass("icon-Check");
                        $(this).data("Exist", true);
                        that.AddChoice.apply(that, [UnitObject]);
                    }
                    ////
                    that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                });
            }
            else {
                $a.click(function (e) {
                    //if (e.target.tagName.toLowerCase() == "span") return;
                    var UnitObject = $(this).data("UnitItem");
                    that.LoadUsersByParenID.apply(that, [UnitObject.id], that.ShowUnActive);
                });
            }

            $li.append($a);
            if (UnitItem.HasChild) {
                $a.children(".sheet-angel").click(function (e) {
                    var pthat = this;
                    if ($(this).closest("li").hasClass("active")) {
                        $(this).removeClass("icon-chevron-down-fill").addClass("icon-xiangyou");
                        $(this).closest("li").removeClass("");
                        $(this).closest("li").find("ul").hide();
                    }
                    else {
                        $(this).closest("li").find("ul").remove();


                        var children = that.GetUnitsByParentId(UnitItem.id);
                        if (children.length > 0) {
                            var $ul = $("<ul>").addClass("nav").addClass("SheetUser_SubTreePanel");
                            for (var i = 0; i < children.length; i++) {
                                $ul.append(that.CreateUnitsItem(children[i], isDeps));
                            }
                            $(this).closest("li").append($ul);
                            if ($ul.metisMenu)
                                $ul.metisMenu();
                        }

                        setTimeout(function () {
                            if ($(pthat).closest("li").hasClass("active")) {
                                $(pthat).removeClass("icon-xiangyou").addClass("icon-chevron-down-fill");
                            } else {
                                $(pthat).removeClass("icon-chevron-down-fill").addClass("icon-xiangyou");
                            }
                        }, 100);
                    }
                });
            }

            return $li;
        },

        //根据父ID获取子部门
        GetUnitsByParentId: function (parentId) {
            var that = this;
            var units = [];
            for (var i = 0; i < that.UserData.OrgUnitItems.length; i++) {
                if (that.UserData.OrgUnitItems[i].ParentId == parentId) {
                    units.push(that.UserData.OrgUnitItems[i]);
                }
            }
            // 从后台读取下级部门
            if (units.length == 0) {
                // var actionCommand = "LoadUnit";
                //if (that.UnitSelectionRange) {
                //    //如果设置了选人范围则调用下面
                //    actionCommand = "LoadOwnAndChildUnit";//如果设置了选人范围则加载制定组织和其下级
                //}
                var params = {
                    pid: parentId
                }
                this.Ajax(
                    '/ctg-workflow/organ/childList',
                    "POST",
                    params,
                    function (data) {
                        if (data.page.result.length > 0) {
                            for (var i = 0; i < data.page.result.length; i++) {
                                that.UserData.OrgUnitItems.push(data.page.result[i]);
                                units.push(data.page.result[i]);
                            }
                        }
                    }, false);
            }
            return units;
        },

        //加载用户数据
        LoadUsersData: function () {
            var that = this;
            if (that.UsersDataPanel.data("IsLoad")) return;
            that.UsersDataPanel.data("IsLoad", true).css("overflow", "hidden");
            var leftPanel = $("<div>").addClass("SheetUser_TreePanel").addClass("col-sm-7").addClass("col-xs-7").height("100%");
            that.UserListPanel = $("<div>").addClass("col-sm-5").addClass("col-xs-5").height("100%").css("overflow", "auto");

            that.UsersDataPanel.html("");
            that.UsersDataPanel.append(leftPanel);
            that.UsersDataPanel.append(that.UserListPanel);
            that.LoadUnitsTree(leftPanel);
        },
        //
        LoadUsersByParenID: function (ParentId) {
            var that = this;
            if (!that.UserData.DepUserItems[ParentId]) {
                var showUnActive = this.ShowUnActive;//是否显示离职人员
                var params = {
                    organId: ParentId
                };
                this.Ajax(
                    '/ctg-workflow/user/pageList',
                    "POST",
                    params,
                    function (data) {
                        that.UserData.DepUserItems[ParentId] = data.page.result;
                        that.LoadUsersByParenID.apply(that, [ParentId]);
                
                        //异步添加用户数据
                        setTimeout(function () {
                            that.AddUserData(data.ReturnData.UnitItems);
                        }, 0);
                    });
                // setTimeout(()=> {
                //   var data = {"Successful":true,"ErrorMessage":null,"Logined":true,"ReturnData":{"UnitItems":[{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"05e12f8e-5391-40ca-b78c-b8ffd8409a1f","Code":"$:LWCP_v1:$J3ODyEtMZXgIrlyj2Niphw==","DisplayName":"linq","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"6d20fec6-5ab8-4522-85f2-0efa9a0572d5","Code":"$:LWCP_v1:$a3xXAHQLqj+2YHDEnQg9og==","DisplayName":"陈志亮","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"022e56cc-5274-4468-b050-3d66dca6d336","Code":"$:LWCP_v1:$B10BgL6Ndj6Gh+YxIU+hyA==","DisplayName":"梁伟林","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"d7b6f5da-3ccd-4a73-87d7-62096e46a997","Code":"$:LWCP_v1:$h+hEuPxiaZNWNbjrLRZdmg==","DisplayName":"卢","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"c6885ff8-1cab-46d5-8364-b40a678683e5","Code":"$:LWCP_v1:$/RszIoHurHQ2XF/T0Z3jZg==","DisplayName":"梦达","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"23cf2763-939d-414e-a405-5f68f412ad90","Code":"$:LWCP_v1:$/bHs7txT0gOQXIfp5ECQRQ==","DisplayName":"肖庆云","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"ec8707ef-00c5-4be5-9870-2293986f010f","Code":"$:LWCP_v1:$xNTYyVf++SK7NOd/yPyvnA==","DisplayName":"许万超","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"396242db-3f89-4fb9-9534-42327ad2fea7","Code":"$:LWCP_v1:$YnmulHHUfzR3t+c1pEt35w==","DisplayName":"勇哥","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","id":"ad8116e6-cc54-49ba-bb4c-f600c6ffc2f4","Code":"$:LWCP_v1:$FFgieofhGbps6DTbsoFS+g==","DisplayName":"邹兵兵","DeptId":0,"HasChild":false}]}};
                //   that.UserData.DepUserItems[ParentId] = data.ReturnData.UnitItems;
                //   that.LoadUsersByParenID.apply(that, [ParentId]);
                //   that.AddUserData(data.ReturnData.UnitItems);
                //   //异步添加用户数据
                //   // setTimeout(function () {
                //   //     that.AddUserData(data.ReturnData.UnitItems);
                //   // }, 0);

                // }, 1000);


            }
            else {
                var $ul = $("<ul>").addClass("nav");
                for (var i = 0; i < that.UserData.DepUserItems[ParentId].length; i++) {
                    var UnitItem = that.UserData.DepUserItems[ParentId][i];
                    var $li = $("<li>").addClass("SheetUser-LiItem");
                    var $a = $("<a>").append("<i class='ivu-icon ivu-icon-people'></i>").data("UnitItem", UnitItem);
                    var checkboxID = $.IGuid();
                    //var $label = $("<label>").text(UnitItem.DisplayName);
                    var $stateIcon = $("<i class='glyphicon'></i>").attr("data-UnitID", UnitItem.id).attr("data-Type", UnitItem.Type);
                    //$a.append($label);
                    $a.append(UnitItem.userName);
                    $a.append($stateIcon);
                    if (that.ExistChoice(UnitItem.id)) {
                        $stateIcon.addClass("icon-Check");
                        $a.data("Exist", true);
                    }

                    $a.click(function () {
                        var UnitObject = $(this).data("UnitItem");
                        if ($(this).data("Exist")) {
                            that.RemoveChoice.apply(that, [UnitObject.id]);
                            $(this).find("i:last").removeClass("icon-Check");
                            $(this).data("Exist", false);
                        }
                        else {
                            $(this).find("i:last").addClass("icon-Check");
                            that.AddChoice.apply(that, [UnitObject]);;
                            $(this).data("Exist", true);
                        }
                        ////
                        that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                    });

                    $li.append($a);
                    $ul.append($li);
                }
                that.UserListPanel.html("").append($ul);
            }
        },
        ScrollLoad: function () {
            var that = this;
            if (that.IsPosting)
                return;
            //var searchkey = $(that.$Input).val().trim();
            var searchkey = $(that.$SearchInput).val().trim();
            that.IsPosting = true;
            var params =
                {
                    ActionName: "SheetUserAction",
                    Command: 'SearchOrg',
                    SearchKey: searchkey,
                    OrgUnitVisible: that.OrgUnitVisible,
                    UserVisible: that.UserVisible,
                    ShowUnActive: that.ShowUnActive,
                    UnitSelectionRange: that.UnitSelectionRange,
                    FromNum: that.FromNum,
                    ToNum: that.ToNum
                }
            that.Ajax(
                that.FormUserHandler,
                'POST', { PostData: JSON.stringify(params) }, function (data) {
                    if (data != null && data.ReturnData.UnitItems.length > 0) {
                        that.FromNum = that.ReturnData.UnitItems.ToNum;
                        that.ToNum += data.ReturnData.UnitItems.length;
                        var $ul = that.$SearchPanel.find('ul');
                        for (var i = 0; i < data.ReturnData.UnitItems.length; i++) {
                            var UnitItem = data.ReturnData.UnitItems[i];
                            var $li = $("<li>");
                            var icon = UnitItem.Type == 1 ? "icon-gongsi" : (UnitItem.Type == 2 ? "icon-xiashuguanli" : UnitItem.Icon);
                            var displayName = UnitItem.DisplayName;
                            if (UnitItem.Type == 4) {
                                displayName += "-" + UnitItem.DepartmentName;
                            }
                            var $a = $("<a>").append("<i class='glyphicon " + (icon == "glyphicon-user" ? "icon-people" : icon) + "'></i>").append(displayName).data("UnitItem", UnitItem);
                            $a.click(function (e) {
                                var UnitObject = $(this).data("UnitItem");
                                that.AddChoice.apply(that, [UnitObject]);
                                that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                            });
                            $ul.append($li.append($a));
                        }
                    }
                    that.IsPosting = false;
                });
        },
        //搜索用户
        SearchOrg: function () {
            this.FromNum = 0;
            this.ToNum = 10;
            this.$SearchPanel.html("");
            if (this.CpLock)
                return;
            //var searchkey = $(this.$Input).val().trim();
            var searchkey = $(this.$SearchInput).val().trim();
            if (searchkey == "") {
                this.SelectorPanel.show();
                this.$SearchPanel.hide();
                return;
            }
            this.SelectorPanel.hide();
            this.$SearchPanel.show();
            //this.$SearchPanel.html("");
            var that = this;
            that.IsPosting = false;
            var params = {
                ActionName: "SheetUserAction", Command: "SearchOrg",
                SearchKey: searchkey, OrgUnitVisible: this.OrgUnitVisible,
                UserVisible: this.UserVisible, ShowUnActive: this.ShowUnActive,
                UnitSelectionRange: this.UnitSelectionRange,
                FromNum: this.FromNum, ToNum: this.ToNum
            };
            this.Ajax(
                that.FormUserHandler,
                "POST",
                {
                    PostData: JSON.stringify(params)
                },
                function (data) {
                    that.$SearchPanel.html("");
                    if (data != null && data.ReturnData.UnitItems.length > 0) {
                        that.FromNum = that.ToNum + 1;
                        that.ToNum += data.ReturnData.UnitItems.length;
                        var $ul = $("<ul>").addClass("nav").addClass("SheetUser_SubTreePanel");
                        for (var i = 0; i < data.ReturnData.UnitItems.length; i++) {
                            var UnitItem = data.ReturnData.UnitItems[i];
                            var $li = $("<li>");
                            var icon = UnitItem.Type == 1 ? "fa icon-gongsi" : (UnitItem.Type == 2 ? "fa icon-xiashuguanli" : (UnitItem.Icon == "glyphicon-user" ? "icon-people" : UnitItem.Icon));
                            var displayName = UnitItem.DisplayName;
                            if (UnitItem.Type == 4) {
                                displayName += "-" + UnitItem.DepartmentName;
                            }
                            var $a = $("<a>").append("<i class='glyphicon " + icon + "'></i>").append(displayName).data("UnitItem", UnitItem);
                            $a.click(function (e) {
                                var UnitObject = $(this).data("UnitItem");
                                that.AddChoice.apply(that, [UnitObject]);
                                that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                            });
                            $ul.append($li.append($a));
                        }
                        that.$SearchPanel.append($ul);
                        //滚动加载
                        $($ul).scroll(function () {
                            //底部基本距离+滚动高度>=文档高度-窗体高度
                            var h_ul = $(this).height();//窗口高度
                            var h_scrollTop = $(this).scrollTop();//滚动条顶部
                            if (50 + h_scrollTop >= $(this)[0].scrollHeight - h_ul) {
                                that.ScrollLoad();
                            }
                        });
                    }
                    else {
                        that.$SearchPanel.html("没搜索到组织");
                    }
                });
        },
        ClearMapping: function () {
            for (var property in this.MappingControls) {
                var targetFiled = this.MappingControls[property];
                var mapValue = '';
                $.ControlManager.SetControlValue(targetFiled, mapValue, this.ObjectId);
            }
        },
        //处理映射关系
        MappingControlsHandler: function (UnitObject) {
            if ($.isEmptyObject(UnitObject)) return;
            if ($.isEmptyObject(this.MappingControls)) return;
            if (this.IsMultiple) return;

            for (var property in this.MappingControls) {
                if (this.MappingControls.hasOwnProperty(property)) {
                    var targetFiled = this.MappingControls[property];
                    if (property.toLocaleLowerCase() == "parentid") {
                        property = "ParentId";
                    }
                    var MapValue = UnitObject[property] == void 0 ? "" : UnitObject[property];
                    if (property.toLowerCase() == 'gender' && !isNaN(MapValue)) {
                        MapValue = MapValue == 0 ? "未知" : (MapValue == 1 ? "男" : "女");
                    }

                    // 由于Mvc的JsonResult的Date Format为 "\/Date()\/"
                    if ((MapValue + '').indexOf("/Date(") > -1) {
                        MapValue = new Date(parseInt((MapValue + '').replace("/Date(", "").replace(")/", ""), 10));
                        MapValue = MapValue.toLocaleDateString();
                    }
                    $.ControlManager.SetControlValue(targetFiled, MapValue, this.ObjectId);
                }
            }
        },
        SetReadonly: function (v) {
            if (v) {
                this.$InputBody.attr("disabled", "disabled");
            } else {
                this.$InputBody.removeAttr("disabled");
            }
        },

        //更新选人范围
        UpdateUnitSelectionRange: function () {
            this.UnitSelectionRange = $(this.Element).attr("data-unitselectionrange");
            //计算控件中的选人范围
            var that = this;
            if (that.UnitSelectionRange && that.UnitSelectionRange.length > 0) {
                var SelectionRange = that.UnitSelectionRange + ";"; //可能UnitSelectionRange不是以";"结尾
                var selects = that.UnitSelectionRange.split(";");
                if (selects.length > 0) {
                    for (var i = 0; i < selects.length; i++) {
                        var control = $("div[data-datafield=" + selects[i] + "]");
                        if (control.length > 0) {
                            var controlManager = control.JControl();
                            //列表筛选时取不到值
                            if (!controlManager) { continue; }
                            SelectionRange = SelectionRange.replace(selects[i] + ";", "");
                            //添加change事件，控件值改变时，当前控件需要
                            //绑定改变值事件
                            var changeKey = "SelectionChange." + that.DataField;
                            if (!controlManager.ChangeEvents[changeKey]) {
                                controlManager.BindChange(changeKey, function () {
                                    that.SetValue("");
                                    //清空控件缓存
                                    that.UsersDataPanel.data("IsLoad", false);
                                    that.DepsDataPanel.data("IsLoad", false);
                                    that.UserData = {
                                        //部门
                                        OrgUnitItems: {},
                                        //标签
                                        //OrgTagItems: [],
                                        //部门用户:{部门ID:[]}
                                        DepUserItems: {},
                                        //用户
                                        UserItems: {},
                                    };
                                    that.Units = {};

                                    that.UnitSelectionRange = $(that.Element).attr("data-unitselectionrange");

                                    //重新渲染组织机构
                                    that.LoadOrgByTabType("tab_Users");
                                    that.LoadOrgByTabType("tab_Deps");
                                });
                            }

                            var items = controlManager.GetValue();
                            if (items) {
                                for (var id in items) {
                                    SelectionRange += items[id].UnitID + ";";
                                }
                            }
                        }
                    }
                }

                that.UnitSelectionRange = SelectionRange;
            }
        }
    });
})(jQuery);;
//地区选择
(function ($) {
    $.fn.FormAreaSelect = function () {
        return $.ControlManager.Run.call(this, "FormAreaSelect", arguments);
    };

    // 构造函数
    $.Controls.FormAreaSelect = function (element, options, sheetInfo) {
        $.Controls.FormAreaSelect.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormAreaSelect.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            this.IsInGridView = !$.isEmptyObject(this.ObjectId);
            //获取数据源
            this.FormAreaSelectSourceDataUrl = "/Form/OnAction";
            this.adcodeName = "adcode";
            this.DetailName = "Detail";
            this.SpecialKey = {
                139000: true,
                419000: true,
                429000: true,
                469000: true
            }//在国家统计局内虚拟的省直辖市

            this.SpecialName = ["北京市市辖区", "天津市市辖区", "上海市市辖区"];

            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }

            //加载地区数据
            this.LoadAreasData();

            //渲染Html页面
            this.HtmlRender();

            //绑定事件
            this.BindEvent();

            //Error:新建的话，可以制作默认值 ，非新建设置值加载的值
            if (this.Value) {
                this.SetValue(this.Value);
            }

            // 不可编辑
            if (!this.Editable) {
                this.SetReadonly(true);
            } else {
                this.RenderDropDownList();
            }
            this.RenderFinished = true;
        },
        RenderDropDownList: function () {
            if (!$(this.Element).attr("data-export") == "export") {
                this.$Province.DropDownList();
                this.$City.DropDownList();
                this.$Town.DropDownList();
            }
        },

        //渲染html内容
        HtmlRender: function () {
            var that = this;
            if (that.Editable) {
                $(this.Element).addClass("SheetAreaSelect");
                this.$SelectWrap = $("<div class='AreaSelectWrap'>");
                this.$Province = $("<select class='province form-control' style='display:none;'><option value=''>省份</option></select>");
                this.$ProvinceText = $('<span type="text" class="form-control icon-arrow-down-full" style="width:100 %;">省份</span>');
                this.$City = $("<select class='city form-control' style='display:none;'><option value=''>市级</option></select>");
                this.$CityText = $('<span type="text" class="form-control icon-arrow-down-full" style="width:100 %;" >市级</span>');
                this.$Town = $("<select class='town form-control' style='display:none;'><option value=''>县级</option></select>");
                this.$TownText = $('<span type="text" class="form-control icon-arrow-down-full" style="width:100 %;" >县级</span>');
                this.$Detail = $("<textarea rows='2' maxlength='100' placeholder='详细地址' class='area-item detail form-control'>");

                if (this.AreaMode == "P-C-T") {
                    this.$SelectWrap.append($("<div class='area-item province'>").append(this.$ProvinceText).append(this.$Province))
                        .append($("<div class='area-item city'>").append(this.$CityText).append(this.$City))
                        .append($("<div class='area-item town'>").append(this.$TownText).append(this.$Town));
                } else if (this.AreaMode == "P-C") {
                    this.$SelectWrap.append($("<div class='area-item province' style='width:48%;'>").append(this.$ProvinceText).append(this.$Province))
                        .append($("<div class='area-item city'  style='width:49%;'>").append(this.$CityText).append(this.$City));
                } else if (this.AreaMode == "P") {
                    this.$SelectWrap.append($("<div class='area-item province' style='width:100%;'>").append(this.$ProvinceText).append(this.$Province));
                }
                if (this.ShowDetailAddr) {
                    this.$SelectWrap.append(this.$Detail);
                }

                var options = "";
                if ($.SmartForm.AddressCache && $.SmartForm.AddressCache.ProvincesOption) {
                    var options = $.SmartForm.AddressCache.ProvincesOption.children().clone();
                    that.$Province.empty().append(options);
                } else {
                    for (var i = 0; i < that.ProvincesData.length; i++) {
                        options += "<option value='" + that.ProvincesData[i] + "'>" + that.AddressCache[that.ProvincesData[i]] + "</option>";
                    }
                    $.SmartForm.AddressCache.ProvincesOption = that.$Province;
                    that.$Province.append(options);
                }

                this.$InputBody.css({ "line-height": 1, "margin-bottom": "3px" }).append(this.$SelectWrap);
                if (this.IsQueryControl) {
                    $(this.Element).find("span.ControlTitle").remove();
                    this.$InputBody.attr("class", "");
                }
            } else {
                this.$Input = $("<pre class='input-pre'>");
                this.$InputBody.append(this.$Input);
            }
        },
        //绑定事件
        BindEvent: function () {
            if (!this.Editable) return;
            var that = this;
            //省份变更
            this.$Province.off("change.SheetAreasProvince").on("change.SheetAreasProvince", this, function (e) {
                var that = e.data;
                var province = $(this).val();
                var citys = that.CitiesData[province];
                that.$CityText.text("市级");
                that.$TownText.text("县级");
                that.$City.empty().append("<option value=''>市级</option>");
                that.$Town.empty().append("<option value=''>县级</option>");
                if (citys != void 0) {
                    var options = '';
                    for (var i = 0; i < citys.length; i++) {
                        options += "<option value='" + citys[i] + "'>" + that.AddressCache[citys[i]] + "</option>";
                    }
                    that.$City.append(options);
                    that.$City.DropDown && that.$City.DropDown.Refresh();
                    that.$Town.DropDown && that.$Town.DropDown.Refresh();
                }
                if (that.AreaMode.indexOf("-C") > -1) {
                    that.RenderSelect(that.$City, true);
                }
                if (that.AreaMode.indexOf("-T") > -1) {
                    that.RenderSelect(that.$Town, true);
                }
                that.ValueChange();
                that.Required && ((this.value != "" && this.value != '省级') && that.$SelectWrap.removeAttr("style"));
            });
            //市级变更
            this.$City.off("change.SheetAreasCity").on("change.SheetAreasCity", this, function (e) {
                var that = e.data;
                var city = $(this).val();
                var towns = that.TownsData[city];
                that.$TownText.text("县级");
                that.$Town.empty().append("<option value=''>县级</option>");
                if (towns != void 0) {
                    var options = "";
                    for (var i = 0; i < towns.length; i++) {
                        options += "<option value='" + towns[i] + "'>" + that.AddressCache[towns[i]] + "</option>";
                    }
                    that.$Town.append(options);
                    that.$Town.DropDown && that.$Town.DropDown.Refresh();
                }
                if (that.AreaMode.indexOf("-T") > -1) {
                    that.RenderSelect(that.$Town, true);
                }
                that.ValueChange();
                that.Required && ((this.value != "" && this.value != '市级') && that.$SelectWrap.removeAttr("style"));
            });
            this.$Town.off("change.SheetAreasTown").on("change.SheetAreasTown", this, function (e) {
                var that = e.data;
                that.ValueChange();
                that.Required && ((this.value != "" && this.value != '县级') && that.$SelectWrap.removeAttr("style"));
            });
            this.$Detail.off("change.SheetAreasDetail").on("change.SheetAreasDetail", this, function (e) {
                var that = e.data;
                that.ValueChange();
            });

            //click时渲染控件
            if (this.AreaMode.indexOf("P") > -1) {
                this.$ProvinceText.off("click").on("click", function (e) {
                    that.RenderSelect(that.$Province);
                });
            }
            if (this.AreaMode.indexOf("C") > -1) {
                this.$CityText.off("click").on("click", function (e) {
                    that.RenderSelect(that.$City);
                });
            }
            if (this.AreaMode.indexOf("T") > -1) {
                this.$TownText.off("click").on("click", function (e) {
                    that.RenderSelect(that.$Town);
                });
            }
        },

        RenderSelect: function (select, resetOptions) {
            var that = this;
            var $select = $(select);
            var $selectP = $select.parent();
            resetOptions = resetOptions === true ? true : false;
            if (!$select.attr("data-render") && !resetOptions) {
                $select.attr("data-render", "true");
                var $ListContainer = $('<div class="list list-container" style="position: fixed;z-index: 99999;"></div>');
                var $DropList = $('<ul class="drop-list form-query-dropdown" style="width: 100%;"></ul>');
                //添加搜索框
                var $SearchInput = $('<input type="text" class="dropdownlist_search" style="width:100%;height:32px;padding-left:12px;" placeholder="搜索"></input> ');
                var $SearchLi = $("<li data-type='search' style='border-bottom:1px solid #d7d5d5'></li>").append($SearchInput);
                var $DropListDetail = $('<ul class="drop-combox droplistdetail" style="list-style:none;left:0;padding-left:0;max-height:200px;overflow:auto;"></ul>');
                var $li = $("<li></li>").append($DropListDetail);
                $DropList.append($SearchLi).append($li);
                //添加选项
                var options = $select.children();
                for (var i = 0, len = options.length; i < len; i++) {
                    var o = options[i];
                    $li = $("<li></li>")
                        .append($('<a tabindex="' + i + '"><label class=" form-query-item-label drop-item-btn" data-val="' + o.value + '">' + o.text + '</label></a>'));
                    $DropListDetail.append($li);
                }
                $select.parent().append($ListContainer.append($DropList));
            }
            else if ($select.attr("data-render") && resetOptions) {
                //联动重绘下拉选项
                var options = $select.children();
                $selectP.find(".droplistdetail").empty();
                for (var i = 0, len = options.length; i < len; i++) {
                    var o = options[i];
                    $li = $("<li></li>")
                        .append($('<a tabindex="' + i + '"><label class=" form-query-item-label drop-item-btn" data-val="' + o.value + '">' + o.text + '</label></a>'));
                    $selectP.find(".droplistdetail").append($li);
                }
                return;
            }
            else if (!this.RenderFinished) {
                return;
            }
            var position = $selectP.offset();
            var scrollTop = $(document).scrollTop();
            var width = $(select).prev().outerWidth();
            width = width < 130 ? 130 : width;
            var left = position.left;
            if (this.IsInGridView) { //子表位置调整
                var GridViewWrap = $select.closest(".GridViewWrap");
                var l = GridViewWrap.offset().left + GridViewWrap.width();
                if (position.left + width > l) {
                    left = l - width - 15;
                }
            }

            var top = position.top;
            var $parentModal = $(that.Element).closest("div.modal-dialog");
            if ($parentModal != undefined && $parentModal.length > 0) {
                left -= $parentModal.offset().left;
                top -= $parentModal.offset().top;
            }

            $select.parent().find(".list-container")
                .css("left", left)
                .css("top", top + $selectP.height() - scrollTop)
                .width(width);

            $selectP.find(".drop-list").show();
            setTimeout(function () {
                $selectP.find(".dropdownlist_search").focus();
                //点击DropDown以外区域隐藏,需要排除搜索框
                var eventName = "click.DropdownList" + (that.DataField || $(that.Element).attr("id"));
                //关闭
                $(document).off(eventName).on(eventName, that, function (e) {
                    var target = e.target;
                    var ctrl = e.data;
                    if ($select.prev() != target && $selectP.find($(target)).length == 0
                        && !$(target).hasClass("dropdownlist_search")) {
                        $selectP.find(".drop-list").hide();
                        $(document).off(eventName);
                        $(document).off("scroll.FormDropDownList");
                    }
                });
                //滚动
                $(document).off("scroll.FormDropDownList").on("scroll.FormDropDownList", function () {
                    var position = $selectP.offset();
                    var scrollTop = $(document).scrollTop();
                    $selectP.find(".list-container").css("top", position.top + $selectP.height() - scrollTop);
                });
                //选中
                $selectP.find(".list-container").off('click.select').on("click.select", "label", function (e) {
                    var v = $(this).data().val + "";
                    var t = $(this).text();
                    $selectP.find(".drop-list").hide();
                    $selectP.find("span[type='text']").text(t);
                    $select.val(v);
                    $select.trigger("change");
                });
                //搜索
                $selectP.find("input").off("input.search").on("input.search", function () {
                    var options = $selectP.find(".droplistdetail").find("label")
                    var searchKey = this.value || "";
                    for (var i = 1, len = options.length; i < len; i++) {
                        var o = options[i];
                        if (searchKey == "") {
                            $(o).show();
                        } else if ($(o).text().indexOf(searchKey) == -1) {
                            $(o).hide();
                        } else {
                            $(o).show();
                        }
                    }
                });
            }, 0);
        },

        ValueChange: function () {
            this.OnChange();
            this.Validate();
        },

        IsJsonString: function (str) {
            var JSON_START = /^\[|^\{(?!\{)/;
            var JSON_ENDS = {
                '[': /]$/,
                '{': /}$/
            };
            var jsonStart = str.match(JSON_START);
            return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
        },

        //清空地址数据
        ClearValue: function () {
            if (this.Editable) {
                this.$Province.empty().append("<option value=''>省份</option>");
                var that = this;
                setTimeout(function () {
                    var options = "";
                    for (var i = 0; i < that.ProvincesData.length; i++) {
                        options += "<option value='" + that.ProvincesData[i] + "'>" + that.AddressCache[that.ProvincesData[i]] + "</option>";
                        //that.$Province.append("<option>" + that.ProvincesData[i] + "</option>");
                    }
                    that.$Province.append(options);
                }, 0);
                this.$City.empty().append("<option value=''>市级</option>");
                this.$Town.empty().append("<option value=''>县级</option>");
                this.$Province.val("");
                this.$ProvinceText.text("省份");
                this.$City.val("");
                this.$CityText.text("市级");
                this.$Town.val("");
                this.$TownText.text("县级");
                this.$Detail.val('');
            } else {
                this.$Input.text('').attr("data-val", "");
            }
        },

        SetValue: function (v) {
            if (v == null || v.trim() == "") {
                this.ClearValue();
                return;
            }
            if (this.IsJsonString(v)) {
                v = v.replace(/[\r\n]/g, "");//去掉换行
                v = v.replace(/\\/g, "\\\\");// \
                v = v.replace(/\t/g, "");
                v = JSON.parse(v);
                if (v["Detail"]) {
                    if (v[this.adcodeName] && v[this.adcodeName].trim() == "" && v["Detail"].trim() == "") {
                        this.ClearValue();
                        return;
                    }
                } else {
                    if (v[this.adcodeName] && v[this.adcodeName].trim() == "") {
                        this.ClearValue();
                        return;
                    }
                }
            }
            var areas = [];
            var areasDisplay = [];

            var adcode = v[this.adcodeName] || "";
            var citykey = adcode.substr(2, 2);
            var townkey = adcode.substr(4, 2);
            var provinceValue = "";
            var citykeyValue = "";
            var townkeyValeu = "";
            if (citykey == "00") {
                provinceValue = adcode;
            }
            else if (townkey == "00") {
                provinceValue = adcode.substring(0, 2) + "0000";
                citykeyValue = adcode.substring(0, 4) + "00";
            }
            else {
                provinceValue = adcode.substring(0, 2) + "0000";
                citykeyValue = adcode.substring(0, 4) + "00";
                townkeyValeu = adcode;
            }
            if ($.isPlainObject(v)) {
                areas.push(provinceValue);
                if (this.SpecialKey[citykeyValue]) {
                    areas.push(townkeyValeu);
                }
                else {
                    areas.push(citykeyValue);
                }
                areas.push(townkeyValeu);
                areas.push(v[this.DetailName] ? v[this.DetailName] : "");
                areasDisplay.push(this.AddressCache[provinceValue] ? this.AddressCache[provinceValue] : "");
                if (this.SpecialKey[citykeyValue]) {
                    areasDisplay.push(this.AddressCache[townkeyValeu] ? this.AddressCache[townkeyValeu] : "");
                }
                else {
                    areasDisplay.push(this.AddressCache[citykeyValue] ? this.AddressCache[citykeyValue] : "");
                }

                areasDisplay.push(this.AddressCache[townkeyValeu] ? this.AddressCache[townkeyValeu] : "");
                areasDisplay.push(v[this.DetailName] ? v[this.DetailName] : "");

            }
            if (!this.Editable) {
                this.$Input.text(areasDisplay.join(" "));
                this.$Input.attr("data-val", adcode + ";" + v[this.DetailName]);
                return;
            }

            var arr = this.$InputBody.find("select");
            this.$InputBody.find("textarea").val(areas[3]);
            $(arr[0]).val(provinceValue);
            this.$ProvinceText.text(areasDisplay[0] || "省份");
            this.$Province.change();
            if (arr.length > 1) {
                $(arr[1]).val(citykeyValue);
                this.$CityText.text(areasDisplay[1] || "市级");
                this.$City.change();
            }

            if (arr.length > 2) {
                $(arr[2]).val(townkeyValeu);
                this.$TownText.text(areasDisplay[2] || "县级");
                this.$Town.change();
            }

            //判断传入省份和字典中是否匹配
            this.OnChange();
            if (this.Editable) {
                this.RenderDropDownList();
            }
        },

        GetValue: function () {
            var province = "";
            var city = "";
            var town = "";
            var adcode = "";
            var adname = "";
            var detail = "";
            if (this.Editable) {
                var area = this.$InputBody.find("select");
                var detail = "";
                var tempdetail = this.$InputBody.find("textarea").val();
                if (tempdetail) {
                    detail = tempdetail;
                }

                if ($(area).eq(0).length > 0 && ($(area).eq(0).val() != "") && ($(area).eq(0).val() != null)) {
                    province = $(area).eq(0).val();
                    adcode = province;
                }


                if ($(area).length > 1 && ($(area).eq(1).val() != "") && ($(area).eq(1).val() != null)) {
                    city = $(area).eq(1).val();
                    adcode = city;
                }


                if ($(area).length > 2 && ($(area).eq(2).val() != "") && ($(area).eq(2).val() != null)) {
                    town = $(area).eq(2).val();
                    adcode = town;
                }
                if (province == "" && city == "" && town == "" && detail == "") {
                    return "";
                }
            } else {
                var areas = '';
                if (this.$Input && this.$Input.attr("data-val")) {
                    areas = this.$Input.attr("data-val").split(";");
                }
                adcode = areas[0] ? areas[0] : "";
                detail = areas[1] ? areas[1] : "";
                if (adcode == "" && detail == "") {
                    return "";
                }
                //分割adcode到province,city,town
                town = adcode;
                province = adcode.substring(0, 2) + '0000';
                city = adcode.substring(0, 4) + '00';
            }

            if (town != "") {
                adcode = town;
            }
            adname = (this.AddressCache[province] ? (this.AddressCache[province] + " ") : "") + (this.AddressCache[city] ? (this.AddressCache[city] + " ") : "") + (this.AddressCache[town] ? (this.AddressCache[town]) : "");
            return JSON.stringify({ "adcode": adcode.trim(), "adname": adname, Detail: detail.trim() });
        },

        GetText: function () {
            var value = this.GetValue();
            if (value == "") return ""
            var value = JSON.parse(value);
            return value.adname + value.Detail;
        },

        //校验
        Validate: function () {
            var val = this.GetValue();
            if (this.Required && val != null && val.trim() == "") {
                this.AddInvalidText(this.$InputBody, "必填");
                return false;
            }
            this.RemoveInvalidText(this.$InputBody);
            return true;
        },

        //设置只读
        SetReadonly: function (v) {
            if (!this.Editable) { return; }
            if (v) {
                this.$ProvinceText.off("click");
                this.$CityText.off("click");
                this.$TownText.off("click");

                //this.$InputBody.find("select").attr("disabled", "disabled").css("color", "#808080");;
                this.$InputBody.find("textarea").attr("disabled", "disabled").css({ "color": "#808080", "background": "#fff" });
            }
            else {
                //this.$InputBody.find("select").removeAttr("disabled").css("color", "#000");
                this.$InputBody.find("textarea").attr("disabled", "disabled").css({ "color": "#000", "background": "#fff" });
                this.BindEvent();
            }
        },

        //返回数据值
        SaveDataField: function () {
            var result = {};
            if (!this.Visible) return result;
            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldresult) {
                return {};
            }
            if (("" + oldresult.Value) != this.GetValue()) {
                result[this.DataField] = this.GetValue().trim();
                return result;
            }
            return {};
        },

        //加载地区数据
        LoadAreasData: function () {
            var that = this;
            //初步阶段，地区数据是写死js的，后续做了主数据，这些数据会从服务端读取
            if ($.SmartForm && $.SmartForm.AddressCache) {
                this.AddressCache = $.SmartForm.AddressCache.All;
                this.ProvincesData = $.SmartForm.AddressCache.ProvincesData;
                this.CitiesData = $.SmartForm.AddressCache.CitiesData;
                this.TownsData = $.SmartForm.AddressCache.TownsData;
            } else if (localStorage.getItem("AddressCache") && !$.isEmptyObject(JSON.parse(localStorage.getItem("AddressCache")))) {
                //只作在研发环境无外网时构造数据
                this.AddressCache = JSON.parse(localStorage.getItem("AddressCache"));

                //var AddressCache = '{"100000":"中华人民共和国","110000":"北京市","110100":"北京市市辖区","110101":"东城区","110102":"西城区","110105":"朝阳区","110106":"丰台区","110107":"石景山区","110108":"海淀区","110109":"门头沟区","110111":"房山区","110112":"通州区","110113":"顺义区","110114":"昌平区","110115":"大兴区","110116":"怀柔区","110117":"平谷区","110118":"密云区","110119":"延庆区","120000":"天津市","120100":"天津市市辖区","120101":"和平区","120102":"河东区","120103":"河西区","120104":"南开区","120105":"河北区","120106":"红桥区","120110":"东丽区","120111":"西青区","120112":"津南区","120113":"北辰区","120114":"武清区","120115":"宝坻区","120116":"滨海新区","120117":"宁河区","120118":"静海区","120119":"蓟州区","130000":"河北省","130100":"石家庄市","130101":"石家庄市市辖区","130102":"长安区","130104":"桥西区","130105":"新华区","130107":"井陉矿区","130108":"裕华区","130109":"藁城区","130110":"鹿泉区","130111":"栾城区","130121":"井陉县","130123":"正定县","130125":"行唐县","130126":"灵寿县","130127":"高邑县","130128":"深泽县","130129":"赞皇县","130130":"无极县","130131":"平山县","130132":"元氏县","130133":"赵县","130181":"辛集市","130183":"晋州市","130184":"新乐市","130200":"唐山市","130201":"唐山市市辖区","130202":"路南区","130203":"路北区","130204":"古冶区","130205":"开平区","130207":"丰南区","130208":"丰润区","130209":"曹妃甸区","130223":"滦县","130224":"滦南县","130225":"乐亭县","130227":"迁西县","130229":"玉田县","130281":"遵化市","130283":"迁安市","130300":"秦皇岛市","130301":"秦皇岛市市辖区","130302":"海港区","130303":"山海关区","130304":"北戴河区","130306":"抚宁区","130321":"青龙满族自治县","130322":"昌黎县","130324":"卢龙县","130400":"邯郸市","130401":"邯郸市市辖区","130402":"邯山区","130403":"丛台区","130404":"复兴区","130406":"峰峰矿区","130423":"临漳县","130424":"成安县","130425":"大名县","130426":"涉县","130427":"磁县","130428":"肥乡区","130429":"永年区","130430":"邱县","130431":"鸡泽县","130432":"广平县","130433":"馆陶县","130434":"魏县","130435":"曲周县","130481":"武安市","130500":"邢台市","130501":"邢台市市辖区","130502":"桥东区","130503":"桥西区","130521":"邢台县","130522":"临城县","130523":"内丘县","130524":"柏乡县","130525":"隆尧县","130526":"任县","130527":"南和县","130528":"宁晋县","130529":"巨鹿县","130530":"新河县","130531":"广宗县","130532":"平乡县","130533":"威县","130534":"清河县","130535":"临西县","130581":"南宫市","130582":"沙河市","130600":"保定市","130601":"保定市市辖区","130602":"竞秀区","130606":"莲池区","130607":"满城区","130608":"清苑区","130609":"徐水区","130623":"涞水县","130624":"阜平县","130626":"定兴县","130627":"唐县","130628":"高阳县","130629":"容城县","130630":"涞源县","130631":"望都县","130632":"安新县","130633":"易县","130634":"曲阳县","130635":"蠡县","130636":"顺平县","130637":"博野县","130638":"雄县","130681":"涿州市","130682":"定州市","130683":"安国市","130684":"高碑店市","130700":"张家口市","130701":"张家口市市辖区","130702":"桥东区","130703":"桥西区","130705":"宣化区","130706":"下花园区","130708":"万全区","130709":"崇礼区","130722":"张北县","130723":"康保县","130724":"沽源县","130725":"尚义县","130726":"蔚县","130727":"阳原县","130728":"怀安县","130730":"怀来县","130731":"涿鹿县","130732":"赤城县","130800":"承德市","130801":"承德市市辖区","130802":"双桥区","130803":"双滦区","130804":"鹰手营子矿区","130821":"承德县","130822":"兴隆县","130823":"平泉县","130824":"滦平县","130825":"隆化县","130826":"丰宁满族自治县","130827":"宽城满族自治县","130828":"围场满族蒙古族自治县","130900":"沧州市","130901":"沧州市市辖区","130902":"新华区","130903":"运河区","130921":"沧县","130922":"青县","130923":"东光县","130924":"海兴县","130925":"盐山县","130926":"肃宁县","130927":"南皮县","130928":"吴桥县","130929":"献县","130930":"孟村回族自治县","130981":"泊头市","130982":"任丘市","130983":"黄骅市","130984":"河间市","131000":"廊坊市","131001":"廊坊市市辖区","131002":"安次区","131003":"广阳区","131022":"固安县","131023":"永清县","131024":"香河县","131025":"大城县","131026":"文安县","131028":"大厂回族自治县","131081":"霸州市","131082":"三河市","131100":"衡水市","131101":"衡水市市辖区","131102":"桃城区","131103":"冀州区","131121":"枣强县","131122":"武邑县","131123":"武强县","131124":"饶阳县","131125":"安平县","131126":"故城县","131127":"景县","131128":"阜城县","131182":"深州市","139000":"直辖县","140000":"山西省","140100":"太原市","140101":"太原市市辖区","140105":"小店区","140106":"迎泽区","140107":"杏花岭区","140108":"尖草坪区","140109":"万柏林区","140110":"晋源区","140121":"清徐县","140122":"阳曲县","140123":"娄烦县","140181":"古交市","140200":"大同市","140201":"大同市市辖区","140202":"城区","140203":"矿区","140211":"南郊区","140212":"新荣区","140221":"阳高县","140222":"天镇县","140223":"广灵县","140224":"灵丘县","140225":"浑源县","140226":"左云县","140227":"大同县","140300":"阳泉市","140301":"阳泉市市辖区","140302":"城区","140303":"矿区","140311":"郊区","140321":"平定县","140322":"盂县","140400":"长治市","140401":"长治市市辖区","140402":"城区","140411":"郊区","140421":"长治县","140423":"襄垣县","140424":"屯留县","140425":"平顺县","140426":"黎城县","140427":"壶关县","140428":"长子县","140429":"武乡县","140430":"沁县","140431":"沁源县","140481":"潞城市","140500":"晋城市","140501":"晋城市市辖区","140502":"城区","140521":"沁水县","140522":"阳城县","140524":"陵川县","140525":"泽州县","140581":"高平市","140600":"朔州市","140601":"朔州市市辖区","140602":"朔城区","140603":"平鲁区","140621":"山阴县","140622":"应县","140623":"右玉县","140624":"怀仁县","140700":"晋中市","140701":"晋中市市辖区","140702":"榆次区","140721":"榆社县","140722":"左权县","140723":"和顺县","140724":"昔阳县","140725":"寿阳县","140726":"太谷县","140727":"祁县","140728":"平遥县","140729":"灵石县","140781":"介休市","140800":"运城市","140801":"运城市市辖区","140802":"盐湖区","140821":"临猗县","140822":"万荣县","140823":"闻喜县","140824":"稷山县","140825":"新绛县","140826":"绛县","140827":"垣曲县","140828":"夏县","140829":"平陆县","140830":"芮城县","140881":"永济市","140882":"河津市","140900":"忻州市","140901":"忻州市市辖区","140902":"忻府区","140921":"定襄县","140922":"五台县","140923":"代县","140924":"繁峙县","140925":"宁武县","140926":"静乐县","140927":"神池县","140928":"五寨县","140929":"岢岚县","140930":"河曲县","140931":"保德县","140932":"偏关县","140981":"原平市","141000":"临汾市","141001":"临汾市市辖区","141002":"尧都区","141021":"曲沃县","141022":"翼城县","141023":"襄汾县","141024":"洪洞县","141025":"古县","141026":"安泽县","141027":"浮山县","141028":"吉县","141029":"乡宁县","141030":"大宁县","141031":"隰县","141032":"永和县","141033":"蒲县","141034":"汾西县","141081":"侯马市","141082":"霍州市","141100":"吕梁市","141101":"吕梁市市辖区","141102":"离石区","141121":"文水县","141122":"交城县","141123":"兴县","141124":"临县","141125":"柳林县","141126":"石楼县","141127":"岚县","141128":"方山县","141129":"中阳县","141130":"交口县","141181":"孝义市","141182":"汾阳市","150000":"内蒙古自治区","150100":"呼和浩特市","150101":"呼和浩特市市辖区","150102":"新城区","150103":"回民区","150104":"玉泉区","150105":"赛罕区","150121":"土默特左旗","150122":"托克托县","150123":"和林格尔县","150124":"清水河县","150125":"武川县","150200":"包头市","150201":"包头市市辖区","150202":"东河区","150203":"昆都仑区","150204":"青山区","150205":"石拐区","150206":"白云鄂博矿区","150207":"九原区","150221":"土默特右旗","150222":"固阳县","150223":"达尔罕茂明安联合旗","150300":"乌海市","150301":"乌海市市辖区","150302":"海勃湾区","150303":"海南区","150304":"乌达区","150400":"赤峰市","150401":"赤峰市市辖区","150402":"红山区","150403":"元宝山区","150404":"松山区","150421":"阿鲁科尔沁旗","150422":"巴林左旗","150423":"巴林右旗","150424":"林西县","150425":"克什克腾旗","150426":"翁牛特旗","150428":"喀喇沁旗","150429":"宁城县","150430":"敖汉旗","150500":"通辽市","150501":"通辽市市辖区","150502":"科尔沁区","150521":"科尔沁左翼中旗","150522":"科尔沁左翼后旗","150523":"开鲁县","150524":"库伦旗","150525":"奈曼旗","150526":"扎鲁特旗","150581":"霍林郭勒市","150600":"鄂尔多斯市","150601":"鄂尔多斯市市辖区","150602":"东胜区","150603":"康巴什区","150621":"达拉特旗","150622":"准格尔旗","150623":"鄂托克前旗","150624":"鄂托克旗","150625":"杭锦旗","150626":"乌审旗","150627":"伊金霍洛旗","150700":"呼伦贝尔市","150701":"呼伦贝尔市市辖区","150702":"海拉尔区","150703":"扎赉诺尔区","150721":"阿荣旗","150722":"莫力达瓦达斡尔族自治旗","150723":"鄂伦春自治旗","150724":"鄂温克族自治旗","150725":"陈巴尔虎旗","150726":"新巴尔虎左旗","150727":"新巴尔虎右旗","150781":"满洲里市","150782":"牙克石市","150783":"扎兰屯市","150784":"额尔古纳市","150785":"根河市","150800":"巴彦淖尔市","150801":"巴彦淖尔市市辖区","150802":"临河区","150821":"五原县","150822":"磴口县","150823":"乌拉特前旗","150824":"乌拉特中旗","150825":"乌拉特后旗","150826":"杭锦后旗","150900":"乌兰察布市","150901":"乌兰察布市市辖区","150902":"集宁区","150921":"卓资县","150922":"化德县","150923":"商都县","150924":"兴和县","150925":"凉城县","150926":"察哈尔右翼前旗","150927":"察哈尔右翼中旗","150928":"察哈尔右翼后旗","150929":"四子王旗","150981":"丰镇市","152200":"兴安盟","152201":"乌兰浩特市","152202":"阿尔山市","152221":"科尔沁右翼前旗","152222":"科尔沁右翼中旗","152223":"扎赉特旗","152224":"突泉县","152500":"锡林郭勒盟","152501":"二连浩特市","152502":"锡林浩特市","152522":"阿巴嘎旗","152523":"苏尼特左旗","152524":"苏尼特右旗","152525":"东乌珠穆沁旗","152526":"西乌珠穆沁旗","152527":"太仆寺旗","152528":"镶黄旗","152529":"正镶白旗","152530":"正蓝旗","152531":"多伦县","152900":"阿拉善盟","152921":"阿拉善左旗","152922":"阿拉善右旗","152923":"额济纳旗","210000":"辽宁省","210100":"沈阳市","210101":"沈阳市市辖区","210102":"和平区","210103":"沈河区","210104":"大东区","210105":"皇姑区","210106":"铁西区","210111":"苏家屯区","210112":"浑南区","210113":"沈北新区","210114":"于洪区","210115":"辽中区","210123":"康平县","210124":"法库县","210181":"新民市","210200":"大连市","210201":"大连市市辖区","210202":"中山区","210203":"西岗区","210204":"沙河口区","210211":"甘井子区","210212":"旅顺口区","210213":"金州区","210214":"普兰店区","210224":"长海县","210281":"瓦房店市","210283":"庄河市","210300":"鞍山市","210301":"鞍山市市辖区","210302":"铁东区","210303":"铁西区","210304":"立山区","210311":"千山区","210321":"台安县","210323":"岫岩满族自治县","210381":"海城市","210400":"抚顺市","210401":"抚顺市市辖区","210402":"新抚区","210403":"东洲区","210404":"望花区","210411":"顺城区","210421":"抚顺县","210422":"新宾满族自治县","210423":"清原满族自治县","210500":"本溪市","210501":"本溪市市辖区","210502":"平山区","210503":"溪湖区","210504":"明山区","210505":"南芬区","210521":"本溪满族自治县","210522":"桓仁满族自治县","210600":"丹东市","210601":"丹东市市辖区","210602":"元宝区","210603":"振兴区","210604":"振安区","210624":"宽甸满族自治县","210681":"东港市","210682":"凤城市","210700":"锦州市","210701":"锦州市市辖区","210702":"古塔区","210703":"凌河区","210711":"太和区","210726":"黑山县","210727":"义县","210781":"凌海市","210782":"北镇市","210800":"营口市","210801":"营口市市辖区","210802":"站前区","210803":"西市区","210804":"鲅鱼圈区","210811":"老边区","210881":"盖州市","210882":"大石桥市","210900":"阜新市","210901":"阜新市市辖区","210902":"海州区","210903":"新邱区","210904":"太平区","210905":"清河门区","210911":"细河区","210921":"阜新蒙古族自治县","210922":"彰武县","211000":"辽阳市","211001":"辽阳市市辖区","211002":"白塔区","211003":"文圣区","211004":"宏伟区","211005":"弓长岭区","211011":"太子河区","211021":"辽阳县","211081":"灯塔市","211100":"盘锦市","211101":"盘锦市市辖区","211102":"双台子区","211103":"兴隆台区","211104":"大洼区","211122":"盘山县","211200":"铁岭市","211201":"铁岭市市辖区","211202":"银州区","211204":"清河区","211221":"铁岭县","211223":"西丰县","211224":"昌图县","211281":"调兵山市","211282":"开原市","211300":"朝阳市","211301":"朝阳市市辖区","211302":"双塔区","211303":"龙城区","211321":"朝阳县","211322":"建平县","211324":"喀喇沁左翼蒙古族自治县","211381":"北票市","211382":"凌源市","211400":"葫芦岛市","211401":"葫芦岛市市辖区","211402":"连山区","211403":"龙港区","211404":"南票区","211421":"绥中县","211422":"建昌县","211481":"兴城市","220000":"吉林省","220100":"长春市","220101":"长春市市辖区","220102":"南关区","220103":"宽城区","220104":"朝阳区","220105":"二道区","220106":"绿园区","220112":"双阳区","220113":"九台区","220122":"农安县","220182":"榆树市","220183":"德惠市","220200":"吉林市","220201":"吉林市市辖区","220202":"昌邑区","220203":"龙潭区","220204":"船营区","220211":"丰满区","220221":"永吉县","220281":"蛟河市","220282":"桦甸市","220283":"舒兰市","220284":"磐石市","220300":"四平市","220301":"四平市市辖区","220302":"铁西区","220303":"铁东区","220322":"梨树县","220323":"伊通满族自治县","220381":"公主岭市","220382":"双辽市","220400":"辽源市","220401":"辽源市市辖区","220402":"龙山区","220403":"西安区","220421":"东丰县","220422":"东辽县","220500":"通化市","220501":"通化市市辖区","220502":"东昌区","220503":"二道江区","220521":"通化县","220523":"辉南县","220524":"柳河县","220581":"梅河口市","220582":"集安市","220600":"白山市","220601":"白山市市辖区","220602":"浑江区","220605":"江源区","220621":"抚松县","220622":"靖宇县","220623":"长白朝鲜族自治县","220681":"临江市","220700":"松原市","220701":"松原市市辖区","220702":"宁江区","220721":"前郭尔罗斯蒙古族自治县","220722":"长岭县","220723":"乾安县","220781":"扶余市","220800":"白城市","220801":"白城市市辖区","220802":"洮北区","220821":"镇赉县","220822":"通榆县","220881":"洮南市","220882":"大安市","222400":"延边朝鲜族自治州","222401":"延吉市","222402":"图们市","222403":"敦化市","222404":"珲春市","222405":"龙井市","222406":"和龙市","222424":"汪清县","222426":"安图县","230000":"黑龙江省","230100":"哈尔滨市","230101":"哈尔滨市市辖区","230102":"道里区","230103":"南岗区","230104":"道外区","230108":"平房区","230109":"松北区","230110":"香坊区","230111":"呼兰区","230112":"阿城区","230113":"双城区","230123":"依兰县","230124":"方正县","230125":"宾县","230126":"巴彦县","230127":"木兰县","230128":"通河县","230129":"延寿县","230183":"尚志市","230184":"五常市","230200":"齐齐哈尔市","230201":"齐齐哈尔市市辖区","230202":"龙沙区","230203":"建华区","230204":"铁锋区","230205":"昂昂溪区","230206":"富拉尔基区","230207":"碾子山区","230208":"梅里斯达斡尔族区","230221":"龙江县","230223":"依安县","230224":"泰来县","230225":"甘南县","230227":"富裕县","230229":"克山县","230230":"克东县","230231":"拜泉县","230281":"讷河市","230300":"鸡西市","230301":"鸡西市市辖区","230302":"鸡冠区","230303":"恒山区","230304":"滴道区","230305":"梨树区","230306":"城子河区","230307":"麻山区","230321":"鸡东县","230381":"虎林市","230382":"密山市","230400":"鹤岗市","230401":"鹤岗市市辖区","230402":"向阳区","230403":"工农区","230404":"南山区","230405":"兴安区","230406":"东山区","230407":"兴山区","230421":"萝北县","230422":"绥滨县","230500":"双鸭山市","230501":"双鸭山市市辖区","230502":"尖山区","230503":"岭东区","230505":"四方台区","230506":"宝山区","230521":"集贤县","230522":"友谊县","230523":"宝清县","230524":"饶河县","230600":"大庆市","230601":"大庆市市辖区","230602":"萨尔图区","230603":"龙凤区","230604":"让胡路区","230605":"红岗区","230606":"大同区","230621":"肇州县","230622":"肇源县","230623":"林甸县","230624":"杜尔伯特蒙古族自治县","230700":"伊春市","230701":"伊春市市辖区","230702":"伊春区","230703":"南岔区","230704":"友好区","230705":"西林区","230706":"翠峦区","230707":"新青区","230708":"美溪区","230709":"金山屯区","230710":"五营区","230711":"乌马河区","230712":"汤旺河区","230713":"带岭区","230714":"乌伊岭区","230715":"红星区","230716":"上甘岭区","230722":"嘉荫县","230781":"铁力市","230800":"佳木斯市","230801":"佳木斯市市辖区","230803":"向阳区","230804":"前进区","230805":"东风区","230811":"郊区","230822":"桦南县","230826":"桦川县","230828":"汤原县","230881":"同江市","230882":"富锦市","230883":"抚远市","230900":"七台河市","230901":"七台河市市辖区","230902":"新兴区","230903":"桃山区","230904":"茄子河区","230921":"勃利县","231000":"牡丹江市","231001":"牡丹江市市辖区","231002":"东安区","231003":"阳明区","231004":"爱民区","231005":"西安区","231025":"林口县","231081":"绥芬河市","231083":"海林市","231084":"宁安市","231085":"穆棱市","231086":"东宁市","231100":"黑河市","231101":"黑河市市辖区","231102":"爱辉区","231121":"嫩江县","231123":"逊克县","231124":"孙吴县","231181":"北安市","231182":"五大连池市","231200":"绥化市","231201":"绥化市市辖区","231202":"北林区","231221":"望奎县","231222":"兰西县","231223":"青冈县","231224":"庆安县","231225":"明水县","231226":"绥棱县","231281":"安达市","231282":"肇东市","231283":"海伦市","232700":"大兴安岭地区","232701":"加格达奇区","232721":"呼玛县","232722":"塔河县","232723":"漠河县","310000":"上海市","310100":"上海市市辖区","310101":"黄浦区","310104":"徐汇区","310105":"长宁区","310106":"静安区","310107":"普陀区","310109":"虹口区","310110":"杨浦区","310112":"闵行区","310113":"宝山区","310114":"嘉定区","310115":"浦东新区","310116":"金山区","310117":"松江区","310118":"青浦区","310120":"奉贤区","310151":"崇明区","320000":"江苏省","320100":"南京市","320101":"南京市市辖区","320102":"玄武区","320104":"秦淮区","320105":"建邺区","320106":"鼓楼区","320111":"浦口区","320113":"栖霞区","320114":"雨花台区","320115":"江宁区","320116":"六合区","320117":"溧水区","320118":"高淳区","320200":"无锡市","320201":"无锡市市辖区","320205":"锡山区","320206":"惠山区","320211":"滨湖区","320213":"梁溪区","320214":"新吴区","320281":"江阴市","320282":"宜兴市","320300":"徐州市","320301":"徐州市市辖区","320302":"鼓楼区","320303":"云龙区","320305":"贾汪区","320311":"泉山区","320312":"铜山区","320321":"丰县","320322":"沛县","320324":"睢宁县","320381":"新沂市","320382":"邳州市","320400":"常州市","320401":"常州市市辖区","320402":"天宁区","320404":"钟楼区","320411":"新北区","320412":"武进区","320413":"金坛区","320481":"溧阳市","320500":"苏州市","320501":"苏州市市辖区","320505":"虎丘区","320506":"吴中区","320507":"相城区","320508":"姑苏区","320509":"吴江区","320581":"常熟市","320582":"张家港市","320583":"昆山市","320585":"太仓市","320600":"南通市","320601":"南通市市辖区","320602":"崇川区","320611":"港闸区","320612":"通州区","320621":"海安县","320623":"如东县","320681":"启东市","320682":"如皋市","320684":"海门市","320700":"连云港市","320701":"连云港市市辖区","320703":"连云区","320706":"海州区","320707":"赣榆区","320722":"东海县","320723":"灌云县","320724":"灌南县","320800":"淮安市","320801":"淮安市市辖区","320802":"清江浦区","320803":"淮安区","320804":"淮阴区","320813":"洪泽区","320826":"涟水县","320830":"盱眙县","320831":"金湖县","320900":"盐城市","320901":"盐城市市辖区","320902":"亭湖区","320903":"盐都区","320904":"大丰区","320921":"响水县","320922":"滨海县","320923":"阜宁县","320924":"射阳县","320925":"建湖县","320981":"东台市","321000":"扬州市","321001":"扬州市市辖区","321002":"广陵区","321003":"邗江区","321012":"江都区","321023":"宝应县","321081":"仪征市","321084":"高邮市","321100":"镇江市","321101":"镇江市市辖区","321102":"京口区","321111":"润州区","321112":"丹徒区","321181":"丹阳市","321182":"扬中市","321183":"句容市","321200":"泰州市","321201":"泰州市市辖区","321202":"海陵区","321203":"高港区","321204":"姜堰区","321281":"兴化市","321282":"靖江市","321283":"泰兴市","321300":"宿迁市","321301":"宿迁市市辖区","321302":"宿城区","321311":"宿豫区","321322":"沭阳县","321323":"泗阳县","321324":"泗洪县","330000":"浙江省","330100":"杭州市","330101":"杭州市市辖区","330102":"上城区","330103":"下城区","330104":"江干区","330105":"拱墅区","330106":"西湖区","330108":"滨江区","330109":"萧山区","330110":"余杭区","330111":"富阳区","330122":"桐庐县","330127":"淳安县","330182":"建德市","330185":"临安市","330200":"宁波市","330201":"宁波市市辖区","330203":"海曙区","330205":"江北区","330206":"北仑区","330211":"镇海区","330212":"鄞州区","330225":"象山县","330226":"宁海县","330281":"余姚市","330282":"慈溪市","330283":"奉化区","330300":"温州市","330301":"温州市市辖区","330302":"鹿城区","330303":"龙湾区","330304":"瓯海区","330305":"洞头区","330324":"永嘉县","330326":"平阳县","330327":"苍南县","330328":"文成县","330329":"泰顺县","330381":"瑞安市","330382":"乐清市","330400":"嘉兴市","330401":"嘉兴市市辖区","330402":"南湖区","330411":"秀洲区","330421":"嘉善县","330424":"海盐县","330481":"海宁市","330482":"平湖市","330483":"桐乡市","330500":"湖州市","330501":"湖州市市辖区","330502":"吴兴区","330503":"南浔区","330521":"德清县","330522":"长兴县","330523":"安吉县","330600":"绍兴市","330601":"绍兴市市辖区","330602":"越城区","330603":"柯桥区","330604":"上虞区","330624":"新昌县","330681":"诸暨市","330683":"嵊州市","330700":"金华市","330701":"金华市市辖区","330702":"婺城区","330703":"金东区","330723":"武义县","330726":"浦江县","330727":"磐安县","330781":"兰溪市","330782":"义乌市","330783":"东阳市","330784":"永康市","330800":"衢州市","330801":"衢州市市辖区","330802":"柯城区","330803":"衢江区","330822":"常山县","330824":"开化县","330825":"龙游县","330881":"江山市","330900":"舟山市","330901":"舟山市市辖区","330902":"定海区","330903":"普陀区","330921":"岱山县","330922":"嵊泗县","331000":"台州市","331001":"台州市市辖区","331002":"椒江区","331003":"黄岩区","331004":"路桥区","331021":"玉环县","331022":"三门县","331023":"天台县","331024":"仙居县","331081":"温岭市","331082":"临海市","331100":"丽水市","331101":"丽水市市辖区","331102":"莲都区","331121":"青田县","331122":"缙云县","331123":"遂昌县","331124":"松阳县","331125":"云和县","331126":"庆元县","331127":"景宁畲族自治县","331181":"龙泉市","340000":"安徽省","340100":"合肥市","340101":"合肥市市辖区","340102":"瑶海区","340103":"庐阳区","340104":"蜀山区","340111":"包河区","340121":"长丰县","340122":"肥东县","340123":"肥西县","340124":"庐江县","340181":"巢湖市","340200":"芜湖市","340201":"芜湖市市辖区","340202":"镜湖区","340203":"弋江区","340207":"鸠江区","340208":"三山区","340221":"芜湖县","340222":"繁昌县","340223":"南陵县","340225":"无为县","340300":"蚌埠市","340301":"蚌埠市市辖区","340302":"龙子湖区","340303":"蚌山区","340304":"禹会区","340311":"淮上区","340321":"怀远县","340322":"五河县","340323":"固镇县","340400":"淮南市","340401":"淮南市市辖区","340402":"大通区","340403":"田家庵区","340404":"谢家集区","340405":"八公山区","340406":"潘集区","340421":"凤台县","340422":"寿县","340500":"马鞍山市","340501":"马鞍山市市辖区","340503":"花山区","340504":"雨山区","340506":"博望区","340521":"当涂县","340522":"含山县","340523":"和县","340600":"淮北市","340601":"淮北市市辖区","340602":"杜集区","340603":"相山区","340604":"烈山区","340621":"濉溪县","340700":"铜陵市","340701":"铜陵市市辖区","340705":"铜官区","340706":"义安区","340711":"郊区","340722":"枞阳县","340800":"安庆市","340801":"安庆市市辖区","340802":"迎江区","340803":"大观区","340811":"宜秀区","340822":"怀宁县","340824":"潜山县","340825":"太湖县","340826":"宿松县","340827":"望江县","340828":"岳西县","340881":"桐城市","341000":"黄山市","341001":"黄山市市辖区","341002":"屯溪区","341003":"黄山区","341004":"徽州区","341021":"歙县","341022":"休宁县","341023":"黟县","341024":"祁门县","341100":"滁州市","341101":"滁州市市辖区","341102":"琅琊区","341103":"南谯区","341122":"来安县","341124":"全椒县","341125":"定远县","341126":"凤阳县","341181":"天长市","341182":"明光市","341200":"阜阳市","341201":"阜阳市市辖区","341202":"颍州区","341203":"颍东区","341204":"颍泉区","341221":"临泉县","341222":"太和县","341225":"阜南县","341226":"颍上县","341282":"界首市","341300":"宿州市","341301":"宿州市市辖区","341302":"埇桥区","341321":"砀山县","341322":"萧县","341323":"灵璧县","341324":"泗县","341500":"六安市","341501":"六安市市辖区","341502":"金安区","341503":"裕安区","341504":"叶集区","341522":"霍邱县","341523":"舒城县","341524":"金寨县","341525":"霍山县","341600":"亳州市","341601":"亳州市市辖区","341602":"谯城区","341621":"涡阳县","341622":"蒙城县","341623":"利辛县","341700":"池州市","341701":"池州市市辖区","341702":"贵池区","341721":"东至县","341722":"石台县","341723":"青阳县","341800":"宣城市","341801":"宣城市市辖区","341802":"宣州区","341821":"郎溪县","341822":"广德县","341823":"泾县","341824":"绩溪县","341825":"旌德县","341881":"宁国市","350000":"福建省","350100":"福州市","350101":"福州市市辖区","350102":"鼓楼区","350103":"台江区","350104":"仓山区","350105":"马尾区","350111":"晋安区","350121":"闽侯县","350122":"连江县","350123":"罗源县","350124":"闽清县","350125":"永泰县","350128":"平潭县","350181":"福清市","350182":"长乐市","350200":"厦门市","350201":"厦门市市辖区","350203":"思明区","350205":"海沧区","350206":"湖里区","350211":"集美区","350212":"同安区","350213":"翔安区","350300":"莆田市","350301":"莆田市市辖区","350302":"城厢区","350303":"涵江区","350304":"荔城区","350305":"秀屿区","350322":"仙游县","350400":"三明市","350401":"三明市市辖区","350402":"梅列区","350403":"三元区","350421":"明溪县","350423":"清流县","350424":"宁化县","350425":"大田县","350426":"尤溪县","350427":"沙县","350428":"将乐县","350429":"泰宁县","350430":"建宁县","350481":"永安市","350500":"泉州市","350501":"泉州市市辖区","350502":"鲤城区","350503":"丰泽区","350504":"洛江区","350505":"泉港区","350521":"惠安县","350524":"安溪县","350525":"永春县","350526":"德化县","350527":"金门县","350581":"石狮市","350582":"晋江市","350583":"南安市","350600":"漳州市","350601":"漳州市市辖区","350602":"芗城区","350603":"龙文区","350622":"云霄县","350623":"漳浦县","350624":"诏安县","350625":"长泰县","350626":"东山县","350627":"南靖县","350628":"平和县","350629":"华安县","350681":"龙海市","350700":"南平市","350701":"南平市市辖区","350702":"延平区","350703":"建阳区","350721":"顺昌县","350722":"浦城县","350723":"光泽县","350724":"松溪县","350725":"政和县","350781":"邵武市","350782":"武夷山市","350783":"建瓯市","350800":"龙岩市","350801":"龙岩市市辖区","350802":"新罗区","350803":"永定区","350821":"长汀县","350823":"上杭县","350824":"武平县","350825":"连城县","350881":"漳平市","350900":"宁德市","350901":"宁德市市辖区","350902":"蕉城区","350921":"霞浦县","350922":"古田县","350923":"屏南县","350924":"寿宁县","350925":"周宁县","350926":"柘荣县","350981":"福安市","350982":"福鼎市","360000":"江西省","360100":"南昌市","360101":"南昌市市辖区","360102":"东湖区","360103":"西湖区","360104":"青云谱区","360105":"湾里区","360111":"青山湖区","360112":"新建区","360121":"南昌县","360123":"安义县","360124":"进贤县","360200":"景德镇市","360201":"景德镇市市辖区","360202":"昌江区","360203":"珠山区","360222":"浮梁县","360281":"乐平市","360300":"萍乡市","360301":"萍乡市市辖区","360302":"安源区","360313":"湘东区","360321":"莲花县","360322":"上栗县","360323":"芦溪县","360400":"九江市","360401":"九江市市辖区","360402":"濂溪区","360403":"浔阳区","360421":"九江县","360423":"武宁县","360424":"修水县","360425":"永修县","360426":"德安县","360427":"庐山市","360428":"都昌县","360429":"湖口县","360430":"彭泽县","360481":"瑞昌市","360482":"共青城市","360500":"新余市","360501":"新余市市辖区","360502":"渝水区","360521":"分宜县","360600":"鹰潭市","360601":"鹰潭市市辖区","360602":"月湖区","360622":"余江县","360681":"贵溪市","360700":"赣州市","360701":"赣州市市辖区","360702":"章贡区","360703":"南康区","360721":"赣县区","360722":"信丰县","360723":"大余县","360724":"上犹县","360725":"崇义县","360726":"安远县","360727":"龙南县","360728":"定南县","360729":"全南县","360730":"宁都县","360731":"于都县","360732":"兴国县","360733":"会昌县","360734":"寻乌县","360735":"石城县","360781":"瑞金市","360800":"吉安市","360801":"吉安市市辖区","360802":"吉州区","360803":"青原区","360821":"吉安县","360822":"吉水县","360823":"峡江县","360824":"新干县","360825":"永丰县","360826":"泰和县","360827":"遂川县","360828":"万安县","360829":"安福县","360830":"永新县","360881":"井冈山市","360900":"宜春市","360901":"宜春市市辖区","360902":"袁州区","360921":"奉新县","360922":"万载县","360923":"上高县","360924":"宜丰县","360925":"靖安县","360926":"铜鼓县","360981":"丰城市","360982":"樟树市","360983":"高安市","361000":"抚州市","361001":"抚州市市辖区","361002":"临川区","361021":"南城县","361022":"黎川县","361023":"南丰县","361024":"崇仁县","361025":"乐安县","361026":"宜黄县","361027":"金溪县","361028":"资溪县","361029":"东乡县","361030":"广昌县","361100":"上饶市","361101":"上饶市市辖区","361102":"信州区","361103":"广丰区","361121":"上饶县","361123":"玉山县","361124":"铅山县","361125":"横峰县","361126":"弋阳县","361127":"余干县","361128":"鄱阳县","361129":"万年县","361130":"婺源县","361181":"德兴市","370000":"山东省","370100":"济南市","370101":"济南市市辖区","370102":"历下区","370103":"市中区","370104":"槐荫区","370105":"天桥区","370112":"历城区","370113":"长清区","370124":"平阴县","370125":"济阳县","370126":"商河县","370181":"章丘区","370200":"青岛市","370201":"青岛市市辖区","370202":"市南区","370203":"市北区","370211":"黄岛区","370212":"崂山区","370213":"李沧区","370214":"城阳区","370281":"胶州市","370282":"即墨市","370283":"平度市","370285":"莱西市","370300":"淄博市","370301":"淄博市市辖区","370302":"淄川区","370303":"张店区","370304":"博山区","370305":"临淄区","370306":"周村区","370321":"桓台县","370322":"高青县","370323":"沂源县","370400":"枣庄市","370401":"枣庄市市辖区","370402":"市中区","370403":"薛城区","370404":"峄城区","370405":"台儿庄区","370406":"山亭区","370481":"滕州市","370500":"东营市","370501":"东营市市辖区","370502":"东营区","370503":"河口区","370505":"垦利区","370522":"利津县","370523":"广饶县","370600":"烟台市","370601":"烟台市市辖区","370602":"芝罘区","370611":"福山区","370612":"牟平区","370613":"莱山区","370634":"长岛县","370681":"龙口市","370682":"莱阳市","370683":"莱州市","370684":"蓬莱市","370685":"招远市","370686":"栖霞市","370687":"海阳市","370700":"潍坊市","370701":"潍坊市市辖区","370702":"潍城区","370703":"寒亭区","370704":"坊子区","370705":"奎文区","370724":"临朐县","370725":"昌乐县","370781":"青州市","370782":"诸城市","370783":"寿光市","370784":"安丘市","370785":"高密市","370786":"昌邑市","370800":"济宁市","370801":"济宁市市辖区","370811":"任城区","370812":"兖州区","370826":"微山县","370827":"鱼台县","370828":"金乡县","370829":"嘉祥县","370830":"汶上县","370831":"泗水县","370832":"梁山县","370881":"曲阜市","370883":"邹城市","370900":"泰安市","370901":"泰安市市辖区","370902":"泰山区","370911":"岱岳区","370921":"宁阳县","370923":"东平县","370982":"新泰市","370983":"肥城市","371000":"威海市","371001":"威海市市辖区","371002":"环翠区","371003":"文登区","371082":"荣成市","371083":"乳山市","371100":"日照市","371101":"日照市市辖区","371102":"东港区","371103":"岚山区","371121":"五莲县","371122":"莒县","371200":"莱芜市","371201":"莱芜市市辖区","371202":"莱城区","371203":"钢城区","371300":"临沂市","371301":"临沂市市辖区","371302":"兰山区","371311":"罗庄区","371312":"河东区","371321":"沂南县","371322":"郯城县","371323":"沂水县","371324":"兰陵县","371325":"费县","371326":"平邑县","371327":"莒南县","371328":"蒙阴县","371329":"临沭县","371400":"德州市","371401":"德州市市辖区","371402":"德城区","371403":"陵城区","371422":"宁津县","371423":"庆云县","371424":"临邑县","371425":"齐河县","371426":"平原县","371427":"夏津县","371428":"武城县","371481":"乐陵市","371482":"禹城市","371500":"聊城市","371501":"聊城市市辖区","371502":"东昌府区","371521":"阳谷县","371522":"莘县","371523":"茌平县","371524":"东阿县","371525":"冠县","371526":"高唐县","371581":"临清市","371600":"滨州市","371601":"滨州市市辖区","371602":"滨城区","371603":"沾化区","371621":"惠民县","371622":"阳信县","371623":"无棣县","371625":"博兴县","371626":"邹平县","371700":"菏泽市","371701":"菏泽市市辖区","371702":"牡丹区","371703":"定陶区","371721":"曹县","371722":"单县","371723":"成武县","371724":"巨野县","371725":"郓城县","371726":"鄄城县","371728":"东明县","410000":"河南省","410100":"郑州市","410101":"郑州市市辖区","410102":"中原区","410103":"二七区","410104":"管城回族区","410105":"金水区","410106":"上街区","410108":"惠济区","410122":"中牟县","410181":"巩义市","410182":"荥阳市","410183":"新密市","410184":"新郑市","410185":"登封市","410200":"开封市","410201":"开封市市辖区","410202":"龙亭区","410203":"顺河回族区","410204":"鼓楼区","410205":"禹王台区","410212":"祥符区","410221":"杞县","410222":"通许县","410223":"尉氏县","410225":"兰考县","410300":"洛阳市","410301":"洛阳市市辖区","410302":"老城区","410303":"西工区","410304":"瀍河回族区","410305":"涧西区","410306":"吉利区","410311":"洛龙区","410322":"孟津县","410323":"新安县","410324":"栾川县","410325":"嵩县","410326":"汝阳县","410327":"宜阳县","410328":"洛宁县","410329":"伊川县","410381":"偃师市","410400":"平顶山市","410401":"平顶山市市辖区","410402":"新华区","410403":"卫东区","410404":"石龙区","410411":"湛河区","410421":"宝丰县","410422":"叶县","410423":"鲁山县","410425":"郏县","410481":"舞钢市","410482":"汝州市","410500":"安阳市","410501":"安阳市市辖区","410502":"文峰区","410503":"北关区","410505":"殷都区","410506":"龙安区","410522":"安阳县","410523":"汤阴县","410526":"滑县","410527":"内黄县","410581":"林州市","410600":"鹤壁市","410601":"鹤壁市市辖区","410602":"鹤山区","410603":"山城区","410611":"淇滨区","410621":"浚县","410622":"淇县","410700":"新乡市","410701":"新乡市市辖区","410702":"红旗区","410703":"卫滨区","410704":"凤泉区","410711":"牧野区","410721":"新乡县","410724":"获嘉县","410725":"原阳县","410726":"延津县","410727":"封丘县","410728":"长垣县","410781":"卫辉市","410782":"辉县市","410800":"焦作市","410801":"焦作市市辖区","410802":"解放区","410803":"中站区","410804":"马村区","410811":"山阳区","410821":"修武县","410822":"博爱县","410823":"武陟县","410825":"温县","410882":"沁阳市","410883":"孟州市","410900":"濮阳市","410901":"濮阳市市辖区","410902":"华龙区","410922":"清丰县","410923":"南乐县","410926":"范县","410927":"台前县","410928":"濮阳县","411000":"许昌市","411001":"许昌市市辖区","411002":"魏都区","411023":"建安区","411024":"鄢陵县","411025":"襄城县","411081":"禹州市","411082":"长葛市","411100":"漯河市","411101":"漯河市市辖区","411102":"源汇区","411103":"郾城区","411104":"召陵区","411121":"舞阳县","411122":"临颍县","411200":"三门峡市","411201":"三门峡市市辖区","411202":"湖滨区","411203":"陕州区","411221":"渑池县","411224":"卢氏县","411281":"义马市","411282":"灵宝市","411300":"南阳市","411301":"南阳市市辖区","411302":"宛城区","411303":"卧龙区","411321":"南召县","411322":"方城县","411323":"西峡县","411324":"镇平县","411325":"内乡县","411326":"淅川县","411327":"社旗县","411328":"唐河县","411329":"新野县","411330":"桐柏县","411381":"邓州市","411400":"商丘市","411401":"商丘市市辖区","411402":"梁园区","411403":"睢阳区","411421":"民权县","411422":"睢县","411423":"宁陵县","411424":"柘城县","411425":"虞城县","411426":"夏邑县","411481":"永城市","411500":"信阳市","411501":"信阳市市辖区","411502":"浉河区","411503":"平桥区","411521":"罗山县","411522":"光山县","411523":"新县","411524":"商城县","411525":"固始县","411526":"潢川县","411527":"淮滨县","411528":"息县","411600":"周口市","411601":"周口市市辖区","411602":"川汇区","411621":"扶沟县","411622":"西华县","411623":"商水县","411624":"沈丘县","411625":"郸城县","411626":"淮阳县","411627":"太康县","411628":"鹿邑县","411681":"项城市","411700":"驻马店市","411701":"驻马店市市辖区","411702":"驿城区","411721":"西平县","411722":"上蔡县","411723":"平舆县","411724":"正阳县","411725":"确山县","411726":"泌阳县","411727":"汝南县","411728":"遂平县","411729":"新蔡县","419000":"直辖县","419001":"济源市","420000":"湖北省","420100":"武汉市","420101":"武汉市市辖区","420102":"江岸区","420103":"江汉区","420104":"硚口区","420105":"汉阳区","420106":"武昌区","420107":"青山区","420111":"洪山区","420112":"东西湖区","420113":"汉南区","420114":"蔡甸区","420115":"江夏区","420116":"黄陂区","420117":"新洲区","420200":"黄石市","420201":"黄石市市辖区","420202":"黄石港区","420203":"西塞山区","420204":"下陆区","420205":"铁山区","420222":"阳新县","420281":"大冶市","420300":"十堰市","420301":"十堰市市辖区","420302":"茅箭区","420303":"张湾区","420304":"郧阳区","420322":"郧西县","420323":"竹山县","420324":"竹溪县","420325":"房县","420381":"丹江口市","420500":"宜昌市","420501":"宜昌市市辖区","420502":"西陵区","420503":"伍家岗区","420504":"点军区","420505":"猇亭区","420506":"夷陵区","420525":"远安县","420526":"兴山县","420527":"秭归县","420528":"长阳土家族自治县","420529":"五峰土家族自治县","420581":"宜都市","420582":"当阳市","420583":"枝江市","420600":"襄阳市","420601":"襄阳市市辖区","420602":"襄城区","420606":"樊城区","420607":"襄州区","420624":"南漳县","420625":"谷城县","420626":"保康县","420682":"老河口市","420683":"枣阳市","420684":"宜城市","420700":"鄂州市","420701":"鄂州市市辖区","420702":"梁子湖区","420703":"华容区","420704":"鄂城区","420800":"荆门市","420801":"荆门市市辖区","420802":"东宝区","420804":"掇刀区","420821":"京山县","420822":"沙洋县","420881":"钟祥市","420900":"孝感市","420901":"孝感市市辖区","420902":"孝南区","420921":"孝昌县","420922":"大悟县","420923":"云梦县","420981":"应城市","420982":"安陆市","420984":"汉川市","421000":"荆州市","421001":"荆州市市辖区","421002":"沙市区","421003":"荆州区","421022":"公安县","421023":"监利县","421024":"江陵县","421081":"石首市","421083":"洪湖市","421087":"松滋市","421100":"黄冈市","421101":"黄冈市市辖区","421102":"黄州区","421121":"团风县","421122":"红安县","421123":"罗田县","421124":"英山县","421125":"浠水县","421126":"蕲春县","421127":"黄梅县","421181":"麻城市","421182":"武穴市","421200":"咸宁市","421201":"咸宁市市辖区","421202":"咸安区","421221":"嘉鱼县","421222":"通城县","421223":"崇阳县","421224":"通山县","421281":"赤壁市","421300":"随州市","421301":"随州市市辖区","421303":"曾都区","421321":"随县","421381":"广水市","422800":"恩施土家族苗族自治州","422801":"恩施市","422802":"利川市","422822":"建始县","422823":"巴东县","422825":"宣恩县","422826":"咸丰县","422827":"来凤县","422828":"鹤峰县","429000":"直辖县","429004":"仙桃市","429005":"潜江市","429006":"天门市","429021":"神农架林区","430000":"湖南省","430100":"长沙市","430101":"长沙市市辖区","430102":"芙蓉区","430103":"天心区","430104":"岳麓区","430105":"开福区","430111":"雨花区","430112":"望城区","430121":"长沙县","430124":"宁乡县","430181":"浏阳市","430200":"株洲市","430201":"株洲市市辖区","430202":"荷塘区","430203":"芦淞区","430204":"石峰区","430211":"天元区","430221":"株洲县","430223":"攸县","430224":"茶陵县","430225":"炎陵县","430281":"醴陵市","430300":"湘潭市","430301":"湘潭市市辖区","430302":"雨湖区","430304":"岳塘区","430321":"湘潭县","430381":"湘乡市","430382":"韶山市","430400":"衡阳市","430401":"衡阳市市辖区","430405":"珠晖区","430406":"雁峰区","430407":"石鼓区","430408":"蒸湘区","430412":"南岳区","430421":"衡阳县","430422":"衡南县","430423":"衡山县","430424":"衡东县","430426":"祁东县","430481":"耒阳市","430482":"常宁市","430500":"邵阳市","430501":"邵阳市市辖区","430502":"双清区","430503":"大祥区","430511":"北塔区","430521":"邵东县","430522":"新邵县","430523":"邵阳县","430524":"隆回县","430525":"洞口县","430527":"绥宁县","430528":"新宁县","430529":"城步苗族自治县","430581":"武冈市","430600":"岳阳市","430601":"岳阳市市辖区","430602":"岳阳楼区","430603":"云溪区","430611":"君山区","430621":"岳阳县","430623":"华容县","430624":"湘阴县","430626":"平江县","430681":"汨罗市","430682":"临湘市","430700":"常德市","430701":"常德市市辖区","430702":"武陵区","430703":"鼎城区","430721":"安乡县","430722":"汉寿县","430723":"澧县","430724":"临澧县","430725":"桃源县","430726":"石门县","430781":"津市市","430800":"张家界市","430801":"张家界市市辖区","430802":"永定区","430811":"武陵源区","430821":"慈利县","430822":"桑植县","430900":"益阳市","430901":"益阳市市辖区","430902":"资阳区","430903":"赫山区","430921":"南县","430922":"桃江县","430923":"安化县","430981":"沅江市","431000":"郴州市","431001":"郴州市市辖区","431002":"北湖区","431003":"苏仙区","431021":"桂阳县","431022":"宜章县","431023":"永兴县","431024":"嘉禾县","431025":"临武县","431026":"汝城县","431027":"桂东县","431028":"安仁县","431081":"资兴市","431100":"永州市","431101":"永州市市辖区","431102":"零陵区","431103":"冷水滩区","431121":"祁阳县","431122":"东安县","431123":"双牌县","431124":"道县","431125":"江永县","431126":"宁远县","431127":"蓝山县","431128":"新田县","431129":"江华瑶族自治县","431200":"怀化市","431201":"怀化市市辖区","431202":"鹤城区","431221":"中方县","431222":"沅陵县","431223":"辰溪县","431224":"溆浦县","431225":"会同县","431226":"麻阳苗族自治县","431227":"新晃侗族自治县","431228":"芷江侗族自治县","431229":"靖州苗族侗族自治县","431230":"通道侗族自治县","431281":"洪江市","431300":"娄底市","431301":"娄底市市辖区","431302":"娄星区","431321":"双峰县","431322":"新化县","431381":"冷水江市","431382":"涟源市","433100":"湘西土家族苗族自治州","433101":"吉首市","433122":"泸溪县","433123":"凤凰县","433124":"花垣县","433125":"保靖县","433126":"古丈县","433127":"永顺县","433130":"龙山县","440000":"广东省","440100":"广州市","440101":"广州市市辖区","440103":"荔湾区","440104":"越秀区","440105":"海珠区","440106":"天河区","440111":"白云区","440112":"黄埔区","440113":"番禺区","440114":"花都区","440115":"南沙区","440117":"从化区","440118":"增城区","440200":"韶关市","440201":"韶关市市辖区","440203":"武江区","440204":"浈江区","440205":"曲江区","440222":"始兴县","440224":"仁化县","440229":"翁源县","440232":"乳源瑶族自治县","440233":"新丰县","440281":"乐昌市","440282":"南雄市","440300":"深圳市","440301":"深圳市市辖区","440303":"罗湖区","440304":"福田区","440305":"南山区","440306":"宝安区","440307":"龙岗区","440308":"盐田区","440309":"龙华区","440310":"坪山区","440400":"珠海市","440401":"珠海市市辖区","440402":"香洲区","440403":"斗门区","440404":"金湾区","440500":"汕头市","440501":"汕头市市辖区","440507":"龙湖区","440511":"金平区","440512":"濠江区","440513":"潮阳区","440514":"潮南区","440515":"澄海区","440523":"南澳县","440600":"佛山市","440601":"佛山市市辖区","440604":"禅城区","440605":"南海区","440606":"顺德区","440607":"三水区","440608":"高明区","440700":"江门市","440701":"江门市市辖区","440703":"蓬江区","440704":"江海区","440705":"新会区","440781":"台山市","440783":"开平市","440784":"鹤山市","440785":"恩平市","440800":"湛江市","440801":"湛江市市辖区","440802":"赤坎区","440803":"霞山区","440804":"坡头区","440811":"麻章区","440823":"遂溪县","440825":"徐闻县","440881":"廉江市","440882":"雷州市","440883":"吴川市","440900":"茂名市","440901":"茂名市市辖区","440902":"茂南区","440904":"电白区","440981":"高州市","440982":"化州市","440983":"信宜市","441200":"肇庆市","441201":"肇庆市市辖区","441202":"端州区","441203":"鼎湖区","441204":"高要区","441223":"广宁县","441224":"怀集县","441225":"封开县","441226":"德庆县","441284":"四会市","441300":"惠州市","441301":"惠州市市辖区","441302":"惠城区","441303":"惠阳区","441322":"博罗县","441323":"惠东县","441324":"龙门县","441400":"梅州市","441401":"梅州市市辖区","441402":"梅江区","441403":"梅县区","441422":"大埔县","441423":"丰顺县","441424":"五华县","441426":"平远县","441427":"蕉岭县","441481":"兴宁市","441500":"汕尾市","441501":"汕尾市市辖区","441502":"城区","441521":"海丰县","441523":"陆河县","441581":"陆丰市","441600":"河源市","441601":"河源市市辖区","441602":"源城区","441621":"紫金县","441622":"龙川县","441623":"连平县","441624":"和平县","441625":"东源县","441700":"阳江市","441701":"阳江市市辖区","441702":"江城区","441704":"阳东区","441721":"阳西县","441781":"阳春市","441800":"清远市","441801":"清远市市辖区","441802":"清城区","441803":"清新区","441821":"佛冈县","441823":"阳山县","441825":"连山壮族瑶族自治县","441826":"连南瑶族自治县","441881":"英德市","441882":"连州市","441900":"东莞市","442000":"中山市","442101":"东沙群岛","445100":"潮州市","445101":"潮州市市辖区","445102":"湘桥区","445103":"潮安区","445122":"饶平县","445200":"揭阳市","445201":"揭阳市市辖区","445202":"榕城区","445203":"揭东区","445222":"揭西县","445224":"惠来县","445281":"普宁市","445300":"云浮市","445301":"云浮市市辖区","445302":"云城区","445303":"云安区","445321":"新兴县","445322":"郁南县","445381":"罗定市","450000":"广西壮族自治区","450100":"南宁市","450101":"南宁市市辖区","450102":"兴宁区","450103":"青秀区","450105":"江南区","450107":"西乡塘区","450108":"良庆区","450109":"邕宁区","450110":"武鸣区","450123":"隆安县","450124":"马山县","450125":"上林县","450126":"宾阳县","450127":"横县","450200":"柳州市","450201":"柳州市市辖区","450202":"城中区","450203":"鱼峰区","450204":"柳南区","450205":"柳北区","450221":"柳江区","450222":"柳城县","450223":"鹿寨县","450224":"融安县","450225":"融水苗族自治县","450226":"三江侗族自治县","450300":"桂林市","450301":"桂林市市辖区","450302":"秀峰区","450303":"叠彩区","450304":"象山区","450305":"七星区","450311":"雁山区","450312":"临桂区","450321":"阳朔县","450323":"灵川县","450324":"全州县","450325":"兴安县","450326":"永福县","450327":"灌阳县","450328":"龙胜各族自治县","450329":"资源县","450330":"平乐县","450331":"荔浦县","450332":"恭城瑶族自治县","450400":"梧州市","450401":"梧州市市辖区","450403":"万秀区","450405":"长洲区","450406":"龙圩区","450421":"苍梧县","450422":"藤县","450423":"蒙山县","450481":"岑溪市","450500":"北海市","450501":"北海市市辖区","450502":"海城区","450503":"银海区","450512":"铁山港区","450521":"合浦县","450600":"防城港市","450601":"防城港市市辖区","450602":"港口区","450603":"防城区","450621":"上思县","450681":"东兴市","450700":"钦州市","450701":"钦州市市辖区","450702":"钦南区","450703":"钦北区","450721":"灵山县","450722":"浦北县","450800":"贵港市","450801":"贵港市市辖区","450802":"港北区","450803":"港南区","450804":"覃塘区","450821":"平南县","450881":"桂平市","450900":"玉林市","450901":"玉林市市辖区","450902":"玉州区","450903":"福绵区","450921":"容县","450922":"陆川县","450923":"博白县","450924":"兴业县","450981":"北流市","451000":"百色市","451001":"百色市市辖区","451002":"右江区","451021":"田阳县","451022":"田东县","451023":"平果县","451024":"德保县","451026":"那坡县","451027":"凌云县","451028":"乐业县","451029":"田林县","451030":"西林县","451031":"隆林各族自治县","451081":"靖西市","451100":"贺州市","451101":"贺州市市辖区","451102":"八步区","451103":"平桂区","451121":"昭平县","451122":"钟山县","451123":"富川瑶族自治县","451200":"河池市","451201":"河池市市辖区","451202":"金城江区","451221":"南丹县","451222":"天峨县","451223":"凤山县","451224":"东兰县","451225":"罗城仫佬族自治县","451226":"环江毛南族自治县","451227":"巴马瑶族自治县","451228":"都安瑶族自治县","451229":"大化瑶族自治县","451281":"宜州市","451300":"来宾市","451301":"来宾市市辖区","451302":"兴宾区","451321":"忻城县","451322":"象州县","451323":"武宣县","451324":"金秀瑶族自治县","451381":"合山市","451400":"崇左市","451401":"崇左市市辖区","451402":"江州区","451421":"扶绥县","451422":"宁明县","451423":"龙州县","451424":"大新县","451425":"天等县","451481":"凭祥市","460000":"海南省","460100":"海口市","460101":"海口市市辖区","460105":"秀英区","460106":"龙华区","460107":"琼山区","460108":"美兰区","460200":"三亚市","460201":"三亚市市辖区","460202":"海棠区","460203":"吉阳区","460204":"天涯区","460205":"崖州区","460300":"三沙市","460301":"三沙市市辖区","460321":"西沙群岛","460322":"南沙群岛","460323":"中沙群岛的岛礁及其海域","460400":"儋州市","469000":"直辖县","469001":"五指山市","469002":"琼海市","469005":"文昌市","469006":"万宁市","469007":"东方市","469021":"定安县","469022":"屯昌县","469023":"澄迈县","469024":"临高县","469025":"白沙黎族自治县","469026":"昌江黎族自治县","469027":"乐东黎族自治县","469028":"陵水黎族自治县","469029":"保亭黎族苗族自治县","469030":"琼中黎族苗族自治县","500000":"重庆市","500100":"重庆市市辖区","500101":"万州区","500102":"涪陵区","500103":"渝中区","500104":"大渡口区","500105":"江北区","500106":"沙坪坝区","500107":"九龙坡区","500108":"南岸区","500109":"北碚区","500110":"綦江区","500111":"大足区","500112":"渝北区","500113":"巴南区","500114":"黔江区","500115":"长寿区","500116":"江津区","500117":"合川区","500118":"永川区","500119":"南川区","500120":"璧山区","500151":"铜梁区","500152":"潼南区","500153":"荣昌区","500154":"开州区","500200":"重庆市郊县","500228":"梁平区","500229":"城口县","500230":"丰都县","500231":"垫江县","500232":"武隆区","500233":"忠县","500235":"云阳县","500236":"奉节县","500237":"巫山县","500238":"巫溪县","500240":"石柱土家族自治县","500241":"秀山土家族苗族自治县","500242":"酉阳土家族苗族自治县","500243":"彭水苗族土家族自治县","510000":"四川省","510100":"成都市","510101":"成都市市辖区","510104":"锦江区","510105":"青羊区","510106":"金牛区","510107":"武侯区","510108":"成华区","510112":"龙泉驿区","510113":"青白江区","510114":"新都区","510115":"温江区","510116":"双流区","510121":"金堂县","510124":"郫都区","510129":"大邑县","510131":"蒲江县","510132":"新津县","510180":"简阳市","510181":"都江堰市","510182":"彭州市","510183":"邛崃市","510184":"崇州市","510300":"自贡市","510301":"自贡市市辖区","510302":"自流井区","510303":"贡井区","510304":"大安区","510311":"沿滩区","510321":"荣县","510322":"富顺县","510400":"攀枝花市","510401":"攀枝花市市辖区","510402":"东区","510403":"西区","510411":"仁和区","510421":"米易县","510422":"盐边县","510500":"泸州市","510501":"泸州市市辖区","510502":"江阳区","510503":"纳溪区","510504":"龙马潭区","510521":"泸县","510522":"合江县","510524":"叙永县","510525":"古蔺县","510600":"德阳市","510601":"德阳市市辖区","510603":"旌阳区","510623":"中江县","510626":"罗江县","510681":"广汉市","510682":"什邡市","510683":"绵竹市","510700":"绵阳市","510701":"绵阳市市辖区","510703":"涪城区","510704":"游仙区","510705":"安州区","510722":"三台县","510723":"盐亭县","510725":"梓潼县","510726":"北川羌族自治县","510727":"平武县","510781":"江油市","510800":"广元市","510801":"广元市市辖区","510802":"利州区","510811":"昭化区","510812":"朝天区","510821":"旺苍县","510822":"青川县","510823":"剑阁县","510824":"苍溪县","510900":"遂宁市","510901":"遂宁市市辖区","510903":"船山区","510904":"安居区","510921":"蓬溪县","510922":"射洪县","510923":"大英县","511000":"内江市","511001":"内江市市辖区","511002":"市中区","511011":"东兴区","511024":"威远县","511025":"资中县","511028":"隆昌县","511100":"乐山市","511101":"乐山市市辖区","511102":"市中区","511111":"沙湾区","511112":"五通桥区","511113":"金口河区","511123":"犍为县","511124":"井研县","511126":"夹江县","511129":"沐川县","511132":"峨边彝族自治县","511133":"马边彝族自治县","511181":"峨眉山市","511300":"南充市","511301":"南充市市辖区","511302":"顺庆区","511303":"高坪区","511304":"嘉陵区","511321":"南部县","511322":"营山县","511323":"蓬安县","511324":"仪陇县","511325":"西充县","511381":"阆中市","511400":"眉山市","511401":"眉山市市辖区","511402":"东坡区","511403":"彭山区","511421":"仁寿县","511423":"洪雅县","511424":"丹棱县","511425":"青神县","511500":"宜宾市","511501":"宜宾市市辖区","511502":"翠屏区","511503":"南溪区","511521":"宜宾县","511523":"江安县","511524":"长宁县","511525":"高县","511526":"珙县","511527":"筠连县","511528":"兴文县","511529":"屏山县","511600":"广安市","511601":"广安市市辖区","511602":"广安区","511603":"前锋区","511621":"岳池县","511622":"武胜县","511623":"邻水县","511681":"华蓥市","511700":"达州市","511701":"达州市市辖区","511702":"通川区","511703":"达川区","511722":"宣汉县","511723":"开江县","511724":"大竹县","511725":"渠县","511781":"万源市","511800":"雅安市","511801":"雅安市市辖区","511802":"雨城区","511803":"名山区","511822":"荥经县","511823":"汉源县","511824":"石棉县","511825":"天全县","511826":"芦山县","511827":"宝兴县","511900":"巴中市","511901":"巴中市市辖区","511902":"巴州区","511903":"恩阳区","511921":"通江县","511922":"南江县","511923":"平昌县","512000":"资阳市","512001":"资阳市市辖区","512002":"雁江区","512021":"安岳县","512022":"乐至县","513200":"阿坝藏族羌族自治州","513201":"马尔康市","513221":"汶川县","513222":"理县","513223":"茂县","513224":"松潘县","513225":"九寨沟县","513226":"金川县","513227":"小金县","513228":"黑水县","513230":"壤塘县","513231":"阿坝县","513232":"若尔盖县","513233":"红原县","513300":"甘孜藏族自治州","513301":"康定市","513322":"泸定县","513323":"丹巴县","513324":"九龙县","513325":"雅江县","513326":"道孚县","513327":"炉霍县","513328":"甘孜县","513329":"新龙县","513330":"德格县","513331":"白玉县","513332":"石渠县","513333":"色达县","513334":"理塘县","513335":"巴塘县","513336":"乡城县","513337":"稻城县","513338":"得荣县","513400":"凉山彝族自治州","513401":"西昌市","513422":"木里藏族自治县","513423":"盐源县","513424":"德昌县","513425":"会理县","513426":"会东县","513427":"宁南县","513428":"普格县","513429":"布拖县","513430":"金阳县","513431":"昭觉县","513432":"喜德县","513433":"冕宁县","513434":"越西县","513435":"甘洛县","513436":"美姑县","513437":"雷波县","520000":"贵州省","520100":"贵阳市","520101":"贵阳市市辖区","520102":"南明区","520103":"云岩区","520111":"花溪区","520112":"乌当区","520113":"白云区","520115":"观山湖区","520121":"开阳县","520122":"息烽县","520123":"修文县","520181":"清镇市","520200":"六盘水市","520201":"钟山区","520203":"六枝特区","520221":"水城县","520222":"盘县","520300":"遵义市","520301":"遵义市市辖区","520302":"红花岗区","520303":"汇川区","520304":"播州区","520322":"桐梓县","520323":"绥阳县","520324":"正安县","520325":"道真仡佬族苗族自治县","520326":"务川仡佬族苗族自治县","520327":"凤冈县","520328":"湄潭县","520329":"余庆县","520330":"习水县","520381":"赤水市","520382":"仁怀市","520400":"安顺市","520401":"安顺市市辖区","520402":"西秀区","520403":"平坝区","520422":"普定县","520423":"镇宁布依族苗族自治县","520424":"关岭布依族苗族自治县","520425":"紫云苗族布依族自治县","520500":"毕节市","520502":"七星关区","520521":"大方县","520522":"黔西县","520523":"金沙县","520524":"织金县","520525":"纳雍县","520526":"威宁彝族回族苗族自治县","520527":"赫章县","520600":"铜仁市","520602":"碧江区","520603":"万山区","520621":"江口县","520622":"玉屏侗族自治县","520623":"石阡县","520624":"思南县","520625":"印江土家族苗族自治县","520626":"德江县","520627":"沿河土家族自治县","520628":"松桃苗族自治县","522300":"黔西南布依族苗族自治州","522301":"兴义市","522322":"兴仁县","522323":"普安县","522324":"晴隆县","522325":"贞丰县","522326":"望谟县","522327":"册亨县","522328":"安龙县","522600":"黔东南苗族侗族自治州","522601":"凯里市","522622":"黄平县","522623":"施秉县","522624":"三穗县","522625":"镇远县","522626":"岑巩县","522627":"天柱县","522628":"锦屏县","522629":"剑河县","522630":"台江县","522631":"黎平县","522632":"榕江县","522633":"从江县","522634":"雷山县","522635":"麻江县","522636":"丹寨县","522700":"黔南布依族苗族自治州","522701":"都匀市","522702":"福泉市","522722":"荔波县","522723":"贵定县","522725":"瓮安县","522726":"独山县","522727":"平塘县","522728":"罗甸县","522729":"长顺县","522730":"龙里县","522731":"惠水县","522732":"三都水族自治县","530000":"云南省","530100":"昆明市","530101":"昆明市市辖区","530102":"五华区","530103":"盘龙区","530111":"官渡区","530112":"西山区","530113":"东川区","530114":"呈贡区","530122":"晋宁区","530124":"富民县","530125":"宜良县","530126":"石林彝族自治县","530127":"嵩明县","530128":"禄劝彝族苗族自治县","530129":"寻甸回族彝族自治县","530181":"安宁市","530300":"曲靖市","530301":"曲靖市市辖区","530302":"麒麟区","530303":"沾益区","530321":"马龙县","530322":"陆良县","530323":"师宗县","530324":"罗平县","530325":"富源县","530326":"会泽县","530381":"宣威市","530400":"玉溪市","530401":"玉溪市市辖区","530402":"红塔区","530403":"江川区","530422":"澄江县","530423":"通海县","530424":"华宁县","530425":"易门县","530426":"峨山彝族自治县","530427":"新平彝族傣族自治县","530428":"元江哈尼族彝族傣族自治县","530500":"保山市","530501":"保山市市辖区","530502":"隆阳区","530521":"施甸县","530523":"龙陵县","530524":"昌宁县","530581":"腾冲市","530600":"昭通市","530601":"昭通市市辖区","530602":"昭阳区","530621":"鲁甸县","530622":"巧家县","530623":"盐津县","530624":"大关县","530625":"永善县","530626":"绥江县","530627":"镇雄县","530628":"彝良县","530629":"威信县","530630":"水富县","530700":"丽江市","530701":"丽江市市辖区","530702":"古城区","530721":"玉龙纳西族自治县","530722":"永胜县","530723":"华坪县","530724":"宁蒗彝族自治县","530800":"普洱市","530801":"普洱市市辖区","530802":"思茅区","530821":"宁洱哈尼族彝族自治县","530822":"墨江哈尼族自治县","530823":"景东彝族自治县","530824":"景谷傣族彝族自治县","530825":"镇沅彝族哈尼族拉祜族自治县","530826":"江城哈尼族彝族自治县","530827":"孟连傣族拉祜族佤族自治县","530828":"澜沧拉祜族自治县","530829":"西盟佤族自治县","530900":"临沧市","530901":"临沧市市辖区","530902":"临翔区","530921":"凤庆县","530922":"云县","530923":"永德县","530924":"镇康县","530925":"双江拉祜族佤族布朗族傣族自治县","530926":"耿马傣族佤族自治县","530927":"沧源佤族自治县","532300":"楚雄彝族自治州","532301":"楚雄市","532322":"双柏县","532323":"牟定县","532324":"南华县","532325":"姚安县","532326":"大姚县","532327":"永仁县","532328":"元谋县","532329":"武定县","532331":"禄丰县","532500":"红河哈尼族彝族自治州","532501":"个旧市","532502":"开远市","532503":"蒙自市","532504":"弥勒市","532523":"屏边苗族自治县","532524":"建水县","532525":"石屏县","532527":"泸西县","532528":"元阳县","532529":"红河县","532530":"金平苗族瑶族傣族自治县","532531":"绿春县","532532":"河口瑶族自治县","532600":"文山壮族苗族自治州","532601":"文山市","532622":"砚山县","532623":"西畴县","532624":"麻栗坡县","532625":"马关县","532626":"丘北县","532627":"广南县","532628":"富宁县","532800":"西双版纳傣族自治州","532801":"景洪市","532822":"勐海县","532823":"勐腊县","532900":"大理白族自治州","532901":"大理市","532922":"漾濞彝族自治县","532923":"祥云县","532924":"宾川县","532925":"弥渡县","532926":"南涧彝族自治县","532927":"巍山彝族回族自治县","532928":"永平县","532929":"云龙县","532930":"洱源县","532931":"剑川县","532932":"鹤庆县","533100":"德宏傣族景颇族自治州","533102":"瑞丽市","533103":"芒市","533122":"梁河县","533123":"盈江县","533124":"陇川县","533300":"怒江傈僳族自治州","533301":"泸水市","533323":"福贡县","533324":"贡山独龙族怒族自治县","533325":"兰坪白族普米族自治县","533400":"迪庆藏族自治州","533401":"香格里拉市","533422":"德钦县","533423":"维西傈僳族自治县","540000":"西藏自治区","540100":"拉萨市","540101":"拉萨市市辖区","540102":"城关区","540103":"堆龙德庆区","540121":"林周县","540122":"当雄县","540123":"尼木县","540124":"曲水县","540126":"达孜县","540127":"墨竹工卡县","540200":"日喀则市","540202":"桑珠孜区","540221":"南木林县","540222":"江孜县","540223":"定日县","540224":"萨迦县","540225":"拉孜县","540226":"昂仁县","540227":"谢通门县","540228":"白朗县","540229":"仁布县","540230":"康马县","540231":"定结县","540232":"仲巴县","540233":"亚东县","540234":"吉隆县","540235":"聂拉木县","540236":"萨嘎县","540237":"岗巴县","540300":"昌都市","540302":"卡若区","540321":"江达县","540322":"贡觉县","540323":"类乌齐县","540324":"丁青县","540325":"察雅县","540326":"八宿县","540327":"左贡县","540328":"芒康县","540329":"洛隆县","540330":"边坝县","540400":"林芝市","540402":"巴宜区","540421":"工布江达县","540422":"米林县","540423":"墨脱县","540424":"波密县","540425":"察隅县","540426":"朗县","540500":"山南市","540502":"乃东区","540521":"扎囊县","540522":"贡嘎县","540523":"桑日县","540524":"琼结县","540525":"曲松县","540526":"措美县","540527":"洛扎县","540528":"加查县","540529":"隆子县","540530":"错那县","540531":"浪卡子县","542400":"那曲地区","542421":"那曲县","542422":"嘉黎县","542423":"比如县","542424":"聂荣县","542425":"安多县","542426":"申扎县","542427":"索县","542428":"班戈县","542429":"巴青县","542430":"尼玛县","542431":"双湖县","542500":"阿里地区","542521":"普兰县","542522":"札达县","542523":"噶尔县","542524":"日土县","542525":"革吉县","542526":"改则县","542527":"措勤县","610000":"陕西省","610100":"西安市","610101":"西安市市辖区","610102":"新城区","610103":"碑林区","610104":"莲湖区","610111":"灞桥区","610112":"未央区","610113":"雁塔区","610114":"阎良区","610115":"临潼区","610116":"长安区","610117":"高陵区","610122":"蓝田县","610124":"周至县","610125":"鄠邑区","610200":"铜川市","610201":"铜川市市辖区","610202":"王益区","610203":"印台区","610204":"耀州区","610222":"宜君县","610300":"宝鸡市","610301":"宝鸡市市辖区","610302":"渭滨区","610303":"金台区","610304":"陈仓区","610322":"凤翔县","610323":"岐山县","610324":"扶风县","610326":"眉县","610327":"陇县","610328":"千阳县","610329":"麟游县","610330":"凤县","610331":"太白县","610400":"咸阳市","610401":"咸阳市市辖区","610402":"秦都区","610403":"杨陵区","610404":"渭城区","610422":"三原县","610423":"泾阳县","610424":"乾县","610425":"礼泉县","610426":"永寿县","610427":"彬县","610428":"长武县","610429":"旬邑县","610430":"淳化县","610431":"武功县","610481":"兴平市","610500":"渭南市","610501":"渭南市市辖区","610502":"临渭区","610503":"华州区","610522":"潼关县","610523":"大荔县","610524":"合阳县","610525":"澄城县","610526":"蒲城县","610527":"白水县","610528":"富平县","610581":"韩城市","610582":"华阴市","610600":"延安市","610601":"延安市市辖区","610602":"宝塔区","610621":"延长县","610622":"延川县","610623":"子长县","610624":"安塞区","610625":"志丹县","610626":"吴起县","610627":"甘泉县","610628":"富县","610629":"洛川县","610630":"宜川县","610631":"黄龙县","610632":"黄陵县","610700":"汉中市","610701":"汉中市市辖区","610702":"汉台区","610721":"南郑县","610722":"城固县","610723":"洋县","610724":"西乡县","610725":"勉县","610726":"宁强县","610727":"略阳县","610728":"镇巴县","610729":"留坝县","610730":"佛坪县","610800":"榆林市","610801":"榆林市市辖区","610802":"榆阳区","610803":"横山区","610821":"神木县","610822":"府谷县","610824":"靖边县","610825":"定边县","610826":"绥德县","610827":"米脂县","610828":"佳县","610829":"吴堡县","610830":"清涧县","610831":"子洲县","610900":"安康市","610901":"安康市市辖区","610902":"汉滨区","610921":"汉阴县","610922":"石泉县","610923":"宁陕县","610924":"紫阳县","610925":"岚皋县","610926":"平利县","610927":"镇坪县","610928":"旬阳县","610929":"白河县","611000":"商洛市","611001":"商洛市市辖区","611002":"商州区","611021":"洛南县","611022":"丹凤县","611023":"商南县","611024":"山阳县","611025":"镇安县","611026":"柞水县","620000":"甘肃省","620100":"兰州市","620101":"兰州市市辖区","620102":"城关区","620103":"七里河区","620104":"西固区","620105":"安宁区","620111":"红古区","620121":"永登县","620122":"皋兰县","620123":"榆中县","620200":"嘉峪关市","620201":"嘉峪关市市辖区","620300":"金昌市","620301":"金昌市市辖区","620302":"金川区","620321":"永昌县","620400":"白银市","620401":"白银市市辖区","620402":"白银区","620403":"平川区","620421":"靖远县","620422":"会宁县","620423":"景泰县","620500":"天水市","620501":"天水市市辖区","620502":"秦州区","620503":"麦积区","620521":"清水县","620522":"秦安县","620523":"甘谷县","620524":"武山县","620525":"张家川回族自治县","620600":"武威市","620601":"武威市市辖区","620602":"凉州区","620621":"民勤县","620622":"古浪县","620623":"天祝藏族自治县","620700":"张掖市","620701":"张掖市市辖区","620702":"甘州区","620721":"肃南裕固族自治县","620722":"民乐县","620723":"临泽县","620724":"高台县","620725":"山丹县","620800":"平凉市","620801":"平凉市市辖区","620802":"崆峒区","620821":"泾川县","620822":"灵台县","620823":"崇信县","620824":"华亭县","620825":"庄浪县","620826":"静宁县","620900":"酒泉市","620901":"酒泉市市辖区","620902":"肃州区","620921":"金塔县","620922":"瓜州县","620923":"肃北蒙古族自治县","620924":"阿克塞哈萨克族自治县","620981":"玉门市","620982":"敦煌市","621000":"庆阳市","621001":"庆阳市市辖区","621002":"西峰区","621021":"庆城县","621022":"环县","621023":"华池县","621024":"合水县","621025":"正宁县","621026":"宁县","621027":"镇原县","621100":"定西市","621101":"定西市市辖区","621102":"安定区","621121":"通渭县","621122":"陇西县","621123":"渭源县","621124":"临洮县","621125":"漳县","621126":"岷县","621200":"陇南市","621201":"陇南市市辖区","621202":"武都区","621221":"成县","621222":"文县","621223":"宕昌县","621224":"康县","621225":"西和县","621226":"礼县","621227":"徽县","621228":"两当县","622900":"临夏回族自治州","622901":"临夏市","622921":"临夏县","622922":"康乐县","622923":"永靖县","622924":"广河县","622925":"和政县","622926":"东乡族自治县","622927":"积石山保安族东乡族撒拉族自治县","623000":"甘南藏族自治州","623001":"合作市","623021":"临潭县","623022":"卓尼县","623023":"舟曲县","623024":"迭部县","623025":"玛曲县","623026":"碌曲县","623027":"夏河县","630000":"青海省","630100":"西宁市","630101":"西宁市市辖区","630102":"城东区","630103":"城中区","630104":"城西区","630105":"城北区","630121":"大通回族土族自治县","630122":"湟中县","630123":"湟源县","630200":"海东市","630202":"乐都区","630203":"平安区","630222":"民和回族土族自治县","630223":"互助土族自治县","630224":"化隆回族自治县","630225":"循化撒拉族自治县","632200":"海北藏族自治州","632221":"门源回族自治县","632222":"祁连县","632223":"海晏县","632224":"刚察县","632300":"黄南藏族自治州","632321":"同仁县","632322":"尖扎县","632323":"泽库县","632324":"河南蒙古族自治县","632500":"海南藏族自治州","632521":"共和县","632522":"同德县","632523":"贵德县","632524":"兴海县","632525":"贵南县","632600":"果洛藏族自治州","632621":"玛沁县","632622":"班玛县","632623":"甘德县","632624":"达日县","632625":"久治县","632626":"玛多县","632700":"玉树藏族自治州","632701":"玉树市","632722":"杂多县","632723":"称多县","632724":"治多县","632725":"囊谦县","632726":"曲麻莱县","632800":"海西蒙古族藏族自治州","632801":"格尔木市","632802":"德令哈市","632821":"乌兰县","632822":"都兰县","632823":"天峻县","632825":"海西蒙古族藏族自治州直辖","640000":"宁夏回族自治区","640100":"银川市","640101":"银川市市辖区","640104":"兴庆区","640105":"西夏区","640106":"金凤区","640121":"永宁县","640122":"贺兰县","640181":"灵武市","640200":"石嘴山市","640201":"石嘴山市市辖区","640202":"大武口区","640205":"惠农区","640221":"平罗县","640300":"吴忠市","640301":"吴忠市市辖区","640302":"利通区","640303":"红寺堡区","640323":"盐池县","640324":"同心县","640381":"青铜峡市","640400":"固原市","640401":"固原市市辖区","640402":"原州区","640422":"西吉县","640423":"隆德县","640424":"泾源县","640425":"彭阳县","640500":"中卫市","640501":"中卫市市辖区","640502":"沙坡头区","640521":"中宁县","640522":"海原县","650000":"新疆维吾尔自治区","650100":"乌鲁木齐市","650101":"乌鲁木齐市市辖区","650102":"天山区","650103":"沙依巴克区","650104":"新市区","650105":"水磨沟区","650106":"头屯河区","650107":"达坂城区","650109":"米东区","650121":"乌鲁木齐县","650200":"克拉玛依市","650201":"克拉玛依市市辖区","650202":"独山子区","650203":"克拉玛依区","650204":"白碱滩区","650205":"乌尔禾区","650400":"吐鲁番市","650402":"高昌区","650421":"鄯善县","650422":"托克逊县","650500":"哈密市","650502":"伊州区","650521":"巴里坤哈萨克自治县","650522":"伊吾县","652300":"昌吉回族自治州","652301":"昌吉市","652302":"阜康市","652323":"呼图壁县","652324":"玛纳斯县","652325":"奇台县","652327":"吉木萨尔县","652328":"木垒哈萨克自治县","652700":"博尔塔拉蒙古自治州","652701":"博乐市","652702":"阿拉山口市","652722":"精河县","652723":"温泉县","652800":"巴音郭楞蒙古自治州","652801":"库尔勒市","652822":"轮台县","652823":"尉犁县","652824":"若羌县","652825":"且末县","652826":"焉耆回族自治县","652827":"和静县","652828":"和硕县","652829":"博湖县","652900":"阿克苏地区","652901":"阿克苏市","652922":"温宿县","652923":"库车县","652924":"沙雅县","652925":"新和县","652926":"拜城县","652927":"乌什县","652928":"阿瓦提县","652929":"柯坪县","653000":"克孜勒苏柯尔克孜自治州","653001":"阿图什市","653022":"阿克陶县","653023":"阿合奇县","653024":"乌恰县","653100":"喀什地区","653101":"喀什市","653121":"疏附县","653122":"疏勒县","653123":"英吉沙县","653124":"泽普县","653125":"莎车县","653126":"叶城县","653127":"麦盖提县","653128":"岳普湖县","653129":"伽师县","653130":"巴楚县","653131":"塔什库尔干塔吉克自治县","653200":"和田地区","653201":"和田市","653221":"和田县","653222":"墨玉县","653223":"皮山县","653224":"洛浦县","653225":"策勒县","653226":"于田县","653227":"民丰县","654000":"伊犁哈萨克自治州","654002":"伊宁市","654003":"奎屯市","654004":"霍尔果斯市","654021":"伊宁县","654022":"察布查尔锡伯自治县","654023":"霍城县","654024":"巩留县","654025":"新源县","654026":"昭苏县","654027":"特克斯县","654028":"尼勒克县","654200":"塔城地区","654201":"塔城市","654202":"乌苏市","654221":"额敏县","654223":"沙湾县","654224":"托里县","654225":"裕民县","654226":"和布克赛尔蒙古自治县","654300":"阿勒泰地区","654301":"阿勒泰市","654321":"布尔津县","654322":"富蕴县","654323":"福海县","654324":"哈巴河县","654325":"青河县","654326":"吉木乃县","659001":"石河子市","659002":"阿拉尔市","659003":"图木舒克市","659004":"五家渠市","659005":"北屯市","659006":"铁门关市","659007":"双河市","659008":"可克达拉市","659009":"昆玉市","710000":"台湾省","810000":"香港特別行政區","810001":"中西區","810002":"灣仔區","810003":"東區","810004":"南區","810005":"油尖旺區","810006":"深水埗區","810007":"九龍城區","810008":"黃大仙區","810009":"觀塘區","810010":"荃灣區","810011":"屯門區","810012":"元朗區","810013":"北區","810014":"大埔區","810015":"西貢區","810016":"沙田區","810017":"葵青區","810018":"離島區","820000":"澳門特別行政區","820001":"花地瑪堂區","820002":"花王堂區","820003":"望德堂區","820004":"大堂區","820005":"風順堂區","820006":"嘉模堂區","820007":"路氹填海區","820008":"聖方濟各堂區","900000":"外國"}';
                //this.AddressCache = JSON.parse(AddressCache);

                this.LoadAreasDatadata();
                $.SmartForm.AddressCache = {};
                $.SmartForm.AddressCache.All = this.AddressCache;
                $.SmartForm.AddressCache.ProvincesData = this.ProvincesData;
                $.SmartForm.AddressCache.CitiesData = this.CitiesData;
                $.SmartForm.AddressCache.TownsData = this.TownsData;
            }
            else {
                var params = { "ActionName": "GetAddressSourceData" }
                this.Ajax(
                    that.FormAreaSelectSourceDataUrl,
                    "POST",
                    {
                        PostData: JSON.stringify(params)
                    },
                    function (data) {
                        that.AddressCache = data.ReturnData["AddressData"];
                        that.LoadAreasDatadata();
                        localStorage.setItem("AddressCache", JSON.stringify(that.AddressCache));
                        $.SmartForm.AddressCache = {};
                        $.SmartForm.AddressCache.All = that.AddressCache;
                        $.SmartForm.AddressCache.ProvincesData = that.ProvincesData;
                        $.SmartForm.AddressCache.CitiesData = that.CitiesData;
                        $.SmartForm.AddressCache.TownsData = that.TownsData;
                    }, false);
            }

        },
        LoadAreasDatadata: function () {
            var that = this;
            that.ProvincesData = [];
            that.CitiesData = {};
            that.TownsData = {};
            for (var i = 11; i < 99; i++) {
                var provinceKey = i + "0000";
                if (!that.AddressCache[provinceKey])
                    continue;

                that.ProvincesData.push(provinceKey);

                that.CitiesData[provinceKey] = [];
                for (var j = 1; j < 99; j++) {
                    var cityKey = j + "";
                    if (j < 10) {
                        cityKey = "0" + cityKey;
                    }
                    var cityKeyFull = i + cityKey + "00";
                    if (!that.AddressCache[cityKeyFull])
                        continue;
                    if (!this.SpecialKey[cityKeyFull]) {
                        that.CitiesData[provinceKey].push(cityKeyFull);
                        that.TownsData[cityKeyFull] = [];
                        for (var k = 1; k < 99; k++) {
                            var townKey = k + "";
                            if (k < 10) {
                                townKey = "0" + townKey;
                            }
                            var townKeyFull = i + cityKey + townKey;
                            if (!that.AddressCache[townKeyFull])
                                continue;
                            that.TownsData[cityKeyFull].push(townKeyFull);
                        }
                    }
                    else {
                        that.TownsData[cityKeyFull] = [];
                        for (var k = 1; k < 99; k++) {
                            var townKey = k + "";
                            if (k < 10) {
                                townKey = "0" + townKey;
                            }
                            var townKeyFull = i + cityKey + townKey;
                            if (!that.AddressCache[townKeyFull])
                                continue;
                            that.TownsData[cityKeyFull].push(townKeyFull);
                            that.TownsData[townKeyFull] = [];
                            that.TownsData[townKeyFull].push(townKeyFull);
                            that.CitiesData[provinceKey].push(townKeyFull);
                        }
                    }
                }
            }
        }
    });
})(jQuery);;
(function ($) {
    $.fn.FormButton = function () {
        return $.ControlManager.Run.call(this, "FormButton", arguments);
    };

    // 构造函数
    $.Controls.FormButton = function (element, options, sheetInfo) {
        $.Controls.FormButton.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormButton.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            this.Action = this.DataField;

            //渲染Html页面
            this.HtmlRender();

            //绑定事件
            this.BindEvent();
        },
        //渲染html内容
        HtmlRender: function () {
            this.$Input = $("<button class='btn btn-config' name='" + this.DataField + "' class='form-control'>" + this.DisplayName + "</button>");
            this.$InputBody.append(this.$Input);
        },
        //绑定事件
        BindEvent: function () {
            $(this.$Input).off("click.FormButton").on("click.FormButton", this, function (e) {
                var that = e.data;
                $.SmartForm.OnAction(that);
                return false;
            });
        },

        //$.Buttons.BaseButton 有该方法，方便saas开发者统一操作
        DoAction: function () {
            $.SmartForm.OnAction(this);
        }
    });
})(jQuery);;
//文本框(FormTextBox)
(function ($) {
    $.fn.FormTextBox = function () {
        return $.ControlManager.Run.call(this, "FormTextBox", arguments);
    };

    // 构造函数
    $.Controls.FormTextBox = function (element, options, sheetInfo) {
        $.Controls.FormTextBox.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormTextBox.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }
            //是否在子表里面
            //this.IsInGridView = !$.isEmptyObject(this.ObjectId);
            //渲染Html页面
            this.HtmlRender();
            //渲染校验模式
            //this.ModeRender();
            //绑定事件
            this.BindEvent();

            //Error:新建的话，可以制作默认值 ，非新建设置值加载的值
            if (this.Value) {
                this.SetValue(this.Value);
            }

            //设置placeholder
            if (this.PlaceHolder) {
                this.SetPlaceHolder(this.PlaceHolder);
            }
            // 不可编辑
            if (!this.Editable) {
                this.SetReadonly(true);
                return;
            }
        },

        //渲染html内容
        HtmlRender: function () {
            if (!this.Editable) {//overflow:auto;
                this.$Input = $('<pre style="border:none;white-space:pre-wrap;white-space:-moz-pre-wrap;white-space:-pre-wrap;white-space:-o-pre-wrap;word-wrap:break-word;word-break:break-all">');
            }
            else {
                this.$Input = $("<input type='text' name='" + this.DataField + "' class='form-control' maxlength='200' style='height:32px;'>");
                if (this.IsMultiple) {
                    this.$Input = $("<textarea name='" + this.DataField + "' class='form-control' maxlength='200'>");
                }

                if (this.Mode == "Normal") {
                    if (!$.isEmptyObject(this.ObjectId)) { //border: 1px solid #ddd;overflow-y: scroll;
                        this.$Input = $("<textarea name='" + this.DataField +
                            "' class='form-control' maxlength='200' style='display:block;overflow-y: hidden;resize: none'>");
                        this.$Input.attr('rows', 1).css({ 'resize': 'none', 'height': '32px' });
                    }
                }
            }
            this.$InputBody.append(this.$Input);
        },

        //渲染模式：邮件、电话、身份证
        ModeRender: function () {
            switch (this.Mode) {
                case "Email":
                    this.Expression = /^\w+([-+.]\w+)*@\w+([-+.]\w+)*\.\w+([-.]\w+)*$/;
                    this.ErrorAlert = "错误的邮箱格式!";
                    break;
                case "Mobile":
                    this.Expression = /^1[3-8]\d{9}$/;
                    this.ErrorAlert = "错误的手机格式!";
                    break;
                case "Telephone":
                    this.Expression = /^(0\d{2,3}-)?\d{7,8}(-\d{1,4})?$/;
                    this.ErrorAlert = "错误的电话格式!";
                    break;
                case "Card":
                    this.Expression = /^\d{15}(\d{2}[A-Za-z0-9])?$/
                    this.ErrorAlert = "错误的身份证格式!";
                    break;
            }

        },

        //绑定事件
        BindEvent: function () {
            $(this.$Input).off("blur.FormTextBox").on("blur.FormTextBox", this, function (e) {
                var $this = $(this);
                var that = e.data;
                that.ValChange();
                if ($.isEmptyObject(that.ObjectId)) {
                    that.Required && ($this.val() != "" && $this.removeAttr("style"));
                }
            });
            if (!$.isEmptyObject(this.ObjectId)) {
                //设置文本控件高度自动适应
                $(this.$Input).on('keydown', function (e) {
                    if (e.keyCode == 13) return false;
                    this.style.height = (this.scrollHeight + 2) + 'px';
                });
                $(this.$Input).on('focus', function () {
                    if ($(this).val() != "") {
                        this.style.height = (this.scrollHeight + 2) + 'px';
                    }
                });
            }
        },

        //值改变
        ValChange: function () {
            this.OnChange();
            this.Validate();
        },

        //设置值
        SetValue: function (v) {
            if (v == null) return;
            if (!this.Editable) {
                this.Value = (v + "").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                if (this.Visible)
                    this.$Input.html(this.Value);
            }
            else {
                this.$Input.val(v);
            }
            this.ValChange();
        },
        //设置placeholder Add:20160408
        SetPlaceHolder: function (ph) {
            if (this.Editable && this.ResponseContext.IsCreateMode) {
                this.PlaceHolder = ph.toString();//.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.$Input.attr("placeholder", this.PlaceHolder);
            }
        },

        GetValue: function () {
            if (!this.Editable) {
                var v = this.Value;
                return v == null ? "" : v;
            }
            else {
                if (this.$Input != void 0) {
                    return this.$Input.val().trim();
                } else {
                    return this.Value || '';
                }
            }
        },

        GetText: function () {
            return this.GetValue();
        },

        //设置只读
        SetReadonly: function (v) {
            if (v) {
                this.$Input.prop("readonly", "readonly");
            }
            else {
                this.$Input.removeProp("readonly");
            }
        },

        // 数据验证
        Validate: function () {
            //不可编辑，不可编辑状态为什么还要校验？
            //if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && val != null && val.trim() == "") {

                this.AddInvalidText(this.$Input, "必填");
                return false;
            }
            if (!$.isEmptyObject(val)) {
                if (!this.IsMultiple) {
                    //200字符长度
                    if (val.trim().length > 200) {
                        this.AddInvalidText(this.$Input, '字符长度超出限制200个字');
                        return false;
                    }
                } else {
                    if (val.trim().length > 2000) {
                        this.AddInvalidText(this.$Input, '字符长度超出限制2000个字');
                        return false;
                    }
                }
            }
            //if (!$.isEmptyObject(val) && this.Expression && !this.Expression.test(val)) {
            //    this.AddInvalidText(this.$Input, this.ErrorAlert);
            //    return false;
            //}
            //格式验证
            if (!$.isEmptyObject(val) && this.Mode) {
                var exp1 = '';
                var exp2 = '';
                var err = '';
                switch (this.Mode) {
                    case "Email":
                        exp1 = /^\w+([-+.]\w+)*@\w+([-+.]\w+)*\.\w+([-.]\w+)*$/;
                        err = "错误的邮箱格式!";
                        break;
                    case "Mobile":
                    case "Telephone":
                        //exp1 = /^1[3-8]\d{9}$/;
                        //exp2 = /^(0\d{2,3}-)?\d{7,8}(-\d{1,4})?$/;
                        //exp2 = /^[0-9-()（）]{7,18}$/;
                        exp1 = /([^\d\+-\s])/ig; //电话号码只能有数字 空格 + -不能出现其他字符
                        err = "格式错误!";//"错误的电话或手机号码格式!";
                        break;
                    case "Card":
                        exp1 = /^\d{15}(\d{2}[Xx0-9])?$/
                        err = "错误的身份证格式!";
                        break;
                    default:
                }
                var isValid1 = true;
                var isValid2 = true;
                if (exp1) {
                    isValid1 = exp1.test(val);
                }
                if (exp2) {
                    isValid2 = exp2.test(val);
                }
                if (this.Mode == "Mobile" || this.Mode == "Telephone") {
                    //if (!isValid1 && !isValid2) {
                    //    if (this.invalidText != err)
                    //        this.AddInvalidText(this.$Input, err);
                    //    return false;
                    //}
                    var mstr = val.match(exp1);
                    if (mstr != null && mstr.constructor == Array) {
                        val = val.replace(exp1, "");
                        this.AddInvalidText(this.$Input, err);
                        this.$Input.val(val);
                        return false;
                    }
                } else {
                    if (!isValid1) {
                        //if (this.invalidText != err)
                        this.AddInvalidText(this.$Input, err);
                        return false;
                    }
                }
            }

            this.RemoveInvalidText(this.$Input);
            return true;
        },

        //返回数据值
        SaveDataField: function () {
            var result = {
            };
            var oldResult = {
            };
            if (this.ComputationRule == null && !this.Visible) return result;
            oldResult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldResult) {
                return {};
            }

            if (("" + oldResult.Value) != this.GetValue()) {
                result[this.DataField] = this.GetValue().trim();
                return result;
            }

            return {
            };
        },

        //文本框点击事件
        BindClickEvent: function (clickfun) {
            var that = this;
            //if (this.ClickEvent) return;
            //显示图标并标识
            this.HasBindClick = true;

            if (clickfun == null) return;
            //if ($.isEmptyObject(clickfun)) return;

            this.ClickEvent = clickfun;

            //RenderClickMode样式
            $(this.$InputBody).css("position", "relative");
            var $span1 = $(this.Element).find("span.icon-nav_search");
            var $span = $("<span class='icon-nav_search textclickspan' style='float:right;position: absolute;right: 0;top: 8px;margin-right: 20px'></span>")
            $(this.$Input).before($span);
            $span.off("click." + this.DataField).on("click." + this.DataField, function () {
                if (clickfun && clickfun.constructor.name == "Function") {
                    clickfun.apply(that, [that, that.ObjectId]);
                }
            })
        },
        UnBindClickEvent: function () {

        }
    });
})(jQuery);;
//多行文本框(FormTextArea)
(function ($) {
    $.fn.FormTextArea = function () {
        return $.ControlManager.Run.call(this, "FormTextArea", arguments);
    };

    // 构造函数
    $.Controls.FormTextArea = function (element, options, sheetInfo) {
        $.Controls.FormTextArea.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormTextArea.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }

            //渲染Html页面
            this.HtmlRender();
            //绑定事件
            this.BindEvent();

            //Error:新建的话，可以制作默认值 ，非新建设置值加载的值
            if (this.Value) {
                this.SetValue(this.Value);
            }

            //设置placeholder
            if (this.PlaceHolder) {
                this.SetPlaceHolder(this.PlaceHolder);
            }


            // 不可编辑
            if (!this.Editable) {
                this.SetReadonly(true);
                return;
            }

        },

        //渲染html内容
        HtmlRender: function () {
            if (!this.Editable) {//overflow:auto;
                this.$Input = $('<pre style="border:none;white-space:pre-wrap;white-space:-moz-pre-wrap;white-space:-pre-wrap;white-space:-o-pre-wrap;word-wrap:break-word;word-break:break-all">');
            } else {
                // border: 1px solid #ddd; overflow-y: scroll; 
                this.$Input = $("<textarea name='" + this.DataField + "' rows='" + this.Rows + "' class='form-control' maxlength='2000' style='display:block; resize: none'>");
                //如果是在子表中，则将rows设置成1，并允许纵向拉伸
                if (!$.isEmptyObject(this.ObjectId)) {
                    this.$Input.attr('rows', this.Rows).css({ 'resize': 'none', 'overflow-y': 'hidden' });//'resize': 'vertical' 'height': '32px' 
                } else {
                    this.$Input.css({ "border": "1px solid #ddd;" })
                }
            }
            this.$InputBody.append(this.$Input);
        },

        //绑定事件
        BindEvent: function () {
            $(this.$Input).off("blur.FormTextArea").on("blur.FormTextArea", this, function (e) {
                var $this = $(this);
                var that = e.data;
                that.ValChange();
                that.Required && ($this.val() != "" && $this.removeAttr("style"));
            });
            //设置文本控件高度自动适应
            $(this.$Input).on('input', function () {
                this.style.height = (this.scrollHeight + 2) + 'px';
            });
            $(this.$Input).on('focus', function () {
                if ($(this).val() != "") {
                    this.style.height = (this.scrollHeight + 2) + 'px';
                }
            });
            if ($.isEmptyObject(this.ObjectId)) {
                $(this.$Input).on('blur', function () {
                    this.style.height = '32px';
                });
            }
        },

        //值改变
        ValChange: function () {
            this.OnChange();
            this.Validate();
        },

        //设置值
        SetValue: function (v) {
            if (v == null) return;
            if (!this.Editable) {
                this.Value = (v + "").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&lt;br\/&gt;/g, "<br/>");
                if (this.Visible) {
                    this.$Input.html(this.Value);
                    var newValue = this.$Input.html().replace(/\\n/g, '<br/>');
                    this.$Input.html(newValue);
                }
            }
            else {
                //换行
                var newVal = v;
                if (typeof newVal == "string") {
                    newVal = v.replace(/\\n/g, "\r\n");
                }
                this.$Input.val(newVal);
            }
            this.ValChange();
        },

        //设置placeholder Add:20160408
        SetPlaceHolder: function (ph) {
            if (this.Editable && this.ResponseContext.IsCreateMode) {
                this.PlaceHolder = ph.toString();//.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.$Input.attr("placeholder", this.PlaceHolder);
            }
        },

        GetValue: function () {
            if (!this.Editable) {
                var v = this.Value;
                return v == null ? "" : v;
            }
            else {
                if (this.$Input != void 0)
                    return this.$Input.val().trim();
                else {
                    return this.Value || "";
                }
            }
        },

        GetText: function () {
            return this.GetValue();
        },

        //设置只读
        SetReadonly: function (v) {
            if (v) {
                this.$Input.prop("readonly", "readonly");
            }
            else {
                this.$Input.removeProp("readonly");
            }
        },

        // 数据验证
        Validate: function () {
            //不可编辑
            //if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && val != null && val.trim() == "") {

                this.AddInvalidText(this.$Input, "必填");
                return false;
            }
            if (!$.isEmptyObject(val)) {

                if (val.trim().length > 2000) {
                    this.AddInvalidText(this.$Input, '字符长度超出限制2000个字');
                    return false;
                }
            }
            if (!$.isEmptyObject(val) && this.Expression && !this.Expression.test(val)) {
                this.AddInvalidText(this.$Input, this.ErrorAlert);
                return false;
            }

            this.RemoveInvalidText(this.$Input);
            return true;
        },

        //返回数据值
        SaveDataField: function () {
            var result = {};
            //if (!this.Visible) return result;
            if (this.ComputationRule == null && !this.Visible) {
                return result;
            }
            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldresult) {
                return {};
            }

            if (("" + oldresult.Value) != this.GetValue()) {
                result[this.DataField] = this.GetValue().trim();
                return result;
            }

            return {};
        }
    });
})(jQuery);;
//选人控件
(function ($) {
    // 控件执行
    // 参数{AutoTrim:true,DefaultValue:datavalue,OnChange:""}
    //可以通过  $("#id").SheetTextBox(参数)  来渲染控件和获取控件对象
    $.fn.FormMultiUser = function (opt) {
        return $.ControlManager.Run.call(this, "FormMultiUser", arguments);
    };

    //选人控件数据,单个页面所有数据库共用
    //该缓存用this.MultiUserData替代，原因是选人控件可能设置了选人范围,选人数据由单个控件自己维护
    //$.FormMultiUserData = {
    //    //部门
    //    OrgUnitItems: {},
    //    //标签
    //    //OrgTagItems: [],
    //    //部门用户:{部门ID:[]}
    //    DepUserItems: {},
    //    //用户
    //    UserItems: {},
    //};

    // 构造函数
    $.Controls.FormMultiUser = function (element, ptions, sheetInfo) {
        //选人缓存
        this.MultiUserData = {
            //部门
            OrgUnitItems: {},
            //标签
            //OrgTagItems: [],
            //部门用户:{部门ID:[]}
            DepUserItems: {},
            //用户
            UserItems: {},
        };
        //选择数据集合
        this.Units = {};
        //所有选择的元素
        this.UnitsElement = null;
        //搜索输入框元素
        this.SearchElement = null;
        this.SearchTxtElement = null;

        //组织机构容器
        this.SelectorPanel = null;
        this.OrgTreePanel = null;
        this.OrgListPanel = null;
        this.IsOverSelectorPanel = false;
        this.FormMultiUserHandler = "/Form/OnAction";
        this.CpLock = false;
        this.Options = ptions;

        $.Controls.FormMultiUser.Base.constructor.call(this, element, ptions, sheetInfo);
        this.FromNum = 0;
        this.ToNum = 10;
    };

    // 继承及控件实现
    $.Controls.FormMultiUser.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            this.CurrentDocument = $(this.Element).closest("html").length == 1 ? $(this.Element).closest("html").parent() : $(document);
            this.CurrentBody = $(this.Element).closest("body").length == 1 ? $(this.Element).closest("body") : $("body");

            //是否在子表里面子表
            this.IsInGridView = !$.isEmptyObject(this.ObjectId);

            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }
            //渲染界面
            this.HtmlRender();
            //绑定事件
            this.BindEnvens();

            //初始化默认值
            this.InitValue();
        },

        //初始化值
        InitValue: function () {
            if (this.Value) {
                this.SetValue(this.Value);
            }
        },
        CheckUnitValidate: function (Obj) {
            //2017/6/12修改，原因是关联携带了大量数据过来校验导致超时
            return Obj;
            var newObj = Obj;
            var that = this;
            if ($.isEmptyObject(that.MultiUserData.OrgUnitItems)) {
                if ($.SmartForm.ResponseContext && !$.SmartForm.ResponseContext.IsCreateMode) {
                    //如果不是创建模式则不执行check，因为非创建模式的数据已经check过
                    return newObj;
                }
                var UnitIds = [];
                if (Obj.constructor == Object) {
                    UnitIds.push(Obj.UnitId);
                } else if (Obj.constructor == Array) {
                    for (var i = 0; i < Obj.length; i++) {
                        if (Obj[i].constructor == Object) {
                            UnitIds.push(Obj[i].UnitId);
                        }
                        else if (Obj[i].constructor == String) {
                            UnitIds.push(Obj[i]);
                        }
                    }
                } else if (Obj.constructor == String) {
                    UnitIds.push(Obj);
                }
                //请求后台，判断Obj是否在给定范围内，如果在给定范围内则返回Unit对象，后续调用AddChoice
                var unitTemp = '';
                for (var i = 0; i < UnitIds.length; i++) {
                    unitTemp += UnitIds[i] + ';';
                }
                var params = {
                    ActionName: "SheetUserAction",
                    Command: "CheckUnitValidate",
                    UnitSelectionRange: that.UnitSelectionRange,
                    UnitIds: unitTemp
                }
                this.Ajax(
                    that.FormMultiUserHandler,
                    "POST",
                    {
                        PostData: JSON.stringify(params)
                    },
                    function (data) {
                        newObj = data.ReturnData.UnitItems;
                    }, false);
            }
            return newObj;
        },
        //设置值
        SetValue: function (Obj) {
            var that = this;
            //针对设置了默认只的情况
            if (Obj == void 0 || Obj == null || Obj == "" || Obj.length == 0) {
                this.ClearChoices();
                return;
            }
            if (this.UnitSelectionRange) {
                //有设置选人范围
                if ($.SmartForm && $.SmartForm.ResponseContext && $.SmartForm.ResponseContext.IsCreateMode) {
                    //创建模式
                    Obj = that.CheckUnitValidate(Obj);
                } else {
                    //修改模式
                    if (this.Editable && (Obj == void 0 || Obj == null || Obj == "" || Obj.length == 0)) {
                        //可编辑
                        Obj = that.CheckUnitValidate(Obj);
                    }
                }
            }
            //if (this.UnitSelectionRange)
            //    Obj = that.CheckUnitValidate(Obj);

            if (!Obj) { return; } //checkUnitValidate可能返回空

            if (Obj.constructor == Object) {
                this.AddChoice(Obj);
            }
            else if (Obj.constructor == Array) {
                for (var i = 0; i < Obj.length; i++) {
                    if (Obj[i].constructor == Object) {
                        this.AddChoice(Obj[i]);
                    }
                    else if (Obj[i].constructor == String) {
                        this.AddUserID(Obj);
                        break;
                    }
                }
            }
            else if (Obj.constructor == String) {
                this.AddUserID(Obj);
            }
            //this.FormMultiUserChange();
            this.OnChange(Obj);
        },

        //FormMultiUserChange: function (value) {
        //    var that = this;
        //    this.FormMultiUserTimeout && clearTimeout(this.FormMultiUserTimeout);
        //    this.FormMultiUserTimeout = null;

        //    this.FormMultiUserTimeout = setTimeout(function () {
        //        that.OnChange(value);
        //        that.FormMultiUserTimeout = null;
        //    }, 600);
        //},
        //返回 {UnitID1:{UnitID: , Code:, DisplayName:Type, Icon ,ParentId},UnitID1:{UnitID: , Code:, DisplayName: }}对象
        GetValue: function () {
            return $.IClone(this.Units);
        },

        //读取选中的UnitID
        GetUnitIDs: function () {
            var ValObjs = this.GetValue();
            var UintIDs = new Array();
            for (var key in ValObjs) {
                UintIDs.push(key);
            }

            return UintIDs;
        },

        //获取显示
        GetText: function () {
            var userNames;
            for (var ObjectId in this.Units) {
                if (this.IsMultiple) {
                    if (userNames == void 0) userNames = new Array();
                    userNames.push(this.Units[ObjectId].DisplayName);
                }
                else {
                    userNames = this.Units[ObjectId].DisplayName;
                }
            }
            return userNames == void 0 ? "" : userNames.toString();
        },

        //保存数据
        SaveDataField: function () {
            var result = {
            };
            if (!this.Visible) return result;
            var oldresult = this.DataItem;
            if (!oldresult) {
                return {
                };
            }

            var UnitIDs = this.GetUnitIDs();
            if (oldresult.Value != UnitIDs) {
                result[this.DataField] = UnitIDs;
                return result;
            }
            result[this.DataField] = [];
            return result;
        },

        //根据ChoiceID，获取已经选择的组织
        GetSelectUnitByChoiceID: function (choiceID) {
            if (this.Units == null || this.Units.length == 0) return null;
            for (var key in this.Units) {
                if (this.Units[key].ChoiceID == choiceID) {
                    return this.Units[key];
                }
            }
            return null;
        },

        //渲染样式
        HtmlRender: function () {
            $(this.Element).addClass("SheetUser");
            if (!this.IsInGridView) {
                //不在子表里面
                $(this.Element).css("position", "relative");
            }
            if (!this.Editable) {
                this.$Input = $("<pre style='border:none;'>");
                this.$InputBody.append(this.$Input);
                return;
            }
            //设置当前控件的ID
            this.ID = $.IGuid();

            //this.$InputBody.attr("ID", this.ID);

            //this.UnitsElement = $("<div data-targetid='" + this.ID + "' name='" + this.DataField + "' class='form-control form-user-add icon-arrow-down-full' style='height:auto;overflow:auto;width:100%;height:auto;max-height:100px;'>");
            this.UnitsElement = $("<div data-targetid='" + this.ID + "' name='" + this.DataField + "' class='form-control form-user-add icon-arrow-down-full' style='height:auto;overflow:auto;width:100%;height:auto;max-height:100px;'>");

            this.$Input = $("<input class='SheetUser-Input' style='width:1px;display:none;'>");
            var that = this;
            this.$Input.on("compositionstart", function () {
                that.CpLock = true;
            });
            this.$Input.on("compositionend", function () {
                that.CpLock = false;
            });
            this.UnitsElement.append(this.$Input);
            this.$InputBody.attr("ID", this.ID).css({ "min-width": "100px" }).append(this.UnitsElement);

            //作为筛选条件时显示样式
            var placeHolder = "点击选择";

            if (this.IsQueryControl) {
                placeHolder += this.DisplayName.replace(/^\s+|\s+$/g, '');
            } else {
                if (this.OrgUnitVisible && this.UserVisible) {
                    placeHolder += "人员/部门";
                } else if (this.OrgUnitVisible && !this.UserVisible) {
                    placeHolder += "部门";
                } else if (!this.OrgUnitVisible && this.UserVisible) {
                    placeHolder += "人员";
                }
            }
            this.UnitsElement.removeClass("icon-arrow-down-full");
            this.UnitsElement.removeClass("icon-arrow-down-full").css("border", "1px dashed #cccccc");
            this.$tipDiv = $("<div style='width:98%;height:30px;float:right;text-align:center;'><div><span class='sp_placeholder'>" + placeHolder + "</span></div></div>")
            this.UnitsElement.append(this.$tipDiv);
        },

        //绑定事件
        BindEnvens: function () {
            //不可用
            if (!this.Editable) {
                return;
            }
            var that = this;

            //点击选人控件再渲染
            $(this.$InputBody).one("click.UserOnce", function () {
                that.RenderNext.apply(that);
                that.FocusInput();
            });
            //获取焦点选人控件再渲染
            $(this.$InputBody).find("input").on("focus.UserOnce", function (e) {
                if (!that.$UserPanel) {
                    that.RenderNext.apply(that);
                }
                that.FocusInput();
                $(that.$InputBody).unbind("click.UserOnce");
            });
        },

        RenderNext: function () {
            var that = this;
            that.$SearchDiv = $("<div data-targetid='" + that.ID + "' data-formmultiuserpanel='searchdiv' class='searchdiv'><input class='searchinput' type='text' ></input></div>");

            that.$SearchInput = that.$SearchDiv.find("input").eq(0); //搜索输入框
            that.Placeholder = "输入" + that.DisplayName + "查找";
            that.$SearchInput.attr("placeholder", that.Placeholder);

            //搜索面板
            //that.$SearchPanel = $("<div>").attr("data-targetid", that.ID).addClass("SheetUser-SelectorPanel").attr("data-FormMultiUserPanel", "SearchPanel");
            that.$SearchPanel = $("<div data-targetid='" + that.ID + "' class='SheetUser-SelectorPanel' data-FormMultiUserPanel='SearchPanel' style='overflow-y: auto;'>");

            //组织机构选择面板
            //that.SelectorPanel = $("<div>").attr("data-targetid", that.ID).addClass("SheetUser-SelectorPanel").attr("data-FormMultiUserPanel", "SelectorPanel");//.width(this.Width);
            that.SelectorPanel = $("<div data-targetid='" + that.ID + "' class='SheetUser-SelectorPanel' data-FormMultiUserPanel='SelectorPanel'>");
            //that.SelectorPanel.append(that.$SearchDiv);
            //组织标签
            //that.SelectorTabs = $("<ul>").addClass("nav").addClass("nav-tabs user-tabs");
            that.SelectorTabs = $("<ul class='nav nav-tabs user-tabs'>");
            if (that.UserVisible) {
                //that.SelectorTabs.append($("<li>").append("<a>用户</a>").attr("data-tabtype", "tab_Users").css("cursor", "pointer"));
                that.SelectorTabs.append($("<li data-tabtype='tab_Users' style='cursor:pointer;'><a>用户</a></li>"));
            }
            if (that.OrgUnitVisible) {
                //that.SelectorTabs.append($("<li>").append("<a>部门</a>").attr("data-tabtype", "tab_Deps").css("cursor", "pointer"));
                that.SelectorTabs.append($("<li data-tabtype='tab_Deps' style='cursor:pointer;'><a>部门</a></li>"));
            }

            that.SelectorPanel.append(that.SelectorTabs);

            //用户面板
            //that.UsersDataPanel = $("<div>").addClass("SheetUser_DataPanel").addClass("row").addClass("SheetUser_tab_Users");
            that.UsersDataPanel = $("<div class='SheetUser_DataPanel row SheetUser_tab_Users'>");
            //部门面板
            //that.DepsDataPanel = $("<div>").addClass("SheetUser_DataPanel").addClass("row").addClass("SheetUser_tab_Deps");
            that.DepsDataPanel = $("<div class='SheetUser_DataPanel row SheetUser_tab_Deps'>");
            //标签面板

            that.SelectorPanel.append(that.DepsDataPanel);
            that.SelectorPanel.append(that.UsersDataPanel);

            that.$UserPanel = $("<div class='userpanel'  style='position:absolute;'>");
            that.$UserPanel.append(that.$SearchDiv).append(that.SelectorPanel).append(that.$SearchPanel);
            //that.$UserPanel.appendTo("body");
            that.$UserPanel.appendTo(that.CurrentBody);
            //--------------------------------------

            //页签切换
            that.SelectorTabs.find("li").unbind("click.SelectorTabs").bind("click.SelectorTabs", that, function (e) {
                if ($(this).hasClass("active")) return;
                var that = e.data;
                var $parent = $(this).parent();
                $parent.find("li").removeClass("active");
                $(this).addClass("active");

                var tabType = $(this).attr("data-tabtype");
                that.SelectorPanel.find(".SheetUser_DataPanel").hide();
                that.SelectorPanel.find(".SheetUser_" + tabType).show();
                that.LoadOrgByTabType(tabType);

                setTimeout(function () {
                    e.data.$SearchInput[0].focus();
                }, 50)
            });

            //点击到当前元素，设置input焦点
            $(that.$InputBody).children("div").unbind("click.FormMultiUser").bind("click.FormMultiUser", that, function (e) {
                var $target = $(e.target);
                if (!$target.closest("li").hasClass("SheetUser-LiItem")) {
                    e.data.FocusInput.apply(e.data);

                    setTimeout(function () {
                        e.data.$SearchInput[0].focus();
                    }, 50)
                    //e.data.$SearchInput[0].focus(); //弹出对话框后手动获取搜索框焦点,不执行绑定的focusin事件
                    //首页
                    if (typeof AppTree != 'undefined') {
                        AppTree.destroyTree();
                    }
                    //下拉框隐藏
                    $("ul.drop-list.drop-list_s").hide();
                    //关联表单隐藏
                    $(".form-query-dropdown").hide();
                    // 停止冒泡，防止与SheetQuery冲突而添加
                    e.stopPropagation();
                }
            });

            $(that.$UserPanel).children("div").unbind("click.FormMultiUser").bind("click.FormMultiUser", that, function (e) {
                var $target = $(e.target);
                if (!$target.closest("li").hasClass("SheetUser-LiItem")) {
                    //e.data.$Input.focus();
                    //e.data.$SearchInput[0].focus();
                    // 停止冒泡，防止与SheetQuery冲突而添加
                    e.stopPropagation();
                }
            });

            //得到焦点显示
            $(that.$SearchInput).unbind("focusin.Input").bind("focusin.Input", that, function (e) {
                e.data.$SearchInput.removeAttr("placeholder");
                //e.data.FocusInput.apply(e.data);
            });

            $(that.$SearchInput).off("input propertychange").on("input propertychange", that, function (e) {
                var isIE = navigator.userAgent.indexOf("MSIE") > -1 || navigator.userAgent.indexOf("Edge") > -1
                    || (navigator.userAgent.indexOf("Trident") > -1 && navigator.userAgent.indexOf("rv") > -1);
                if (isIE) {
                    var that = e.data;
                    that.TimeOut && window.clearTimeout(that.TimeOut);
                    that.TimeOut = setTimeout(function () {
                        that.SearchOrg.apply(that, [that]);
                    }, 500);
                }
            });

            //控件输入
            $(that.$SearchInput).unbind("keyup.SearchTxtElement").bind("keyup.SearchTxtElement", that, function (e) {
                e.data.SetSearchTxtElementWidth.apply(e.data);
                //e.data.FocusInput.apply(e.data);
                //e.data.KeyTime = new Date();

                var that = e.data;
                that.TimeOut && window.clearTimeout(that.TimeOut);
                that.TimeOut = setTimeout(function () {
                    that.SearchOrg.apply(that, [that]);
                }, 500);
            });

            $(that.$SearchInput).unbind("keydown.SearchTxtElement").bind("keydown.SearchTxtElement", that, function (e) {
                if (e.keyCode == 8 && $(this).val() == "" && $(this).prev().length > 0) {
                    var unit = e.data.GetSelectUnitByChoiceID.apply(e.data, [$(this).prev().attr("id")]);
                    e.data.RemoveChoice.apply(e.data, [unit.UnitID]);
                }
            });

            //点击屏幕的其他地方 $(document)
            $(that.CurrentDocument).unbind("mousedown." + that.ID).bind("mousedown." + that.ID, that, function (e) {
                //edit by xc 特殊情况处理
                if ($(e.target).hasClass("row") && $(e.target).children(".col-md-6").children("div[data-controlkey='FormUser']").length > 0) {
                    return false;
                }
                else if ($(e.target).closest("div[data-targetid='" + e.data.ID + "']").length == 0) {
                    e.data.FocusOutput.apply(e.data);
                    e.stopPropagation();
                }
            });
        },

        //设置输入框的宽度
        SetSearchTxtElementWidth: function () {
            //var w = "1px";
            //var length = this.$Input.val().length;
            //if (length > 0) {
            //    w = length * 15 + "px";
            //    this.$Input.removeAttr("PlaceHolder", this.PlaceHolder);
            //}
            ////else if ($.isEmptyObject(this.Units)) {
            ////    w = "100%";
            ////    this.$Input.attr("PlaceHolder", this.PlaceHolder);
            ////}
            ////else {
            ////    this.$Input.removeAttr("PlaceHolder", this.PlaceHolder);
            ////}
            //$(this.$Input).width(w);
        },

        //获取焦点焦点
        FocusInput: function () {
            //this.$SearchInput.removeAttr("placeholder");
            var position = this.$InputBody.offset();
            //var WindowW = $(window).outerWidth();
            var WindowW = $(this.CurrentDocument).outerWidth();
            var padding = this.$InputBody.css("padding-left");
            padding = padding ? parseInt(padding) : 0;
            if (this.IsInGridView) {
                if (WindowW - position.left < 500) {
                    this.$UserPanel.css("right", WindowW - position.left - this.$InputBody.outerWidth());
                    //this.$SearchDiv.css("right", WindowW - position.left - this.$InputBody.outerWidth());
                    //this.SelectorPanel.css("right", WindowW - position.left - this.$InputBody.outerWidth());
                    //this.$SearchPanel.css("right", WindowW - position.left - this.$InputBody.outerWidth());
                } else {
                    this.$UserPanel.css("left", position.left);
                    //this.$SearchDiv.css("left", position.left);
                    //this.SelectorPanel.css("left", position.left);
                    //this.$SearchPanel.css("left", position.left);
                }
                //this.SelectorPanel.css("top", position.top + this.$InputBody.height());
                //this.SelectorPanel.width(this.UnitsElement.width());
            }
            else {
                if (WindowW - position.left < 500) {
                    this.$UserPanel.css("right", padding);
                    //this.$SearchDiv.css("right", padding);
                    //this.SelectorPanel.css("right", padding);
                    //this.$SearchPanel.css("right", padding);
                } else {
                    this.$UserPanel.css("left", position.left + padding);
                    //this.$SearchDiv.css("left", position.left + padding);
                    //this.SelectorPanel.css("left", position.left + padding);
                    //this.$SearchPanel.css("left", position.left + padding);
                }
            }

            //var bottom = $(window).height() - position.top - this.$InputBody.height() + $(window).scrollTop();
            //var userPanelHeight = $(this.$UserPanel).height();
            //if (bottom > userPanelHeight) {
            //    this.$UserPanel.css("top", position.top + this.$InputBody.height());
            //} else {
            //    this.$UserPanel.css("top", position.top - userPanelHeight);
            //}

            this.$UserPanel.css("top", position.top + this.$InputBody.height());



            //this.$SearchDiv.css("top", position.top + this.$InputBody.height());
            //this.SelectorPanel.css("top", position.top + this.$InputBody.height() + this.$SearchDiv.height());
            //this.$SearchPanel.css("top", position.top + this.$InputBody.height() + this.$SearchDiv.height());

            //绑定元素父元素的滚动事件，重新赋值$UserPanel的高度和left
            var that = this;
            $.each($(this.Element).parents(), function (index, obj) {
                $(obj).scroll(function () {
                    that.$UserPanel.css("top", that.$InputBody.height() + that.$InputBody.offset().top);

                });
            });


            if (this.SelectorPanel.is(":visible")) return;

            //to do by xiechang 增加位置判断，防止浏览器遮罩

            //其他的选人控件都隐藏(包括单人和多人 edit by xc)
            $("div[data-FormMultiUserPanel='SelectorPanel'],div[data-FormUserPanel='SelectorPanel'],div[data-formmultiuserpanel='searchdiv']").hide();

            if (this.SelectorTabs.find("li.active").length == 0) {
                this.SelectorTabs.find("li:first").click();
            }

            this.$UserPanel.show();
            this.SelectorPanel.show();
            this.$SearchPanel.hide();
            this.$SearchDiv.show();

            //var bottom = $(window).height() - position.top - this.$InputBody.height() + $(window).scrollTop();
            //var userPanelHeight = $(this.$UserPanel).height();
            //if (bottom < userPanelHeight) {
            //    if (this.$InputBody.parents(".modal-dialog").length == 1) {
            //        this.SelectorPanel.css("height", bottom - 50);
            //    } else {
            //        setTimeout(function () {
            //            $(window).scrollTop(userPanelHeight - bottom + 30);
            //            $("body").css("overflow", "hidden");
            //        }, 300)
            //    }
            //} else {
            //    $("body").css("overflow", "hidden");
            //}
        },

        //失去焦点
        FocusOutput: function () {

            this.$SearchInput.attr("placeholder", this.Placeholder);

            if (this.SelectorPanel) {
                this.SelectorPanel.hide();
                this.$SearchPanel.hide();
                //this.$Input.val("");
                this.$SearchInput.val("");
                this.Required && (this.UnitsElement.text() != "" && this.UnitsElement.css({ "border": "1px solid #ddd", "box-shadow": "none" }));
            }
            this.$UserPanel.hide();
            $("body").css("overflow", "auto");
        },

        //添加:UserID/UserCode
        AddUserID: function (UserID) {
            var that = this;

            var ids = []
            if (UserID.constructor == Array) {
                for (var i = 0; i < UserID.length; i++) {
                    var id = UserID[i];
                    if (!that.MultiUserData.UserItems[id]) {
                        ids.push(id);
                    }
                }
            }
            else {
                if (!that.MultiUserData.UserItems[UserID]) {
                    ids.push(UserID);
                }
                else {
                    that.AddChoice(that.MultiUserData.UserItems[UserID]);
                }
            }
            if (ids.length > 0) {
                var param = {
                    ActionName: "SheetUserAction", Command: "GetUserProperty", UnitID: JSON.stringify(ids)
                };
                // this.Ajax(
                //     that.FormMultiUserHandler,
                //     "POST",
                //     { PostData: JSON.stringify(param) },
                //     function (data) {
                //         if (data && data.ReturnData.UnitItems) {
                //             that.AddUserData.apply(that, [data.ReturnData.UnitItems]);
                //             for (var i = 0; i < data.ReturnData.UnitItems.length; i++) {
                //                 that.AddChoice.apply(that, [data.ReturnData.UnitItems[i]]);
                //             }
                //         }
                //     },
                //     false);
                setTimeout(()=>{
                     var data ={"Successful":true,"ErrorMessage":null,"Logined":true,"ReturnData":{"UnitItems":[{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"05e12f8e-5391-40ca-b78c-b8ffd8409a1f","Code":"$:LWCP_v1:$J3ODyEtMZXgIrlyj2Niphw==","DisplayName":"linq","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"6d20fec6-5ab8-4522-85f2-0efa9a0572d5","Code":"$:LWCP_v1:$a3xXAHQLqj+2YHDEnQg9og==","DisplayName":"陈志亮","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"022e56cc-5274-4468-b050-3d66dca6d336","Code":"$:LWCP_v1:$B10BgL6Ndj6Gh+YxIU+hyA==","DisplayName":"梁伟林","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"d7b6f5da-3ccd-4a73-87d7-62096e46a997","Code":"$:LWCP_v1:$h+hEuPxiaZNWNbjrLRZdmg==","DisplayName":"卢","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"c6885ff8-1cab-46d5-8364-b40a678683e5","Code":"$:LWCP_v1:$/RszIoHurHQ2XF/T0Z3jZg==","DisplayName":"梦达","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"23cf2763-939d-414e-a405-5f68f412ad90","Code":"$:LWCP_v1:$/bHs7txT0gOQXIfp5ECQRQ==","DisplayName":"肖庆云","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"ec8707ef-00c5-4be5-9870-2293986f010f","Code":"$:LWCP_v1:$xNTYyVf++SK7NOd/yPyvnA==","DisplayName":"许万超","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"396242db-3f89-4fb9-9534-42327ad2fea7","Code":"$:LWCP_v1:$YnmulHHUfzR3t+c1pEt35w==","DisplayName":"勇哥","DeptId":0,"HasChild":false},{"_Gender":0,"DepartmentName":"mq项目组","Birthday":"1753/1/1","Gender":"未知","Email":null,"Mobile":null,"Avatar":null,"DingTalkAccount":null,"ParentId":"18f923a7-5a5e-426d-94ae-a55ad1a4b240","Type":4,"Icon":"glyphicon-user","UnitID":"ad8116e6-cc54-49ba-bb4c-f600c6ffc2f4","Code":"$:LWCP_v1:$FFgieofhGbps6DTbsoFS+g==","DisplayName":"邹兵兵","DeptId":0,"HasChild":false}]}};
                     if (data && data.ReturnData.UnitItems) {
                            that.AddUserData.apply(that, [data.ReturnData.UnitItems]);
                            for (var i = 0; i < data.ReturnData.UnitItems.length; i++) {
                                that.AddChoice.apply(that, [data.ReturnData.UnitItems[i]]);
                            }
                        }
                },1000)

            }
            else if (UserID.constructor == Array) {
                for (var i = 0; i < UserID.length; i++) {
                    var id = UserID[i];
                    if (that.MultiUserData.UserItems[id]) {
                        that.AddChoice(that.MultiUserData.UserItems[id]);
                    }
                }
            }
        },

        //添加用户数据
        AddUserData: function (UnitItems) {
            for (var i = 0; i < UnitItems.length; i++) {
                this.MultiUserData.UserItems[UnitItems[i].UnitID] = UnitItems[i];
            }
        },

       //添加选择
        AddChoice: function (UnitObject) {
            console.log(UnitObject)
            if (!UnitObject) return;
            if (UnitObject.ObjectId && !UnitObject.id)
                UnitObject.id = UnitObject.ObjectId;
            if (UnitObject.Name && !UnitObject.name)
                UnitObject.name = UnitObject.Name;
            if (UnitObject.userName && !UnitObject.name)
                UnitObject.name = UnitObject.userName;
            if (!UnitObject.id) return;
            if (this.Units[UnitObject.id]) return;

            if (!this.IsMultiple) {
                this.ClearChoices();
            }
            var NewUnitObject = $.extend(true, {}, UnitObject);

            this.Units[NewUnitObject.id] = NewUnitObject;

            //this.OnChange(NewUnitObject);
            //this.FormMultiUserChange(NewUnitObject);

            this.Validate();
            if (!this.Editable) {
                if (this.Visible) {
                    var text = this.$Input.text();
                    text = text ? text + ";" + NewUnitObject.name : NewUnitObject.name;
                    this.$Input.text(text);


                    //Error这一块是不是应该抽到BaseControl中去 
                    ////如果控件在子表中，子表列宽要重新计算
                    //if (this.IsInGridView) {
                    //    var gridViewCtrl = $(this.Element).closest('div[data-controlkey="FormGridView"]');
                    //    if (gridViewCtrl && gridViewCtrl.length > 0) {
                    //        gridViewCtrl = gridViewCtrl.FormGridView();
                    //        gridViewCtrl && gridViewCtrl.ResizeColumn(true);
                    //    }
                    //}
                }
                return;
            }
            var choiceID = $.IGuid();
            NewUnitObject.ChoiceID = choiceID;
            var choice = $("<span class='SheetUser-Item label label-info icon-close-middle'></span>");

            var icon = "";
            switch (NewUnitObject.Type) {
                case 1:
                    icon = "fa icon-gongsi";
                    break;
                case 2:
                    icon = "icon-xiashuguanli";
                    break;
                case 4:
                    icon = "glyphicon icon-people";
                    break;
                //case 8:
                //    icon = "glyphicon-bookmark";
                //break;
            }
            //choice.append($("<i>").addClass(icon));
            choice.append(NewUnitObject.name);
            choice.attr("id", choiceID).data("id", NewUnitObject.id);
            this.$Input.before(choice);
            var that = this;
            //可用
            if (this.Editable) {
                choice.unbind("click.choice").bind("click.choice", this, function (e) {
                    e.data.RemoveChoice.apply(e.data, [$(this).data("id")]);
                    // //
                    //var $this = $(this).closest("div.SheetUser");
                    that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                });

                //映射关系
                if (!$.isEmptyObject(this.MappingControls)) {
                    this.MappingControlsHandler(NewUnitObject);
                }
                ////如果控件在子表中，子表列宽要重新计算
                //if (this.IsInGridView) {
                //    var gridViewCtrl = $(this.Element).closest('div[data-controlkey="FormGridView"]');
                //    if (gridViewCtrl && gridViewCtrl.length > 0) {
                //        gridViewCtrl = gridViewCtrl.FormGridView();
                //        gridViewCtrl && gridViewCtrl.ResizeColumn(true);
                //    }
                //}
            }

            if (!this.IsMultiple) {
                this.FocusOutput();
            }

            //勾选选中项
            //$(this.DepsDataPanel).find("input:checkbox[id=c_" + id + "]").prop("checked", true).parent().data("Exist", true);
            //$(this.UserListPanel).find("input:checkbox[id=c_" + id + "]").prop("checked", true).parent().data("Exist", true);

            //作为筛选控件时，添加元素时需要移除
            if (this.$tipDiv) {
                this.$tipDiv.remove();
            }
        },

        //清楚所有的选择
        ClearChoices: function () {
            for (var UnitID in this.Units) {
                this.RemoveChoice(UnitID);
            }
            //清空的时候，清空缓存
            if (!this.UseDataCache) {
                //不用缓存，每次都清空
                this.MultiUserData = {
                    //部门
                    OrgUnitItems: {
                    },
                    //标签
                    //OrgTagItems: [],
                    //部门用户:{部门ID:[]}
                    DepUserItems: {
                    },
                    //用户
                    UserItems: {},
                };
                if (this.DepsDataPanel) {
                    this.DepsDataPanel.data("IsLoad", false);
                    //this.TagsDataPanel.data("IsLoad", false);
                    this.UsersDataPanel.data("IsLoad", false);
                    this.SelectorTabs.find("li.active").removeClass("active");
                }
            }
        },

        //移除选择
        RemoveChoice: function (Obj) {
            if (!Obj) return;
            if (Obj.constructor == String) {
                if (this.Units[Obj]) {
                    if (this.Editable) {
                        $(this.Element).find("#" + this.Units[Obj].ChoiceID).remove();
                    }
                    else {
                        this.$Input.text("");
                    }
                    $(this.DepsDataPanel).find("input:checkbox[id=c_" + Obj + "]").prop("checked", false).parent().data("Exist", false);
                    $(this.UserListPanel).find("input:checkbox[id=c_" + Obj + "]").prop("checked", false).parent().data("Exist", false);
                    delete this.Units[Obj];
                }
            }
            else if (Obj.constructor == Array) {
                for (var i = 0; i < Obj.length; i++) {
                    if (Obj[i].constructor == String) {

                        var unitId = Obj[i];
                        if (this.Editable) {
                            $(this.Element).find("#" + this.Units[unitId].ChoiceID).remove();
                        }
                        else {
                            this.$Input.text("");
                        }
                        $(this.DepsDataPanel).find("input:checkbox[id=c_" + unitId + "]").prop("checked", false).parent().data("Exist", false);
                        $(this.UserListPanel).find("input:checkbox[id=c_" + unitId + "]").prop("checked", false).parent().data("Exist", false);
                        delete this.Units[unitId];
                    }
                }
            }
            this.Validate();
            this.OnChange(Obj);
        },

        //判断是存在选项
        ExistChoice: function (UnitID) {
            if (this.Units[UnitID])
                return true;
            else
                return false;
        },

        //加载类型
        LoadOrgByTabType: function (tabType) {
            switch (tabType) {
                case "tab_Deps":
                    this.LoadDepsData();
                    break;
                case "tab_Users":
                    this.LoadUsersData();
                    break;
            }
        },

        //加载组织机构树
        LoadDepsData: function ($el, UnitID) {
            if (this.DepsDataPanel.data("IsLoad")) return;
            this.DepsDataPanel.data("IsLoad", true)
            this.DepsDataPanel.html("");
            this.LoadUnitsTree(this.DepsDataPanel, "tab_Deps");
        },

        //加载部门树
        LoadUnitsTree: function ($panel, tabType) {

            var that = this;
            var isDeps = false;
            //是部门页签，可以选择部门
            if (tabType && tabType == "tab_Deps") {
                isDeps = true;
            }

            if (!$.isEmptyObject(that.MultiUserData.OrgUnitItems)) {
                var $ul = $("<ul class='nav'>");//.addClass("nav");
                var root = that.GetUnitsByParentId(that.MultiUserData.OrgUnitItems);
                //$ul.append(that.CreateUnitsItem(root[0], isDeps));
                for (var i = 0; i < root.length; i++) {
                    $ul.append(that.CreateUnitsItem(root[i], isDeps));
                }
                $panel.append($ul);
                //设置树的展开关闭
                if ($ul.metisMenu)
                    $ul.metisMenu();
                $ul.find("a:first,a:first>span.icon-xiangyou").data("IsSystem", true).click();
            }
            else {
                var actionCommand = "LoadUnit";
                if (that.UnitSelectionRange) {
                    //如果设置了选人范围则调用
                    actionCommand = "LoadOwnAndChildUnit";
                }

                //更改选人控件范围
                that.UpdateUnitSelectionRange.apply(that);

                var params = {pid: '0'};
                this.Ajax(
                    '/ctg-workflow/organ/childList',
                    "POST",
                    params,
                    function (data) {
                        that.MultiUserData.OrgUnitItems = data.page.result;
                        if (data.page.result.length == 0) {
                            return;
                        }
                        that.LoadUnitsTree($panel, tabType);
                    });
            }
        },

        //校验
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            if ($.isEmptyObject(val)) {
                //为空时添加
                if (this.IsQueryControl && this.UnitsElement.find(".sp_placeholder").length == 0) {
                    this.UnitsElement.append(this.$tipDiv);
                    this.UnitsElement.removeClass("icon-arrow-down-full").css("border", "1px dashed #D7D5D5");

                }
                if (this.Required) {
                    this.AddInvalidText(this.UnitsElement, "必填");
                    return false;
                }
            }

            this.RemoveInvalidText(this.UnitsElement);

            if (this.IsQueryControl) {
                this.UnitsElement.removeClass("icon-arrow-down-full").css("border", "1px dashed #D7D5D5");
            }
            return true;
        },

        //创建部门的<li>对象
        CreateUnitsItem: function (UnitItem, isDeps) {
            var that = this;

            var $li = $("<li>");
            var $a = $("<a>");
            if (UnitItem.HasChild) {
                $a.append("<span class='fa icon-xiangyou sheet-angel'></span>");
            }
            else {
                $a.append("<span class='fa icon-xiangyou sheet-angel no-child'></span>");
            }
            var icon = "icon-xiashuguanli";
            if (UnitItem.Type == 1) {
                //公司
                icon = "icon-gongsi";
            } else if (UnitItem.Type == 8) {
                //角色
                if (isDeps) {
                    return;
                }
                icon = "fa icon-man";
            } else {
                //其他
                icon = "icon-xiashuguanli";
            }
            $a.append("<i class='" + icon + "'></i>").append(UnitItem.name).data("UnitItem", UnitItem);
            //.data("id", UnitItem.ID).data("Code", UnitItem.Code).data("name", UnitItem.name).attr("data-Type", UnitItem.Type);
            if (isDeps) {
                $li.addClass("SheetUser-LiItem");
                var $checkbox = $("<input type='checkbox' id='c_" + UnitItem.id + "'/>");
                var $checkboxLabel = $("<label for='c_" + UnitItem.id + "'></label>");
                //如果是部门tab的话，炫耀可选
                //var $stateIcon = $("<i class='glyphicon'></i>").attr("data-id", UnitItem.id).attr("data-Type", UnitItem.Type);
                //$a.append($stateIcon);
                $a.append($checkbox).append($checkboxLabel);

                $a.find("label,input").click(function (e) {
                    e.preventDefault();
                });

                $a.click(function (e) {

                    if (e.target.tagName.toLowerCase() == "span") return;
                    if ($(this).data("IsSystem")) {
                        $(this).data("IsSystem", false)
                        return;
                    }
                    var UnitObject = $(this).data("UnitItem");
                    if ($(this).data("Exist")) {
                        that.RemoveChoice.apply(that, [UnitObject.id]);
                        //$(this).find("i:last").removeClass("glyphicon-ok");
                        $(this).find("input:checkbox").prop("checked", false);
                        $(this).data("Exist", false);
                    }
                    else {
                        //$(this).find("i:last").addClass("glyphicon-ok");
                        $(this).find("input:checkbox").prop("checked", true);
                        $(this).data("Exist", true);
                        //that.AddChoice.apply(that, [UnitObject]);
                        that.SetValue.apply(that, [UnitObject]);
                    }
                    ////
                    //var $this = $(this).closest("div.SheetUser");
                    that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                });
            }
            else {
                $a.click(function (e) {

                    //if (e.target.tagName.toLowerCase() == "span") return;
                    var UnitObject = $(this).data("UnitItem");
                    that.LoadUsersByParenID.apply(that, [UnitObject.id], that.ShowUnActive);
                });
            }

            $li.append($a);
            if (UnitItem.HasChild) {
                $a.children(".sheet-angel").click(function (e) {
                    var pthat = this;
                    if ($(this).closest("li").hasClass("active")) {
                        $(this).removeClass("icon-chevron-down-fill").addClass("icon-xiangyou");

                        $(this).closest("li").removeClass("active");
                        $(this).closest("li").find("ul").hide();
                    }
                    else {
                        $(this).closest("li").find("ul").remove();
                        var children = that.GetUnitsByParentId(UnitItem.id);
                        if (children.length > 0) {
                            var $ul = $("<ul class='nav SheetUser_SubTreePanel'>");//.addClass("nav SheetUser_SubTreePanel");
                            for (var i = 0; i < children.length; i++) {
                                $ul.append(that.CreateUnitsItem(children[i], isDeps));
                            }
                            $(this).closest("li").append($ul);
                            if ($ul.metisMenu)
                                $ul.metisMenu();

                            setTimeout(function () {
                                if ($(pthat).closest("li").hasClass("active")) {
                                    $(pthat).removeClass("icon-xiangyou").addClass("icon-chevron-down-fill");
                                } else {
                                    $(pthat).removeClass("icon-chevron-down-fill").addClass("icon-xiangyou");
                                }
                            }, 100);

                        }
                    }
                });
            }
            return $li;
        },

        //根据父ID获取子部门
        GetUnitsByParentId: function (parentId) {
            var that = this;
            var units = [];
            for (var i = 0; i < that.MultiUserData.OrgUnitItems.length; i++) {
                if (that.MultiUserData.OrgUnitItems[i].ParentId == parentId) {
                    units.push(that.MultiUserData.OrgUnitItems[i]);
                }
            }
            // 从后台读取下级部门
            if (units.length == 0) {
                var actionCommand = "LoadUnit";
                //if (that.UnitSelectionRange) {
                //    //如果设置了选人范围则调用下面
                //    actionCommand = "LoadOwnAndChildUnit";//如果设置了选人范围则加载制定组织和其下级
                //}
                var params = {
                    // ActionName: "SheetUserAction",
                    // Command: actionCommand,
                    pid: parentId
                }
                this.Ajax(
                    '/ctg-workflow/organ/childList',
                    "POST",
                    params,
                    function (data) {
                        if (data.page.result.length > 0) {
                            for (var i = 0; i < data.page.result.length; i++) {
                                that.MultiUserData.OrgUnitItems.push(data.page.result[i]);
                                units.push(data.page.result[i]);
                            }
                        }
                    }, false);
            }
            return units;
        },

        //加载用户数据
        LoadUsersData: function () {
            var that = this;
            if (that.UsersDataPanel.data("IsLoad")) return;
            that.UsersDataPanel.data("IsLoad", true).css("overflow", "hidden");
            var leftPanel = $("<div class='SheetUser_TreePanel col-sm-7 cols-xs-7'>")/*.addClass("SheetUser_TreePanel col-sm-7")*/.height("100%");
            that.UserListPanel = $("<div class='col-sm-5  cols-xs-7'>")/*.addClass("col-sm-5")*/.height("100%").css("overflow", "auto");
            //var SplitLine = $("<div style='float:left;min-height:80px;max-height:125px;width:0px;border:1px solid #D8D8D8'></div>");
            that.UsersDataPanel.html("");
            that.UsersDataPanel.append(leftPanel);
            that.UsersDataPanel.append(that.UserListPanel);
            that.LoadUnitsTree(leftPanel);
        },
        // 
        LoadUsersByParenID: function (parentID) {
            var that = this;

            if (!that.MultiUserData.DepUserItems[parentID]) {
                var showUnActive = this.ShowUnActive;
                var params = {
                    organId: parentID
                }
                this.Ajax(
                    '/ctg-workflow/user/pageList',
                    "POST",
                    params,
                    function (data) {
                        that.MultiUserData.DepUserItems[parentID] = data.page.result;
                        that.LoadUsersByParenID.apply(that, [parentID]);

                        //异步添加用户数据
                        setTimeout(function () {
                            that.AddUserData(data.page.result);
                        }, 0);
                    });
            }
            else {
                var $ul = $("<ul>").addClass("nav").data("ParentID", parentID);
                var Length = that.MultiUserData.DepUserItems[parentID].length;
                var SelectCount = 0;
                // todo by xiechang 增加全选框
                if (that.IsMultiple && Length > 0) {
                    var $liAll = $('<li class="SheetUser-LiItem"></li>');
                    var $aall = $("<a class='allcheck'>全选</a>");
                    var $allCheckInput = $('<input type="checkbox" id="all' + that.ID + '"/>');
                    var $allCheck = $('<label for="all' + that.ID + '" class="label-all"></label>');
                    $liAll.append($aall.append($allCheckInput).append($allCheck));
                    $allCheck.data("ParentID", parentID);
                    $allCheck.click(function (e) {
                        var ListItem = that.MultiUserData.DepUserItems[$(this).data("ParentID")];
                        var addItems = [];
                        var removeItems = [];
                        var val = !that.$UserPanel.find("#" + $(this).attr("for"))[0].checked;
                        for (var i = 0, len = ListItem.length; i < len; i++) {
                            var item = ListItem[i];
                            if (val) {
                                if (!that.ExistChoice(item.id)) {
                                    //that.AddChoice.apply(that, [item]);
                                    //that.SetValue.apply(that, [item]);
                                    addItems.push(item);
                                }
                                continue;
                            } else {
                                if (that.ExistChoice(item.id)) {
                                    //that.RemoveChoice.apply(that, [item.id]);
                                    removeItems.push(item.id);
                                }
                                continue;
                            }
                        }
                        //批量操作只需要执行一次onchange事件
                        if (addItems.length > 0) {
                            that.SetValue.apply(that, [addItems]);
                        }
                        if (removeItems.length > 0) {
                            that.RemoveChoice.apply(that, [removeItems]);
                        }

                        var $ParUl = $(this).closest("ul.nav");
                        val ? $ParUl.data("SelectCount", len) : $ParUl.data("SelectCount", 0);
                        $ParUl.find("a:not(.allcheck)").each(function () {
                            $(this).data("Exist", val);
                            val ? $(this).find("input:checkbox").prop("checked", true) : $(this).find("input:checkbox").prop("checked", false);
                        });
                        //var $this = $(this).closest("div.SheetUser");
                        that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                    });
                    $ul.append($liAll);
                }
                for (var i = 0; i < Length; i++) {
                    var UnitItem = that.MultiUserData.DepUserItems[parentID][i];
                    var $li = $("<li>").addClass("SheetUser-LiItem");
                    var $checkbox = $('<input type="checkbox" id="c_' + UnitItem.id + '"/> <label for="c_' + UnitItem.id + '"></label>');
                    var icon = UnitItem.Type == 1 ? "fa icon-gongsi" : (UnitItem.Type == 2 ? "icon-xiashuguanli" : UnitItem.Icon);
                    var $a = $("<a>").append($checkbox).append("<i class='glyphicon " + (UnitItem.Icon == "glyphicon-user" ? "icon-people" : UnitItem.Icon) + "'></i>").data("UnitItem", UnitItem);
                    //.data("id", UnitItem.ID).data("Code", UnitItem.Code).data("name", UnitItem.name);
                    var checkboxID = $.IGuid();
                    //var $label = $("<label>").text(UnitItem.name);
                    var $stateIcon = $("<i class='glyphicon'></i>").attr("data-id", UnitItem.id).attr("data-Type", UnitItem.Type);
                    //$a.append($label);
                    $a.append(UnitItem.userName);
                    $a.append($stateIcon);
                    if (that.ExistChoice(UnitItem.id)) {
                        //$stateIcon.addClass("glyphicon-ok");
                        $($checkbox).prop("checked", true);
                        $a.data("Exist", true);
                        SelectCount++;
                    }
                    $a.find("label,input").click(function (e) {
                        e.preventDefault();
                    });

                    $a.click(function (e) {
                        var UnitObject = $(this).data("UnitItem");
                        var $ParUl = $(this).closest(".nav");
                        var Count = $ParUl.data("SelectCount");
                        if ($(this).data("Exist")) {
                            that.RemoveChoice.apply(that, [UnitObject.id]);
                            $(this).find("input:checkbox").prop("checked", false);
                            //$(this).find("i:last").removeClass("glyphicon-ok");
                            $(this).data("Exist", false);
                            Count--;
                        }
                        else {
                            //$(this).find("i:last").addClass("glyphicon-ok");
                            $(this).find("input:checkbox").prop("checked", true);
                            //that.AddChoice.apply(that, [UnitObject]);
                            that.SetValue.apply(that, [UnitObject]);
                            $(this).data("Exist", true);
                            Count++;
                        }
                        if (Count === that.MultiUserData.DepUserItems[$ParUl.data("ParentID")].length && that.IsMultiple) {
                            that.$UserPanel.find("#all" + that.ID)[0].checked = true;
                        }
                        else if(that.IsMultiple){
                            that.$UserPanel.find("#all" + that.ID)[0].checked = false;
                        }
                        $ParUl.data("SelectCount", Count);
                        //var $this = $(this).closest("div.SheetUser");
                        that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));

                    });

                    $li.append($a);
                    $ul.append($li);
                }
                $ul.data("SelectCount", SelectCount);
                if (SelectCount === Length && SelectCount > 0 && that.IsMultiple) {
                    $ul.find("#all" + that.ID)[0].checked = true;
                }
                that.UserListPanel.html("").append($ul);
            }
        },

        ScrollLoad: function () {
            var that = this;
            if (that.IsPosting) {
                return;
            }
            //var searchkey = $(that.$Input).val().trim();
            var searchkey = $(that.$SearchInput).val().trim();
            that.IsPosting = true;
            var params = {
                ActionName: "SheetUserAction",
                Command: 'SearchOrg',
                SearchKey: searchkey,
                OrgUnitVisible: that.OrgUnitVisible,
                UserVisible: that.UserVisible,
                ShowUnActive: that.ShowUnActive,
                UnitSelectionRange: that.UnitSelectionRange,
                FromNum: that.FromNum,
                ToNum: that.ToNum
            }
            that.Ajax(that.FormMultiUserHandler, 'POST', {
                PostData: JSON.stringify(params)
            }, function (data) {
                if (data != null && data.ReturnData.UnitItems.length > 0) {
                    that.FromNum = that.ToNum;
                    that.ToNum += data.ReturnData.UnitItems.length;
                    var $ul = that.$SearchPanel.find('ul');
                    for (var i = 0; i < data.ReturnData.UnitItems.length; i++) {
                        var UnitItem = data.ReturnData.UnitItems[i];
                        var $li = $("<li class='SheetUser-LiItem'>");
                        var icon = UnitItem.Type == 1 ? "fa icon-gongsi" : (UnitItem.Type == 2 ? "fa icon-xiashuguanli" : (UnitItem.Icon == "glyphicon-user" ? "ivu-icon ivu-icon-people" : UnitItem.Icon));
                        var displayName = UnitItem.DisplayName;
                        if (UnitItem.Type == 4) {
                            displayName += "-" + UnitItem.DepartmentName;
                        }
                        var $checkbox = $("<input type='checkbox' id='c" + UnitItem.UnitID + "'/>");
                        var $checkboxLabel = $("<label for='c" + UnitItem.UnitID + "'></label>");
                        var $stateIcon = $("<i class='glyphicon'></i>").attr("data-UnitID", UnitItem.UnitID).attr("data-Type", UnitItem.Type);
                        var $a = $("<a>").append($checkbox).append($checkboxLabel).append("<i class='glyphicon " + icon + "'></i>").append(displayName.replace(searchkey, "<span class='searchekey'>" + searchkey + "</span>")).append($stateIcon).data("UnitItem", UnitItem);

                        $a.find("input,label").click(function (e) {
                            e.preventDefault();
                        });

                        $a.click(function (e) {
                            var UnitObject = $(this).data("UnitItem");
                            var $pcheckbox = $(this).find("input:checkbox");
                            var checked = $pcheckbox.prop("checked");
                            if (checked) {
                                that.RemoveChoice.apply(that, [UnitObject]);
                                $pcheckbox.prop("checked", false);
                            } else {
                                //that.AddChoice.apply(that, [UnitObject]);
                                that.SetValue.apply(that, [UnitObject]);
                                $pcheckbox.prop("checked", true);
                            }
                            that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                        });
                        $ul.append($li.append($a));
                    }
                }
                that.IsPosting = false;
            });
        },
        //搜索用户
        SearchOrg: function () {

            var that = this;
            that.SearchOrgTimeout && clearTimeout(that.SearchOrgTimeout);
            that.SearchOrgTimeout = null;


            that.SearchOrgTimeout = setTimeout(function () {

                that.IsPosting = false;
                that.$SearchPanel.html("");

                if (that.CpLock)
                    return;
                //var searchkey = $(that.$Input).val().trim();
                var searchkey = $(that.$SearchInput).val().trim();
                if (searchkey == "") {
                    that.SelectorPanel.show();
                    that.$SearchPanel.hide();
                    return;
                }
                that.SelectorPanel.hide();
                that.$SearchPanel.show();
                that.$SearchDiv.show();
                //this.$SearchPanel.html("");

                that.IsPosting = true;
                that.FromNum = 0;
                that.ToNum = 10;

                var params = {
                    ActionName: "SheetUserAction",
                    Command: "SearchOrg",
                    SearchKey: searchkey,
                    OrgUnitVisible: that.OrgUnitVisible,
                    UserVisible: that.UserVisible,
                    FromNum: that.FromNum,
                    ToNum: that.ToNum,
                    ShowUnActive: false,
                    UnitSelectionRange: that.UnitSelectionRange,
                };
                that.Ajax(that.FormMultiUserHandler, "POST", { PostData: JSON.stringify(params) }, function (data) {
                    //this.$SearchPanel.html("");
                    if (data != null && data.ReturnData.UnitItems.length > 0) {
                        that.FromNum = that.ToNum + 1;
                        that.ToNum += data.ReturnData.UnitItems.length;
                        var $ul = $("<ul>").addClass("nav").addClass("SheetUser_SubTreePanel");
                        for (var i = 0; i < data.ReturnData.UnitItems.length; i++) {
                            var UnitItem = data.ReturnData.UnitItems[i];
                            var $li = $("<li class='SheetUser-LiItem'>");
                            var icon = UnitItem.Type == 1 ? "ivu-icon ivu-icon-ios-briefcase" : (UnitItem.Type == 2 ? "ivu-icon ivu-icon-person-stalker" : (UnitItem.Icon == "glyphicon-user" ? "icon-people" : UnitItem.Icon));
                            var displayName = UnitItem.DisplayName;
                            if (UnitItem.Type == 4) {
                                displayName += "-" + UnitItem.DepartmentName;
                            }
                            var $checkbox = $("<input type='checkbox' id='c" + UnitItem.UnitID + "'/>");
                            var $checkboxLabel = $("<label for='c" + UnitItem.UnitID + "'></label>");
                            var $stateIcon = $("<i class='glyphicon'></i>").attr("data-UnitID", UnitItem.UnitID).attr("data-Type", UnitItem.Type);
                            var $a = $("<a>").append($checkbox).append($checkboxLabel).append("<i class='glyphicon " + icon + "'></i>").append(displayName.replace(searchkey, "<span class='searchekey'>" + searchkey + "</span>")).append($stateIcon).data("UnitItem", UnitItem);

                            $a.find("input,label").click(function (e) {
                                e.preventDefault();
                            });
                            $a.click(function (e) {
                                //if (e.target.tagName.toLowerCase() == "span") return;
                                var UnitObject = $(this).data("UnitItem");
                                var $pcheckbox = $(this).find("input:checkbox");
                                var checked = $pcheckbox.prop("checked");
                                if (checked) {
                                    that.RemoveChoice.apply(that, [UnitObject.UnitID]);
                                    $pcheckbox.prop("checked", false);
                                } else {
                                    //that.AddChoice.apply(that, [UnitObject]);
                                    that.SetValue.apply(that, [UnitObject]);
                                    $pcheckbox.prop("checked", true);
                                }
                                that.Options.HideCallBack && that.Options.HideCallBack(null, that.$InputBody.parent("div").attr("data-type"));
                                //that.$Input.val("");//移除搜索关键字
                                that.$SearchInput.val("");//移除搜索关键字
                            });
                            $ul.append($li.append($a));
                        }
                        that.IsPosting = false;
                        that.$SearchPanel.append($ul);
                        //滚动加载
                        $($ul).scroll(function () {
                            //底部基本距离+滚动高度>=文档高度-窗体高度
                            var h_ul = $(this).height();//窗口高度
                            var h_scrollTop = $(this).scrollTop();//滚动条顶部
                            var h_offset = $(this).offset();
                            var h_panel = $(that.$SearchPanel).height();
                            if (50 + h_scrollTop >= $(this)[0].scrollHeight - h_ul) {
                                that.ScrollLoad();
                            }
                        });
                    }
                    else {
                        that.$SearchPanel.html("没搜索到组织");
                    }
                });

                that.SearchOrgTimeout = null;
            }, 500);
        },

        //处理映射关系
        MappingControlsHandler: function (UnitObject) {
            if ($.isEmptyObject(this.MappingControls)) return;
            if (this.IsMultiple) return;

            for (var property in this.MappingControls) {
                if (this.MappingControls.hasOwnProperty(property)) {
                    var targetFiled = this.MappingControls[property];
                    var MapValue = UnitObject[property] == void 0 ? "" : UnitObject[property];
                    if (property.toLowerCase() == "gender") {
                        //性别
                        MapValue = MapValue == 0 ? "未知" : (MapValue == 1 ? "男" : "女");
                    }

                    // 由于Mvc的JsonResult的Date Format为 "\/Date()\/"
                    if (MapValue.indexOf("/Date(") > -1) {
                        MapValue = new Date(parseInt(MapValue.replace("/Date(", "").replace(")/", ""), 10));
                        MapValue = MapValue.toLocaleDateString();
                    }

                    $.ControlManager.SetControlValue(targetFiled, MapValue, this.ObjectId);
                }
            }
        },
        //更新选人范围
        UpdateUnitSelectionRange: function () {
            this.UnitSelectionRange = $(this.Element).attr("data-unitselectionrange");
            //计算控件中的选人范围
            var that = this;
            if (that.UnitSelectionRange && that.UnitSelectionRange.length > 0) {
                var SelectionRange = that.UnitSelectionRange;
                var selects = that.UnitSelectionRange.split(";");
                if (selects.length > 0) {
                    for (var i = 0; i < selects.length; i++) {
                        var control = $("div[data-datafield=" + selects[i] + "]");
                        if (control.length > 0) {
                            var controlManager = control.JControl();
                            //列表筛选时取不到值
                            if (!controlManager) { continue; }
                            SelectionRange = selects[i] == SelectionRange ? "" : SelectionRange.replace(selects[i] + ";", "");
                            //添加change事件，控件值改变时，当前控件需要
                            //绑定改变值事件
                            var changeKey = "SelectionChangeMulti." + that.DataField;
                            if (!controlManager.ChangeEvents[changeKey]) {
                                controlManager.BindChange(changeKey, function () {
                                    that.SetValue("");
                                    //清空控件缓存
                                    that.UsersDataPanel.data("IsLoad", false);
                                    that.DepsDataPanel.data("IsLoad", false);
                                    that.MultiUserData = {
                                        //部门
                                        OrgUnitItems: {},
                                        //标签
                                        //OrgTagItems: [],
                                        //部门用户:{部门ID:[]}
                                        DepUserItems: {},
                                        //用户
                                        UserItems: {},
                                    };
                                    that.Units = {};

                                    that.UnitSelectionRange = $(that.Element).attr("data-unitselectionrange");

                                    //重新渲染组织机构
                                    that.LoadOrgByTabType("tab_Users");
                                    that.LoadOrgByTabType("tab_Deps");
                                });
                            }

                            var items = controlManager.GetValue();
                            if (items) {
                                for (var id in items) {
                                    SelectionRange += items[id].UnitID + ";";
                                }
                            }
                        }
                    }
                }

                that.UnitSelectionRange = SelectionRange;
            }
        }
    });
})(jQuery);;
/// <reference path="../../../plugins/qrCode/jquery.qrcode.min.js" />
/// <reference path="../../../jquery-1.11.1.min.js" />
//工具栏
//构造FormToolBar，需要根据表单数据，构造需要的按钮
(function () {
    $.fn.FormToolBar = function () {
        return $.ControlManager.Run.call(this, "FormToolBar", arguments);
    };

    $.Controls.FormToolBar = function (element, args, sheetInfo) {
        this.Element = element;
        this.ResponseContext = sheetInfo;
        this.ControlManagers = {};

        //更多按钮取除关闭以外的后三个，如果加入更多按钮以后按钮个数小于7个,取出更多里面的按钮补充到7个
        //二维码按妞不放置到更多里，因为放到更多里时二维位置码显示错乱
        var moreActionNums = 0;
        if (args.DataItem.length > 7) {
            this.MoreActions = [];
            moreActionNums = args.DataItem.length - 6;
            if (moreActionNums < 2) { return; }

            for (var n = args.DataItem.length - 1; n--; n >= 0) {
                if (args.DataItem[n].Action != "Close" && args.DataItem[n].Action != "ViewQrCode") {
                    moreActionNums--;
                    this.MoreActions.push(args.DataItem[n]);
                    if (moreActionNums == 0) {
                        break;
                    }
                }
            }
            //如果更多按钮只有一个，则不显示更多
            if (this.MoreActions && this.MoreActions.length > 0 && this.MoreActions.length == 1) {
                this.MoreActions = [];
            } else {
                for (var i in args) {
                    if ($.inArray(args[i], this.MoreActions) > -1) {
                        delete args[i];
                    }
                }
            }
        }

        for (var i in args) {
            this.AddButton(args[i]);
        }
        //添加“全屏”按钮
        //this.AddButton({ Action: 'FullScreen', Icon: 'icon-save', Text: '全屏' });

        $(this.Element).find("li").hover(function () {
            $(this).addClass("active");
        }, function () {
            $(this).removeClass("active");
        });
        return this;
    };

    $.Controls.FormToolBar.prototype = {
        AddButton: function (option) {
            if (option) {
                if (option.Action == "Close" && this.MoreActions && this.MoreActions.length > 0) {
                    //在关闭按钮前添加更多按钮
                    var moreButton = { Action: "More", Text: "更多", Icon: "icon-more-big ", Options: {} };
                    //
                    this.MoreActions = this.MoreActions.reverse();
                    moreButton.Options.Buttons = this.MoreActions;
                    moreButton.Options.ControlManagers = this.ControlManagers;
                    this.AddButton(moreButton);
                }
                var key = option.Action || option.Text;
                if (key == void 0) return;
                if (this.ControlManagers[key]) return this.ControlManagers[key];
                if ($.Buttons[option.Action]) {
                    this.ControlManagers[option.Action] = new $.Buttons[option.Action](this.Element, option, this.ResponseContext);
                } else {
                    this.ControlManagers[key] = new $.Buttons.BaseButton(this.Element, option, this.ResponseContext);
                }
            }
        }
    };
})(jQuery);

//#region 按钮基类
$.Buttons = {};
$.Buttons.BaseButton = function (element, args, sheetInfo) {
    this.Action = args.Action;
    this.Icon = args.Icon;
    this.Text = args.Text;

    //设置文本样式
    this.CssClass = args.CssClass || "";

    this.Container = element;//按钮容器ul
    this.ResponseContext = sheetInfo;
    this.Element = null;//当前按钮元素 li

    //绑定的参数
    this.Options = args.Options;

    //this.PermittedActions = sheetInfo.PermittedActions;
    this.Visible = true;//this.PermittedActions[this.Action] == void 0 ? true : this.PermittedActions[this.Action];
    this.MobileVisible = true;//args.MobileVisible === void 0 ? this.Visible : args.MobileVisible;

    //自定义事件
    this.OnActionPreDo = args.OnActionPreDo;
    this.OnAction = args.OnAction;
    //this.OnActionDone = args.OnActionDone;


    //执行事件
    this.PreRender();
    this.Render();
};
$.Buttons.BaseButton.prototype = {
    PreRender: function () {
    },
    Render: function () {
        var actionKey = this.Action || this.Text;
        if (!this.Visible) {
            $(this.Container).children("li[data-action='" + actionKey + "']").hide();
            return;
        }
        this.Element = $(this.Container).children("li[data-action='" + actionKey + "']");
        if (this.Element.length == 0) {
            if (this.Action == "Submit" || this.Action == "SubmitAndAdd") {
                this.Icon = "icon-submit";
            } else if (this.Action == "Print") {
                this.Icon = "icon-popup_print";
            } else if (this.Action == "Save") {
                this.Icon = "icon-baocun";
            } else if (this.Action == "ViewQrCode") {
                this.Icon = "icon-erweima";
            } else if (this.Action == "Remove") {
                this.Icon = "icon-delete2";
            }
            this.Element = this._CreateButtonElement(this.Action, this.Icon, this.Text);
            $(this.Container).append(this.Element);
        }
        this.BindClick();
    },
    BindClick: function () {
        var actionKey = this.Action || this.Text;
        this.Element.unbind("click." + actionKey).bind("click." + actionKey, this, function (e) {
            e.data.ActionClick.apply(e.data);
        });

        //鼠标移入控件时触发click事件
        if (actionKey == "ViewQrCode" || actionKey == "More") {
            this.Element.off("mouseenter.tooltip").on("mouseenter.tooltip", this, function (e) {
                e.data.ActionClick.apply(e.data);
            });
        } else {
            this.Element.off("mouseenter.tooltip").on("mouseenter.tooltip", this, function (e) {
                if ($(this).parents("ul#action_more").length == 0) {
                    $("#dvQrCode").parent().hide();
                    $("#action_more").parent().hide();
                }
            });
        }
    },
    _CreateButtonElement: function (action, icon, text) {
        var liElement = $("<li data-action='" + this.Action + "'></li>");
        var linkElement = $("<a href='javascript:void(0);'></a>");
        var spanElement = $("<span class='fa " + this.Icon + "'>  " + this.Text + "</span>");
        if (this.CssClass) {
            spanElement.addClass(this.CssClass);
        }

        return liElement.append(linkElement.append(spanElement));
    },
    ActionClick: function () {
        //doAction之前的事件
        var callResult = true;
        if ($.isFunction(this.OnActionPreDo)) {//javascript函数
            callResult = this.OnActionPreDo.apply(this);
        }
        else if (this.OnActionPreDo) {//javascript语句
            callResult = new Function(this.OnActionPreDo).apply(this);
        }
        //结果成功
        if (callResult == null || callResult == true) {
            //执行后台Action
            this.DoAction.apply(this);
        }

        //回调里处理
        //if (this.OnActionDone) {
        //    this.OnActionDone.apply(this);
        //}
    },
    //执行
    DoAction: function () {
        //继承的按钮，如果需要掉基类的DoAction，用 this.constructor.Base.DoAction.apply(this);
        if (this.OnAction) {
            this.OnAction.apply(this);
        } else {
            if (this.Action) {
                $.SmartForm.OnAction(this);
            }
        }
    },

    ////回调函数
    //OnActionDone: function () { },

    FetchUser: function (_Title, _IsMulti, _UserOptions, _CheckText, _Checked) {
        var that = this;
        if (!this.SheetUserInited) {
            this.SheetUserInited = true;

            //选人控件
            var DefaultOptions = {
                O: "VE",
                L: _IsMulti ? $.SmartForm.LogicType.MultiParticipant : $.SmartForm.LogicType.SingleParticipant
            };
            if (_UserOptions) {
                $.extend(DefaultOptions, _UserOptions)
            }
            var _SheetUser = $("<div>").FormUser(DefaultOptions);
            //复选框
            var chkListenConstancy = null;

            if (_CheckText) {
                var ckid = $.IGuid();
                chkListenConstancy = $("<input type='checkbox' id='" + ckid + "' />");
                //默认选中
                chkListenConstancy.prop("checked", !!_Checked);
                var labelForCheckbox = $("<label for='" + ckid + "'>" + _CheckText + "</label>")
                this.CheckText = chkListenConstancy;
            }

            if (this.ResponseContext.IsMobile) {
                this.FetchUserPanelID = $.uuid();
                //标题
                var _HeaderId = $.uuid();
                var _Header = $("<header>").attr("id", _HeaderId);
                _Header.html('<h1>' + _Title + '</h1><a class="button icon close" onclick="$.ui.goBack();"></a>')
                _Header.appendTo("#afui");

                //确定
                var _Button = $("<div>").text("确定").addClass("button").css("float", "right");
                _Button.appendTo(_Header);

                //弹出窗口
                var _SelectPanel = $("<div>").addClass("panel").attr("id", this.FetchUserPanelID).attr("data-header", _HeaderId)
                    .attr("data-transition", "slideUp")
                    .attr("data-title", _Title);
                _SelectPanel.appendTo("#content");

                $(_SheetUser.Element).appendTo(_SelectPanel);
                if (chkListenConstancy) {
                    $(_SheetUser.Element).after(chkListenConstancy);
                    labelForCheckbox.width("90%");
                    chkListenConstancy.after(labelForCheckbox);
                }

                _Button.click(function () {
                    that.Datas = [];
                    if (_SheetUser.GetValue()) {
                        that.Datas.push(_SheetUser.GetValue().toString());
                        if (chkListenConstancy) {
                            that.Datas.push(chkListenConstancy.prop("checked"));
                        }

                        $.SmartForm.OnAction(that);

                        $.ui.goBack();

                        setTimeout(function () {
                            $("#" + _HeaderId).remove();
                            $("#" + this.FetchUserPanelID).remove();
                        }, 1000)
                    }
                    else {
                        alert("请选择参与者");
                    }
                });
            }
            else {
                var body = $("<div><div>" + _Title + "</div></div>");
                body.css("min-height", 350).append(_SheetUser.Element);
                if (chkListenConstancy) {
                    $(_SheetUser.Element).after($("<div></div>").append(chkListenConstancy).append(labelForCheckbox));
                }

                this.ModalManager = new $.SheetModal(
                    _Title,
                    body,
                    [{
                        Text: "确定",
                        DoAction: function () {
                            var userid = thisFormUser.GetValue();
                            this.SheetAction.Datas = [];
                            if (userid) {
                                this.SheetAction.Datas.push(userid.toString());

                                if (this.ChecBoxOjb) {
                                    this.SheetAction.Datas.push(this.ChecBoxOjb.prop("checked"));
                                }

                                $.SmartForm.OnAction(this.SheetAction);
                                this.ModalManager.Hide();
                            }
                            else {
                                alert("请选择参与者!");
                            }
                        },
                        SheetUser: _SheetUser,
                        ChecBoxOjb: chkListenConstancy,
                        SheetAction: that
                    },
                    {
                        Text: "关闭",
                        DoAction: function () {
                            this.ModalManager.Hide();
                        }
                    }]
                );
            }
        }

        if (this.ResponseContext.IsMobile) {
            $.ui.loadContent("#" + this.FetchUserPanelID);
        }
        else {
            this.ModalManager.Show();
        }
    },
    GetMobileProxy: function (_thatAction) {
        return {
            text: _thatAction.Text,
            handler: function () {
                _thatAction.ActionClick();
            }
        }
    }
};
//#endregion

//#region 保存
$.Buttons.Save = function (element, option, sheetInfo) {
    return $.Buttons.Save.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.Save.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        $.SmartForm.Save(this);
    }
});
//#endregion

//保存并添加
$.Buttons.SubmitAndAdd = function (element, option, sheetInfo) {
    return $.Buttons.SubmitAndAdd.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.SubmitAndAdd.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        $.SmartForm.Submit(this);
    },
    OnActionDone: function (data) {
        if (data.Successful) {
            if (window.parent.$.ListView != null && $.isFunction(window.parent.$.ListView.RefreshView)) {
                window.parent.$.ListView.RefreshView();
            }
            var href = window.location.href;
            href = href.replace("&mid=", "&mid=" + Math.round(Math.random() * 100, 0));
            window.location.href = href;
        }else {
            if (data.Errors != void 0  && data.Errors.length > 0) {
                $.IShowError('错误', data.Errors[0]);
            }
            if (data.Infos != void 0 && data.Infos.length >0) {
                $.IShowError('提示', data.Infos[0]);
            }
        }
        return false;
    }
});


//#region 流程状态
$.Buttons.ViewInstance = function (element, option, sheetInfo) {
    if (!sheetInfo.IsCreateMode)
        return $.Buttons.Reject.Base.constructor.call(this, element, option, sheetInfo);
    else {
        option.Text = "流程预览";
        return $.Buttons.ViewInstance.Base.constructor.call(this, element, option, sheetInfo);
    }
};
$.Buttons.ViewInstance.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        var url = "";
        if (!this.ResponseContext.IsCreateMode) {
            url = "/WorkFlowCenter/WorkFlowState/?BizObjectId=" + this.ResponseContext.BizObjectId + "&WorkItemID=" + this.ResponseContext.WorkItemId + "&WorkflowCode=" + this.ResponseContext.SchemaCode + "&WorkflowVersion=" + this.ResponseContext.WorkflowVersion + "&mystate=1";
            $.ISideModal.Show(url, "流程状态");
        } else {
            url = "/WorkFlowCenter/WorkFlowState/?BizObjectId=" + this.ResponseContext.BizObjectId + "&WorkItemID=" + this.ResponseContext.WorkItemId + "&WorkflowCode=" + this.ResponseContext.SchemaCode + "&WorkflowVersion=" + this.ResponseContext.WorkflowVersion + "&mystate=1";
            $.ISideModal.Show(url, "流程预览");
            //$.IModal("流程预览", url); 
        }




        //window.location.href = url;
    }
});
//#endregion


//#region 取消
$.Buttons.CancelInstance = function (element, option, sheetInfo) {
    return $.Buttons.CancelInstance.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.CancelInstance.Inherit($.Buttons.BaseButton, {
    PreRender: function () {
        this.constructor.Base.PreRender();

        //this.OnActionPreDo = function () {
        //    return confirm("确定执行取消流程操作?");
        //};
    },
    DoAction: function () {
        var that = this;
        $.SmartForm.ConfirmAction("确定执行取消流程操作", function () {
            $.SmartForm.OnAction(that);
            $.SmartForm.ClosePage(this);
        });
    }
});
//#endregion

//#region 驳回
$.Buttons.Reject = function (element, option, sheetInfo) {

    return $.Buttons.Reject.Base.constructor.call(this, element, option, sheetInfo);

};
$.Buttons.Reject.Inherit($.Buttons.BaseButton, {
    Render: function () {
        if (!this.Visible) {
            var actionKey = this.Action || this.Text;
            $(this.Container).children("li[data-action='" + actionKey + "']").hide();
            return;
        }

        if (this.ResponseContext.ApprovalListVisible) {
            this.Text = "不同意";
        }

        var RejectActivities = [];
        if (this.ResponseContext.RejectActivities) {
            for (var i = 0; i < this.ResponseContext.RejectActivities.length; ++i) {
                RejectActivities.push(
                    {
                        Action: this.ResponseContext.RejectActivities[i].Code,
                        Icon: this.Icon,
                        Text: this.ResponseContext.RejectActivities[i].Name,
                        OnAction: function () {
                            $.SmartForm.Reject(this, this.Action);
                        },
                        MobileVisible: false
                    });
            }
        }
        if (RejectActivities.length > 0) {
            if (RejectActivities.length == 1) {
                //只有一个的时候
                this.Text = RejectActivities[0].Text;
                this.DestActivity = RejectActivities[0].Action;
                this.constructor.Base.Render.apply(this);
            } else {
                this.constructor.Base.Render.apply(this);
                this.DropdownMenu = $("<ul class='dropdown-menu'></ul>");
                var Menus = this.DropdownMenu.SheetToolBar(RejectActivities);
                if (this.IsMobile) {
                    this.MobileActions = [];
                    for (_Action in Menus.ControlManagers) {
                        var that = Menus.ControlManagers[_Action];
                        this.MobileActions.push(this.GetMobileProxy(that));
                    };
                }

                this.Element.append(this.DropdownMenu);
                this.OnActionPreDo = null;
            }
        }
        else {
            this.constructor.Base.Render.apply(this);
        }
    },
    DoAction: function () {
        if (this.doingWork) {
            return;
        } else {
            this.doingWork = true;
        }

        if (this.DropdownMenu) {
            if (this.DropdownMenu.is(":hidden"))
                this.DropdownMenu.show();
            else
                this.DropdownMenu.hide();
        }
        else if (this.DestActivity) {
            $.SmartForm.Reject(this, this.DestActivity);
        }
        else {
            $.SmartForm.Reject(this);
        }
    },
    OnActionDone: function (data) {
        this.doingWork = false;
        return true;
    }
});
//#endregion

//#region 提交
$.Buttons.Submit = function (element, option, sheetInfo) {
    return $.Buttons.Submit.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.Submit.Inherit($.Buttons.BaseButton, {
    Render: function () {
        //if ($.SmartForm.ResponseContext.WorkItemType == $.SmartForm.WorkItemType.Fill)
        //    this.Text = "提交";
        //else if ($.SmartForm.ResponseContext.WorkItemType == $.SmartForm.WorkItemType.Approve)
        //    this.Text = "同意";
        if (!this.Visible) {
            var actionKey = this.Action || this.Text;
            $(this.Container).children("li[data-action='" + actionKey + "']").hide();
            return;
        }

        //if (this.ResponseContext.ApprovalListVisible) {
        //    this.Text = "同意";
        //}

        this.SubmitActivities = [];
        if (this.ResponseContext.SubmitActivities == null
            || this.ResponseContext.SubmitActivities == void 0
            || this.ResponseContext.SubmitActivities.length == 0) {

            //根据岗位提交
            if (this.ResponseContext.Posts) {
                for (var j = 0; j < this.ResponseContext.Posts.length; j++) {
                    this.SubmitActivities.push(
                        {
                            Action: this.Action + "&" + this.ResponseContext.Posts[j].Code,
                            Icon: this.Icon,
                            Text: this.Text + "-" + this.ResponseContext.Posts[j].Name,
                            OnAction: function () {
                                $.SmartForm.Submit(this, this.Text, "", this.Action.split("&")[1]);
                            },
                            MobileVisible: false
                        });
                }
            }
            //根据组提交
            if (this.ResponseContext.Groups) {
                for (var j = 0; j < this.ResponseContext.Groups.length; j++) {
                    this.SubmitActivities.push(
                        {
                            Action: this.Action + "&" + this.ResponseContext.Groups[j].Code,
                            Icon: this.Icon,
                            Text: this.Text + "-" + this.ResponseContext.Groups[j].Name,
                            OnAction: function () {
                                $.SmartForm.Submit(this, this.Text, "", null, this.Action.split("&")[1]);
                            },
                            MobileVisible: false
                        });
                }
            }
        }
        else {
            for (var i = 0; i < this.ResponseContext.SubmitActivities.length; ++i) {
                //直接提交
                this.SubmitActivities.push(
                    {
                        Action: this.ResponseContext.SubmitActivities[i].Code,
                        Text: this.Text + "-" + this.ResponseContext.SubmitActivities[i].Name,
                        OnAction: function () {
                            $.SmartForm.Submit(this, this.Text, this.Action);
                        },
                        MobileVisible: false
                    });
                //根据岗位提交
                if (this.ResponseContext.Posts) {
                    for (var j = 0; j < this.ResponseContext.Posts.length; j++) {
                        this.SubmitActivities.push(
                            {
                                Action: this.ResponseContext.SubmitActivities[i].Code + "&" + this.ResponseContext.Posts[j].Code,
                                Icon: this.Icon,
                                Text: this.Text + "-" + this.ResponseContext.SubmitActivities[i].Name + "-" + this.ResponseContext.Posts[j].Name,
                                OnAction: function () {
                                    $.SmartForm.Submit(this, this.Text, this.Action.split("&")[0], this.Action.split("&")[1]);
                                },
                                MobileVisible: false
                            });
                    }
                }
                //根据组提交
                if (this.ResponseContext.Groups) {
                    for (var j = 0; j < this.ResponseContext.Groups.length; j++) {
                        this.SubmitActivities.push(
                            {
                                Action: this.ResponseContext.SubmitActivities[i].Code + "&" + this.ResponseContext.Groups[j].Code,
                                Icon: this.Icon,
                                Text: this.Text + "-" + this.ResponseContext.SubmitActivities[i].Name + "-" + this.ResponseContext.Groups[j].Name,
                                OnAction: function () {
                                    $.SmartForm.Submit(this, this.Text, this.Action.split("&")[0], null, this.Action.split("&")[1]);
                                },
                                MobileVisible: false
                            });
                    }
                }
            }
        }

        if (this.SubmitActivities.length > 1) {
            this.constructor.Base.Render.apply(this);
            this.DropdownMenu = $("<ul class='dropdown-menu'></ul>");
            var Menus = this.DropdownMenu.SheetToolBar(this.SubmitActivities);

            if (this.IsMobile) {
                this.MobileActions = [];
                for (_Action in Menus.ControlManagers) {
                    var that = Menus.ControlManagers[_Action];
                    this.MobileActions.push(this.GetMobileProxy(that));
                };
            }

            $(this.Element).append(this.DropdownMenu);
            this.OnActionPreDo = null;
        }
        else if (this.SubmitActivities.length == 1) {
            this.Text = this.SubmitActivities[0].Text;
            this.constructor.Base.Render.apply(this);
        }
        else {
            this.constructor.Base.Render.apply(this);
        }
    },
    DoAction: function () {
        if (this.doingWork) {
            return;
        } else {
            this.doingWork = true;
        }

        if (this.SubmitActivities.length == 1) {
            this.SubmitActivities[0].OnAction.apply(this.SubmitActivities[0]);
            return;
        }

        if (this.DropdownMenu) {
            if (this.IsMobile) {
                $.ui.actionsheet(this.MobileActions);
            }
            else {
                if (this.DropdownMenu.is(":hidden"))
                    this.DropdownMenu.show();
                else
                    this.DropdownMenu.hide();
            }
        }
        else {
            $.SmartForm.Submit(this, this.Text);
        }
    },
    OnActionDone: function (data) {
        this.doingWork = false;
        return true;
    }
});
//#endregion

//#region 编辑
$.Buttons.Edit = function (element, option, sheetInfo) {
    return $.Buttons.Edit.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.Edit.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        //打开关联表单再“编辑”的时候，原来的url中已经有Mode，需要将原来的替换
        var oldUrl = window.location.href;
        var modeIndex = oldUrl.indexOf('&Mode');
        if (modeIndex > -1) {
            var p = oldUrl.indexOf('&', modeIndex + 1);
            var modeStr = oldUrl.substring(modeIndex, p);
            var newUrl = oldUrl.replace(modeStr, '&Mode=' + $.SmartForm.SmartFormMode.Edit);
            window.location = newUrl;
        } else {
            window.location = window.location + "&Mode=" + $.SmartForm.SmartFormMode.Edit;
        }
    }
});
//#endregion

//#region 结束流程
$.Buttons.FinishInstance = function (element, option, sheetInfo) {
    return $.Buttons.FinishInstance.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.FinishInstance.Inherit($.Buttons.BaseButton, {
    PreRender: function () {
        this.constructor.Base.PreRender();
        //this.OnActionPreDo = function () {
        //    return confirm("确定执行结束流程操作?");
        //}
    },
    DoAction: function () {
        $.SmartForm.ConfirmAction("确定执行结束流程操作", function () {
            $.SmartForm.FinishInstance(this);
        });
    }
});
//#endregion

//#region 关闭
$.Buttons.Close = function (element, option, sheetInfo) {
    return $.Buttons.Close.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.Close.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        // View模式下，直接关闭表单
        if (this.ResponseContext.FormMode == $.SmartForm.SmartFormMode.View) {
            $.SmartForm.ClosePage(this);
        }
        else {
            var framename = window.frames.name;
            var id = name.substring(6, name.length);
            var IsChange = window.parent.$.ISideModal.CheckBodyIsChange(id);
            if (IsChange) {
                $.IConfirm("", "确定放弃保存?放弃后数据不会被保存！", function (isTrue) {
                    if (isTrue)
                        $.SmartForm.ClosePage(this);
                });
            } else {
                $.SmartForm.ClosePage(this);
            }
        }
    }
});
//#endregion

//#region 删除
$.Buttons.Remove = function (element, option, sheetInfo) {
    return $.Buttons.Remove.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.Remove.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        $.SmartForm.Remove(this);
    }
});
//#endregion

//#region 打印
$.Buttons.Print = function (element, option, sheetInfo) {
    this.Printed = false;
    return $.Buttons.Print.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.Print.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        // 如果有自定义打印表单URL，则转向自定义打印表单
        // 否则直接页面打印
        if (this.ResponseContext.PrintUrl) {
            window.open(this.ResponseContext.PrintUrl);
        }
        else {
            //文本转图片
            var wordToImage = function (text) {
                $('body').append('<canvas id="waterCanvas" width="200" height="100"></canvas>');
                var c = document.getElementById('waterCanvas');
                var ctx = c.getContext('2d');
                ctx.font = '20px Verdana';
                ctx.fillStyle = 'green';
                ctx.fillText(text, 100, 50);
                var image = c.toDataURL('image/png', 1);
                $('#waterCanvas').remove();
                return image;
            };
            //判断附件类型是否是图片
            var isImg = function (name) {
                var fileName = name;
                var fileType = "";
                var imgTypeArr = ['.jpeg', '.jpg', '.png', '.gif', '.bmp'];
                if (fileName.lastIndexOf(".") > 0) {
                    fileName = name.substring(0, name.lastIndexOf("."));
                    fileType = name.substring(name.lastIndexOf("."), name.length);
                    if (fileType)
                        fileType = fileType.toLowerCase();
                }
                return imgTypeArr.indexOf(fileType) > -1;//判断是否是图片
            };
            //重绘附件
            var redrawAttachment = function ($attachment) {
                var attachments = [];
                var $attachmentCtrl = $($attachment).FormAttachment();
                var $attachmentValue = $attachmentCtrl.Value;
                var attachmentCount = $attachmentValue.length;//附件数量
                for (var j = 0; j < attachmentCount; j++) {
                    var attachmentName = $attachmentValue[j].Name;
                    var thumbnailUrl = $attachmentValue[j].ThumbnailUrl;
                    var $newAttachment = $('<div class="print-attachment"></div>');
                    if (thumbnailUrl != void 0 && thumbnailUrl != "") {
                        //是图片
                        //if (thumbnailUrl == null) {
                        //    thumbnailUrl = src = "../../../../Content/Images/ImgFailed.png";
                        //}
                        var $newImg = $('<img src="' + thumbnailUrl + '" height="100" />');
                        var indexOfPot = attachmentName.lastIndexOf('.');
                        attachmentName = attachmentName.slice(0, indexOfPot);
                        var $newImgTitle = $('<span>' + attachmentName + '</span>');
                        $newAttachment.append($newImg);
                        $newAttachment.append($newImgTitle);
                    } else {
                        var $newFile = $('<div>' + attachmentName + '</div>');
                        $newAttachment.append($newFile);
                    }
                    attachments.push($newAttachment);
                }
                return attachments;
            };
            //获取控件值
            var getControlValue = function (obj) {
                var controlKey = $(obj).attr('data-controlkey');
                var $control = $(obj).JControl();
                if ($control == undefined && $(obj).hasClass('SerialNo')) {
                    return $(obj).text();
                }
                var controlVal = $control.GetValue();
                var tempVal = controlVal;
                switch (controlKey) {
                    case 'FormSeqNo':
                        controlVal = $control.Value;
                        break;
                    case 'FormLabel':
                        controlVal = $control.Value;
                        break;
                    case 'FormUser':
                        controlVal = '';
                        for (var key in tempVal) {
                            //controlVal += tempVal[key].Name;
                            controlVal = tempVal[key].DisplayName;
                        }
                        break;
                    case 'FormCheckbox':
                        controlVal = controlVal ? '是' : '否';
                        break;
                    case 'FormDropDownList':
                        if (!controlVal) {
                            controlVal = '';
                        }
                        break;
                    case 'FormMultiUser':
                        controlVal = '';
                        for (var key in tempVal) {
                            //controlVal += tempVal[key].Name + ';';
                            controlVal += tempVal[key].DisplayName + ';';
                        }
                        break;
                    case 'FormMap':
                        controlVal = '';
                        var address = $.parseJSON(tempVal).Address;
                        controlVal = address;
                        break;
                    case 'FormQuery':
                    case 'FormMultiQuery':
                        controlVal = $control.GetText();
                        break;
                    case 'FormAreaSelect':
                        //controlVal = $control.Value;
                        //if (controlVal) {
                        //    var area = $.parseJSON(controlVal);
                        //    //controlVal = area.Province + ' ' + area.City + ' ' + area.Town + ' ' + area.Detail;
                        //    controlVal = area.adname + ' ' + area.Detail;
                        //} else {
                        //    controlVal = '';
                        //}
                        controlVal = $control.$Input ? $control.$Input.text() : "";
                        break;
                    case 'FormAttachment':
                    case 'FormPhoto':
                        controlVal = $('<div>');
                        var $newAttachments = redrawAttachment(obj);
                        for (var mm = 0; mm < $newAttachments.length; mm++) {
                            controlVal.append($newAttachments[mm]);
                        }
                        controlVal = $('<div>').append(controlVal);
                        controlVal = controlVal.html();
                        break;
                    //controlVal = $('<div>').append(controlVal);
                    //return $('<div>').append(controlVal).html();
                    default:
                        if (controlVal == void 0 || controlVal == null) {
                            controlVal = '';
                        }
                        break;
                }
                return controlVal;
            };
            //重绘子表
            var getGridViewTable = function (obj) {
                var gridViewTable = '';
                var columnCount = 6;//每行最多展示列数，如果超过此数则将余下列折行
                var datafield = $(obj).attr('data-datafield');
                //var gridViewTitle = $('[data-datafield="' + datafield + '"]>span').text();//标题
                var gridViewTitle = $('[data-datafield="' + datafield + '"]').attr('data-displayname');//标题
                //var $gridViewTb = $('[data-datafield="' + datafield + '"]>table');//table
                var $gridViewTbTemp = $('[data-datafield="' + datafield + '"]').find('.table-body table');//table
                var $newTablePanel = $('<div></div>');//newTable的容器
                //去掉隐藏的列
                var $gridViewTb = $($gridViewTbTemp).clone();
                $gridViewTb.find('thead th').each(function (index, n) {
                    if ($(this).css('display') == 'none' || $(this).find("div").hasClass("SerialNo")) {
                        $(this).remove();
                    } else {
                        //判断是否有不打印的列
                        var datafield = $($(this).find('div')).attr('data-datafield');
                        if (datafield == undefined) {
                            $(this).remove();
                            return true;
                        }
                        var tdCtrl = $gridViewTb.find('tbody td').find('div[class*="sheet-control form-group"][data-datafield="' + datafield + '"]');
                        if (tdCtrl != void 0) {
                            if ($(tdCtrl).attr('data-printable') != void 0 && $(tdCtrl).attr('data-printable') == 'false') {
                                $(this).remove();
                            }
                        }
                    }
                });
                var $gridViewThead = $gridViewTb.find('thead');
                //暂存状态移除子表最后按钮列
                $gridViewThead.find('th').each(function () {
                    if ($(this).hasClass('form-gridview-col-btn')) {
                        $(this).remove();
                    }
                });
                var $gridViewTh = $gridViewTb.find('thead th:not(.SerialNo_th)');//子表列标题
                var $gridViewTr = $gridViewTb.find('tbody>tr[data-objectid]');//子表行
                //移除子表中不显示的列
                $gridViewTr.find('td').each(function () {
                    if ($(this).css('display') == 'none' || $(this).find("div").hasClass("SerialNo")) {
                        $(this).remove();
                    }
                    else {
                        var datafield = $($(this).find('div')).attr('data-datafield');
                        if (datafield == undefined) {
                            $(this).remove();
                            return true;
                        }
                        var tdCtrl = $(this).find('div[class*="sheet-control form-group"]');
                        if (tdCtrl != void 0) {
                            if ($(tdCtrl).attr('data-printable') != void 0 && $(tdCtrl).attr('data-printable') == 'false') {
                                $(this).remove();
                            }
                        }
                    }
                });
                var gridViewColumnCount = $gridViewTh.length;//子表列数
                var newTableCount = Math.ceil(gridViewColumnCount / columnCount);//单个子表拆分的table个数
                for (var t = 0; t < newTableCount; t++) {
                    var $newTable = $('<table style="width:100%;background-color:#f6f6f6" class="print-childTable">');
                    //table标题行，先取到合并的列数
                    var colspan = 1;
                    if (t == newTableCount - 1) {
                        //最后一个子表
                        colspan = gridViewColumnCount % columnCount == 0 ? columnCount : gridViewColumnCount % columnCount;
                    } else {
                        //非最后一个子表，列数为columnCount
                        colspan = columnCount;
                    }
                    //标题行
                    var $newTableTitle = $('<tr><td style="border:none" colspan="' + colspan + '" class="print-childTable-title" >' + gridViewTitle + '</td></tr>');
                    $newTable.append($newTableTitle);


                    //列头
                    var $newTableTh = $('<tr></tr>');
                    var width = 100 / colspan;
                    for (var j = 0; j < colspan; j++) {
                        $newTableTh.append($('<td style="border-left:none;width:' + width + '%"></td>').append($gridViewTh.eq(j + t * columnCount).find('div').text()));
                    }
                    $newTable.append($newTableTh);
                    //单元格
                    var startTdIndex = t * columnCount;//开始单元格
                    var endTdIndex = startTdIndex + colspan;//结束单元格
                    for (var k = 0; k < $gridViewTr.length; k++) {
                        //每一行
                        var $tr = $gridViewTr.eq(k);
                        var tr_objectId = $tr.attr('data-objectid');
                        var $newTableTr = $('<tr></tr>');
                        for (var l = startTdIndex; l < endTdIndex; l++) {
                            var $newTableTd = $('<td></td>');
                            if (l == startTdIndex) {
                                $newTableTd.css('border-left', 'none');
                            }
                            //var $tdSheetCtrl = $('tr[data-objectid="' + tr_objectId + '"]>td').eq(l).find('.sheet-control');
                            //var $tdSheetCtrl = $tr.find('td').eq(l).find('.sheet-control');
                            var $tdSheetCtrl = $tr.children('td').eq(l).find('.sheet-control');
                            if ($tdSheetCtrl.length > 0) {
                                $newTableTd.append(getControlValue($tdSheetCtrl));
                                $newTableTr.append($newTableTd);
                            }
                        }
                        $newTable.append($newTableTr);
                    }
                    $newTablePanel.append($newTable);
                }
                gridViewTable = $newTablePanel.find('table');
                return gridViewTable;
            };
            var agree = true;
            //获取审批记录
            var water = '';
            var getComment = function (obj) {
                var commentInfo = [];
                var $comment = $(obj);
                if ($comment && $comment.length > 0) {
                    //var agree = true;
                    var $newCommentTable = $('<table  style="width:100%;table-layout:fixed">');
                    $comment.each(function () {
                        var $commentCtrl = $(this).FormComment();
                        var comments = $commentCtrl.GetCommentValue();
                        $newCommentTable.append('<tr><td rowspan="' + comments.length + 1 + '" style="text-align:center;" class="col-md-2 col-sm-2 col-xs-2">审批记录</td><td class="print-table-th">审批人</td><td class="print-table-th">审批节点</td><td class="print-table-th">审批结果</td><td class="print-table-th">审批意见</td><td class="print-table-th">审批时间</td></tr>');

                        for (var i = 0; i < comments.length; i++) {
                            if (i == comments.length - 1) {
                                agree = comments[i].Approval;
                            }
                            var $newCommentTr = $('<tr>');
                            var date = comments[i].ModifiedTime.replace(/T/g, ' ');//审批时间
                            var newDate = new Date(date);
                            var t = newDate.getTime();
                            newDate = new Date(t);
                            var y = newDate.getFullYear();
                            var m = newDate.getMonth() + 1;
                            var d = newDate.getDate();
                            var h = newDate.getHours();
                            var mm = newDate.getMinutes();
                            var s = newDate.getSeconds();
                            newDate = y + '-' + (m < 10 ? ('0' + m) : m) + '-' + (d < 10 ? ('0' + d) : d) + ' ' + (h < 10 ? ('0' + h) : h) + ':' + (mm < 10 ? ('0' + mm) : mm);

                            var commentTd = '';

                            commentTd += '<td style="border-left:none;padding-left:6px" class="col-md-1 col-sm-1 col-xs-2"><span>' + comments[i].UserName + '</span></td>';
                            commentTd += '<td style="border-left:none;font-weight:bold" class="col-md-1 col-sm-1 col-xs-2">' + comments[i].ActivityDisplayName + '</td>';
                            commentTd += '<td style="border-left:none" class="col-md-1 col-sm-1 col-xs-1"><span>' + (comments[i].Approval ? "同意" : "不同意") + '</span></td>';
                            commentTd += '<td style="border-left:none" class="col-md-4 col-sm-4 col-xs-4"><span>' + comments[i].Text + '</span></td>';
                            commentTd += '<td style="border-left:none" class="col-md-2 col-sm-2 col-xs-2"><span>' + newDate + '</span></td>';
                            $newCommentTr.append(commentTd);
                            $newCommentTable.append($newCommentTr);
                        }
                    });
                    var $commentPanel = $('<div>').append($newCommentTable);
                }
                return $commentPanel.html();
            };
            //取页面内容
            var content = $('<div>').append($(window.document.body).children().clone());
            //移除页签
            content.find('nav').remove();
            content.find('.nav').remove();
            content.find('.nav-tabs-wrap').remove();
            content.find('script').remove();
            //移除drop-list
            content.find('.drop-list').remove();
            //页面标题
            //页面table
            var $newContent = $('<div>');//新的容器
            var $contentTable = $('<table class="print-table" style="table-layout:fixed">');
            //先判断是否有页签
            var rows = [];
            var tab = content.find('#SheetContent>.tab-content')
            if (tab && tab.length) {
                //有页签
                rows = tab.find('.tab-pane.active>div');
                var comments = content.find('#SheetContent >[data-datafield="Comments"]');
                rows.push(comments);
            } else {
                rows = content.find('#SheetContent>div');
                if (rows == undefined || rows.length == 0) {
                    var temp = content.find('#SheetContent>root>div');
                    if (temp && temp.length > 0) {
                        rows = temp;
                    }
                }
            }
            //后台打印配置 
            var printConfig = $.SmartForm.ResponseContext.PrintConfig;
            var printCompanyName = true;
            var printComment = true;
            var printPrinter = true
            var printPrintTime = true;
            var printQrCode = true;
            if (printConfig != undefined && !$.isEmptyObject(printConfig)) {
                printCompanyName = printConfig.PrintCompanyName;
                printComment = printConfig.PrintComment;
                printPrinter = printConfig.Printer;
                printPrintTime = printConfig.PrintTime;
                printQrCode = printConfig.PrintQrCode;
            }

            for (var i = 0; i < rows.length; i++) {
                var $row = $(rows[i]);
                if ($row.css('display') == 'none') {
                    continue;
                }
                if ($row.attr('data-printable') != void 0 && $row.attr('data-printable') == "false") {
                    continue;
                }
                var $contentTableTr = $('<tr>');
                if ($row.hasClass('sheet-control')) {
                    //控件
                    var controlKey = $row.attr('data-controlkey');
                    if (controlKey == 'FormGridView') {
                        //子表
                        var $contentTableTd = $('<td colspan="4" style="padding:0;height:auto!important;border-top:none;border-bottom:1px solid #fff;background-color:#f6f6f6!important;"></td>');
                        var $gridViewTable = getGridViewTable($row);
                        $contentTableTd.append($gridViewTable);
                        $contentTableTr.append($contentTableTd);
                    } else if (controlKey == 'FormComment') {
                        //审批
                        if (!printComment)
                            continue;
                        var commentInfo = getComment($row);
                        $contentTableTr.append('<td colspan="4" style="padding:0;" >' + commentInfo + '</td>');
                    } else {
                        //主表字段
                        var controlTitle = $row.find('.ControlTitle').text();
                        var controlValue = getControlValue($row);
                        $contentTableTr.append('<td class="col-sm-2 col-xs-2">' + controlTitle + '</td><td class="col-sm-10 col-xs-10" colspan="3">' + controlValue + '</td>');
                    }
                } else if ($row.hasClass('page-header')) {
                    //标题、描述
                    //如果后续没有printable的控件则不要显示标题(描述要显示)
                    if (!$row.hasClass('page-describle')) {
                        var printableControl = 0;//可打印控件数量
                        for (var j = i + 1; j < rows.length; j++) {
                            var laterRow = $(rows[j]);
                            if (laterRow.hasClass('sheet-control')) {
                                if (laterRow.attr('data-controlkey') == 'FormComment')
                                    continue;
                                if (laterRow.attr('data-printable') != void 0 && laterRow.attr('data-printable') == 'false')
                                    continue;
                            }
                            //if ($(rows[j]).attr('data-printable') != void 0 && $(rows[j]).attr('data-printable') == "false") {
                            //    continue;
                            //}
                            printableControl++;
                        }
                        //如果后续没有要打印的控件则不打印标题
                        if (printableControl == 0) {
                            continue;
                        }
                    }
                    var controlValue = $row.find('strong');
                    var align = $row.css('text-align');
                    //$contentTableTr.append('<td colspan="4" style="font-size:10px;color:#999">' + controlValue.html() + '</td>');
                    if ($row.hasClass('page-describle')) {
                        //描述
                        $contentTableTr.append('<td colspan = "4" style="font-size:10px;color:#999;text-align:' + align + '">' + controlValue.html() + '</td>');
                    } else {
                        //标题
                        $contentTableTr.append('<td colspan = "4" style="font-size:14px;color:#999;background-color:#f6f6f6!important;text-align:' + align + '">' + controlValue.html() + '</td>');
                    }
                } else {
                    //一行两列
                    var emptyCtrlCount = 0;//记录不可见和不打印字段数量,如果两个字段都是不可见或不打印则不显示一行两列
                    $row.find('.col-sm-6').each(function () {
                        var controlTitle = $(this).find('.ControlTitle').text();
                        var $control = $(this).find('.row.sheet-control.form-group');
                        if ($control && $control.length > 0) {
                            if ($control.css('display') == 'none' || $control.attr('visible') == 'false') {
                                //如果一行两列内字段不可见则增加一个空的td
                                emptyCtrlCount++;
                                $contentTableTr.append('<td class="col-sm-6 col-xs-6" colspan="2"></td>');
                                return true;
                            } else {
                                if ($control.attr('data-printable') != void 0 && $control.attr('data-printable') == "false") {
                                    emptyCtrlCount++;
                                    $contentTableTr.append('<td class="col-sm-6 col-xs-6" colspan="2"></td>');
                                    return true;
                                }
                            }
                            var controlValue = getControlValue($control);
                            $contentTableTr.append('<td class="col-sm-2 col-xs-2">' + controlTitle + '</td><td class="col-sm-4 col-xs-4">' + controlValue + '</td>');
                        } else {
                            emptyCtrlCount++;
                        }
                    });
                    if (emptyCtrlCount == 2) {
                        continue;
                    }
                }
                $contentTable.append($contentTableTr);
            }

            //判断是不是流程表单,增加审批水印(是否打印水印与是否打印"审批意见"一致)
            var $waterMark = '';
            var isWorkflow = this.ResponseContext.ReturnData.WorkflowInstanceId.Value;
            if (isWorkflow && printComment) {
                switch ($.SmartForm.ResponseContext.WorkflowState) {
                    case 0:
                        break;
                    case 1:
                        break;
                    case 2://正在运行
                        //审批中
                        $waterMark = $('<div class="print-watermark"><img src="../../../../Content/Images/approve/runing.png" width="120" height="120"></div>');
                        break;
                    case 3://正在结束
                        break;
                    case 4://已完成
                        if (!agree) {
                            //审批不通过
                            $waterMark = $('<div class="print-watermark"><img src="../../../../Content/Images/approve/disagree.png" width="120" height="120"></div>');
                        } else {
                            //审批通过
                            $waterMark = $('<div class="print-watermark"><img src="../../../../Content/Images/approve/agree.png" width="120" height="120"></div>');
                        }
                        break;
                    case 5://已取消
                        //流程取消
                        $waterMark = $('<div class="print-watermark"><img src="../../../../Content/Images/approve/cancel.png" width="120" height="120"></div>');
                        break;
                    default:

                }
            }
            $newContent.append($waterMark);
            var printer = '';//打印人
            var companyName = '';//企业名称
            var qrCodeUrl = '';//二维码地址
            if (printCompanyName || printPrinter || printQrCode) {
                //获取打印的相关信息，包括打印人，企业名称，打印二维码需要的数据
                var getQueryString = function (paramName) {
                    var reg = new RegExp("(^|&)" + paramName + "=([^&]*)(&|$)");
                    var r = window.location.search.substr(1).match(reg);
                    if (r != null) {
                        return unescape(r[2]);
                    }
                    return null;
                };
                var schemaCode = getQueryString("SchemaCode");
                var bizObjectId = getQueryString("BizObjectId");
                var appCode = '';//应用编码
                var agentId = '';
                var corpId = '';
                var suiteKey = '';
                var isTest = false;//是否是测试环境
                var scanUrl = '';//考虑用于生成二维码的短地址，暂时没有使用
                var hostAddress = '';
                //取当前用户
                var paramData = { ActionName: "GetPrintInfo", SchemaCode: schemaCode, BizObjectId: bizObjectId }
                $.ajax({
                    type: 'POST',
                    url: '/Form/OnAction',
                    data: { PostData: JSON.stringify(paramData) },
                    success: function (data) {
                        if (data.Successful) {
                            printer = data.ReturnData.UserName;
                            companyName = data.ReturnData.CompanyName;
                            appCode = data.ReturnData.AppCode;
                            agentId = data.ReturnData.AgentId;
                            corpId = data.ReturnData.CorpId;
                            suiteKey = data.ReturnData.SuiteKey;
                            hostAddress = data.ReturnData.HostAddress;
                        }
                    },
                    dataType: 'json',
                    async: false
                });
                var sheetUrl = hostAddress + "/Mobile/?";
                sheetUrl += 'CorpId=' + corpId + '&sc=' + schemaCode + '&bo=' + bizObjectId + '&mt=task';
                if (suiteKey) {
                    sheetUrl += '&IsIsv=1&sk=' + suiteKey;
                } else {
                    sheetUrl += '&ai=' + agentId;
                }
                qrCodeUrl = sheetUrl;
            }
            if (printCompanyName) {
                //插入企业名称
                $newContent.append('<div class="print-schema-title">' + companyName + '</div>');
            }
            //插入表单名称
            var schemaDisplayName = $.SmartForm.ResponseContext.DisplayName;
            var $displayName = $('<div class="print-schema-title">' + schemaDisplayName + '</div>');
            $newContent.append($displayName);
            //全局水印
            if (water) {
                var $marker = $('<div id="mymasker" style="background-image:url(' + water + ')!important;"></div>');
            }
            //插入整体表格
            $newContent.append($contentTable);
            //插入打印信息
            //打印人/打印时间
            if (printPrinter || printPrintTime || printQrCode) {
                var printTime = '';
                if (printPrintTime) {
                    //取打印时间
                    var date = new Date();
                    printTime = date.toLocaleString();
                }
                //获取等分格
                var showCount = 3;
                if (!printPrinter) {
                    showCount--;
                }
                if (!printPrintTime) {
                    showCount--;
                }
                if (!printQrCode) {
                    showCount--;
                }
                var gridCol = 12 / showCount;

                var printInfo = $('<div class="print-info container-fluid sheet_container" style="padding-left:0;padding-right:0;"></div>');
                var printInfoRow = $('<div class="row sheet-control form-group"></div>');
                if (printPrinter) {
                    printInfoRow.append('<div class="col-sm-' + gridCol + ' col-xs-' + gridCol + ' col-md-' + gridCol + '">打印人:' + printer + '</div>');
                }
                if (printTime) {
                    printInfoRow.append('<div class="col-sm-' + gridCol + ' col-xs-' + gridCol + ' col-md-' + gridCol + '">打印时间:' + printTime + '</div>');
                }
                if (printQrCode) {
                    printInfoRow.append('<div class="col-sm-' + gridCol + ' col-xs-' + gridCol + ' col-md-' + gridCol + '"><div id="printQrCode" style="text-align:right"></div><div style="text-align:right"><div style="position:absolute;right:15px;width:160px;text-align:center">请使用钉钉扫码</div></div></div>');
                }
                printInfo.append(printInfoRow);

                //if (printPrinter && printPrintTime) {
                //    printInfo = $('<div class="print-info container-fluid sheet_container" style="padding-left:0;padding-right:0;"><div class="row sheet-control form-group"><div class="col-sm-3 col-xs-3 col-md-3">打印人:' + printer + '</div><div class="col-sm-4 col-xs-4 col-md-4">打印时间:' + printTime + '</div><div class="col-sm-5 col-xs-5 col-md-5"><div id="printQrCode" style="text-align:right"></div><div style="text-align:right"><div style="position:absolute;right:15px;width:160px;text-align:center">请使用钉钉扫码</div></div></div></div></div>');
                //} else if (!printPrinter) {
                //    printInfo = $('<div class="print-info container-fluid sheet_container" style="padding-left:0;padding-right:0;"><div class="row sheet-control form-group"><div class="col-sm-3 col-xs-3 col-md-3">打印时间:' + printTime + '</div><div class="col-sm-4 col-xs-4 col-md-4"></div></div></div>');
                //}
                $newContent.append(printInfo);
            }

            var printWindow = window.parent.open('/Form/Print/');
            printWindow.document.write('<link href="/Content/bootstrap.min.css" rel="stylesheet">');
            printWindow.document.write('<link href="/Content/print.css" rel="stylesheet">');
            //printWindow.document.write('<style>@page{@bottom-left:{margin:10pt 0 30pt 0;border:.25pt solid;background-color:red}}</style>');
            printWindow.document.write('<script src="../../Scripts/jquery-1.10.2.min.js"></script>');
            printWindow.document.write('<script src="../../Scripts/plugins/qrCode/jquery.qrcode.min.js"></script>');
            printWindow.document.write($newContent.html());
            printWindow.document.write('<body  scroll="no" style="font-size:12px"></body>');
            printWindow.document.write('<div></div>');
            printWindow.document.write('<title>打印</title>');
            printWindow.document.write('<object id="WebBrowser" width=0 height=0 classid="CLSID:8856F961-340A-11D0-A96B-00C04FD705A2"></object>');

            //如果二维码参数不对不要生成二维码？
            if (printQrCode)
                printWindow.document.write('<script>$("#printQrCode").qrcode({width:160,height:160,text:"' + qrCodeUrl + '"});</script>');

            printWindow.document.write('<script>setTimeout(function(){window.print();WebBrowser.ExecWB(7,1)},50)</script>');

            //printWindow.print();
            var userAgent = navigator.userAgent;
            if (userAgent.indexOf('Firefox') > -1) {
                printWindow.print();
            }
            //关闭打印页面（不管是点击“打印”还是“取消”，点击后2s自动关闭打印页面）
            //需要注意页面关闭后打印是否继续？如果window关闭了仍然可以打印则可以将关闭页面时间缩短
            var close = '<script>setTimeout("window.close()",100)</script>';
            printWindow.document.write(close);
            return;
        }
    }
});
//#endregion

//#region 取回流程 RetrieveInstance
$.Buttons.RetrieveInstance = function (element, option, sheetInfo) {
    return $.Buttons.RetrieveInstance.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.RetrieveInstance.Inherit($.Buttons.BaseButton, {
    PreRender: function () {
        this.constructor.Base.PreRender();
        //this.OnActionPreDo = function () {
        //    return confirm("确定执行取回流程操作?");
        //}
    },
    DoAction: function () {
        $.SmartForm.ConfirmAction("确定执行撤销流程操作", function () {
            $.SmartForm.RetrieveInstance(this);
        });
    }
});
//#endregion

//#region 转发 Forward
$.Buttons.Forward = function (element, option, sheetInfo) {
    return $.Buttons.Forward.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.Forward.Inherit($.Buttons.BaseButton, {
    PreRender: function () {
        this.constructor.Base.PreRender();
    },
    DoAction: function () {
        $.SmartForm.Forward(this);
    }
});

//#region 查看二维码
$.Buttons.ViewQrCode = function (element, option, sheetInfo) {
    return $.Buttons.ViewQrCode.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.ViewQrCode.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        $.SmartForm.ViewQrCode(this);
    }
});

//#region 查看更多
$.Buttons.More = function (element, option, sheetInfo) {
    return $.Buttons.More.Base.constructor.call(this, element, option, sheetInfo);
};
$.Buttons.More.Inherit($.Buttons.BaseButton, {
    DoAction: function () {
        var that = this;
        $("#dvQrCode").parent().hide()//隐藏二维码
        if ($("#action_more").length > 0) {
            $("#action_more").parent().show();//
            return false;
        }
        var $action = that.Element;
        var $moreActionDiv = $('<div class="action-more-tip" style="height:auto;display:none"><ul id="action_more"></ul></div>').appendTo($("body"));

        $("body").off("click.action-more-tip").on("click.action-more-tip", function (e) {
            var $target = $(e.target);
            if ($target.hasClass("icon-more-big ") || $target.hasClass("action-more-tip") || $target.attr("id") == "action_more") {
                return false;
            }
            else {
                $moreActionDiv.hide();
            }
        })

        //鼠标移开时隐藏更多选项
        $moreActionDiv.off("mouseleave.tooltip").on("mouseleave.tooltip", function () {
            $moreActionDiv.hide();
        });

        var offset = $action.offset();
        var tipDiv = $("div.action-more-tip");
        $.each(that.Options.Buttons, function (index, action) {
            if (that.Options.ControlManagers[action.Action] || action.constructor != Object) { return; }

            var liElement = $("<li data-action='" + action.Action + "'></li>");
            var linkElement = $("<a href='javascript:void(0);'></a>");
            var spanElement = $("<span class='fa " + action.Icon + "'>  " + action.Text + "</span>");
            if (action.CssClass) {
                spanElement.addClass(action.CssClass);
            }
            liElement.append(linkElement.append(spanElement));
            var Container = $moreActionDiv.find("#action_more");

            if ($.Buttons[action.Action]) {
                that.Options.ControlManagers[action.Action] = new $.Buttons[action.Action](Container, action, that.ResponseContext);
            } else {
                that.Options.ControlManagers[action.Action] = new $.Buttons.BaseButton(Container, action, that.ResponseContext);
            }
            //that.Options.ControlManagers[action.Action] = new $.Buttons[action.Action](Container, action, that.ResponseContext);
        });

        $moreActionDiv.css({ left: offset.left + ($action.outerWidth() - $moreActionDiv.outerWidth()) / 2 - $(window).scrollLeft() - 36, bottom: $(window).height() - $action.outerHeight() - tipDiv.outerHeight() - 8 });

        $moreActionDiv.show(); //第一次显示
        return false;
    }
});
//#endregion
;
//复选框
(function ($) {
    $.fn.FormCheckboxList = function () {
        return $.ControlManager.Run.call(this, "FormCheckboxList", arguments);
    };

    // 构造函数
    $.Controls.FormCheckboxList = function (element, ptions, sheetInfo) {
        $.Controls.FormCheckboxList.Base.constructor.call(this, element, ptions, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormCheckboxList.Inherit($.Controls.BaseControl, {
        Render: function () {
            if (!this.Visible) {
                $(this.Element).hide();
                return;
            }

            this.OptionValues = {};

            //渲染前端
            this.HtmlRender();
            //绑定事件
            this.BindEvent();
            //初始化默认值
            this.InitValue();
        },

        //获取值
        GetValue: function () {
            if (!this.Editable) {
                if (this.$Input) {
                    return this.$Input.html();
                } else {
                    return "";
                }
            }

            if (this.isCheckbox) { // 单选框
                return $(this.Element).find("input").prop("checked");
            } else { // 多选框
                var value = "";
                $(this.Element).find("input").each(function () {
                    if (this.checked) {
                        if (value == "") {
                            value += $(this).val()
                        }
                        else {
                            value += ";" + $(this).val();
                        }
                    }
                });
                return value;
            }
        },

        //设置控件的值
        SetValue: function (value) {
            if (value == void 0/* || value == ""*/) {
                return;
            }
            var displaytext = "";
            if (!this.Editable) {
                if (this.Visible) {
                    var items = value;
                    if (!$.isArray(items)) {
                        try { items = (value + "").split(';'); }
                        catch (e) {
                            alert(e)
                        }
                    }
                    if (items != void 0) {
                        for (var i = 0; i < items.length; i++) {

                            if (this.OptionValues[items[i]]) {
                                displaytext += this.OptionValues[items[i]] + ";";
                            }
                            else {
                                displaytext += items[i] + ";";
                            }

                        }
                    }
                }
                if (displaytext != "") {
                    displaytext = displaytext.slice(0, displaytext.length - 1);
                }
                if (this.$Input != undefined)
                    this.$Input.html(displaytext);

                return;
            }
            //先清除所有勾选
            $(this.Element).find("input").prop("checked", false);

            if (this.isCheckbox) {
                $(this.Element).find("input").prop("checked", value);
            } else {
                var items = value;
                if (!$.isArray(items)) {
                    try { items = (value + "").split(';'); }
                    catch (e) {
                        alert(e)
                    }

                }
                if (items != void 0) {
                    for (var i = 0; i < items.length; i++) {
                        $(this.Element).find("input").each(function () {
                            if (this.value == items[i])
                                $(this).prop("checked", true);
                        });
                    }
                }
            }
            this.OnChange();
        },

        GetText: function () {
            var text = "";
            if (this.Editable) {
                $(this.Element).find("input").each(function () {
                    if (this.checked)
                        text += $(this).text() + ";";
                });
            } else {
                text = this.$Input.html();
            }
            return text;
        },

        SetReadonly: function (flag) {
            if (flag) {
                $(this.Element).find("input").attr("readonly", "readonly").attr("disabled", "disabled");
            } else {
                $(this.Element).find("input").removeAttr("readonly").removeAttr("disabled");
            }
        },

        InitValue: function () {
            //设置默认值
            if ((this.Value === true || this.Value === false)) {
                this.SetValue(this.Value);
                return;
            }
            var items = this.Value || this.DefaultValue;
            if (this.Value == void 0 && $.SmartForm.ResponseContext.IsCreateMode) {
                items = this.DefaultValue;
            } else {
                items = this.Value;
            }
            if (this.isCheckbox) {
                if (items) {
                    this.SetValue(true);
                } else {
                    this.SetValue(false);
                }
            } else {
                this.SetValue(items);
            }
        },

        HtmlRender: function () {
            var that = this;

            if (that.Editable) {
                //组标示
                $(this.Element).addClass("SheetCheckBoxList");
                this.GropName = this.DataField + $.IGuid();

                // 绑定数据字典
                this.$ListWrap = $("<div class='radiolistwrap'>");
                if (this.DataDictItemName) {
                    if (this.DataDictItemValue && $.isArray(this.DataDictItemValue)) {
                        var options = this.DataDictItemValue;
                        for (var i = 0, len = options.length; i < len; i++) {
                            that.AddItem.apply(that, [options[i], options[i]]);
                        }
                    }
                } else {
                    if (this.DefaultItems) {
                        for (var i = 0, len = this.DefaultItems.length; i < len; i++) {
                            that.AddItem.apply(that, [this.DefaultItems[i], this.DefaultItems[i]]);
                        }
                    }
                }
                this.$ListWrap.appendTo(this.$InputBody)
            } else {
                this.$Input = $("<pre style='border:none'>");
                this.$InputBody.append(this.$Input);
            }
        },

        //绑定事件
        BindEvent: function () {
            this.$InputBody.off("change.FormCheckboxList").on("change.FormCheckboxList", "input", this, function (e) {
                var that = e.data;
                that.Validate.apply(that);
                that.OnChange.apply(that);
                that.Required && ($(this).prop("checked") && that.$ListWrap.removeAttr("style"));
            });
        },

        //处理必填红色*号
        Validate: function () {
            // 单选模式不验证必填
            if (this.isCheckbox) {
                return true;
            }

            var check = true;
            if (this.Editable && this.Required) {
                check = false;
                var inputs = $(this.$InputBody).find("input");
                for (var i = 0; i < inputs.length; i++) {
                    if ($(inputs[i]).is(":checked")) {
                        check = true;
                        break;
                    }
                }
                if (check) {
                    this.RemoveInvalidText(this.$InputBody.find("label:last"), "必填");
                } else {
                    this.AddInvalidText(this.$InputBody.find("label:last"), "必填");
                    return false;
                }
            }
            //勾选项总长度不能超过200
            var $inputs = $(this.$InputBody).find("input:checked");
            var checkedItemLength = 0;
            for (var i = 0; i < $inputs.length; i++) {
                var itemValue = $($inputs[i]).val();
                checkedItemLength += itemValue.length + 1;
                if (checkedItemLength > 200) {
                    break;
                }
            }
            if (checkedItemLength > 200) {
                this.AddInvalidText(this.$InputBody.find("label:last"), "勾选项总字数超200过限制，无法提交，请联系管理员处理");
                return false;
            } else {
                this.RemoveInvalidText(this.$InputBody.find("label:last"), "勾选项总字数超过200限制，无法提交，请联系管理员处理");
                return true;
            }

            return check;
        },

        AddItem: function (value, text) {
            if (!this.Editable) {

                var txt = "";
                if (text) {
                    txt = text;
                } else {
                    txt = value;
                }
                this.OptionValues[value] = txt;
            } else {
                if (text || value) {
                    var id = $.IGuid();
                    var option = "<div style='float:left;' GropName='" + this.GropName + "'>";
                    option += "<input type='checkbox' name='" + this.GropName + "' id='" + id + "' value='" + value + "' ";
                    if (!this.Editable) {//不可用
                        option += " disabled='disabled' ";
                    }
                    option += " />";
                    option += " <label for='" + id + "'>" + (text || value) + "</label>";
                    option += " </div> ";
                    this.$ListWrap.append(option);
                }
            }
        },

        ClearItems: function () {
            this.$ListWrap.empty();

        },

        SaveDataField: function () {
            //如果是权限设置的Visible是false，如果是规则设置的Visible可能仍然是true
            var result = {};
            if (!this.Visible) return result;

            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldresult) {
                return {};
            }
            if (oldresult.Value != this.GetValue()) {
                result[this.DataField] = this.GetValue();
                return result;
            }
            return {};
        }
    });
})(jQuery);;
//复选框

(function ($) {
    $.fn.FormCheckbox = function () {
        return $.ControlManager.Run.call(this, "FormCheckbox", arguments);
    };

    // 构造函数
    $.Controls.FormCheckbox = function (element, ptions, sheetInfo) {
        $.Controls.FormCheckbox.Base.constructor.call(this, element, ptions, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormCheckbox.Inherit($.Controls.BaseControl, {
        Render: function () {
            if (!this.Visible) {
                $(this.Element).hide();
                return;
            }
            //是否在子表里面子表
            this.IsInGridView = !$.isEmptyObject(this.ObjectId);

            //渲染前端
            this.HtmlRender();
            //绑定事件
            this.BindEvent();
            //初始化默认值
            this.InitValue();
        },

        //获取值
        GetValue: function () {
            if (!this.Editable) {
                var val = $(this.Element).find('pre').text()
                return val == '是' ? true : false;
            }
            return $(this.Element).find("input").prop("checked");
        },

        //设置控件的值
        SetValue: function (value) {
            if (!this.Editable) {
                this.$Input.text(value ? "是" : "否");
                return;
            } else {
                $(this.Element).find("input").prop("checked", value);
                this.OnChange();
            }
        },

        GetText: function () {
            var text = "";
            $(this.Element).find("input").each(function () {
                if (this.checked)
                    text += $(this).text() + ";";
            });
            return text;
        },

        SetReadonly: function (flag) {
            if (flag) {
                $(this.Element).find("input").attr("readonly", "readonly").attr("disabled", "disabled");
            } else {
                $(this.Element).find("input").removeAttr("readonly").removeAttr("disabled");
            }
        },

        InitValue: function () {
            //设置默认值
            var valueLocal;//= this.Value == null ? this.DefaultValue : this.Value;
            if (this.Value == void 0 && $.SmartForm.ResponseContext.IsCreateMode) {
                valueLocal = this.DefaultValue;
            } else {
                valueLocal = this.Value;
            }
            if (!this.Editable) {
                this.$Input.text(valueLocal ? "是" : "否");
                return;
            }
            $(this.$InputBody).find("input").each(function () {
                $(this).prop("checked", valueLocal);
            });
        },

        HtmlRender: function () {
            var that = this;
            if (!this.Editable) {
                this.$Input = $("<pre style='border:none;'>");
                $(this.$InputBody).append(this.$Input);
            } else {

                $(this.Element).find(".ControlTitle").text("");
                //组标示
                $(this.Element).addClass("SheetCheckBoxList");
                this.GropName = this.DataField + $.IGuid();

                // 绑定数据字典
                if (this.DataDictItemName) {
                    if (this.DataDictItemValue && $.isArray(this.DataDictItemValue)) {
                        var options = this.DataDictItemValue;
                        for (var i = 0, len = options.length; i < len; i++) {
                            that.AddCheckboxItem.apply(that, [options[i], options[i]]);
                        }
                    }
                } else {
                    if (this.DefaultItems) {
                        for (var i = 0; i < this.DefaultItems.length; i++) {
                            that.AddCheckboxItem.apply(that, [this.DefaultItems[i], this.DefaultItems[i]]);
                        }
                    }
                }
                if (that.IsInGridView) {
                    $(that.Element).find("label").text("").css({ left: "50%", marginLeft: "-10px" });
                }
            }
        },
        //绑定事件
        BindEvent: function () {
            this.$InputBody.off("change.FormCheckbox").on("change.FormCheckbox", "input", this, function (e) {
                var that = e.data;
                that.OnChange.apply(that);
            });
        },

        AddCheckboxItem: function (value, text) {
            if (text || value) {
                var id = $.IGuid();
                var option = "<div GropName='" + this.GropName + "'>";
                option += "<input type='checkbox' name='" + this.GropName + "' id='" + id + "' value='" + value + "' ";
                if (!this.Editable) {//不可用
                    checkbox.prop("disabled", "disabled")
                    option += " disabled='disabled' ";
                }
                option += " /> ";
                option += " <label for='" + id + "'>" + (text || value) + "</label> ";
                option += " </div> ";
                this.$InputBody.append(option);
            }
        },
        Empty: function () {
            this.$InputBody.empty();
        },

        SaveDataField: function () {
            var result = {};
            if (!this.Visible) return result;

            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldresult) {
                return {};
            }
            if (oldresult.Value != this.GetValue()) {
                result[this.DataField] = this.GetValue();
                return result;
            }
            return {};
        }
    });
})(jQuery);;
// RadioButtonList控件
; (function ($) {
    //控件执行
    $.fn.FormRadioButtonList = function () {
        return $.ControlManager.Run.call(this, "FormRadioButtonList", arguments);
    };

    // 构造函数
    $.Controls.FormRadioButtonList = function (element, ptions, sheetInfo) {
        $.Controls.FormRadioButtonList.Base.constructor.call(this, element, ptions, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormRadioButtonList.Inherit($.Controls.BaseControl, {
        Render: function () {
            //不可见返回
            if (!this.Visible) {
                $(this.Element).hide();
                return;
            }

            //渲染前端
            this.HtmlRender();

            this.BindEvent();

            //初始化默认值
            this.InitValue();
        },

        GetValue: function () {
            var value = "";
            if (!this.Editable) {
                //value = this.$Input.html();
                if (this.$Input) {
                    value = this.$Input.html();
                }
            }
            else {
                $(this.Element).find("input").each(function () {
                    if (this.checked)
                        value = $(this).val();
                });
            }
            return value;
        },

        //设置控件的值
        SetValue: function (value) {
            if (value == void 0) {
                return;
            }

            if (!this.Editable) {
                this.$Input.html(value);
                return;
            }
            //先清除所有勾选
            $(this.Element).find("input").prop("checked", false);

            var items = value;
            if (!$.isArray(items)) {
                items = value.split(';');
            }
            //var items = value.split(';');
            if (items != void 0) {
                for (var i = 0; i < items.length; i++) {
                    $(this.Element).find("input").each(function () {
                        if (this.value == items[i])
                            //$(this).attr("checked", "checked");
                            $(this).prop("checked", true);
                    });
                }
            }
            this.OnChange();
        },

        GetText: function () {
            return $(this.Element).find("input:checked").text();
        },

        SetReadonly: function (flag) {
            if (flag) {
                $(this.Element).find("input").prop("disabled", true);
            }
            else {
                $(this.Element).find("input").removeAttr("disabled");
            }
        },

        //设置一行显示数目
        SetColumns: function () {
            if (this.RepeatColumns && /^([1-9]\d*)$/.test(this.RepeatColumns)) {
                var width = (100 / this.RepeatColumns) + "%";
                var divs = $(this.Element).find("div"),
                    i;
                for (i = 0; i < divs.length; i++) {
                    $(divs[i]).css({ "width": width });
                }
            }
        },

        //返回数据值
        SaveDataField: function () {
            var result = {};
            if (!this.Visible) return result;
            var oldresult = this.ResponseContext.ReturnData[this.DataField];
            if (!oldresult) {
                return {};
            }

            if (oldresult.Value != this.GetValue()) {
                result[this.DataField] = this.GetValue();
                return result;
            }
            return {};
        },

        //设置默认值
        InitValue: function () {
            var item = "";
            //只有在新建表单时候设置DefaultValue
            if (this.Value == void 0 && $.SmartForm.ResponseContext.IsCreateMode) {
                item = this.DefaultValue;
            } else {
                item = this.Value
            }
            //var item = this.Value || this.DefaultValue;
            if (item != void 0) {
                item += '';
                this.SetValue(item);
            }
        },

        HtmlRender: function () {
            if (this.Editable) {
                $(this.Element).addClass("SheetRadioButtonList");
                //组标示
                this.GropName = this.DataField + $.IGuid();//设置统一的name                        

                this.$ListWrap = $("<div class='radiolistwrap'>");
                if (this.DataDictItemName) {
                    if (this.DataDictItemValue && $.isArray(this.DataDictItemValue)) {
                        var options = this.DataDictItemValue;
                        for (var i = 0, len = options.length; i < len; i++) {
                            this.AddItem.apply(this, [options[i], options[i]]);
                        }
                    }
                }
                else {
                    if (!$.isEmptyObject(this.DefaultItems)) {
                        for (var i = 0, len = this.DefaultItems.length; i < len; i++) {
                            this.AddItem.apply(this, [this.DefaultItems[i], this.DefaultItems[i]]);
                        }
                    }
                }
                this.$ListWrap.appendTo(this.$InputBody);
            }
            else {
                this.$Input = $("<pre>").css("border", "none");
                this.$InputBody.append(this.$Input);
            }
        },

        //绑定事件
        BindEvent: function () {
            this.$InputBody.off("change.FormRadioButtonList").on("change.FormRadioButtonList","input", this, function (e) {
                var that = e.data;
                that.OnChange.apply(that);
                that.Validate.apply(that);
                that.Required && ($(this).prop("checked") && that.$ListWrap.removeAttr("style"));
            });
        },

        //处理必填红色*号
        Validate: function () {
            var check = true;
            if (this.Editable && this.Required) {
                check = false;
                var inputs = $(this.$InputBody).find("input");
                for (var i = 0; i < inputs.length; i++) {
                    if ($(inputs[i]).is(":checked")) {
                        check = true;
                        break;
                    }
                }
                if (check) {
                    this.RemoveInvalidText(this.$InputBody.find("label:last"), "必填");
                }
                else {
                    this.AddInvalidText(this.$InputBody.find("label:last"), "必填");
                }
            }

            return check;
        },

        AddItem: function (value, text) {
            if (!this.Editable) {
                return;
            }
            if (text || value) {
                var option = "<div style='float:left;' GropName='" + this.GropName + "'>";
                var id = $.IGuid();
                option += "<input type='radio' name='" + this.GropName + "' id='" + id + "' value='" + value + "' ";
                if (!this.Editable) {//不可用
                    option += " disabled='disabled' ";
                }
                option += "/>";
                option += "<label for='" + id + "'>" + (text || value) + "</label>";
                option += "</div>";
                this.$ListWrap.append(option);
            }
        },
        ClearItems: function () {
            if (!this.Editable) {
                this.$InputBody.empty();
            } else {
                this.$ListWrap.empty();
            }

        }
    });
})(jQuery);;
// FormDropDownList控件
; (function ($) {
    //控件执行
    $.fn.FormDropDownList = function () {
        return $.ControlManager.Run.call(this, "FormDropDownList", arguments);
    };

    // 构造函数
    $.Controls.FormDropDownList = function (element, options, sheetInfo) {
        $.Controls.FormDropDownList.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormDropDownList.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            //是否在子表里面子表
            this.IsInGridView = !$.isEmptyObject(this.ObjectId);
            //所在子表的EditTablezIndex值
            this.TableEditZIndex = this.IsInGridView && $(this.Element).closest("div.table-edit").css("z-index");

            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }

            this.OptionValues = {};

            //渲染前端
            this.HtmlRender();

            //绑定事件
            this.BindEvent();

            //初始化默认值
            this.InitValue();

            //不可用
            if (!this.Editable) {
                this.SetReadonly(true);
            };
        },

        //渲染前端
        HtmlRender: function () {
            if (!this.Editable) {
                this.$Input = $("<pre style='border:none;'>");
                $(this.$InputBody).append(this.$Input);
            } else {
                $(this.Element).addClass('SheetDropDownList');
                this.$Input = $("<select class='form-control form-group-margin'><option  value=''>--请选择--</option></select>");
                this.$InputText = $('<span type="text" data-propertyname="' + this.DataField
                    + '" class="form-control myform-control mytext comboboxtext" style="width:100%;" />')
                if (this.DataDictItemName) {
                    if (this.DataDictItemValue && $.isArray(this.DataDictItemValue)) {
                        var options = this.DataDictItemValue;
                        if (this.DataDictItemValue.indexOf(this.Value) == -1) {
                            this.Value = '';
                        }
                        for (var i = 0, len = options.length; i < len; i++) {
                            this.AddItem(options[i])
                        }
                    }
                    //$(this.$InputBody).addClass("icon-arrow-down-full").append(this.$InputText).append(this.$Input);
                }
                //关联表单时
                else if (this.BOSchemaCode && this.MappingField) {
                    this.RenderAssociation();
                }
                else {
                    if (!$.isEmptyObject(this.DefaultItems)) {
                        if (this.DefaultItems.indexOf(this.Value) == -1) {
                            this.Value = '';
                        }
                        for (var i = 0; i < this.DefaultItems.length; i++) {
                            if (this.DefaultItems[i]) {
                                this.AddItem(this.DefaultItems[i])
                            }
                        }
                    }
                }
                $(this.$InputBody).addClass("icon-arrow-down-full").append(this.$InputText).append(this.$Input);
            }
        },

        //非关联表单渲染DropDown
        RenderSelect: function (resetOptions, notShow) {
            var that = this;
            var position = this.$InputBody.offset();
            var scrollTop = $(document).scrollTop(),
                top = position.top + this.$InputBody.height() - scrollTop,
                bodyHeight = $(document).height() - scrollTop,
                errorRangeHeight = 10;

            if (!this.$DropList) {
                this.$ListContainer = $('<div class="list list-container" style="position: fixed;z-index: 99999;"></div>');
                this.$DropList = $('<ul class="drop-list form-query-dropdown" style="width: 100%;"></ul>');
                //添加搜索框
                this.$SearchInput = $('<input type="text" class="dropdownlist_search" style="width:100%;height:32px;padding-left:12px;" placeholder="搜索"></input> ');
                this.$SearchLi = $("<li data-type='search' style='border-bottom:1px solid #d7d5d5'></li>").append(this.$SearchInput);
                this.$DropListDetail = $('<ul class="drop-combox droplistdetail" style="list-style:none;left:0;padding-left:0;max-height:200px;overflow:auto;"></ul>');
                var $li = $("<li></li>").append(this.$DropListDetail);
                this.$DropList.append(this.$SearchLi).append($li);

                if (this.BOSchemaCode && this.MappingField) {
                    //关联
                    that.LoadAssociationData();
                } else {
                    var options = this.$Input.children();
                    for (var i = 0, len = options.length; i < len; i++) {
                        var o = options[i];
                        $li = $("<li></li>")
                            .append($('<a tabindex="' + i + '"><label class=" form-query-item-label drop-item-btn" data-val="' + o.value + '">' + o.text + '</label></a>'));
                        this.$DropListDetail.append($li);
                    }
                }
                this.$InputBody.append(this.$ListContainer.append(this.$DropList));
            } else if (resetOptions) {
                //联动重绘下拉选项
                var options = this.$Input.children();
                this.$DropListDetail.empty();
                for (var i = 0, len = options.length; i < len; i++) {
                    var o = options[i];
                    $li = $("<li></li>")
                        .append($('<a tabindex="' + i + '"><label class=" form-query-item-label drop-item-btn" data-val="' + o.value + '">' + o.text + '</label></a>'));
                    this.$DropListDetail.append($li);
                }
                return;
            }

            if ((bodyHeight - top - errorRangeHeight) < this.$DropList.height()) {
                top = top - this.$DropList.height() - this.$InputBody.height();
            }

            var left = position.left,
                width = this.$InputText.width() + 15;
            if (this.IsInGridView) { //子表位置调整
                var GridViewWrap = this.$InputBody.closest(".GridViewWrap");
                var l = GridViewWrap.offset().left + GridViewWrap.width();
                if (position.left + width > l) {
                    left = l - width - 15;
                }
            }

            this.$ListContainer.css("left", left);
            this.$ListContainer.css("top", top);
            this.$ListContainer.width(width);
            //this.$DropList.show();
            setTimeout(function () {
                if (!notShow) {
                    that.$DropList.show();
                    that.$SearchInput.focus();
                }
                //点击DropDown以外区域隐藏,需要排除搜索框
                var eventName = "click.DropdownList" + (that.DataField || $(that.Element).attr("id"));
                //关闭
                $(document).off(eventName).on(eventName, that, function (e) {
                    var target = e.target;
                    var ctrl = e.data;
                    if (ctrl.$InputText[0] != target && ctrl.$InputBody.find($(target)).length == 0
                        && !$(target).hasClass("dropdownlist_search")) {
                        ctrl.$DropList.hide();
                        $(document).off(eventName);
                        $(document).off("scroll.FormDropDownList");

                        //还原tableedit-index
                        if (that.IsInGridView) {
                            var _index = parseInt(that.TableEditZIndex);
                            $(that.Element).closest("div.table-edit").css("z-index", _index);
                        }
                    }
                });
                //滚动
                $(document).off("scroll.FormDropDownList").on("scroll.FormDropDownList", function () {
                    var position = that.$InputBody.offset(),
                        scrollTop = $(document).scrollTop(),
                        top = position.top + that.$InputBody.height() - scrollTop,
                        bodyHeight = $(document).height() - scrollTop;
                    if ((bodyHeight - top - errorRangeHeight) < that.$DropList.height()) {
                        top = top - that.$DropList.height() - that.$InputBody.height();
                    }
                    that.$ListContainer.css("top", top);
                });
                //搜索
                that.$SearchInput.off("input.search").on("input.search", function () {
                    var options = that.$DropListDetail.find("label")
                    var searchKey = this.value || "";
                    for (var i = 1, len = options.length; i < len; i++) {
                        var o = options[i];
                        if (searchKey == "") {
                            $(o).show();
                        } else if ($(o).text().indexOf(searchKey) == -1) {
                            $(o).hide();
                        } else {
                            $(o).show();
                        }
                    }
                    //重新计算top
                    var position = that.$InputBody.offset(),
                        scrollTop = $(document).scrollTop(),
                        top = position.top + that.$InputBody.height() - scrollTop,
                        bodyHeight = $(document).height() - scrollTop;
                    if ((bodyHeight - top - errorRangeHeight) < that.$DropList.height()) {
                        top = top - that.$DropList.height() - that.$InputBody.height();
                    }
                    that.$ListContainer.css("top", top);
                });
                //选中
                that.$ListContainer.off('click.select').on("click.select", "label", function (e) {
                    that.$SearchInput.val("");//清空搜索
                    var v = $(this).data().val;
                    var t = $(this).text();
                    that.$DropList.hide();
                    that.$InputText.text(t);
                    that.SetValue(v);
                    if (that.IsInGridView) {
                        var _index = parseInt(that.TableEditZIndex);
                        $(that.Element).closest("div.table-edit").css("z-index", _index);
                    }
                    e.stopPropagation();
                });
            }, 0);
        },

        //绑定事件
        BindEvent: function () {
            $(this.$Input).off("change.FormDropDownList").on("change.FormDropDownList", this, function (e) {
                var that = e.data;
                that.OnChange.apply(that);
                that.Validate.apply(that);
                that.Required && (this.value && $(this).removeAttr("style").siblings(".dropdownlist").css({ "outline": "none", "box-shadow": "none" }));
            });

            $(this.$InputBody).off("click").on("click", this, function (e) {
                var that = e.data;
                if (that.BOSchemaCode && that.MappingField) {
                    return;
                };
                that.RenderSelect();
                if (that.IsInGridView) {
                    var _index = parseInt(that.TableEditZIndex);
                    _index++;
                    $(that.Element).closest("div.table-edit").css("z-index", _index);
                }
                e.stopPropagation();
            });
        },

        //设置默认值
        InitValue: function () {
            var item = "";
            if (this.Value == void 0 && $.SmartForm.ResponseContext.IsCreateMode) {
                item = this.DefaultValue;
            } else {
                item = this.Value;
            }
            if (item != void 0) {
                if (!this.Editable) {
                    this.$Input.text(item);
                } else {
                    this.$Input.val(item);
                    if (this.$InputText && item != "") {
                        this.$InputText.text(item);
                    } else {
                        this.$InputText.text("--请选择--");
                    }
                }
            }
        },

        //校验
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && $.isEmptyObject(val)) {
                this.AddInvalidText(this.$Input, "必填");
                return false;
            }

            this.RemoveInvalidText(this.$Input);
            return true;
        },

        SaveDataField: function () {
            var result = {};
            if (!this.Visible) return result;
            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldresult) {
                return {};
            }
            if (oldresult.Value != this.GetValue()) {
                result[this.DataField] = this.GetValue();
                return result;
            }
            return {};
        },

        GetValue: function () {
            var val = "";
            if (!this.Editable) {
                if (this.$Input) {
                    val = this.$Input.text();
                }
            } else {
                if (this.$Input)
                    val = this.$Input.val();
            }
            return val;
        },

        GetText: function () {
            if (!this.Editable) {
                return this.$Input.text();
            } else {
                return this.$Input.find(":checked").text();
            }
        },

        SetValue: function (value) {
            if (value == void 0) {
                if (!this.Editable) {
                    this.$Input.text('');
                } else {
                    this.$Input.val('');
                }
                return;
            }
            this.Value = value;
            if (!this.Editable) {
                if (this.Visible) {
                    if (this.OptionValues[value]) {
                        this.$Input.text(this.OptionValues[value]);
                    } else {
                        this.$Input.text(value);
                    }
                }
            } else {
                this.$Input.val(value);
                var text = this.OptionValues[value] || value;
                this.$InputText.text(text);
            }
            this.OnChange();
        },

        SetReadonly: function (flag) {
            var that = this;
            if (flag) {
                //this.$Input.prop("disabled", "disabled");
                if (this.BOSchemaCode && this.MappingField) {
                    setTimeout(function () {
                        that.$InputText && that.$InputText.off("mousedown.dropdownAsscaition")
                    }, 0);
                } else {
                    this.$InputBody.off("click");
                }
            } else {
                //this.$Input.removeProp("disabled");
                if (this.BOSchemaCode && this.MappingField) {
                    that.RenderAssociation();
                } else {
                    this.BindEvent();
                }
            }
        },

        ClearItems: function () {
            this.OptionValues = {};
            if (!this.Editable) {
                this.$DropListDetail && this.$DropListDetail.empty();
                this.$Input && this.$Input.val("");
                this.$Input && this.$Input.text("");
            } else {
                this.$DropListDetail && this.$DropListDetail.empty();
                this.$InputText.text("--请选择--");
                if (this.FromRowNum) { this.FromRowNum = 0; }
                return this.$Input.empty();
            }
        },

        AddItem: function (value, text) {
            if (value == null && text == null) return;

            var txt = "";
            if (text) {
                txt = text;
            } else {
                txt = value;
            }
            this.OptionValues[value] = txt;

            if (this.Editable) {
                if (this.IsAssociation) {
                    //查询空值
                    if (this.FromRowNum == 0) {
                        this.$DropListDetail.append($('<li><a tabindex="-1"><label class="form-query-item-label drop-item-btn" data-val="" >' + "--请选择--" + '</label></a></li>'));
                    }
                    if (this.$DropListDetail.find("label[data-val='" + (value ? value : "--") + "']").length == 0) {
                        this.$DropListDetail.append($('<li><a tabindex="' + this.FromRowNum + '"><label class=" form-query-item-label drop-item-btn"  data-val="' + (value ? value : "--") + '">' + (txt ? txt : "--") + '</label></a></li>'));
                        this.FromRowNum = this.FromRowNum + 1;
                    }
                } else {
                    this.$Input.append($("<option value='" + value + "'>" + txt + "</option>"));
                    var jControl = $(this.Element).data("JControl");
                    if (!$.isEmptyObject(jControl)) {
                        this.RenderSelect(true, true);
                    }
                }
            }
        },
        AddSelectedValue: function (v, text) {
            this.IsSearchMode = false;
            if (v == null) return;
            if (!this.Editable) {
                this.Value = (v + "").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                if (this.Visible)
                    this.$Input.html(this.Value);
            } else {
                var val = this.$Input.val();
                var index = val.lastIndexOf(",") > val.lastIndexOf("，") ? val.lastIndexOf(",") : val.lastIndexOf("，");
                if (index > 0) {
                    val = val.substring(0, index + 1) + v;
                }
                else {
                    val = v;
                }
                this.$Input.val(val);
                this.$InputText.text(text);
                this.Value = val;
            }
        },
        RenderAssociation: function () {
            var that = this;
            this.IsAssociation = true;
            this.FromRowNum = 0;
            this.PageSize = 10;
            this.LoadMore = true;
            this.IsFirstLoad = true;
            //this.AssociationItems = [];
            if (!this.$DropList) {
                this.$Input = $('<input type="text" data-propertyname="' + this.DataField + '" style="display:none" />');
                this.$InputText = $('<span type="text" data-propertyname="' + this.DataField + '" class="form-control myform-control mytext comboboxtext" style="width:100 %;" />')
                this.$DropList = $('<ul class="drop-list drop-combox formdropdownlist form-query-dropdown" style="left:0;overflow:hidden;"></ul>');
                //添加搜索框
                this.$SearchInput = $('<input type="text" class="dropdownlist_search" style="width:100%;height:32px;padding-left:12px;" placeholder="搜索"></input> ');
                this.$SearchLi = $("<li data-type='search' style='border-bottom:1px solid #d7d5d5'></li>").append(this.$SearchInput);

                this.$DropListDetail = $('<ul class="drop-combox droplistdetail" style="list-style:none;left:0;padding-left:0;max-height:200px;overflow:auto;"></ul>');
                var $li = $("<li></li>").append(this.$DropListDetail);
                this.$DropList.append(this.$SearchLi).append($li);

                this.$InputBody.append(this.$InputText).append(this.$Input);
                this.$DropList.appendTo($("body"));
            }

            setTimeout(function () {
                $(that.Element).off("mousedown.dropdownAsscaition").on("mousedown.dropdownAsscaition", function () {
                    var position = that.$InputText.offset();
                    that.$DropList.css({
                        'position': 'absolute',
                        'left': position.left,
                        'top': position.top + that.$InputText.outerHeight(),
                        'z-index': 9000,
                        'width': that.$InputText.outerWidth()
                    });

                    if (that.IsFirstLoad) {
                        that.LoadAssociationData();
                    }
                    that.$DropList.show();

                    setTimeout(function () { that.$SearchInput.focus(); }, 50);

                    if (that.IsInGridView) {
                        var _index = parseInt(that.TableEditZIndex);
                        _index++;
                        $(that.Element).closest("div.table-edit").css("z-index", _index);
                    }
                });
                //点击DropDown以外区域隐藏,需要排除搜索框
                var eventName = "click.DropdownList" + (that.DataField || $(that.Element).attr("id"));
                $("body").off(eventName).on(eventName, that, function (e) {
                    var target = e.target;
                    var ctrl = e.data;

                    if (ctrl.$InputText[0] != target && ctrl.$InputBody.find($(target)).length == 0
                        && !$(target).hasClass("dropdownlist_search") && !$(target).hasClass("icon-arrow-down-full")) {
                        ctrl.$DropList.hide();
                    }
                });

                that.$DropList.off("mousedown.dropdownAsscaition").on("mousedown.dropdownAsscaition", ".drop-item-btn", function (e) {
                    var val = this.getAttribute("data-val");
                    //如果值没有改变不需要重新赋值
                    if (that.Value == val) { return; }

                    if (val == "") {
                        that.AddSelectedValue.call(that, val, val);
                    } else {
                        that.AddSelectedValue.call(that, val, $(this).text());
                    }
                    that.OnChange();
                    that.Validate.apply(that);
                    that.$DropList.hide();

                    //还原z-index值
                    if (that.IsInGridView) {
                        var _index = parseInt(that.TableEditZIndex);
                        $(that.Element).closest("div.table-edit").css("z-index", _index);
                    }
                });

                //滚动刷新
                that.$DropListDetail.scroll(function () {
                    var scrollTop = this.scrollTop,
                        scrollHeight = this.scrollHeight,
                        clientHeight = this.clientHeight;
                    //还有返回值的情况下才加载数据
                    if (scrollTop + clientHeight >= scrollHeight && that.LoadMore) {
                        var searchvalues = that.$SearchInput.val().split(/,|，/);
                        var key = (searchvalues != null && searchvalues.length > 0) ? searchvalues[searchvalues.length - 1] : "";
                        that.LoadAssociationData();
                    }
                });

                //搜索
                var timeout;
                $(that.$SearchInput).off("input propertychange").on("input propertychange", that, function (e) {
                    var $that = e.data;
                    $that.IsSearchMode = true;
                    var searchvalues = $(this).val().split(/,|，/);
                    var key = (searchvalues != null && searchvalues.length > 0) ? searchvalues[searchvalues.length - 1] : "";
                    timeout && (clearTimeout(timeout), timeout = null);
                    timeout = setTimeout(function () { $that.ReloadAssciationData(true); }, 400);
                });

                //
                $(that.$Input).off("change").on("change", function () {
                    $(that.$InputText).text($(this).val());
                });
            }, 0);
        },
        LoadAssociationData: function () {
            var that = this;
            var schemaCode = this.BOSchemaCode;
            var mappingField = this.MappingField;

            var filter = this.AssociationFilter;
            var ajaxUrl = "/App/OnAction";
            var params = {};
            params.ActionName = "LoadSchemaPropertyValues";
            params.SchemaCode = schemaCode;
            params.PropertyName = mappingField;
            params.SearchKey = this.IsSearchMode ? this.$SearchInput.val() : "";
            params.FromRowNum = this.FromRowNum;
            params.ToRowNum = this.FromRowNum + this.PageSize;
            params.scopeType = "4";

            //计算过滤条件
            this.LoadAssciationFilter();
            if ((this.FilterFields && this.FilterFields.length > 0) || (this.AssociationFilter && this.AssociationFilter.Rule)) {
                this.GetAssociationFilterData();
                //过滤规则解析时使用
                params.SheetData = JSON.stringify(this.SheetData);
                //当前表单schemaCode
                params.SheetCode = this.SchemaCode;
                params.AssociationFilter = this.AssociationFilter.Rule;
            }
            var postData = { PostData: JSON.stringify(params) };
            this.Ajax(ajaxUrl, "POST", postData, function (data) {
                that.IsFirstLoad = false;
                if (!data.ErrorMessage && data.ReturnData && data.ReturnData.list) {

                    var dataLength = data.ReturnData.list.length;
                    if (dataLength < that.PageSize) { that.LoadMore = false; }
                    for (var i = 0; i < dataLength; i++) {
                        that.AddItem(data.ReturnData.list[i], data.ReturnData.list[i])
                    }
                }

            }, true,
                function (error) {

                })
        },
        //重新加载关联数据
        ReloadAssciationData: function () {
            var that = this;
            this.IsFirstLoad = true;
            this.$DropListDetail.empty();
            this.FromRowNum = 0;
            if (that.Timeout) { clearTimeout(that.Timeout); }
            that.Timeout = setTimeout(function () {
                that.LoadAssociationData();
            }, 50);
        },
        //计算本表单关联控件
        LoadAssciationFilter: function () {
            var that = this;
            if (this.AssociationFilter && this.AssociationFilter.Rule) {
                var filterRule = this.AssociationFilter.Rule;
                this.FilterFields = [];
                var startIndex = 0;
                while (true) {
                    var index = filterRule.indexOf("{", startIndex)
                    var index2 = filterRule.indexOf("{", startIndex + 1);
                    var index3 = filterRule.indexOf("}", startIndex + 1);
                    if (index3 < index2 || index2 < 0) {
                        var field = filterRule.substring(startIndex + 1, index3);
                        if ($("[data-datafield='" + field + "']").length > 0) {
                            this.FilterFields.push(field)
                        }
                    }
                    startIndex = filterRule.indexOf("{", index3);
                    //已经到结束位置或找不到 { 
                    if (startIndex >= filterRule.length || startIndex < 0) {
                        break;
                    }
                }
            }
            //绑定相关控件的change事件, todo 需要判断子表情况
            if (this.FilterFields && this.FilterFields.length > 0) {
                //绑定关联事件
                for (var i = 0; i < this.FilterFields.length; i++) {
                    var field = this.FilterFields[i];
                    var control = [];
                    if (field.indexOf(".") > -1) {
                        var $tr = $(this.Element).closest("tr[data-objectid]");
                        if (!$tr) { continue; }
                        control = $tr.find("[data-datafield='" + field + "']:not(.table_th)");
                    } else {
                        control = $("[data-datafield='" + field + "']:not(.table_th)");
                    }

                    if (control.length > 0) {
                        var controlManager = control.JControl();
                        var changeKey = "changeCasCading." + that.DataField;
                        if (!controlManager.ChangeEvents[changeKey]) {
                            controlManager.BindChange(changeKey, function () {
                                //下拉框重新赋值
                                that.SetValue("");
                                that.ReloadAssciationData();
                            });
                        }
                    }
                }
            }
        },
        //获取关联表单过滤条件中控件的值,过滤条件使用
        GetAssociationFilterData: function () {
            //判断关联查询是否配置了过滤规则
            //如果配置了过滤规则且规则中有当前主表单的字段
            //则要取主表单中的字段
            var that = this;
            this.SheetData = {};
            if (that.DataField == void 0) {
                return;
            }
            if (that.AssociationFilter) {
                var rule = that.AssociationFilter.Rule;
                if (rule && rule.length > 0) {
                    var controls = $.ControlManager.Controls;
                    var hasCreatedByCtrl = false;//是否有创建者控件
                    var hasOwnerCtrl = false;//是否有拥有者控件
                    var hasOwnerDeptCtrl = false;//是否有所属部门控件
                    for (var control in controls) {
                        var ctrl = controls[control];
                        var controlDataField = ctrl.DataField;
                        if (controlDataField == 'CreatedBy.FullName') {
                            controlDataField = controlDataField.split('.')[0];
                            hasCreatedByCtrl = true;
                        }
                        if (controlDataField == 'OwnerId') {
                            hasOwnerCtrl = true;
                        }
                        if (controlDataField == 'OwnerDeptId') {
                            hasOwnerDeptCtrl = true;
                        }
                        //判断是否为关联本表单的数据项
                        //如果rule中包含controlDataField，则应该是以如下形式存在
                        //{xx}或者{xxx.xx}形式，主表中的字段是{controlDataField}，子表中字段是{xxx.controlDataField}
                        if (that.FilterFields == undefined || that.FilterFields.length == 0 || $.inArray(controlDataField, that.FilterFields) < 0) {
                            continue;
                        }
                        //字表中的control不调用SaveDataField，由子表自己调用SaveDataField保存值
                        var controlValue = '';
                        if (controlDataField == 'CreatedBy') {
                            controlValue = $.SmartForm.ResponseContext.ReturnData.CreatedBy.Value[0].UnitId;
                        } else {
                            if (ctrl.DataField == void 0 || controlDataField == "Comments") continue;
                            //判断关联查询控件是否在子表中
                            if (controlDataField.indexOf('.') > 0 && ctrl.Type != 26 && ctrl.Type != 27) {
                                //规则中的字段在子表中
                                if (that.DataField.indexOf('.') > 0) {
                                    //获取与关联查询控件同一行的子表控件
                                    var $tr = $(that.Element).closest('tr');
                                    var thisRowCtrl = $tr.find('div[data-datafield="' + controlDataField + '"]');
                                    if (thisRowCtrl.length > 0) {
                                        controlValue = $(thisRowCtrl[0]).JControl().GetValue();
                                    }
                                } else {
                                    var $ctrl = $('div[data-datafield="' + controlDataField + '"]').not('.table_th');
                                    if ($ctrl != undefined) {
                                        controlValue = [];
                                        for (var i = 0; i < $ctrl.length; i++) {
                                            controlValue.push($($ctrl[i]).JControl().GetValue());
                                        }
                                    }
                                }
                            } else {
                                if (ctrl.Type == 26 || ctrl.Type == 27) {
                                    //单人
                                    controlValue = ctrl.GetUnitIDs();
                                } else if (ctrl.Type == 7) {
                                    controlValue = ctrl.GetNum();
                                } else {
                                    controlValue = ctrl.GetValue();
                                }
                            }
                        }
                        that.SheetData[controlDataField] = controlValue;
                    }
                    if (!hasCreatedByCtrl) {
                        that.SheetData["CreatedBy"] = $.SmartForm.ResponseContext.ReturnData.CreatedBy.Value[0].UnitId;
                    }
                    if (!hasOwnerCtrl) {
                        that.SheetData["OwnerId"] = $.SmartForm.ResponseContext.ReturnData.OwnerId.Value[0].UnitId;
                    }
                    if (!hasOwnerDeptCtrl) {
                        that.SheetData["OwnerDeptId"] = $.SmartForm.ResponseContext.ReturnData.OwnerDeptId ? ($.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0] != undefined ? $.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0].UnitId : null) : null;
                    }
                    that.SheetData["CreatedTime"] = $.SmartForm.ResponseContext.ReturnData.CreatedTime.Value;
                }
            }
        },
    });
})(jQuery);;
//日期控件
(function ($) {
    //控件执行
    $.fn.FormDateTime = function () {
        return $.ControlManager.Run.call(this, "FormDateTime", arguments);
    };


    $.Controls.FormDateTime = function (element, options, sheetInfo) {
        $.Controls.FormDateTime.Base.constructor.call(this, element, options, sheetInfo);
    };

    $.Controls.FormDateTime.Inherit($.Controls.BaseControl, {
        Render: function () {
            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }

            //渲染Html页面
            this.HtmlRender();

            // 不可编辑
            if (!this.Editable) {
                this.SetReadonly(true);
                return;
            }

            //绑定事件
            this.BindEvent();
        },


        getFormat: function () {
            var format = "yyyy-MM-dd";
            if (this.DateTimeMode == "yyyy-mm-dd hh:ii") {
                format = "yyyy-MM-dd hh:mm";
            }
            if (this.DateTimeMode == "hh:ii") {
                format = "hh:mm";
            }
            //增加年月
            if (this.DateTimeMode == "yyyy-mm") {
                format = "yyyy-MM";
            }
            return format;
        },

        //渲染Html页面
        HtmlRender: function () {
            var format = this.getFormat();
            if (!this.Editable) {
                this.$Input = $("<pre style='border:none'>");//.css("border", "none");
                if (!$.isEmptyObject(this.Value)) {
                    this.$Input.text(new Date(this.Value.replace(/-/g, "/")).Format(format));
                }
                this.$InputBody.append(this.$Input);
            } else {
                var placeHolder = "";
                this.$Input = $("<input type='text' name='" + this.DataField + "' class='form-control' style='height:32px;outline:none;'>");//.addClass("");
                if (!$.isEmptyObject(this.Value)) {
                    this.$Input.val(new Date(this.Value.replace(/-/g, "/")).Format(format))
                }
                this.minView = 2;
                this.startView = 2;
                if (this.DateTimeMode == "yyyy-mm-dd hh:ii") {
                    this.minView = 0;
                    placeHolder = "年-月-日 时:分";
                }
                if (this.DateTimeMode == "yyyy-mm-dd") {
                    placeHolder = "年-月-日";
                }
                if (this.DateTimeMode == "hh:ii") {
                    this.startView = 0;
                    this.minView = 0;
                    placeHolder = "时:分";
                }
                if (this.DateTimeMode == "yyyy-mm") {
                    this.startView = 3;
                    this.minView = 3;
                    placeHolder = "年-月";
                }
                this.$InputBody.append(this.$Input.attr("placeholder", placeHolder));

                this.fixTop = 61;
                //判断IE浏览器,IE浏览器不需要设置fixTop
                if (!!window.ActiveXObject || "ActiveXObject" in window) {
                    this.fixTop = 0;
                }
            }
        },

        SetValue: function (value) {
            if (typeof (value) == "undefined" || value == null || value == '') {
                if (this.Editable) {
                    this.$Input.val("");
                } else {
                    if (this.Visible) {
                        this.$Input.text("");
                    }
                    this.Value = "";
                }
                return;
            }
            var temp = value + '';
            if (this.DateTimeMode != "hh:ii") {//日期
                value = temp.replace(/-/g, '/').replace(/T/g, ' ');//IE11日期格式应该是"/"分割的
                if (!(value instanceof Date)) {
                    if ((value + '').indexOf('Date') > -1) {
                        value = value.replace(/\//g, '').replace(/Date/g, '');
                        value = value.slice(1, value.length - 1);
                        value = parseInt(value);
                    }
                }
                var formatedValue = new Date(value).Format(this.getFormat());
                //验证是否是合法的日期
                if (isNaN(new Date(value).getTime())) {
                    return;
                }
                //if (new Date(value).getFullYear() != formatedValue.substring(0, 4)) {
                //    return;
                //}
                //如果时间是yyyy-mm-dd,formate是yyyy-mm-dd hh:ii会导致value的时间部分是8
                var flag = false;
                var reg = /\d{4}(\-|\/|.)\d{1,2}\1\d{1,2}/;
                if (reg.test(temp) && temp.length == 10) {
                    flag = true;
                }
                if (this.DateTimeMode == 'yyyy-mm-dd hh:ii' && flag) {
                    var t = new Date(value);
                    var y = t.getFullYear();
                    var m = t.getMonth() + 1;
                    var d = t.getDate();
                    value = y + '-' + (m < 10 ? ('0' + m) : m) + '-' + (d < 10 ? ('0' + d) : d) + ' 00:00';
                } else {
                    value = formatedValue;
                }
            } else {//时分
                if (!(value instanceof Date)) {//不是日期格式
                    if ((value + '').indexOf('Date') > -1) {
                        value = value.replace(/\//g, '').replace(/Date/g, '');
                        value = value.slice(1, value.length - 1);
                        value = parseInt(value);
                        value = new Date(value).Format(this.getFormat());
                    } else {
                        if (value.length <= 5 && value.indexOf(':') > -1) {
                            var arr = value.split(':');
                            var h = arr[0];
                            var m = arr[1];
                            if (isNaN(h) || isNaN(m)) {
                                return;
                            }
                            h = parseInt(h);
                            m = parseInt(m);
                            if (h < 0 || h > 23 || m < 0 || m > 59) {
                                return;
                            }
                            value = (h < 10 ? ('0' + h) : h) + ':' + (m < 10 ? ('0' + m) : m);
                        } else {
                            //value = new Date(value).Format(this.getFormat());

                            value = new Date(value.replace(/-/g, '/').replace(/T/g,' '));
                            var h = value.getHours();
                            var m = value.getMinutes();
                            value = (h < 10 ? ('0' + h) : h) + ':' + (m < 10 ? ('0' + m) : m);
                        }
                    }
                } else {
                    value = value.replace(/-/g, '/').replace(/T/g, ' ');
                    value = new Date(value).Format(this.getFormat());
                }
            }
            if (this.Editable) {
                this.$Input.val(value);
            } else {
                if (this.Visible) {
                    this.$Input.text(value);
                } else {
                    this.Value = value;
                }
            }
            this.ValChange();
        },

        GetValue: function () {
            if (this.Editable) {
                var time = "";
                if (this.$Input != void 0)
                    time = this.$Input.val();
                return time;
            } else {
                var time = "";
                time = this.Visible ? this.$Input.text() : this.Value;
                return time ? time : "";
            }
        },

        GetText: function () {
            return this.GetValue();
        },

        //设置只读
        SetReadonly: function (v) {
            if (v) {
                this.$Input.prop("disabled", "disabled");
            }
            else {
                this.$Input.removeProp("disabled");
            }
        },

        //绑定事件
        BindEvent: function () {
            var that = this;
            $(this.$Input).off("keyup.FormDateTime").on("keyup.FormDateTime", this, function (e) {
                //var that = e.data;
                //that.ValChange();
            });

            $(this.$Input).off("change.FormDateTime").on("change.FormDateTime", this, function (e) {
                var that = e.data;
                that.ValChange();

                that.Required && ($(this).val() != "" && $(this).removeAttr("style"));
            });
            $(this.$Input).one("focus", function () {
                that.$Input.datetimepicker({
                    language: 'zh-CN',
                    format: that.DateTimeMode,
                    todayBtn: true,
                    autoclose: true,
                    startView: that.startView,
                    minView: that.minView,
                    fixTop: that.fixTop
                });
                that.$Input.datetimepicker('show');
                $(that.$Input).off("click");
            });
            $(this.$Input).one("click", function () {
                that.$Input.datetimepicker({
                    language: 'zh-CN',
                    format: that.DateTimeMode,
                    todayBtn: true,
                    autoclose: true,
                    startView: that.startView,
                    minView: that.minView,
                    fixTop: that.fixTop
                });
                that.$Input.datetimepicker('show');
                $(that.$Input).off("focus");
            });
        },

        //值改变
        ValChange: function () {
            this.Validate();
            this.OnChange();
        },

        // 数据验证
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && val.trim() == "") {
                this.AddInvalidText(this.$Input, "必填");
                return false;
            }
            //只要设置了日期就要校验，防止用户输入的时期不正确导致提交后台报错
            if (val) {
                if ((isNaN(Date.parse(val.replace(/-/g, "/"))) && this.DateTimeMode != "hh:ii" && this.DateTimeMode != "yyyy-mm") /*&& this.Required*/) {
                    this.AddInvalidText(this.$Input, "日期格式不对");
                    return false;
                }
            }
            if (this.DateTimeMode != "hh:ii") {
                var time = val.split('-');
                var year = parseInt(time[0]);
                if (year > 9999) {
                    this.AddInvalidText(this.$Input, "日期格式不对");
                    return false;
                }
            }


            if (this.Expression && !this.Expression.test(val)) {
                this.AddInvalidText(this.$Input, this.ErrorAlert);
                return false;
            }

            this.RemoveInvalidText(this.$Input);
            return true;
        },

        //保存数据
        SaveDataField: function () {
            var result = {};
            if (this.ComputationRule == null && !this.Visible) return result;

            if (this.DataField) {
                var dataFieldItem = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
                if (dataFieldItem) {
                    var value = this.GetValue();
                    if (dataFieldItem.Value != value) {
                        result[this.DataField] = value;
                    }
                }
            }
            return result;
        }
    });
})(jQuery);;
// Label控件
(function ($) {
    //控件执行
    $.fn.FormGridView = function () {
        return $.ControlManager.Run.call(this, "FormGridView", arguments);
    };

    $.Controls.FormGridView = function (element, options, sheetInfo) {
        this.ShowSerialNo = true;//显示序列号
        this.FixColNum = 1;//固定前几列
        this.rowHeight = 0;//默认行高

        this.ChildEditable = [];//子项可写
        this.ChildRequired = [];//子项必填
        $.Controls.FormGridView.Base.constructor.call(this, element, options, sheetInfo);
    };

    $.Controls.FormGridView.Inherit($.Controls.BaseControl, {
        PreRender: function () {
            var that = this;
            this.ColMinWidth = 80;
            this.RowCounts = 0;
            this.SelectedRow = null;
            if (this.ShowSerialNo) {
                $(this.Element).children('table').find('th:first')
                    .before($('<th class="SerialNo_th"><div class="sheet-control table_th SerialNo" style="min-width:40px;text-align: center;">序号</div></th>'));
            }

            /*子表延迟加载执行addrow会触发change事件导致计算规则在非创建模式也会执行
            如果是非创建模式的第一次addrow不触发change事件*/
            this.FirstAddRow = true;
            that.IsFirstSetValue = true;
            this.$Element = $(this.Element).addClass("SheetGridView");
            this.$Table = this.$Element.children("table");
            this.$TableWrap = $('<div class="GridViewWrap">');
            //拖拽容器
            this.$rcHandle = $('<div class="rc-handle-container">').appendTo(this.$TableWrap);
            //子表按钮容器，直接使用事件代理来处理
            this.$TableAction = $('<div class="table-action">');
            var actions = [];
            actions.push('<a class="action active" data-type="down" title="点击全部展开或收缩" style="display: inline;"><i class="icon-xiala2"></i></a>');
            actions.push('<a class="action active" data-type="adapteheight" title="行高自适应" style="display: inline;"><i class="icon-shangxiazhankai"></i></a>');//行高
            if (!this.Editable) {
                actions.push('<a class="action active" data-type="adaptewidth" title="列宽自适应" style="display: inline;"><i class="icon-zuoyouzhankai"></i></a>');//列宽
            }
            if (this.Editable) {
                actions.push('<a class="action" data-type="delete" title="删除行" style="display: inline;"><i class="icon-shanchu"></i></a>');//删除
                actions.push('<a class="action" data-type="copy" title="复制行" style="display: inline;"><i class="icon-fuzhi"></i></a>');//复制
                actions.push('<a class="action active" data-type="add" title="添加行" style="display: inline;"><i class="icon-tianjia"></i></a>');//添加
            }

            this.$TableAction.append(actions.join("")).appendTo(this.$TableWrap);
            //子表标题
            this.$TableTitle = $('<div class="table-title">').appendTo(this.$TableWrap);
            this.$TableAction.appendTo(this.$TableTitle);
            //子表固定表头
            this.$TableHead = $('<div class="table-head">').appendTo(this.$TableWrap);
            this.$TableHeadBody = $('<div class="head-body">').appendTo(this.$TableHead);

            this.$TableFHeadBody = $('<div class="table-head fixed-table-head">').appendTo(this.$TableWrap);
            //解决Mac safari兼容性问题
            this.$TableContainer = $("<div></div>").append(this.$Table);
            //注：table-body 在子表隐藏和打印时有用到，修改时要同时修改
            this.$TableConBody = $('<div class="table-body" style="overflow:auto;">').append(this.$TableContainer);
            this.$TableCon = $('<div class="table-content" style="max-height:' + $(window).height() * 0.6 + 'px">')
                .append(this.$TableConBody).append(this.$TableFConBody).appendTo(this.$TableWrap);
            this.$TableFCon = $('<div class="table-content fixed-table-content" style="max-height:' + $(window).height() * 0.6 + 'px">')
                .appendTo(this.$TableWrap);

            this.$TableScrollWrap = $('<div class="table-scroll-wrap"></div>').appendTo(this.$TableWrap);
            this.$TableScroll = $('<div class="table-scroll">').appendTo(that.$TableScrollWrap);
            this.$TableScrollbar = $('<div class="table-scroll-bar">').appendTo(this.$TableScroll);
            this.$TableWrap.appendTo(this.Element);
            this.$Title = $("<span class='sheetName'>");
            this.$TableTitle.append(this.$Title.html(this.DisplayName));
            if (this.Required) {
                this.$Title.append("<span style='color:red;vertical-align:middle'>*<span>");
            }

            //模板行内容
            this.$TemplateRow = this.$Table.find("tr").clone();
            this.$TemplateRow.find("th").each(function () {
                var $td = $("<td>").html($(this).html());
                $td.find("div").removeClass("table_th").html("");
                $(this).before($td);
                $(this).remove();
            });

            if (this.Editable) {
                this.$Element.addClass("editable");
                this.$TableHead.addClass("table-edit");
                this.$TableCon.addClass("table-edit");
            }

            this.TrHeight = 0;
            //表格体
            this.$TableBody = $("<tbody>");
            this.$Table.removeClass("table-hover").append(this.$TableBody);
        },

        Render: function () {
            var that = this;
            if (!this.Visible) this.$Element.hide();
            //对于可见的字段，添加是否打印属性
            if (this.Visible) {
                if (this.Printable == void 0) {
                    //如果字段没有设置是否可打印则默认可打印
                    this.$Element.attr('data-printable', true);
                } else {
                    this.$Element.attr('data-printable', this.Printable);
                }
            }

            if (this.Value && this.Value.R && this.Value.R.length > 0) {
                that.$loading = $('<div class="grid-loading">[' + that.DisplayName + ']数据加载中...</div>').appendTo(that.Element);
                that.SetValue(that.Value.R);
                that.$loading.remove();
            } else if (this.ResponseContext.IsCreateMode && this.Editable) {
                this.AddRow();
            } else {
                that.AddRow();
                that.ClearRows();
            }

            this.IsFirstSetValue = false;

            //初始化固定标题及固定列
            this.FiexHeaderCol();

            //绑定事件
            this.BindEvent();
        },
        //赋值
        SetValue: function (dataArray) {
            if ($.isEmptyObject(dataArray)) return;
            for (var i = 0, dataLen = dataArray.length; i < dataLen; i++) {
                if (dataArray[i][this.DataField + ".ObjectId"].Value) {
                    this.AddRow(dataArray[i][this.DataField + ".ObjectId"].Value);
                }
                else {
                    this.AddRow(dataArray[i][this.DataField + ".ObjectId"], dataArray[i]);
                }
                //行数>1将DOM卸载出来，等子表渲染完后再操作
                if (i == 0 && dataLen > 1) {
                    this.$TableConBody.detach();
                }
            }
            if (dataLen > 1) {
                this.$TableCon.append(this.$TableConBody);
            }
        },

        GetValue: function () {
            var valArray = new Array();
            var $trs = this.$TableBody.find("tr");
            for (var i = 0; i < $trs.length; i++) {
                var $tr = $($trs[i]);
                var rObjectId = $tr.attr("data-ObjectId");
                if ($.isEmptyObject(rObjectId)) continue;

                var rowVal = {
                    ObjectId: rObjectId
                };
                var isNullRow = true;
                $tr.find("div[data-controlkey]").each(function () {
                    var manager = $(this).JControl();
                    var datafield = manager.DataField.split(".")[1];
                    //如果是关联属性控件不要保存
                    var sourceType = $(manager.Element).attr("data-sourcetype");
                    if (sourceType != undefined) {
                        return true;
                    }
                    var controlVal;
                    if (manager instanceof $.Controls.FormUser
                        || manager instanceof $.Controls.FormMultiUser) {
                        controlVal = manager.GetUnitIDs();
                    } else {
                        controlVal = manager.GetValue();
                    }

                    if (!$.isEmptyObject(controlVal) || controlVal != "" || controlVal == false) {
                        isNullRow = false;
                    }

                    rowVal[datafield] = controlVal;
                });
                if (!isNullRow) {
                    valArray.push(rowVal);
                }
            }
            return valArray;
        },
        //绑定事件
        BindEvent: function () {
            var that = this;
            //按钮
            this.$TableAction.off("click.action").on("click.action", "a.action", function (e) {
                var action = $(this).data().type;
                if (action != "down" || action != "up") {
                    var isActive = $(this).hasClass("active");
                    if (!isActive) {
                        return;
                    }
                }
                switch (action) {
                    case "down":
                    case "up":
                        tableAction.showoff.apply(this);
                        break;
                    case "add":
                        tableAction.add.apply(this);
                        break;
                    case "copy":
                        tableAction.copy.apply(this);
                        break;
                    case "delete":
                        tableAction.delete.apply(this);
                        break;
                    case "adapteheight":
                        that.AdapteHeight.apply(that);
                        break;
                    case "adaptewidth":
                        //恢复默认列宽
                        that.AdapteWidth.apply(that);
                        break;
                }
            })
            var tableAction = {
                showoff: function () {
                    if ($(this).attr("type") === "up") {
                        that.$TableAction
                            .find('a[data-type="add"],a[data-type="adapteheight"],a[data-type="adaptewidth"]')
                            .addClass("active");
                        if (that.SelectedRow) {
                            that.$TableAction
                                .find('a[data-type="copy"],a[data-type="delete"]')
                                .addClass("active");
                        }
                        $(this).attr("type", "down").removeClass("flip");
                        that.$TableWrap.children("div:not(.table-tip)").slideDown(100);
                    } else {
                        that.$TableAction.find('a').removeClass("active");
                        $(this).addClass("active flip").attr("type", "up");
                        that.$TableWrap.children("div:not(.table-title)").slideUp(100);
                    }
                },
                add: function () {
                    setTimeout(function () {
                        if (that.SelectedRow) {
                            that.AddRow(null, null, that.SelectedRow.attr("data-ObjectId"));
                        } else {
                            that.AddRow();
                        }
                        that.ResizeSerialNo();
                    }, 0);
                },
                copy: function () {
                    if (!that.SelectedRow) {
                        alert("请选择要复制的行");
                        return;
                    }
                    setTimeout(function () {
                        that.AddRow(null, null, that.SelectedRow.attr("data-ObjectId"), that.SelectedRow);
                        that.ResizeSerialNo();
                    }, 0);
                },
                delete: function () {
                    if (!that.SelectedRow) {
                        alert("请选择要删除的行");
                        return;
                    }
                    setTimeout(function () {
                        var rowNum = that.SelectedRow.attr("data-row"),
                            nextRow = that.SelectedRow.next();

                        that.OnChange.apply(that, [that.SelectedRow, 'delete']);
                        // 将行中控件的ControlManager删除，避免验证不通过
                        var controlManagers = $.ControlManager.ControlManagers;
                        that.SelectedRow.find("div[data-controlkey]").each(function () {
                            for (var sheetId in controlManagers) {
                                if (sheetId == $(this).data($.ControlManager.SheetIDKey)) {
                                    delete controlManagers[sheetId];
                                    break;
                                }
                            }
                        });
                        that.SelectedRow.detach();

                        //删除固定列
                        var fixedRow = that.$TableFCon.find("tr[data-row='" + rowNum + "']"),
                            nextFixedRow = fixedRow.next();
                        fixedRow.remove();
                        //设置选择行
                        if (nextRow.length == 0) {
                            that.SelectedRow = null;
                            that.$TableAction.find('[data-type="delete"]').removeClass("active");
                            that.$TableAction.find('[data-type="copy"]').removeClass("active");
                        } else {
                            that.SelectedRow = nextRow;
                            that.SelectedRow.attr("data-checked", true);
                            nextFixedRow.attr("data-checked", true);
                        }

                        --that.RowCounts;
                        that.ResizeSerialNo();
                        if (rowNum == "1") {
                            that.FirstRowTd = that.$TableBody.find('tr:first').find('td');
                        }
                    }, 0);
                }
            }

            //监听子表中控件输入高度变化
            that.$Table.off("focus.height").on("focus.height", "[data-controlkey='FormTextBox'] textarea,[data-controlkey='FormTextArea'] textarea",
                function (e) {
                    if ($(this).val() == "") return true;
                    var data = $(this).data();
                    var h = $(this).closest("tr").height();
                    $(this).css({ "height": (this.scrollHeight - 15) + "px" });
                    var tr = $(this).closest("tr"), rowNum = tr.attr("data-row");
                    setTimeout(function () {
                        var h = tr.outerHeight();
                        that.$TableFCon.find("tbody tr[data-row='" + rowNum + "']").height(h);
                    }, 400);
                });
            that.$Table.off("blur.height").on("blur.height", "[data-controlkey='FormTextBox'] textarea,[data-controlkey='FormTextArea'] textarea",
                function (e) {
                    if ($(this).val() == "") return true;
                    var $input = this, tr = $(this).closest("tr"), rowNum = Number(tr.attr("data-row"));
                    if (!that.$Table.hasClass("adapteheight")) {
                        var controlkey = $(this).closest("[data-controlkey]").attr("data-controlkey");
                        if (controlkey == "FormTextArea") {
                            $(this).css({ "height": "auto" });
                        } else {
                            var h = that.rowHeight - 25 < 30 ? 30 : that.rowHeight - 25 > 110 ? 110 : that.rowHeight - 25;
                            $(this).css({ "height": h + "px" });
                        }
                    }
                    setTimeout(function () {
                        var h = tr.outerHeight();
                        that.$TableFCon.find("tbody tr[data-row='" + rowNum + "']").css({ "height": h + "px" });
                    }, 400);
                });
            that.$Table.off("keydown.input").on("keydown.input", "[data-controlkey='FormTextBox'] textarea,[data-controlkey='FormTextArea'] textarea",
                function () {
                    var input = this, tr = $(this).closest("tr"), rowNum = tr.attr("data-row");
                    setTimeout(function () {
                        var h = tr.outerHeight();
                        that.$TableFCon.find("tbody tr[data-row='" + rowNum + "']").height(h - 1);
                    }, 400);
                });
            //td点击事件，
            that.$Table.off("click.td").on("click.td", "td", function (e) {
                var target = e.target;
                if (target.tagName === "TD") {
                    e.stopPropagation();
                    var $td = $(this);
                    var input = $td.find("textarea,input");
                    if (input.length > 0) {
                        $(input[0]).focus();
                        return true;
                    }
                    var formQuery = $td.find(".form-query-add");
                    if (formQuery.length > 0) {
                        formQuery.trigger("click");
                    }
                }
            });

            that.row_modified = [];
            //监听FormAttachment、FormMultiUser、FormMultiUser,FormMultiQuery输入高度变化
            that.$Table.off("DOMSubtreeModified").on("DOMSubtreeModified", "[data-controlkey='FormAttachment'],[data-controlkey='FormMultiUser'],[data-controlkey='FormMultiUser'],[data-controlkey='FormMultiQuery'],[data-controlkey] pre", function (e) {
                //防止多次执行
                var rowNum = $(this).closest("tr").attr("data-row");
                that.row_modified.push(Number(rowNum));
                that.timer && window.clearTimeout(that.timer);
                that.timer = setTimeout(function () {
                    var len = that.row_modified.length;
                    if (len > 0) {
                        var arry = {};
                        for (var i = 0; i < len; i++) {
                            var rowNum = that.row_modified[i];
                            if (!arry[rowNum]) {
                                arry[rowNum] = 1;
                                var tr = that.$TableBody.find("tr[data-row='" + rowNum + "']"),
                                    h = tr.outerHeight();
                                that.$TableFCon.find("tbody tr[data-row='" + rowNum + "']").height(h);
                            }
                        }
                        that.row_modified = [];
                    }
                    clearTimeout(that.timer);
                }, 100);
            });


            that.BeforeScroll = that.$TableScroll.scrollLeft();
            that.rate = 0;

            if (that.Editable) {
                //处理tab键、input输入导致$TableConBody scroll
                $(that.$TableConBody).off('scroll.keydowm').on('scroll.keydowm', function (e) {
                    var left = that.$TableConBody.scrollLeft();
                    if (Math.abs(that.BeforeScroll - left) > 2) {
                        if (that.BeforeScroll != left) {
                            that.$TableHeadBody.scrollLeft(left);
                            that.$TableScroll.scrollLeft(left);
                            that.BeforeScroll = left;
                        }
                    }
                });
                //选中行-点序号选中
                that.$TableFCon.off("click.select").on("click.select", "tbody tr", function (e) {
                    if (that.SelectedRow) {
                        var rowNum = that.SelectedRow.attr("data-row");
                        that.SelectedRow.removeAttr("data-checked");
                        that.$TableFCon.find("tr[data-row='" + rowNum + "']").removeAttr("data-checked");
                    }
                    var fixedRow = $(this), rowNum = fixedRow.attr("data-row");
                    fixedRow.attr("data-checked", true);
                    that.SelectedRow = that.$TableBody.find("tr[data-row='" + rowNum + "']").attr("data-checked", true);
                    that.$TableAction.find('[data-type="delete"]').addClass("active");
                    that.$TableAction.find('[data-type="copy"]').addClass("active");
                    e.stopPropagation();
                });
                //取消选中行
                $(document).on("click.cancelSelect", function (e) {
                    if (that.SelectedRow) {
                        if ($(e.target).closest(".table-action").length == 1) return;
                        var rowNum = that.SelectedRow.attr("data-row");
                        that.SelectedRow.removeAttr("data-checked");
                        that.$TableFCon.find("tr[data-row='" + rowNum + "']").removeAttr("data-checked");
                        that.SelectedRow = null;
                        that.$TableAction.find('[data-type="delete"]').removeClass("active");
                        that.$TableAction.find('[data-type="copy"]').removeClass("active");
                    }
                });
                //序号列鼠标经过效果
                that.$TableFCon.off("mouseenter.tr").on("mouseenter.tr", "tbody tr", function (e) {
                    if (!$(this).attr("data-checked")) {//为选中
                        $(this).attr("data-checked", "mouseenter");
                        $(this).off("mouseleave.tr").on("mouseleave.tr", function (e) {
                            if ($(this).attr("data-checked") == "mouseenter") {
                                $(this).removeAttr("data-checked");
                            }
                        });
                    }
                });
                //必填验证失败，行高可能会改变
                $("#SheetContent").off("ValidateFail").on("ValidateFail", function () {
                    that.AdapteHeight.apply(that);
                });
            }
            //tips
            that.$TableBody.off("mouseenter.pre").on("mouseenter.pre", "pre", function (e) {
                var height = $(this).height(),
                    width = $(this).width(),
                    parentHeight = $(this).closest("[data-controlkey]").height();

                if (height > parentHeight) {
                    var tooltipText = this.innerText;
                    if (!that.Tips) {
                        that.Tips = $('<div class="table-tip" style="display: none;word-wrap: break-word"></div>').appendTo(that.$TableWrap);
                        that.Tips.text(tooltipText);
                    }

                    var offset = $(this).closest("[data-controlkey]").offset(),
                        left = offset.left + ($(this).outerWidth() - that.Tips.outerWidth()) / 2 - $(window).scrollLeft();
                    if (left < 80) {
                        left = 80;
                    } else {
                        var right = $(document).width() - left - width;
                        if (right < 0) {
                            left += right;
                        }
                    }
                    that.Tips.text(tooltipText).css({
                        width: width,
                        left: left,
                        bottom: $(window).height() - offset.top + $(window).scrollTop()
                    }).toggle();
                    $(this).off("mouseleave.pre").on("mouseleave.pre", function () {
                        that.Tips && that.Tips.hide();
                    })
                    return false;
                }
            })

            //x轴滚动
            that.$TableCon.unbind("scroll.xtablescroll").bind("scroll.xtablescroll", function (e) {
                var top = $(this).scrollTop();
                that.$TableFCon.scrollTop(top);
            });
            //y轴滚动
            that.$TableScroll.unbind("scroll.ytablescroll").bind("scroll.ytablescroll", function (e) {
                if (that.rate <= 0) {
                    if (!that.Editable) {
                        that.rate = 1;
                    } else {
                        that.rate = (that.$Table.outerWidth() - that.$TableConBody.outerWidth()) / (that.$TableScrollbar.outerWidth() - that.$TableScroll.outerWidth());
                        that.rate = that.rate == 0 ? 1 : that.rate;
                    }
                }
                var left = $(this).scrollLeft();
                if (that.BeforeScroll != left) {
                    left = that.rate * left;
                    that.$TableHeadBody.scrollLeft(left);
                    that.$TableConBody.scrollLeft(left);
                    that.BeforeScroll = left;
                    if (!that.Editable) {
                        that.$rcHandle.scrollLeft(left);
                        that.$rcHandle.css("left", -left);
                    }
                }
            });

            that.$Element.off("DomProChange.form").on("DomProChange.form", function (e, datafield, action) {
                setTimeout(function () {
                    that.SetColumnVisible.call(that, datafield, action);
                }, 0)
            });

            //表头拉伸
            if (!that.Editable) {
                that.$rcHandle.off("mousedown.resize").on("mousedown.resize", ".rc-handle", function (e) {
                    e.preventDefault();
                    var startX = e.pageX, x = 0,
                        $that = $(this),
                        pos = $that.offset().left - that.$rcHandle.offset().left,
                        tarIndex = parseInt($that.attr("data-index")),
                        $tarTh = $(that.$Element).find("#th_" + tarIndex),
                        $tarTd = $(that.$Element).find("#td_" + tarIndex),
                        startW = $tarTd.outerWidth(),
                        minW = that.ColMinWidth - startW,
                        totalWidth = that.$TableContainer.width(),
                        $nextTh = $(that.$Element).find("#th_" + (tarIndex + 1)),
                        $nextTd = $(that.$Element).find("#td_" + (tarIndex + 1)),
                        hasNext = false, nextW = 0;
                    $nextTh.length > 0 && (hasNext = true, nextW = $nextTd.outerWidth());

                    $(document).off("mousemove.resize").on("mousemove.resize", function (e) {
                        x = e.pageX - startX;
                        if (x < minW) return;
                        $that.css("left", pos + x);
                        //to do resize table
                        $tarTd.width(startW + x);
                        $tarTh.width(startW + x);
                        if (x > 0) {
                            that.$Table.outerWidth(totalWidth + x);
                            that.$TableContainer.outerWidth(totalWidth + x);
                        } else if (hasNext) {
                            $nextTh.width(nextW - x);
                            $nextTd.width(nextW - x);
                        }
                    });

                    $(document).off("mouseup.resize").on("mouseup.resize", function (e) {
                        $(this).off("mousemove.resize").off("mouseup.resize");
                        that.ResizeColumn.call(that);
                        that.AdapteHeight.call(that);
                    });

                    that.$Element.off("mouseleave.resize").on("mouseleave.resize", function (e) {
                        $(document).off("mousemove.resize").off("mouseup.resize");
                        that.$Element.off("mouseleave.resize");
                        that.ResizeColumn.call(that);
                        return false;
                    });
                })
            }
        },
        //添加行
        //propertySchemaCode参数是用于关联属性，标记关联属性关联的是哪个表单
        AddRow: function (ObjectId, RowData, PreObjectId, $PreTr, propertySchemaCode) {
            var that = this;
            var $newTr = this.$TemplateRow.clone().hide();
            ++this.RowCounts;
            //显示行序号
            if (this.ShowSerialNo) {
                $newTr.attr("data-row", this.RowCounts);
                $newTr.find("td:first div.SerialNo").html(this.RowCounts);
            }
            if (ObjectId) {
                $newTr.attr("data-ObjectId", ObjectId);
            }

            if ($newTr.find("td").length > 0) {
                if (PreObjectId) {
                    this.$TableBody.find("tr[data-ObjectId='" + PreObjectId + "']").after($newTr);
                }
                else {
                    this.$TableBody.append($newTr);
                }
                //如果td的display是none则$newTr的td也要设置display为none                
                var $td;
                if (this.RowCounts == 1) {
                    $td = this.$TableBody.find('tr:first').find('td');
                    this.FirstRowTd = $td;
                } else {
                    $td = this.FirstRowTd;
                }
                for (var i = 0, len = $td.length; i < len; i++) {
                    if ($($td[i]).css('display') == 'none') {
                        $newTr.find('td').eq(i).css('display', 'none');
                    }
                }

                var ChildEditableInit = false;
                if (that.ChildEditable.length > 0) {
                    ChildEditableInit = true;
                }
                //初始化控件
                var newRowObj = {};
                $newTr.find("div[data-controlkey]").each(function (i) {
                    var key = $(this).attr("data-controlkey") + "：";
                    var $Controlmanger = $(this).JControl();
                    newRowObj[$Controlmanger.DataField] = $Controlmanger;
                    if (!ChildEditableInit) { //子表项可写，必填初始化
                        that.ChildRequired.push($Controlmanger.Required);
                        that.ChildEditable.push($Controlmanger.Editable);
                    }

                    if ($(this).attr("data-ismappingproperty") != undefined &&
                        $(this).attr("data-ismappingproperty") == "true" &&
                        propertySchemaCode != null) {
                        for (var property in propertySchemaCode) {
                            if (property == $Controlmanger.DataField) {
                                $Controlmanger.BOSchemaCode = propertySchemaCode[property];
                                break;
                            }
                        }
                    }
                    //Error在BaseControl中绑定过控件的change事件，这里重复绑定了
                    $Controlmanger.BindChange($.IGuid(), function () {
                        that.OnChange.apply(that, [$Controlmanger]);
                    });

                    //绑定Click事件【文本框，数值框】
                    if ($Controlmanger.BindClickEvent) {
                        that.ClickEvent && that.ClickEvent($Controlmanger);
                        //$Controlmanger.BindClickEvent(that.ClickEvent);
                    }

                    if (RowData != null) {

                        if (RowData[$Controlmanger.DataField] != null) {
                            $Controlmanger.SetValue(RowData[$Controlmanger.DataField]);
                        }
                    } else if ($PreTr != null) {
                        var $PreManager = $PreTr.find("div[data-DataField='" + $Controlmanger.DataField + "']").JControl();
                        var controlKey = $(this).attr("data-controlkey");
                        if (controlKey == "FormUser" || controlKey == "FormMultiUser") {
                            $Controlmanger.SetValue($PreManager.GetUnitIDs());
                        } else if (controlKey == "FormQuery") {
                            $Controlmanger.SetValue({
                                "ObjectId": $PreManager.GetValue(),
                                "Name": $PreManager.GetText()
                            });
                        } else if (controlKey == "FormMultiQuery") {
                            $Controlmanger.SetValue($PreManager.GetValue());
                        } else if (controlKey != "FormAttachment" && controlKey != "FormMap") { // 不复制附件,地图
                            $Controlmanger.SetValue($PreManager.GetValue());
                        }
                    }

                    if (!$Controlmanger.Visible) {
                        var DataField = $Controlmanger.DataField;
                        //原来是不可见的直接remove了，导致主表和子表不可见字段在参加计算规则时候不一致。20161129改成hide
                        //that.$TemplateRow.find("div[data-DataField='" + DataField + "']").parent().remove();
                        //that.$Table.find("tr").find("div[data-DataField='" + DataField + "']").parent().remove();
                        //$(this).parent().remove();
                        that.$TemplateRow.find("div[data-DataField='" + DataField + "']").parent().hide();
                        that.$Table.find("tr").find("div[data-DataField='" + DataField + "']").parent().hide();
                        $(this).parent().hide();
                    }

                    // 在子表的header里添加必填标识
                    if ($Controlmanger.Visible && $Controlmanger.Editable && $Controlmanger.Required) {
                        var $header = that.$Table.find(".table_th[data-datafield='" + $Controlmanger.DataField + "']");
                        if ($header.find(".required").length == 0) {
                            $header.append("<span class='required' style='color:red;vertical-align:middle'>*<span>");
                        }
                    }
                });
                //非创建模式第一次setvalue不执行onchange
                var needDoChange = !(!this.ResponseContext.IsCreateMode && this.IsFirstSetValue);
                if (needDoChange) {
                    //this.OnChange.apply(this, [$newTr, 'add']);
                    this.OnChange.apply(this, [newRowObj,'add']);
                }
            } else {
                $(this.Element).remove();
            }

            $newTr.show();
            this.FixedColeErrorRange = 0;
            //固定列处理
            if (!this.IsFirstSetValue) {
                var h = $newTr.height(),
                    id = $newTr.attr("data-objectid"),
                    fixedTr = $("<tr style='height:" + (h) + "px;'>").attr("data-row", this.RowCounts).attr("data-objectid", (id || "")),
                    fixedTd = $("<td><div class='row-num'>" + this.RowCounts + "</div><div class='diviser'></div></td>");
                fixedTr.append(fixedTd);
                if (PreObjectId) {
                    that.$TableFCon.find("tr[data-ObjectId='" + PreObjectId + "']").after(fixedTr);
                }
                else {
                    that.$TableFCon.find("tbody").append(fixedTr);
                }
            } else if (this.rowHeight == 0) {
                var h = $newTr.height();
                this.rowHeight = h;
            }

            //Error 临时解决方案
            //问题原因：子表字段根据主表字段计算得来，暂存后新增行的数据不会计算
            //渲染完控件后统一执行一次
            if (needDoChange) {
                $newTr.find("div[data-controlkey]").each(function () {
                    var key = $(this).attr('data-controlkey');
                    if (key == 'FormAttachment' || key == 'FormPhoto') {
                        return true;

                    }
                    var $ctrlMgr = $(this).JControl();
                    var eventName = 'change.cr.' + key;
                    if ($ctrlMgr != null) {
                        if ($ctrlMgr.DataItem != undefined) {
                            if ($ctrlMgr.DataItem.ComputationRule == undefined || $ctrlMgr.DataItem.ComputationRule == null) { return true; }
                            var ruleResult = $ctrlMgr.GetComputationResult($ctrlMgr.DataItem.ComputationRule, $ctrlMgr.DataItem.ComputationRuleFields);
                            $ctrlMgr.SetValue(ruleResult);
                        }
                        $ctrlMgr.OnChange();
                    }
                })
            }
        },
        //
        GetCellManager: function (objectId, dataField) {
            if (objectId == null || $.isEmptyObject(dataField)) return;
            var $tr = this.$TableBody.find("tr[data-ObjectId='" + objectId + "']");
            if ($tr.length > 0) {
                return $tr.find("[data-DataField='" + dataField + "']").JControl();
            }
        },

        UpdateRow: function (objectId, rowData) {
            if (objectId == null || $.isEmptyObject(rowData)) return;
            var $tr = this.$TableBody.find("tr[data-ObjectId='" + objectId + "']");
            if ($tr.length > 0) {
                for (var key in rowData) {
                    var control = $tr.find("[data-DataField='" + key + "']").JControl();
                    if (control != null) {
                        control.SetValue(rowData[key]);
                    }
                }
            }
        },

        ClearRows: function () {
            this.RowCounts = 0;
            this.$TableBody.find("tr[data-ObjectId]").remove();
            this.$TableFCon.find("tr[data-ObjectId]").remove();
            this.OnChange.apply(this, ["ClearRows"]);
        },
        // 数据验证
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            // 子表必填时，必需填写一行数据
            if (this.Required && val.length == 0) {
                this.AddInvalidText(this.$Table, "必填");
                return false;
            }

            this.RemoveInvalidText(this.$Table);
            return true;
        },
        //
        SaveDataField: function () {
            var result = {
            };
            if (!this.Visible) return result;
            var oldresult = $.extend({
            }, this.ResponseContext.ReturnData[this.DataField]);
            if (!oldresult) {
                return {
                };
            }
            var value = this.GetValue();
            if (oldresult.Value.R != value) {
                result[this.DataField] = value;
                return result;
            }
            return {
            };
        },
        //绑定click事件，参数rowid,controlmanager,
        //设置子表中的文本框，数值框的click事件
        BindClickEvent: function (clickFn) {
            if (this.ClickEvent) return;
            var that = this;
            this.ClickEvent = clickFn;
            //对已经渲染了的行控件
            var trs = $(that.Element).find("tr[data-objectid]");
            if (trs && trs.length > 0) {
                for (var i = 0; i < trs.length; i++) {
                    //初始化控件
                    $(trs).find("div[data-controlkey]").each(function (i) {
                        var key = $(this).attr("data-controlkey") + "：";
                        var $Controlmanger = $(this).JControl();
                        if ($Controlmanger.BindClickEvent) {
                            //绑定Click事件【文本框，数值框】
                            clickFn.apply(that, [$Controlmanger]);
                        }
                    });
                }
            }
        },
        //初始化固定表头，固定序号入口
        FiexHeaderCol: function () {
            var that = this;
            //1、计算子表宽度
            that.SetTableColWidth();
            //2、初始化固定标题
            that.ResetHeader();
            //3、初始化列宽拖拽功能
            if (!that.Editable) {
                that.ResizeColumn();
            }
            //4、初始化固定列
            setTimeout(function () {
                that.ResetCol();
            }, 300)
        },
        //调整滚动条
        ResetScroll: function () {
            if (!this.Editable || true) {
                var w1 = this.$TableBody.width();
                var w2 = this.$Element.width();
                if (w1 - 5 <= w2) { //误差[-5 ,5]
                    this.$TableScroll.hide();
                } else {
                    this.$TableScroll.show();
                }
            }
        },
        //计算子表宽度
        SetTableColWidth: function () {
            var that = this,
                pre = document.createElement("pre");//用于计算标题、内容的长度
            pre = $("<pre style='display:inline;'>");
            $("body").append(pre);
            this.colWidth = [];
            var tr_first = that.$TableBody.find("tr:first");

            //获取列默认宽度-控件可写默认宽度
            this.$Table.find("th").each(function () {
                if ($(this).find('div.SerialNo').length > 0) {
                    that.colWidth.push(40);
                    $(this).children("div").css("width", "40px");
                    return true;
                }
                var controlkey = $(this).find('[data-controlkey]').attr("data-controlkey"),
                    titleText = $(this).find("div").text(),
                    titleWidth = 0,  //标题最小宽度
                    defaultColWidth = 0;  //列默认宽度
                pre.text(titleText);
                titleWidth = pre.outerWidth() + 5;
                switch (controlkey) {
                    case "FormTextBox":
                    case "FormTextArea":
                    case "FormDropDownList":
                    case "FormUser":
                    case "FormFormula":
                        defaultColWidth = 150;
                        break;
                    case "FormMultiUser":
                        defaultColWidth = 180;
                        break;
                    case "FormDateTime":
                        defaultColWidth = 110;
                        break;
                    case "FormNumber":
                        defaultColWidth = 100;
                        break;
                    case "FormRadioButtonList":
                    case "FormCheckboxList":
                        defaultColWidth = 160;
                        break;
                    case "FormCheckbox":
                        defaultColWidth = 80;
                        break;
                    case "FormAttachment":
                        defaultColWidth = 360;
                        break;
                    case "FormAreaSelect":
                        defaultColWidth = 300;
                        break;
                    case "FormQuery":
                    case "FormMultiQuery":
                        defaultColWidth = 250;
                        break;
                    default:
                        defaultColWidth = 200;
                        break;
                }
                defaultColWidth = titleWidth > defaultColWidth ? titleWidth : defaultColWidth;
                that.colWidth.push(defaultColWidth);
                $(this).children("div").css("width", defaultColWidth + "px");
            });
            this.$Table.width(eval(this.colWidth.join("+")));

            //根据内容重新获取适应宽度，同时
            var preColWidth = this.colWidth;
            if (tr_first.length > 0) {
                this.colWidth = [];
                that.colWidth.push(40);
                //获取每一列最大宽度
                that.$TableBody.find("tr:first div[data-controlkey]").each(function (index) {
                    var controlkey = $(this).attr("data-controlkey"),
                        datafield = $(this).attr("data-datafield"),
                        ctr = $(this).JControl();
                    //列所有控件
                    var td_div = that.$TableBody.find("[data-datafield='" + datafield + "']");
                    if (ctr.Editable && $(this).is(":visible")) {
                        that.colWidth.push(preColWidth[index + 1]);
                        td_div.each(function () {
                            $(this).addClass("editable");
                            if (ctr.Required) {
                                $(this).parent().addClass("required");
                            }

                            $(this).css({ "width": (that.colWidth[index + 1]) + "px" });
                            if (controlkey == "FormTextArea") {
                                var input = $(this).find(".form-control"),
                                    h = input.height();
                                input.height(h - 4);
                                input.data().oHeight = h;
                            } else if (controlkey == "FormTextBox" && that.rowHeight > 60) {
                                var input = $(this).find(".form-control"),
                                    h = that.rowHeight - 30 > 110 ? 110 : that.rowHeight - 30;
                                input.outerHeight(h);
                            }
                        })
                        return true;
                    } else if (!$(this).is(":visible")) {
                        that.colWidth.push(preColWidth[index + 1]);
                        $(this).css({ "width": (that.colWidth[index + 1]) + "px" });
                        return true;
                    }
                    // ------不可编辑且可见------
                    //循环列，判断每列的最大宽度，和控件最大最小宽度以及标题宽度比较，取合适值
                    var thisHeader = that.$Table.find("thead [data-datafield='" + datafield + "']");
                    var text = thisHeader.text().trim();
                    pre.text(text);
                    var maxwidth = 0,
                        titleWidth = pre.outerWidth() + 70;

                    td_div.each(function () {
                        text = $(this).find("pre").text();
                        pre.text(text);
                        maxwidth = maxwidth > (pre.outerWidth() + 70) ? maxwidth : pre.outerWidth() + 70;
                    });
                    switch (controlkey) {
                        case "FormTextBox":
                        case "FormTextArea":
                            if (maxwidth > 400) {
                                maxwidth = 400;
                            }
                            break;
                        case "FormDateTime":
                            if (maxwidth > 150) {
                                maxwidth = 150;
                            }
                            break;
                        case "FormNumber":
                            if (maxwidth > 300) {
                                maxwidth = 300;
                            }
                            break;
                        case "FormRadioButtonList":
                        case "FormCheckboxList":
                            if (maxwidth > 220) {
                                maxwidth = 220;
                            }
                            break;
                        case "FormCheckbox":
                            if (maxwidth > 220) {
                                maxwidth = 220;
                            }
                            break;
                        case "FormDropDownList":
                        case "FormUser":
                        case "FormMultiUser":
                        case "FormQuery":
                        case "FormFormula":
                            if (maxwidth > 300) {
                                maxwidth = 300;
                            }
                            break;
                        case "FormMultiQuery":
                            maxwidth = 300;
                            break;
                        case "FormAttachment":
                            maxwidth = 360;
                            break;
                        case "FormAreaSelect":
                            maxwidth = 300;
                            break;
                    }
                    maxwidth = maxwidth < titleWidth ? titleWidth : maxwidth;
                    that.colWidth.push(maxwidth);

                    //设置列宽
                    td_div.each(function () {
                        if (that.Editable) {
                            $(this).parent().css({ "width": (maxwidth) + "px" });
                        }
                        thisHeader.css({ "width": (maxwidth) + "px" });
                        $(this).parent().addClass("no-editable");
                        $(this).removeAttr("style").css({ "min-width": maxwidth + "px" });
                    });

                });
                that.$Table.width(eval(that.colWidth.join("+")));
                that.$TableContainer.width(eval(that.colWidth.join("+")));
            }
            pre.remove();
        },
        //初始化固定标题
        ResetHeader: function () {
            var that = this;
            that.$TableConBody.css("overflow", "hidden");
            that.$FixedHeader = $('<table class="gridFixedH" border="1"><thead>');
            var tr = $("<tr style='height:29px;'>");
            that.$Table.find("thead").show();

            //子表隐藏时下面的width计算会有问题
            var ElementHide = false;
            if ($(that.Element).css("display") == "none") {
                $(that.Element).show();
                ElementHide = true;
            }
            //-----
            var totalWidth = 0;
            var colNum = 0;
            //------
            that.$Table.children("thead").find("th").each(function (index) {
                var datafield = $(this).children("div.table_th").attr("data-datafield");
                var html = $(this).children("div.table_th").html();
                var w = that.colWidth[index];
                var th = $("<th  style='height:20px;line-height:20px; '>")
                    .html("<div style='width:" + (w - 0) + "px;'>" + html + "</div>");

                //----
                if (!$(this).is(":visible")) {
                    th.hide();
                } else {
                    totalWidth += w;
                }
                th.attr('data-datafield', datafield);
                tr.append(th);
            });
            that.$FixedHeader.find("thead").append(tr);
            that.$TableHeadBody.append(that.$FixedHeader);

            that.$Table.width(totalWidth);
            that.$TableScrollbar.width(totalWidth);
            that.ResetScroll();
            //模板宽度计算
            that.ResizeTemplateRow(that.colWidth);
            if (ElementHide) {
                $(that.Element).hide();
            }
        },
        //初始化固定列
        ResetCol: function () {
            var that = this;
            var header = this.$FixedHeader.clone();
            header.removeAttr("border").css({ "width": "40px" }).find("th").remove();
            header.find("tr").css({ "width": "40px" }).append($("<th style='height: 27px; line-height: 27px;'>序号</th>"));
            this.$TableFHeadBody.append(header);
            that.$TableFCon.append($("<table><tbody></tbody></table>"));
            this.$TableBody.find("tr[data-row]").each(function (index) {
                var h = $(this).height();
                var fixedTr = $("<tr style='height:" + h + "px;'>").attr("data-row", (index + 1)).attr("data-objectid", $(this).attr("data-objectid")),
                    fixedTd = $("<td><div class='row-num'>" + (index + 1) + "</div><div class='diviser'></div></td>");
                fixedTr.append(fixedTd);
                that.$TableFCon.find("tbody").append(fixedTr);
            });
        },
        //固定表头重计算
        ResizeColumn: function (colWidth) {
            var that = this, totalWidth = 0, trindex = 1, maxH = $(window).height() * 0.6 + 34,
                $firstTr = that.$Table.children("thead").children("tr").eq(0);
            that.$rcHandle.html("");
            if (that.$FixedHeader == undefined) {
                return;
            }
            if (this.ShowSerialNo) {
                totalWidth = 40;
            }
            var header = that.$Table.find("thead th");
            //重新计算表头的宽度
            that.$FixedHeader.find("th").each(function (index) {
                var $that = $(this);
                if ($that.is(":visible")) {
                    $that.attr("data-tar", "#rc_" + trindex).children("div").attr("id", "th_" + trindex);
                    var datafield = $that.attr("data-datafield");
                    if (datafield) {
                        var td = $($firstTr.find("th")[index]).attr("id", "td_" + trindex);;
                        if (td.length > 0) {
                            var w = colWidth ? colWidth[index] : td.outerWidth();
                            w = td.outerWidth();
                            totalWidth += w;
                            if (that.Editable) {
                                $that.children("div").width(w - 1);
                            } else {
                                $that.children("div").width(w - 1);
                            }
                        }
                        if (!that.Editable) {
                            that.$rcHandle.append('<div id="rc_' + trindex + '" class="rc-handle" data-index="' + trindex + '" style="left:' + (totalWidth - 3) + 'px;height:' + maxH + 'px;">');
                        }
                    }
                    trindex++;
                }
            });
            this.$FixedHeader.width(totalWidth);
            this.$TableContainer.width(totalWidth);
            this.$TableScrollbar.width(totalWidth);
            that.ResetScroll();
        },
        //模板宽度计算
        ResizeTemplateRow: function (colWidth) {
            var that = this;
            //更新第一列
            this.$TableBody.find("tr:first>td").each(function (index) {
                var width = colWidth[index];
                if (that.Editable) {
                    $(this).children("div.sheet-control").css({ "min-width": width + "px" });
                }
            });
            //更新模板
            $(this.$TemplateRow[0]).find("td").each(function (index) {
                if (that.Editable) {
                    var width = colWidth[index] ? colWidth[index] : 200;
                    $(this).children("div.sheet-control").css("width", (width) + "px");
                }
                if (that.ChildEditable && index > 0) {
                    var editable = that.ChildEditable[index - 1];
                    if (!editable) {
                        $(this).addClass("no-editable");
                    }
                }
            });
        },
        //重置行号
        ResizeSerialNo: function () {
            var that = this;
            var fixedTd = this.$TableFCon.find("td");
            this.$TableBody.find("tr[data-row]").each(function (index) {
                $(this).attr("data-row", index + 1);
                $(this).find("td>div.row-num").html(index + 1);
                $(fixedTd[index]).find(".row-num").html(index + 1).closest("tr").attr("data-row", index + 1);
            });
        },
        //自适应高度
        AdapteHeight: function (reset) {
            var that = this;
            var setAdapte = true;//设置自适应高度？
            if (reset) {
                setAdapte = false;
            }
            else {
                if (that.$Table.hasClass("adapteheight")) {
                    that.$Table.removeClass("adapteheight");
                    setAdapte = false;
                } else {
                    that.$Table.addClass("adapteheight");
                }
            }
            if (that.Editable) {
                //1、遍历子表中的单行，多行文本与当前高度比较（单选,多选，多人，关联多选，附件后期根据需要考虑）
                var fixedTr = that.$TableFCon.find("tr");
                that.$TableBody.find("tr[data-row]").each(
                    function (trindex) {
                        var height = [];
                        var StandardHeight = 32;
                        $(this).find("[data-controlkey]").each(function () {
                            var controlkey = $(this).attr("data-controlkey"),
                                control = $(this).JControl();
                            if (control.Editable) {
                                switch (controlkey) {
                                    case "FormTextBox":
                                        //标准高度32px
                                        if (!setAdapte) {
                                            var c = $(this).JControl(),
                                                h = that.rowHeight - 25 < StandardHeight ? StandardHeight : that.rowHeight - 25 > 110 ? 110 : that.rowHeight - 25;
                                            c.$Input.css({ "height": h + "px" });
                                        } else {
                                            var c = $(this).JControl(),
                                                h = c.$Input[0].scrollHeight,
                                                h = h < StandardHeight ? StandardHeight : h;
                                            height.push(h);
                                            c.$Input.css({ "height": (h - 5 < StandardHeight ? StandardHeight : h - 5) + "px" });
                                        }
                                        break;
                                    case "FormTextArea":
                                        if (!setAdapte) {
                                            var c = $(this).JControl();
                                            c.$Input.css({ "height": "auto" });
                                        } else {
                                            var c = $(this).JControl(),
                                                h = c.$Input[0].scrollHeight;
                                            height.push(h);
                                            c.$Input.css({ "height": h + "px" });
                                        }
                                        break;
                                }
                            } else {
                                height.push($(this).find("pre").height() + 25);
                            }
                        });
                        if (setAdapte) {
                            if (height.length > 0) {
                                var maxHeight = Math.max.apply({}, height);
                                $(this).height(maxHeight);
                            }
                        } else {
                            $(this).height(0);
                        }
                        var this_tr = this;
                        setTimeout(function () {
                            var h = $(this_tr).height();
                            $(fixedTr[trindex]).css({ "height": h + "px" });
                        }, 310);
                    })
            }
            else {
                var fixedTr = that.$TableFCon.find("tr");
                that.$TableBody.find("tr[data-row]").each(function (index) {
                    var h = $(this).height();
                    if (index == 0) h -= 1;
                    $(fixedTr[index]).css({ "height": h + "px" })
                });
            }
            if (that.timer) {
                clearInterval(that.timer);
            }
            var timesSum = 0;
            that.timer = window.setInterval(function () {
                timesSum++;
                //修正高度变化导致固定序号和子表行不一致
                var top = that.$TableCon.scrollTop();
                that.$TableFCon.scrollTop(top);
                if (timesSum > 10) {
                    window.clearInterval(that.timer);
                }
            }, 200);
        },
        //重置宽度
        AdapteWidth: function () {
            var that = this, col = 0;
            that.$Table.find("thead").find("tr th").each(function (index) {
                var width = that.colWidth[index];
                $(this).css({ "width": width + "px" });
                if ($(this).is(":visible")) {
                    col += width;
                }
            });
            that.$Table.width(col);
            that.ResizeColumn();
            that.AdapteHeight(true);
        },
        //action:hide隐藏，否则显示
        SetColumnVisible: function (datafield, action) {
            var that = this;
            that.rate = 0;
            if (that.$FixedHeader) {
                var $fixedTh = that.$FixedHeader.find("th[data-datafield='" + datafield + "']");
                var $th = that.$Table.find("th div[data-datafield='" + datafield + "']").parent("th");
                if ($fixedTh.length > 0 && $th.length > 0) {
                    if (action === "hide") {
                        if ($fixedTh.css("display") != "none") {
                            var width = that.$FixedHeader.width() - $fixedTh.outerWidth();
                            $fixedTh.hide();
                            that.$Table.find("tr td [data-datafield='" + datafield + "']").parent().hide();
                            $th.hide();
                            that.$FixedHeader.width(width);
                            that.$Table.width(width);
                            that.$TableContainer.width(width);
                            //width = that.$Table.width();
                            that.$TableScrollbar.width(width);
                        }
                    } else {
                        if ($fixedTh.css("display") == "none") {
                            $fixedTh.show();
                            var width = that.$FixedHeader.width();
                            that.$FixedHeader.width(width);
                            that.$Table.width(width);
                            that.$TableContainer.width(width);
                            that.$TableScrollbar.width(width);
                        }
                        that.$Table.find("tr td [data-datafield='" + datafield + "']").parent().show();
                        $th.show();
                    }
                }
            }
            else {
                var $th = that.$Table.find("thead").find("th[data-datafield='" + datafield + "']");
                action === "hide" ? $th.hide() : $th.show();
                var w = that.$Table.width();
                that.$TableScrollbar.width(w);
                that.ResetScroll();
            }
            that.timer && window.clearTimeout(that.timer);
            that.timer = setTimeout(function () {
                that.ResetScroll();
                that.AdapteHeight(true);
            }, 100);
        }
    });
})(jQuery);



;
//附件控件
(function ($) {

    $.fn.FormAttachment = function () {
        return $.ControlManager.Run.call(this, "FormAttachment", arguments);
    };

    // 构造函数
    $.Controls.FormAttachment = function (element, ptions, sheetInfo) {
        this.SheetAttachmentHandler = "/Form/SheetAttachmentAction/";
        //上传控件
        this.FileUpload = $("<input type='file' data-attachment='true' multiple='multiple' style='display:none;'/>");
        //文件数
        this.Files = 0;
        //新添加的
        this.AddAttachments = {};
        //删除数据库的
        this.RomveAttachments = [];
        //异步数据
        this.XHRJson = {};
        //数据模型编码
        this.SchemaCode = "";

        $.Controls.FormAttachment.Base.constructor.call(this, element, ptions, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormAttachment.Inherit($.Controls.BaseControl, {
        Render: function () {
            if (!this.Visible) { $(this.Element).hide(); return; }
            //图片类后缀
            this.ImageFileExtension = ['.jpeg', '.jpg', '.png', '.gif', '.bmp'];
            //文档
            this.DocFileExtension = ['.doc', '.docx','.ppt','.pptx','.xls','.xlsx','.pdf','.txt'];
            if (this.MaxUploadSize == 0) {
                this.MaxUploadSize = 10;
            }

            var sharingKey = $.IQuery("SharingKey");
            var engineCode = $.IQuery("EngineCode");

            this.SheetAttachmentHandler += "?SchemaCode=" + encodeURI(this.SchemaCode) + "&SharingKey=" + sharingKey + "&EngineCode=" + engineCode + "&MaxSize=" + this.MaxUploadSize + "&BizObjectId=" + $.SmartForm.ResponseContext.BizObjectId + "&FileID=";
            this.HtmlRender();
            //初始化数据
            this.InitValue();
        },

        SetValue: function () {
            $.IShowError("附件不支持SetValue");
        },

        ClearValue: function () {
            this.ClearFiles();
        },

        //初始化已上传文件
        InitValue: function () {
            if (this.Value) {
                //子表编辑时
                if (this.BizObjectId == void 0) {
                    this.BizObjectId = this.ResponseContext.BizObjectId;
                }

                for (var i = 0; i < this.Value.length; ++i) {
                    this.CreateFileElement2(this.Value[i].Code, this.Value[i].Name, this.Value[i].Size, this.Value[i].Url, this.Value[i].ThumbnailUrl, this.Value[i].Description);
                }
            }
        },
        // 数据验证
        Validate: function (actionName) {
            if (!this.Editable) return true;

            if (actionName != $.SmartForm.Action_Save && this.Required && this.Files < 1) {
                this.AddInvalidText(this.$ActionPanel, "必填");
                return false;
            }

            //如果是支持Html5的话，得判断是否已经上传完整，需要等待
            for (var key in this.AddAttachments) {
                if (this.AddAttachments[key].state == 0) {
                    this.AddInvalidText(this.$ActionPanel, "未上传完!");
                    return false;
                }
            }

            this.RemoveInvalidText(this.$ActionPanel);
            return true;
        },

        SaveDataField: function () {
            var result = {};
            if (!this.Visible) return result;
            result[this.DataField] = this.GetValue();
            return result;
        },

        GetValue: function () {
            var AttachmentIds = "";
            for (var key in this.AddAttachments) {
                if (this.AddAttachments[key].state == 1 && this.AddAttachments[key].AttachmentId) {
                    AttachmentIds += this.AddAttachments[key].AttachmentId + ";";
                }
            }

            var DelAttachmentIds = "";
            for (var i = 0; i < this.RomveAttachments.length; ++i) {
                DelAttachmentIds += this.RomveAttachments[i] + ";";
            }
            var result = {
                AttachmentIds: AttachmentIds,
                DelAttachmentIds: DelAttachmentIds
            };
            return result;
        },

        GetText: function () {
            return this.Files;
        },

        ClearFiles: function () {
            var that = this;
            this.UploadList.find("tr").each(function () {
                that.RemoveFile($(this).attr("id"));
            });
        },

        HtmlRender: function () {
            //设置宽度
            this.$Element = $(this.Element).addClass("SheetAttachment");

            //添加附件展示列表和按钮
            this.UploadList = $("<table class='table table-striped form-attachment-container' style='margin:0;min-height:0;width:100%;'></table>");
            this.$InputBody.append(this.UploadList);

            if (!this.Editable) return;
            this.$ActionPanel = $("<div class='btn btn-outline btn-lg' style='width:100%;'><i class='attach-plus'></i>点击或拖拽文件上传</div>");
            this.$InputBody.append(this.$ActionPanel);

            //添加上传控件
            this.$Element.append(this.FileUpload);
            this.$ActionPanel.off("click.FormAttachment").on("click.FormAttachment", this, function (e) {
                $.extend(this, e.data);
                if (this.$Element.data($.ControlManager.DataFieldKey.toLowerCase()) != this.DataField) return;
                this.FileUpload.click();
            });

            this.FileUpload.off("change.FileUpload").on("change.FileUpload", this, function (e) {
                e.data.AddFiles.apply(e.data, [this.files]);
                $(this).val("");
                var that = e.data;
                that.Required && that.$ActionPanel.css("box-shadow", "none");
                that.Required && that.RemoveInvalidText(that.$ActionPanel);
            });

            this.BindDrag();
        },

        //绑定拖拽上传事件
        BindDrag: function () {
            this.$ActionPanel.on({
                dragenter: function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                },
                dragleave: function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                },
                dragover: function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                }
            });

            var that = this;
            this.$ActionPanel[0].addEventListener("drop", function (e) {
                e.stopPropagation();
                e.preventDefault();//取消默认浏览器拖拽效果
                var files = e.dataTransfer.files;
                that.AddFiles.apply(that, [files]);
            }, false);
        },

        //添加文件
        AddFiles: function (files) {
            this.OnChange.apply(this, [files]);

            for (var i = 0; i < files.length; i++) {
                var fileid = $.IGuid();
                if (this.CreateFileElement2(fileid, files[i].name, files[i].size)) {
                    //需要添加的附件
                    this.AddAttachments[fileid] = {
                        fileid: fileid,
                        file: files[i],
                        xhr: new XMLHttpRequest(),
                        state: 0//0:未上传完，1:已上传完,100:失败
                    };
                    this.UploadFile(fileid);
                }
            }
        },

        CreateFileElement2: function (fileid, name, size, url, thumb, description) {
            if (description == null || description == void 0) {
                description = '';
            }
            //获取文件后缀名
            var fileName = name;
            var fileType = "";
            if (fileName.lastIndexOf(".") > 0) {
                fileName = name.substring(0, name.lastIndexOf("."));
                fileType = name.substring(name.lastIndexOf("."), name.length);
                if (fileType) {
                    fileType = fileType.toLowerCase();
                }
            }
            //判断文件是否大小超限
            if (url == void 0) {
                var mbSize = Math.round(size * 100 / (1024 * 1024)) / 100;
                if (size == 0) {
                    $.IShowWarn('提示', '文件大小不能为0');
                    return;
                } else if (size > 1024 * 1024) {
                    if (mbSize > this.MaxUploadSize || size > this.MaxUploadSize * 1024 * 1024) {
                        $.IShowWarn('提示', '超出限制文件上传的大小');
                        return;
                    }
                }
            }
            var fileSizeStr = 0;
            if (size > 1024 * 1024)
                fileSizeStr = (Math.round(size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
            else
                fileSizeStr = (Math.round(size * 100 / 1024) / 100).toString() + 'KB';
            var fileSize = $("<td  data-filesize='" + fileid + "'><span data-filerate='" + fileid + "'>上传中,请稍候...</span> (" + fileSizeStr + ")</td>").addClass("text-info");

            var actionTd = $("<td  data-action='" + fileid + "' class=\"printHidden\"></td>");

            var actionStr = $("<a href='javascript:void(0);' class='icon-delete'>删除</a>");
            if (this.Editable) {
                actionStr.off("click.fileDeleteBtn").on("click.fileDeleteBtn", this, function (e) {
                    if (confirm("确定删除?")) {
                        e.data.OnChange.apply(e.data, [$(this).closest("tr").attr("id")]);
                        e.data.RemoveFile.apply(e.data, [$(this).closest("tr").attr("id")]);
                    }
                });
            }
            else {
                actionStr.hide();
            }

            //标志是否能上传
            var flag = true;

            var isImg = $.inArray(fileType, this.ImageFileExtension) > -1;// imgTypeArr.indexOf(fileType) > -1;//判断是否是图片
            var isDoc = $.inArray(fileType, this.DocFileExtension) > -1;//判断是否是文档
            if (url == void 0) {
                //判断文件大小 
                var mbSize = Math.round(size * 100 / (1024 * 1024)) / 100;
                if (size > 1024 * 1024 && mbSize > this.MaxUploadSize) {
                    flag = false;
                    fileSize = $("<td data-filesize='" + fileid + "'><span data-filerate='" + fileid + "'  style='color:red;'>超出限制文件上传的大小</span> (" + fileSizeStr + ")</td>").addClass("text-info");
                }
            } else if (!$.SmartForm.ResponseContext.IsCreateMode) {
                actionTd.append("<a href='" + url + "' class='fa fa-download' target='_blank' UC=true>下载</a>");
                actionTd.append("&nbsp;&nbsp;");
                if (isImg || isDoc)
                    actionTd/*.append("<a href='/Form/Preview/?attachmentId=" + fileid + "' class='fa fa-eye' target='_blank' UC=true>查看</a>")*/.append("<a href='/Form/DoPreview/?attachmentId=" + fileid + "' class='fa fa-eye' target='_blank' UC=true>预览</a>");
                fileSize = $("<td data-filesize='" + fileid + "' class='text-info'>" + fileSizeStr + "</td>");//.addClass("text-info");
            }

            var trRow_description = $("<tr data-targetid='" + fileid + "'></tr>");//.attr("data-targetid", fileid);
            var trRow = $("<tr id='" + fileid + "'></tr>");//.attr("id", fileid);
            if (url == void 0) {
                if (description == null || description == void 0 || $.trim(description).length == 0) {
                    trRow.append("<td style='padding-left:10px !important;'><div class='LongWord' title='" + name + "' id='" + fileid + "'>" + name + "</div></td>");
                    trRow_description.append("<td colspan='2'style='padding:8px 10px !important' ><input disabled='disabled'  class='form-control description-file' id='" + fileid + "' placeholder='请输入附件描述' type='text' maxlength='200' value=''/></td><td style='text-align:center;padding:12px 10px !important;'><a  disabled='disabled' class='icon-save saveDec disabled'>保存</a><a  class='icon-bianji editDec'>编辑</a></td>");
                } else {
                    trRow.append("<td style='padding-left:10px !important;' ><div class='LongWord' title='" + name + "' id='" + fileid + "'>" + name + "</div></td>");
                    trRow_description.append("<td colspan='2'style='padding:8px 10px !important' ><input disabled='disabled'  class='form-control description-file' id='" + fileid + "' placeholder='请输入附件描述' type='text' maxlength='200' value='" + description + "'/></td><td style='text-align:center;padding:12px 10px !important'><a  disabled='disabled' class='icon-save saveDec disabled'>保存</a><a class='icon-bianji editDec'>编辑</a></td>");
                }
            }
            if (url != void 0) {
                trRow.append("<td style='padding-left:10px !important;'><a href='" + url + "' data-imgurl='" + thumb + "' target='_blank' UC=true><div class='LongWord'>" + name + "</div></a></td>");
                trRow_description.append("<td colspan='2' ><div class='description'>" + description + "</div></td><td></td>");
                if (isImg && !this.Editable) { //如果是图片则展示缩略图                  
                    var td_thumb = trRow.find('a');
                    $.Ipreview($(td_thumb));
                }
            }
            trRow.append(fileSize.css("text-align", "right"));
            trRow.append(actionTd.append(actionStr).css("text-align", "center"));
            this.UploadList.append(trRow);
            //if (description != null && $.trim(description).length > 0) {
            this.UploadList.append(trRow_description);
            //}
            if (isImg && !this.Editable) { //如果是图片则展示缩略图              
                $(function () { $.Ipreview($("div[id=" + fileid + "]")); });
            }

            if (flag) {
                this.Files++;
            }

            if (this.$InputBody.hasClass("col-sm-10")) {
                trRow.find(".LongWord").css({ "max-width": "400px" });
            }
            else {
                trRow.find(".LongWord").css({ "max-width": "150px" });
            }
            if (!this.Editable) {
                trRow_description.find('a.saveDec').remove();
                trRow_description.find('input').attr('readonly', 'readonly').css({ 'border': 'none', 'outline': 'none' });
                //不可编辑+子表   description=="" 隐藏
                if (this.$InputBody.parent().parent()[0] && this.$InputBody.parent().parent()[0].tagName == "TD") {
                    if (description == '') {
                        trRow_description.hide();
                    }                    
                }
            } else {
            }
            //关联附件保存描述
            $("a.saveDec").off("click").on("click", function () {
                if ($(this).attr("disabled")) {
                    return;
                }
                $(this).hide();
                var $input = $(this).parent().parent().find("input");
                var FileDec = $input.val();
                if (FileDec.length > 200) { $.IShowError('描述长度不能超过200个字符!'); return; }
                if (FileDec.indexOf('<') > -1 && FileDec.indexOf('>') > -1) {
                    FileDec = FileDec.replace(/</g, '&lt;').replace(/>/g, '&gt;');
                }
                if (FileDec == "") { $.IShowWarn("请输入描述"); $(this).show(); return; }
                var attachmentId = $(this).parent().parent().children(':first').find('div').attr('data-attachementid');
                if (attachmentId == void 0) {
                    attachmentId = $(this).parent().parent().children(':first').find('input').attr('id');
                }
                var params = {
                    ActionName: "UpdateFileDesc",
                    FileId: attachmentId,
                    FileDec: FileDec
                };
                $btn_saveDec = $(this);
                $.get("/Form/OnAction/", { PostData: JSON.stringify(params) }, function (data) {
                    if (data.Successful) {
                        $.IShowSuccess("保存附件描述成功");
                        $input.css({ 'border': 'none', 'color': '#333' }).attr('disabled', 'disabled');
                        $btn_saveDec.next().show();
                    } else {
                        $btn_saveDec.show();
                        $.IShowError("保存附件描述失败");
                    }
                })
            });
            $('a.editDec').off('click').on('click', function () {
                var $input = $(this).parent().parent().find('input');
                $input.removeAttr('disabled').css({ 'border': '1px solid #d7d5d5' });
                $(this).hide();
                $(this).prev().show();
            });
            return flag;
        },
        /*
        创建上传元素
        有url就是已经上传的控件，不需要判断size 大小 
        */
        CreateFileElement: function (fileid, name, size, url, thumb, description) {
            if (description == null || description == void 0) {
                description = '';
            }
            var fileName = name;
            var fileType = "";
            if (fileName.lastIndexOf(".") > 0) {
                fileName = name.substring(0, name.lastIndexOf("."));
                fileType = name.substring(name.lastIndexOf("."), name.length);
                if (fileType) {
                    fileType = fileType.toLowerCase();
                }
            }
            if (url == void 0) {
                var mbSize = Math.round(size * 100 / (1024 * 1024)) / 100;
                if (size == 0) {
                    $.IShowWarn('提示', '文件大小不能为0');
                    return;
                } else if (size > 1024 * 1024) {
                    if (mbSize > this.MaxUploadSize) {
                        $.IShowWarn('提示', '超出限制文件上传的大小');
                        return;
                    }
                }
            }

            var fileSizeStr = 0;
            if (size > 1024 * 1024)
                fileSizeStr = (Math.round(size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
            else
                fileSizeStr = (Math.round(size * 100 / 1024) / 100).toString() + 'KB';
            var fileSize = $("<td data-filesize='" + fileid + "'><span data-filerate='" + fileid + "'>上传中,请稍候...</span> (" + fileSizeStr + ")</td>").addClass("text-info");

            var actionTd = $("<td data-action='" + fileid + "' class=\"printHidden\"></td>");

            var actionStr = $("<a href='javascript:void(0);' class='fa fa-minus'>删除</a>");
            if (this.Editable) {
                actionStr.off("click.fileDeleteBtn").on("click.fileDeleteBtn", this, function (e) {
                    if (confirm("确定删除?")) {
                        e.data.OnChange.apply(e.data, [$(this).closest("tr").attr("id")]);
                        e.data.RemoveFile.apply(e.data, [$(this).closest("tr").attr("id")]);
                    }
                });
            } else {
                actionStr.hide();
            }


            //标志是否能上传
            var flag = true;

            var isImg = $.inArray(fileType, this.ImageFileExtension);//imgTypeArr.indexOf(fileType) > -1;//判断是否是图片
            if (url == void 0) {
                //判断文件大小 
                var mbSize = Math.round(size * 100 / (1024 * 1024)) / 100;
                if (size > 1024 * 1024 && mbSize > this.MaxUploadSize) {
                    flag = false;
                    fileSize = $("<td data-filesize='" + fileid + "'><span data-filerate='" + fileid + "'  style='color:red;'>超出限制文件上传的大小</span> (" + fileSizeStr + ")</td>").addClass("text-info");
                }
            } else {
                actionTd.append($("<a href='" + url + "' class='fa fa-download' target='_blank' UC=true>下载</a>"));
                actionTd.append("&nbsp;&nbsp;");
                fileSize = $("<td data-filesize='" + fileid + "' class='text-info'>" + fileSizeStr + "</td>");//.addClass("text-info");
            }
            var trRow = $("<tr id='" + fileid + "'></tr>");//.attr("id", fileid);
            if (url == void 0) {
                if (description == null || description == void 0 || $.trim(description).length == 0) {
                    trRow.append("<td style='padding-left:10px !important;'><div class='LongWord' title='" + name + "' id='" + fileid + "'>" + name + "</div></td><td><input style='border:1px solid #d7d5d5;border-radius:3px;outline:none;' class='form-control' id='" + fileid + "' placeholder='请输入附件描述' type='text' maxlength='200' value=''/></td><td><a class='icon-save saveDec'>保存</a><a class='icon-bianji editDec'>编辑</a></td>");
                } else {
                    trRow.append("<td style='padding-left:10px !important;'><div class='LongWord' title='" + name + "' id='" + fileid + "'>" + name + "</div></td><td><input style='border:1px solid #d7d5d5;border-radius:3px;outline:none;' class='form-control' id='" + fileid + "' placeholder='请输入附件描述' type='text' maxlength='200' value='" + description + "'/></td><td><a class='icon-save saveDec'>保存</a><a class='icon-bianji editDec'>编辑</a></td>");
                }
            }
            if (url != void 0) {
                trRow.append("<td style='padding-left:10px !important;'><a href='" + url + "' data-imgurl='" + thumb + "' target='_blank' UC=true><div class='LongWord'>" + name + "</div></a></td><td><div>" + description + "</div></td>");
                if (isImg && !this.Editable) { //如果是图片则展示缩略图                  
                    var td_thumb = trRow.find('a');
                    $.Ipreview($(td_thumb));
                }
            }
            trRow.append(fileSize.css("text-align", "right"));
            trRow.append(actionTd.append(actionStr).css("text-align", "center"));
            this.UploadList.append(trRow);
            if (isImg && !this.Editable) { //如果是图片则展示缩略图              
                $(function () { $.Ipreview($("div[id=" + fileid + "]")); });
            }

            if (flag) {
                this.Files++;
            }

            if (this.$InputBody.hasClass("col-sm-10")) {
                trRow.find(".LongWord").css({ "max-width": "400px" });
            } else {
                trRow.find(".LongWord").css({ "max-width": "150px" });
            }
            if (!this.Editable) {
                //非编辑模式按照以下比例设置宽度
                var cell = trRow.find('td');
                for (var i = 0; i < cell.length; i++) {
                    if (i == 0) $(cell).eq(0).css('width', '30%');
                    if (i == 1) $(cell).eq(1).css('width', '40%');
                    if (i == 2) $(cell).eq(2).css('width', '20%');
                    if (i == 3) $(cell).eq(3).css('width', '10%');
                }
            } else {
                //编辑模式附件名列宽度
                var cell = trRow.find('td');
                cell.eq(0).css('width', '200px');
                cell.eq(2).css('width', '100px');
                cell.eq(4).css('width', '100px');
            }
            //关联附件保存描述
            $("a.saveDec").off("click").on("click", function () {
                $(this).hide();
                var $input = $(this).parent().parent().find("input");
                var FileDec = $input.val();
                if (FileDec.length > 200) { $.IShowError('描述长度不能超过200个字符!'); return; }
                if (FileDec.indexOf('<') > -1 && FileDec.indexOf('>') > -1) {
                    //FileDec=FileDec.replace()
                    FileDec = FileDec.replace(/</g, '&lt;').replace(/>/g, '&gt;');
                }
                if (FileDec == "") { $.IShowWarn("请输入描述"); $(this).show(); return; }
                var attachmentId = $(this).parent().parent().children(':first').find('div').attr('data-attachementid');
                if (attachmentId == void 0) {
                    attachmentId = $(this).parent().parent().children(':first').find('div').attr('id');
                }
                var params = {
                    ActionName: "UpdateFileDesc",
                    FileId: attachmentId,
                    FileDec: FileDec
                };
                var $btn_saveDec = $(this);
                $.get("/Form/OnAction/", { PostData: JSON.stringify(params) }, function (data) {
                    if (data.Successful) {
                        $.IShowSuccess("保存附件描述成功");
                        $input.css({ 'border': 'none', 'color': '#333' }).attr('disabled', 'disabled');
                        $btn_saveDec.next().show();
                    } else {
                        $btn_saveDec.show();
                        $.IShowError("保存附件描述失败");
                    }
                })
            });
            $('a.editDec').off('click').on('click', function () {
                var $input = $(this).parent().parent().find('input');
                $input.removeAttr('disabled').css({ 'border': '1px solid #d7d5d5' });
                $(this).hide();
                $(this).prev().show();
            });
            return flag;
        },

        //上传
        UploadFile: function (fileid) {
            if (this.AddAttachments[fileid] == null && this.AddAttachments[fileid].state != 0) return;
            var fd = new FormData();
            fd.append('fileToUpload', this.AddAttachments[fileid].file);
            var xhr = this.AddAttachments[fileid].xhr;

            xhr.context = this;
            xhr.upload.fileid = fileid;
            xhr.abort.fileid = fileid;
            xhr.upload.addEventListener('progress', this.UploadProgress, false);
            xhr.fileid = fileid;
            xhr.addEventListener('load', this.UploadComplete, false);
            xhr.addEventListener('error', this.UploadFailed, false);
            xhr.addEventListener('abort', this.UploadCanceled, false);
            xhr.open('POST', this.SheetAttachmentHandler + fileid);
            xhr.send(fd);
        },

        UploadProgress: function (evt) {
            if (evt.lengthComputable) {
                var percentComplete = Math.round(evt.loaded * 100 / evt.total);
                /*
                 * 在上传大文件的时候，在后台处理的时间会比较久
                 * 先只将上传进度显示为99%，在UploadComplete里改为100%
                 */
                percentComplete = percentComplete === 100 ? 99 : percentComplete;
                $("span[data-filerate='" + evt.currentTarget.fileid + "']").html(percentComplete + "%");
            }
            else {
                this.context.AddAttachments[evt.currentTarget.fileid].state = 100;
                $("span[data-filerate='" + evt.currentTarget.fileid + "']").css("color", "red").html('上传失败');
            }
        },

        UploadComplete: function (evt) {
            if (evt.target.status == 200) {
                var resultObj = eval('(' + evt.target.responseText + ')');
                var fileid = resultObj.FileId;
                if (resultObj.State == 4) {
                    $("tr[id=" + fileid + "]").remove();
                    $("tr[data-targetid=" + fileid + "]").remove();
                    $.IShowWarn(resultObj.ResultStr);
                    return;
                }
                var fileid = resultObj.FileId;
                $("#describle").val("");
                this.context.AddAttachments[fileid].state = 1;
                this.context.AddAttachments[fileid].AttachmentId = resultObj.AttachmentId;
                $("div[id=" + fileid + "]").attr({ "data-imgurl": resultObj.ThumbnailUrl, 'data-attachementId': resultObj.AttachmentId });
                $("td[data-action='" + fileid + "']").prepend("&nbsp;&nbsp;");
                /*
                 *在Complete事件里将上传进度赋值为100%
                 */
                $("span[data-filerate='" + fileid + "']").html("100%");
                $("input.description-file").removeAttr("disabled");
                $("a.saveDec.disabled").removeClass("disabled");
                $("a.saveDec").off("click").on("click", function () {
                    $(this).hide();
                    var $input = $(this).parent().parent().find("input");
                    var FileDec = $input.val();
                    if (FileDec.length > 200) { $.IShowError('描述长度不能超过200个字符!'); return; }
                    if (FileDec.indexOf('<') > -1 && FileDec.indexOf('>') > -1) {
                        FileDec = FileDec.replace(/</g, '&lt;').replace(/>/g, '&gt;');
                    }
                    if (FileDec == "") { $.IShowWarn("请输入描述"); $(this).show(); return; }
                    //var attachmentId = $(this).parent().parent().children(':first').find('div').attr('data-attachementid');
                    var attachmentId = $(this).parent().parent().prev().find('div').attr('data-attachementid');
                    var params = {
                        ActionName: "UpdateFileDesc",
                        FileId: attachmentId,
                        FileDec: FileDec
                    };
                    var $btn_saveDec = $(this);
                    $.get("/Form/OnAction/", { PostData: JSON.stringify(params) }, function (data) {
                        if (data.Successful) {
                            $.IShowSuccess("保存附件描述成功");
                            $input.css({ 'border': 'none', 'color': '#333' }).attr('disabled', 'disabled');
                            $btn_saveDec.next().show();
                        } else {
                            $btn_saveDec.show();
                            $.IShowError("更新文件描述失败");
                        }
                    })
                });
                $('a.editDec').off('click').on('click', function () {
                    var $input = $(this).parent().parent().find('input');
                    $input.removeAttr('disabled').css({ 'border': '1px solid #d7d5d5' });
                    $(this).hide();
                    $(this).prev().show();
                });
            }
            else {
                this.context.UploadFailed(evt);
            }
            this.context.OnChange.apply(this.context, []);
        },

        UploadFailed: function (evt) {
            this.AddAttachments[evt.currentTarget.fileid].state = 100;
            $("span[data-filerate='" + evt.currentTarget.fileid + "']").html('上传失败');
        },

        UploadCanceled: function () {
        },

        RemoveFile: function (fileID) {
            $("#" + fileID).remove();
            $("[data-targetid='" + fileID + "']").remove();

            this.Files--;
            if (this.AddAttachments[fileID]) {
                if (this.AddAttachments[fileID].xhr) {
                    this.AddAttachments[fileID].xhr.abort();
                }
                delete this.AddAttachments[fileID];
            }
            else {
                this.RomveAttachments.push(fileID);
            }
            this.Validate();
            this.OnChange(this, []);
        },

        // 关联查询附加附件
        AppendFile: function (fileId, attachmentId, fileName, fileSize, thumb, description, url) {
            this.AddAttachments[fileId] = {
                fileid: fileId,
                state: 1,
                AttachmentId: attachmentId
            };
            this.CreateFileElement2(fileId, fileName, fileSize, url, thumb, description);
            $("span[data-filerate='" + fileId + "']").html("100%");
        },
        SetReadonly: function (v) {
            if (v) {
                this.$ActionPanel.attr("disabled","disabled");
            } else {
                this.$ActionPanel.removeAttr("disabled");
            }
        }
    });
})(jQuery);;
// SheetComment控件
(function ($) {
    //控件执行
    $.fn.FormComment = function () {
        return $.ControlManager.Run.call(this, "FormComment", arguments);
    };

    $.Controls.FormComment = function (element, options, sheetInfo) {
        $.Controls.FormComment.Base.constructor.call(this, element, options, sheetInfo);
    };

    $.Controls.FormComment.Inherit($.Controls.BaseControl, {
        Render: function () {
            this.Value = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            this.CommentValue = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            //非结束状态
            this.Editable = this.ResponseContext.WorkItemType == 2 && this.ResponseContext.FormMode == 0;
            //if(this.ResponseContext.WorkItemId)
            if (this.ResponseContext.WorkItems && this.ResponseContext.WorkItemId) {
                var id = this.ResponseContext.WorkItemId;
                var workitem = this.ResponseContext.WorkItems.filter(function (item) { return item.WorkItemId == id; });
                if (workitem && workitem.length > 0) {
                    this.WorkItem = workitem[0];
                    this.Editable = (workitem[0].State == 0 || workitem[0].State == 1);

                }
            }
            $(this.Element).addClass("SheetComment form-comment");
            // 设置固定标题栏
            this.$Title.html("<div style='border-bottom:1px solid #e3e7e9;'>审批记录</div>");
            //历史评论
            this.InitHistoryComment();
            //评论输入
            this.InitCommentInput();
        },

        // 数据验证
        Validate: function (effective, initValid) {
            return true;
        },

        GetValue: function () {
            return $(this.CommentInput).val() == null ? "" : $(this.CommentInput).val();
        },
        //返回原始的comment数据
        GetCommentValue: function () {
            return this.CommentValue;
        },
        //返回数据值
        SaveDataField: function () {
            var result = {};
            var oldResult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldResult) {
                return {};
            }

            var IsNewComment = false;
            if (this.MyComment == void 0) {
                if (this.GetValue() == null || this.GetValue().trim().length == 0)//解决每次点击暂存/同意/不同意时候审批意见闪现的"不同意"
                    return {};
                this.MyComment = {
                    CommentId: $.IGuid(),
                    UserName: "我的意见",
                    DateStr: new Date().toString(),
                    Text: this.GetValue(),
                    Avatar: "/Content/img/a0.jpg"
                };
                IsNewComment = true;
            } else if (this.MyComment.Text == this.GetValue()) {
                return {};
            } else {
                $("#" + this.MyComment.CommentId).find("div.comment-text").html(this.GetValue());
            }

            //添加校验，如果值没变，就不会需要提交
            result = {
                CommentId: this.MyComment.CommentId,
                Text: this.GetValue(),
                IsNewComment: IsNewComment
            };
            return result;
        },

        //历史评论
        InitHistoryComment: function () {
            if (this.Value != null && this.Value != null) {
                for (var i = 0; i < this.Value.length; i++) {
                    if (this.LastestCommentOnly && i < this.Value.length - 1) continue;
                    var commentObject = this.Value[i];
                    if (commentObject.IsMyComment) {
                        this.MyComment = commentObject;
                        this.MyComment.UserName = "我的评论";
                    }
                    if (commentObject != void 0)
                        this.AddCommentItem(commentObject);
                }
            } else if (!this.Editable) {
                $(this.Element).hide();
            }
        },

        //添加评论
        AddCommentItem: function (commentObject) {
            if (this.PanelBody == void 0) {
                var CommentsPanel = $("<div class='widget-comments bordered'></div>");
                this.PanelBody = $("<div class='panel-body' style='padding:5px 5px;'></div>");
                CommentsPanel.append(this.PanelBody);//历史审批容器
                $(this.$InputBody).prepend(CommentsPanel);
            }
            var commentItem = $("<div class='comment' style='display:flex;align-items:flex-start;' id='" + commentObject.CommentId + "'></div>");
            //TODO 替换图标
            var avatar = null;
            if (commentObject.Approval) {
                //avatar = $("<img src='/Content/Images/approve.png' class='img-circle'></img>");
                avatar = $("<span class='approve'>通过</span>");
            }
            else {
                if (this.WorkItem && this.Editable) {
                    if (this.WorkItem.TokenId == commentObject.TokenId && this.WorkItem.Participant == commentObject.UserID) {
                        avatar = $("<span class='disapprove'>暂存</span>");
                    } else {
                        avatar = $("<span class='disapprove'>不通过</span>");
                    }
                }else{
                    avatar = $("<span class='disapprove'>不通过</span>");
                }
                //avatar = $("<img src='/Content/Images/disapprove.png' class='img-circle'></img>");
               
            }
            var commentBody = $("<div class='comment-body'></div>")
            var userName = commentObject.UserName;
            if (this.OUNameVisible && commentObject.UserParentName != void 0) {
                userName = commentObject.OUName + "." + userName;
            }

            if (commentObject.DelegantName) {
                userName += "(委托" + commentObject.DelegantName + ")";
            }
            var commenby = $("<div class='comment-by'><a href='javascript:void(0)'>" + userName + "</a> </div>")
            if (commentObject.Activity) {
                commenby.append("[<a href='javascript:void(0)'>" + commentObject.ActivityDisplayName + "</a>]");
            }
            var commenttext = $("<div class='comment-text'></div>");
            var text = commentObject.Text || "";
            if (text == "") {
                text = commentObject.Approval ? "同意" : "不同意";
            }
            commenttext.append(text);

            //审批时间
            var dateStr = "";
            var modifiedTime = commentObject.ModifiedTime.replace('T', ' ');

            var modifyData = modifiedTime.indexOf("/Date(") > -1 ? eval("new " + modifiedTime.replace(/\//g, "")) : new Date(modifiedTime);
            var today = new Date();
            if (modifyData.getYear() == today.getYear()
                && modifyData.getMonth() == today.getMonth()
                && modifyData.getDate() == today.getDate()) {
                dateStr = "今天 " + this.formatDate(modifyData.getHours()) + ":" + this.formatDate(modifyData.getMinutes());
            }
            else {
                dateStr = modifiedTime;
            }
            commenby.append("<span style='padding-left:20px;'>" + dateStr + "</span>");

            commentBody.append(commenby);
            commentBody.append(commenttext);
            commentItem.append(avatar);
            commentItem.append(commentBody);
            commentItem.append("<div class='clear'>");

            this.PanelBody.append(commentItem);
        },
        formatDate: function (v) {
            return v < 10 ? "0" + v : v;
        },

        //评论输入
        InitCommentInput: function () {
            if (!this.Editable) return;
            if ($.SmartForm.ResponseContext.WorkItemType != 2) return;
            var InputPanel = $("<div></div>");
            this.CommentInput = $("<textarea/ style='width: 100%; padding:6px'></textarea>");
            if (this.MyComment) {
                this.CommentInput.val("");
            }else {//默认评论
                this.CommentInput.val(this.DefaultComment);
            }
            InputPanel.append(this.CommentInput);
            $(this.$InputBody).append(InputPanel);

            //值改变事件
            $(this.CommentInput).off("change.CommentInput").on("change.CommentInput", this, function (e) {
                e.data.Validate.apply(e.data);
            });
        }
    });
})(jQuery);;
(function ($) {
    $.fn.FormNumber = function () {
        return $.ControlManager.Run.call(this, "FormNumber", arguments);
    };

    // 构造函数
    $.Controls.FormNumber = function (element, options, sheetInfo) {
        $.Controls.FormNumber.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormNumber.Inherit($.Controls.BaseControl, {
        NumberMode: {
            Normal: 0,
            Kbit: 1
        },
        //控件渲染函数
        Render: function () {
            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }

            //是否在子表里面
            this.IsInGridView = !$.isEmptyObject(this.ObjectId);

            //整数最大长度，超过21位的话，就会变成科学计数法
            this.IntegerMaxLength = 15;
            //小数最大长度，超过5位的话，就会变成科学计数法
            this.DecimalMaxLength = 5;

            //渲染Html页面
            this.HtmlRender();
            //渲染校验模式
            this.ModeRender();
            //绑定事件
            this.BindEvent();

            if ($.isNumeric(this.Value)) {
                this.SetValue(this.Value);
            }
            //设置placeholder
            if (this.PlaceHolder) {
                this.SetPlaceHolder(this.PlaceHolder);
            }
            // 不可编辑
            if (!this.Editable) {
                this.SetReadonly(true);
                return;
            }
        },

        //渲染html内容
        HtmlRender: function () {
            if (!this.Editable) {
                this.$Input = $("<pre style='border:none;'>");
            }
            else {
                var placeHolder = 0;
                placeHolder = placeHolder.toFixed(this.DecimalPlaces) + '';
                this.$Input = $("<input type='text' name = '" + this.DataField + "' class='form-control' placeholder='" + placeHolder + "'>");
            }
            if (this.IsInGridView) {
                //子表中为了防止显示不全，往左偏移一点
                //this.$Input.css("margin-right", "-4px");
                this.$Input.css("padding-right", "4px");
            }
            this.$InputBody.append(this.$Input);
        },

        ModeRender: function () {
            this.Expression = /^-{0,1}[0-9]+\.{0,1}[0-9]*$/;
            this.ErrorAlert = "请输入数字!";
        },

        //绑定事件
        BindEvent: function () {
            //$(this.$Input).unbind("keypress.FormNumber").bind("keypress.FormNumber", this, function (event) {
            //    //var that = event.data;
            //    //var eventObj = event || e;
            //    //var keyCode = eventObj.keyCode || eventObj.which;
            //    //return keyCode >= 48 && keyCode <= 57 || keyCode == 46;
            //});

            this.$Input.off("change.FormNumber").on("change.FormNumber", this, function (event) {
                var $this = $(this);
                var that = event.data;
                that.ValChange.apply(that);
                that.Required && ($this.val() != "" && $this.removeAttr("style"));
            });
            //值改变的时候触发事件，快速响应change事件。主要在有计算情况下
            this.$Input.off("input.SheetTextBox propertyChange.SheetTextBox").on("input.SheetTextBox propertyChange.SheetTextBox", this, function (event) {
                var that = event.data;
                //that.ValChange.apply(that);
                that.OnChange();
                //that.Validate();
            });
        },

        //值改变
        ValChange: function () {
            var vStr = this.GetValue();
            if ($.isNumeric(vStr)) {
                vStr += '';
                if (vStr.indexOf(".") > -1) {
                    if (vStr.split('.')[0].length > this.IntegerMaxLength) {
                        vStr = vStr.split('.')[0].substring(0, this.IntegerMaxLength) + "." + vStr.split('.')[1];
                    }
                }
                else if (vStr.length > this.IntegerMaxLength) {
                    vStr = vStr.substring(0, this.IntegerMaxLength);
                }

                if ($.isNumeric(this.DecimalPlaces)) {
                    //直接用tofixed会出现四舍五入的情况
                    if (vStr.indexOf(".") > -1) {
                        var decimalLength = vStr.split(".")[1].length;
                        var v = parseFloat(vStr).toFixed(this.DecimalPlaces);
                        vStr = v + "";

                        if (decimalLength <= this.DecimalPlaces)
                            v = parseFloat(vStr).toFixed(this.DecimalPlaces);
                        else {
                            var integer = vStr.split(".")[0];
                            var decimal = vStr.split(".")[1] || "";

                            decimal = decimal.substring(0, this.DecimalPlaces);
                            if (decimal == '') {
                                v = integer;
                            } else {
                                v = integer + "." + decimal;
                            }
                        }
                    } else {
                        v = parseFloat(vStr).toFixed(this.DecimalPlaces);
                    }
                } else {
                    //如果小数位数不正确，则设置为默认0
                    v = parseFloat(vStr).toFixed(0);
                }
                if (this.ShowMode == this.NumberMode.Kbit) {
                    v = $.IToKbit(v);
                }
                this.$Input.val(v);
            }
            else {
                this.$Input.val("");
            }
            this.OnChange();
            this.Validate();
        },

        //设置值
        SetValue: function (v) {
            if (v == null) return;
            if (v === "" && this.GetValue() === "") return;
            if (this.GetValue() != "" && this.GetValue() == v) return;
            if (!$.isNumeric(v)) {
                v = "";
            }

            if (!this.Visible) {
                this.Value = v;
                return;
            }

            if (!this.Editable) {
                if ($.isNumeric(this.DecimalPlaces) && v != "") {
                    v = parseFloat(v).toFixed(this.DecimalPlaces);
                }
                if (this.ShowMode == this.NumberMode.Kbit)
                    v = $.IToKbit(v);
                this.$Input.text(v);
            }
            else {
                if (this.ShowMode == this.NumberMode.Kbit)
                    v = $.IToKbit(v);
                $(this.$Input).val(v);
            }
            this.ValChange();
        },

        //设置placeholder add:20160408
        SetPlaceHolder: function (ph) {
            if (this.Editable && this.ResponseContext.IsCreateMode) {
                this.PlaceHolder = ph.toString();//.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.$Input.attr("placeholder", this.PlaceHolder);
            }
        },

        GetText: function () {
            return this.GetValue() + "";
        },

        GetValue: function () {
            if (!this.Visible) {
                if (this.Value == null/* || isNaN(this.Value)*/) {
                    return "";
                } else if (isNaN(this.Value)) {
                    if (this.ShowMode == 0) {
                        var val = this.Value.replace(/,/gi, '');
                        if (isNaN(val))
                            return "";
                        else
                            return val;
                    }
                    return "";
                }
                return this.Value;
            }
            if (!this.Editable) {
                //预防显示规则冲突
                if (this.$Input != null) {
                    var val = this.$Input.text();
                    if (this.ShowMode == this.NumberMode.Kbit)
                        val = val.replace(/,/gi, '');
                    return val;
                }
                return "";
            }
            else {
                if (this.$Input != null) {
                    var val = this.$Input.val();
                    if (this.ShowMode == this.NumberMode.Kbit)
                        val = val.replace(/,/gi, '');
                    return val;
                }
                return "";
            }
        },

        //设置只读
        SetReadonly: function (v) {
            if (v) {
                this.$Input.prop("readonly", "readonly");
            }

            else {
                this.$Input.removeProp("readonly");
            }
        },

        // 数据验证
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && val.trim() == "") {
                this.AddInvalidText(this.$Input, "必填");
                return false;
            }
            val += '';
            if (val.trim() != "" && this.Expression && !this.Expression.test(val)) {
                this.AddInvalidText(this.$Input, this.ErrorAlert);
                return false;
            }

            this.RemoveInvalidText(this.$Input);
            return true;
        },

        //返回数据值
        SaveDataField: function () {
            var result = {
            };
            if (this.ComputationRule == null && !this.Visible) return result;
            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldresult) {
                return {
                };
            }

            if (("" + oldresult.Value) != this.GetValue()) {
                if (this.GetValue() == null) {
                    result[this.DataField] = "";
                } else {
                    var getValueResult = this.GetValue() + "";
                    result[this.DataField] = getValueResult.trim();
                }
                return result;
            }

            return {
            };
        },

        GetNum: function () {
            var v = this.GetValue();
            if ($.isNumeric(v)) {
                return parseFloat(v);
            }
            else {
                return 0.0;
            }
        },
        //文本框点击事件
        BindClickEvent: function (clickfun) {
            var that = this;
            if (this.ClickEvent) return;
            //显示图标并标识
            this.HasBindClick = true;

            if (clickfun == null) return;
            if ($.isEmptyObject(clickfun)) return;

            this.ClickEvent = clickfun;

            //RenderClickMode样式
            $(this.$InputBody).css("position", "relative");
            var marginRight = 20;
            if (this.IsInGridView) { marginRight = 6; }
            var $span = $("<span class='icon-nav_search textclickspan' style='float:right;position: absolute;right: 0;top: 8px;margin-right: " + marginRight + "px'></span>")
            $(this.$Input).before($span);
            if (!this.Editable) {
                $span.next().css("padding-right", "18px")
            }
            $span.off("click." + this.DataField).on("click." + this.DataField, function () {
                if (clickfun && clickfun.constructor.name == "Function") {
                    clickfun.apply(that, [that, that.ObjectId]);
                }
            })
        },
        UnBindClickEvent: function () {

        }
    });

})(jQuery);;
// Label控件
(function ($) {

    // 控件实例执行方式
    $.fn.FormLabel = function () {
        return $.ControlManager.Run.call(this, "FormLabel", arguments);
    };

    // 控件定义
    $.Controls.FormLabel = function (element, options, sheetInfo) {
        $.Controls.FormLabel.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承事件
    $.Controls.FormLabel.Inherit($.Controls.BaseControl, {
        Render: function () {
            if (!this.Visible ) {
                $(this.Element).hide(); return;
            }

            if (!this.Value) {
                this.Value = "--";
            }
            this.$Input = $("<Label name='" + this.DataField + "'>");
            if (this.Value) {
                //修改时间，在新增模式下 显示"系统自动生成"字样
                if (this.ResponseContext.IsCreateMode && this.DataField == "ModifiedTime") {
                    this.$Input.text("系统自动生成");
                    this.$Input.css({ "color": "#333333","font-size":"14px"});
                } else {
                    if (this.Value.indexOf("/Date(") > -1) {
                        this.$Input.text(new Date(this.Value.replace(/-/g, "/")).Format("yyyy-mm-dd hh:ii"));
                    } else {
                        this.$Input.text(this.Value);
                    }
                }
            }
            this.$InputBody.append(this.$Input);
        }
    });
})(jQuery);;
//组合框(FormComboBox)
//该控件在表单中不使用，现在只用在过滤时候
(function ($) {
    $.fn.FormComboBox = function (opt) {
        return $.ControlManager.Run.call(this, "FormComboBox", arguments);
    };

    // 构造函数
    $.Controls.FormComboBox = function (element, options, sheetInfo) {
        this.FormComboBoxHandler = "/App/OnAction";
        $.Controls.FormComboBox.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormComboBox.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            //是否可见
            if (!this.Visible) {
                $(this.Element).hide(); return;
            }

            this.PerNum = 10;

            //渲染Html页面
            this.HtmlRender();

            //绑定事件
            this.BindEvent();

            //Error:新建的话，可以制作默认值 ，非新建设置值加载的值
            if (this.Value) {
                this.SetValue(this.Value);
                this.SelectedValue = this.Vaule.split(',');
            } else {
                this.SelectedValue = [];
            }

            //设置placeholder
            if (this.PlaceHolder) {
                this.SetPlaceHolder(this.PlaceHolder);
            }
            // 不可编辑
            if (!this.Editable) {
                this.SetReadonly(true);
                return;
            }
        },

        //渲染html内容
        HtmlRender: function () {
            if (!this.Editable) {
                this.$Input = $('<pre style="border:none;white-space:pre-wrap;white-space:-moz-pre-wrap;white-space:-pre-wrap;white-space:-o-pre-wrap;word-wrap:break-word;overflow:auto;word-break:break-all">');
                this.$InputBody.append(this.$Input);
            } else {
                if (this.$InputBody.children("input").length == 0) {
                    if (this.DefaultValue) {
                        this.$Input = $("<input type='text'  id='" + this.DataField + "'  data-propertyname='" + this.DataField + "'    value='" + this.DefaultValue + "' class='form-control myform-control mytext comboboxtext' style='width: 100%; padding-right:22px;'>").attr("name", this.DataField).addClass("form-control");//.attr("maxlength", 200).width(this.Width)
                    } else {
                        this.$Input = $("<input type='text'  id='" + this.DataField + "'  data-propertyname='" + this.DataField + "'     class='form-control myform-control mytext comboboxtext' style='width: 100%; padding-right:22px;'>").attr("name", this.DataField).addClass("form-control");//.attr("maxlength", 200).width(this.Width)
                    }
                }
                this.$DropList = $('<ul class="drop-list drop-combox"></ul>');
                var blankID = $.IGuid();
                var blank = $('<li class="dropdownlist-item" "><label for="' + blankID + '" data-val="--" class="drop-item-btn">--(空值)</label></li>');
                this.$DropList.append(blank);
                this.$InputBody.append(this.$Input).append(this.$DropList);
            }
        },

        //绑定事件
        BindEvent: function () {
            var that = this;
            $(this.$Input).off("blur.FormComboBox").on("blur.FormComboBox", this, function (e) {
                var $this = $(this);
                that.ValChange();
                that.Required && ($this.val() != "" && $this.removeAttr("style"));
                that.$DropList.hide();
            });

            $(this.$Input).on("keyup", this, function (e) {
                var searchvalues = $(this).val().split(/,|，/);
                var key = (searchvalues != null && searchvalues.length > 0) ? searchvalues[searchvalues.length - 1] : "";
                that.TimeOut && (clearTimeout(that.TimeOut), that.TimeOut = null);
                that.TimeOut = setTimeout(function () {
                    that.LoadData(that.SchemaCode, that.DataField, key);
                }, 400);
            });

            $(this.$Input).on("focus", this, function (e) {
                var searchvalues = that.$Input.val().split(/,|，/);
                var key = (searchvalues != null && searchvalues.length > 0) ? searchvalues[searchvalues.length - 1] : "";
                that.LoadData(that.SchemaCode, that.DataField, key);
                that.$DropList.show();
            });

            that.$DropList.off("mousedown.formcombox").on("mousedown.formcombox", ".drop-item-btn", function (e) {
                that.AddSelectedValue.call(that, this.getAttribute("data-val"));
                if (!that.$Input.is(":focus")) {
                    that.ValChange();
                }
            });

            that.$DropList.off("click.formcombox").on("click.formcombox", ".drop-item-btn", function (e) {
                that.$DropList.hide();
                return false;
            });

            that.$DropList.scroll(function () {
                var scrollTop = this.scrollTop,
                    scrollHeight = this.scrollHeight,
                    clientHeight = this.clientHeight;
                if (scrollTop + clientHeight >= scrollHeight - 60 && that.HasMore) {
                    var searchvalues = that.$Input.val().split(/,|，/);
                    var key = (searchvalues != null && searchvalues.length > 0) ? searchvalues[searchvalues.length - 1] : "";
                    that.LoadData(that.SchemaCode, that.DataField, key, that.StopIndex, that.StopIndex + that.PerNum);
                }
            });

            $(this.$Input).off("keydown.combox").on("keydown.combox", function (event) {
                var e = event || window.event || arguments.cllee.caller.agrguments[0];
                if (e && e.keyCode == 38) {
                    if (!that.$DropList.is(":hidden")) {
                        var $li = that.$DropList.children("li.active").removeClass("active");
                        var $prevli = $li.prev();
                        $prevli.addClass("active");
                        that.AddSelectedValue.call(that, $prevli.children("label").attr("data-val"));
                        that.ValChange();

                    }
                }
                if (e && e.keyCode == 40) {
                    if (!that.$DropList.is(":hidden")) {
                        if (that.$DropList.children("li.active").length > 0) {
                            var $li = that.$DropList.children("li.active").removeClass("active");
                            var $nextli = $li.next();
                            $nextli.addClass("active");
                            that.AddSelectedValue.call(that, $nextli.children("label").attr("data-val"));
                            that.ValChange();
                        } else {
                            that.$DropList.children("li:first").addClass("active");
                            that.AddSelectedValue.call(that, that.$DropList.children("li:first").children("label").attr("data-val"));
                            that.ValChange();
                        }

                    }
                }
            });
        },

        //值改变
        ValChange: function () {
            this.OnChange();
            this.Validate();
        },

        //设置值
        SetValue: function (v) {
            if (v == null) return;
            if (!this.Editable) {
                this.Value = (v + "").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                if (this.Visible)
                    this.$Input.html(this.Value);
            } else {
                this.$Input.val(v);
                this.Value = v;
            }
            this.ValChange();
        },

        AddSelectedValue: function (v) {
            if (v == null) return;
            if (!this.Editable) {
                this.Value = (v + "").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                if (this.Visible)
                    this.$Input.html(this.Value);
            } else {
                var val = this.$Input.val();
                var index = val.lastIndexOf(",") > val.lastIndexOf("，") ? val.lastIndexOf(",") : val.lastIndexOf("，");
                if (index > 0) {
                    val = val.substring(0, index + 1) + v;
                } else {
                    val = v;
                }
                this.$Input.val(val);
                this.Value = val;
            }
        },

        //设置placeholder Add:20160408
        SetPlaceHolder: function (ph) {
            if (this.Editable && this.ResponseContext.IsCreateMode) {
                this.PlaceHolder = ph.toString();
                this.$Input.attr("placeholder", this.PlaceHolder);
            }
        },

        GetValue: function () {
            if (!this.Editable) {
                var v = this.Value;
                return v == null ? "" : v;
            } else {
                return this.$Input.val().trim();
            }
        },

        GetText: function () {
            return this.GetValue();
        },

        //设置只读
        SetReadonly: function (v) {
            if (v) {
                this.$Input.prop("readonly", "readonly");
            } else {
                this.$Input.removeProp("readonly");
            }
        },

        // 数据验证
        Validate: function () {
            var val = this.GetValue();

            if (this.Required && val != null && val.trim() == "") {
                this.AddInvalidText(this.$Input, "必填");
                return false;
            }
            if (!$.isEmptyObject(val)) {
                if (!this.IsMultiple) {
                    //200字符长度
                    if (val.trim().length > 200) {
                        this.AddInvalidText(this.$Input, '字符长度超出限制200个字');
                        return false;
                    }
                } else {
                    if (val.trim().length > 2000) {
                        this.AddInvalidText(this.$Input, '字符长度超出限制2000个字');
                        return false;
                    }
                }
            }

            this.RemoveInvalidText(this.$Input);
            return true;
        },

        //返回数据值
        SaveDataField: function () {
            var result = {
            };
            var oldResult = {
            };
            if (this.ComputationRule == null && !this.Visible) return result;
            oldResult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldResult) {
                return {};
            }

            if (("" + oldResult.Value) != this.GetValue()) {
                result[this.DataField] = this.GetValue().trim();
                return result;
            }

            return {
            };
        },

        LoadData: function (schemacode, propertyname, value, from, to) {
            var that = this;
            if (value == "") {
                that.$DropList.children("li:not(:first)").remove();
                return;
            }
            to = to || that.PerNum;
            that.HasMore = false;
            var scopetype = 3; //过滤权限
            that.$loadMore && that.$loadMore.hide();
            var param = JSON.stringify({
                SchemaCode: schemacode,
                PropertyName: propertyname,
                SearchKey: value,
                FromRowNum: from || 0,
                ToRowNum: to,
                scopeType: scopetype,
                ActionName: "LoadSchemaPropertyValues"
            });
            param = { "PostData": param };
            this.Ajax(that.FormComboBoxHandler, "POST", param, function (data) {
                data = data.ReturnData.list;
                that.StopIndex = to;
                if (to == that.PerNum) {
                    that.$DropList.children("li:not(:first)").remove();
                    if (!data) { return; }
                    for (var i = 0; i < data.length; i++) {
                        var ID = $.IGuid();
                        var v = data[i], checked = that.SelectedValue.indexOf(v) > -1 ? true : false;
                        if (that.$DropList.find("label[data-val='" + (v || "--") + "']") > 0) {
                            continue;
                        }
                        if (v != "") {
                            if ($.isJsonLike(v)) {
                                var vv = JSON.parse(v);
                                var displayname = vv["Province"] + " " + vv["City"] + " " + vv["Town"] + " " + vv["Detail"];
                                var item = $('<li class="dropdownlist-item" ><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn">' + (displayname || "--(空值)") + '</label></li>');
                            } else {
                                var item = $('<li class="dropdownlist-item" ><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn">' + (v || "--(空值)") + '</label></li>');
                            }

                            that.$DropList.append(item);
                        }
                    }
                    if (data.length === that.PerNum) {
                        that.HasMore = true;
                        that.$loadMore = $('<li style="width:100%; height:20px; line-height:20px; text-align:center;">加载更多......</li>').appendTo(that.$DropList);
                    }
                } else {
                    var htmls = "";
                    for (var i = 0; i < data.length; i++) {
                        var ID = $.IGuid();
                        var v = data[i], checked = that.SelectedValue.indexOf(v) > -1 ? true : false;
                        if (that.$DropList.find("label[data-val='" + (v || "--") + "']") > 0) {
                            continue;
                        }
                        if (v != "") {
                            if ($.isJsonLike(v)) {
                                continue;
                                var vv = JSON.parse(v);
                                var displayname = vv["Province"] + " " + vv["City"] + " " + vv["Town"] + " " + vv["Detail"];
                                htmls += '<li class="dropdownlist-item" ><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn">' + (displayname || "--(空值)") + '</label></li>';
                            } else {
                                htmls += '<li class="dropdownlist-item" ><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn">' + (v || "--(空值)") + '</label></li>';
                            }

                        }
                    }
                    that.$loadMore.before(htmls);
                    if (data.length === that.PerNum) {
                        that.HasMore = true;
                        that.$loadMore.show();
                    }
                }
            }, true);
        }
    });
})(jQuery);;
//组合框多选(FormComboBoxList)
(function ($) {
    $.fn.FormComboBoxList = function (opt) {
        return $.ControlManager.Run.call(this, "FormComboBoxList", arguments);
    };

    // 构造函数
    $.Controls.FormComboBoxList = function (element, options, sheetInfo) {
        this.FormComboBoxListHandler = "/App/OnAction";
        $.Controls.FormComboBoxList.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormComboBoxList.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            //schemacode赋值
            this.SchemaCode = this.SchemaCode || $(this.Element).attr("data-schemacode") || $(this.Element).attr("data-schemaCode");

            if (!$(this.Element).hasClass("icon-arrow-down-full")) {
                $(this.Element).addClass("icon-arrow-down-full");
            }
            if (!$(this.Element).hasClass("mycomboboxlist")) {
                $(this.Element).addClass("mycomboboxlist");
            }
            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }
            this.PerNum = 10;
            this.HasMore = true;
            this.Value = this.Value || this.DefaultValue;
            this.IsLoaded = false;

            //新建的话，可以制作默认值 ，非新建设置值加载的值
            if (this.Value) {
                this.SelectedValue = this.Value.split(';');
            } else {
                this.SelectedValue = [];
            }

            //渲染Html页面
            this.HtmlRender();

            //绑定事件
            this.BindEvent();

            //initValue
            this.SetValue(this.Value);

            //设置placeholder
            if (this.PlaceHolder) {
                this.SetPlaceHolder(this.PlaceHolder);
            }
            // 不可编辑
            if (!this.Editable) {
                this.SetReadonly(true);
                return;
            }
        },

        //渲染html内容
        HtmlRender: function () {
            if (!this.Editable) {
                this.$Input = $('<pre style="border:none;white-space:pre-wrap;white-space:-moz-pre-wrap;white-space:-pre-wrap;white-space:-o-pre-wrap;word-wrap:break-word;overflow:auto;word-break:break-all">');
                this.$InputBody.append(this.$Input);
            }
            else {
                if (this.$InputBody.children("input").length == 0) {
                    if (this.DefaultValue) {
                        this.$Input = $("<input type='text'  id='" + this.DataField + "'  data-propertyname='" + this.DataField + "'    value='" + this.DefaultValue + "' class='form-control myform-control mytext comboboxtextlist' style='width: 100%; padding-right:22px;'>").attr("name", this.DataField).addClass("form-control");
                    }
                    else {
                        this.$Input = $("<input type='text'  id='" + this.DataField + "'  data-propertyname='" + this.DataField + "'     class='form-control myform-control mytext comboboxtextlist' style='width: 100%; padding-right:22px;'>").attr("name", this.DataField).addClass("form-control");
                    }
                }
                this.$Input.attr("readonly", "readonly");
                this.$Input.css("cursor", "default").css("background-color", "#ffffff");//只读
                this.$DropList = $('<ul class="drop-list drop-combox drop-comboxlist"></ul>');
                //添加搜索框
                this.$SearchInput = $('<input type="text" class="comboxlist_search" style="width:100%;height:32px;padding-left:12px;" placeholder="搜索"></input> ');
                this.$SearchLi = $("<li data-type='search' style='border-bottom:1px solid #d7d5d5'></li>").append(this.$SearchInput);
                this.$DropListDetail = $('<ul class=" drop-combox drop-comboxlist-detail" style="list-style:none;left:0;padding-left:0;max-height:200px;overflow-y:auto;overflow-x:hidden;"></ul>');
                this.$DropList.append(this.$SearchLi).append(this.$DropListDetail);
                var blankID = $.IGuid();
                //var clearitem = $('<li class="dropdownlist-item fix"><label  data-val="" class="drop-item-btn form-query-item-label" style="margin-left: 15px;width:100%;" > --请选择--</label ></li > ');
                var blank = $('<li class="dropdownlist-item fix"><input id="' + blankID + '" type="checkbox" style="display:none"/><label for="' + blankID + '" data-val="--" class="drop-item-btn form-query-item-label" style="margin-left: 15px;width:100%;" > --(空值)</label ></li > ');
                if ($.inArray("--", this.SelectedValue) > -1) {
                    blank.find("input:checkbox").prop("checked", true);
                }
                this.$DropListDetail.append(blank);
                this.$InputBody.append(this.$Input).append(this.$DropList);
            }

        },

        //渲染模式：邮件、电话、身份证
        ModeRender: function () {
            switch (this.Mode) {
                case "Email":
                    this.Expression = /^\w+([-+.]\w+)*@\w+([-+.]\w+)*\.\w+([-.]\w+)*$/;
                    this.ErrorAlert = "错误的邮箱格式!";
                    break;
                case "Mobile":
                    this.Expression = /^1[3-8]\d{9}$/;
                    this.ErrorAlert = "错误的手机格式!";
                    break;
                case "Telephone":
                    this.Expression = /^(0\d{2,3}-)?\d{7,8}(-\d{1,4})?$/;
                    this.ErrorAlert = "错误的电话格式!";
                    break;
                case "Card":
                    this.Expression = /^\d{15}(\d{2}[A-Za-z0-9])?$/
                    this.ErrorAlert = "错误的身份证格式!";
                    break;
            }

        },

        //绑定事件
        BindEvent: function () {
            //$(this.$Input).off("blur.FormComboBoxList").on("blur.FormComboBoxList", this, function (e) {
            //    //var $this = $(this);
            //    //var that = e.data;
            //    //that.ValChange();
            //    //that.Required && ($this.val() != "" && $this.removeAttr("style"));
            //    //that.$DropList.hide();
            //});

            //点击DropDown以外区域隐藏,需要排除搜索框
            var eventName = "click.DropdownList." + (this.DataField || $(this.Element).attr("id"));
            $("body").off(eventName).on(eventName, this, function (e) {
                var target = e.target;
                var ctrl = e.data;

                if ($(target).closest("div.drop-combox").length == 0
                    && !$(target).hasClass("comboxlist_search")
                    && !$(target).hasClass("comboboxtextlist")
                    && !$(target).hasClass("icon-arrow-down-full")) {
                    ctrl.$DropList.hide();
                }
            });

            var timeout;
            //input.comboxlist propertychange
            $(this.$SearchInput).on("keyup", this, function (e) {
                var that = e.data;
                var searchvalues = $(this).val().split(/;|；/);
                var key = (searchvalues != null && searchvalues.length > 0) ? searchvalues[searchvalues.length - 1] : "";
                timeout && (clearTimeout(timeout), timeout = null);
                timeout = setTimeout(function () { that.LoadData(that.SchemaCode, that.DataField, key); }, 400);

            });


            var that = this;

            $(this.Element).off("click.formcomboxlist").on("click.formcomboxlist", this, function (e) {
                if (!that.IsLoaded) {
                    that.LoadData(that.SchemaCode, that.DataField, "");
                }
                that.$DropList.show();
                setTimeout(function () { that.$SearchInput.focus(); }, 50);
            });

            that.$DropList.off("mousedown.formcomboxlist").on("mousedown.formcomboxlist", ".drop-item-btn", function (e) {
                var v = this.getAttribute("data-val");
                if (v == "") {
                    that.ClearItem();
                    that.$DropList.hide();
                    return;
                }
                var checkbox = $(this).prev();
                var checked = checkbox.prop("checked");
                checkbox.prop("checked", !checked);
                if (checked) {
                    that.RemoveSelectValue.call(that, v);
                } else {
                    that.AddSelectedValue.call(that, v);
                }

                if (!that.$Input.is(":focus")) {
                    that.ValChange();
                }
            });

            that.$DropList.off("click.formcomboxlist").on("click.formcomboxlist", ".drop-item-btn", function (e) {
                //that.$DropList.hide();
                return false;
            });

            that.$DropListDetail.scroll(function () {
                var scrollTop = this.scrollTop,
                    scrollHeight = this.scrollHeight,
                    clientHeight = this.clientHeight;
                if (scrollTop + clientHeight >= scrollHeight && that.HasMore) {
                    var searchvalues = that.$SearchInput.val().split(/;|；/);
                    var key = (searchvalues != null && searchvalues.length > 0) ? searchvalues[searchvalues.length - 1] : "";
                    that.LoadData(that.SchemaCode, that.DataField, key, that.StopIndex, that.StopIndex + that.PerNum);
                }
            });

            $(this.$SearchInput).off("keydown.combox").on("keydown.combox", function (event) {
                var e = event || window.event || arguments.cllee.caller.agrguments[0];
                if (e && e.keyCode == 38) {
                    if (!that.$DropList.is(":hidden")) {
                        var $li = that.$DropListDetail.children("li.active").removeClass("active");
                        var $prevli = $li.prev();
                        $prevli.addClass("active");
                        that.AddSelectedValue.call(that, $prevli.children("label").attr("data-val"));
                        that.ValChange();
                    }
                }
                if (e && e.keyCode == 40) {
                    if (!that.$DropList.is(":hidden")) {
                        if (that.$DropListDetail.children("li.active").length > 0) {
                            var $li = that.$DropList.children("li.active").removeClass("active");
                            var $nextli = $li.next();
                            $nextli.addClass("active");
                            that.AddSelectedValue.call(that, $nextli.children("label").attr("data-val"));
                            that.ValChange();
                        }
                        else {
                            that.$DropListDetail.children("li:first").addClass("active");
                            that.AddSelectedValue.call(that, that.$DropList.children("li:first").children("label").attr("data-val"));
                            that.ValChange();
                        }

                    }
                }
            });
        },

        //值改变
        ValChange: function () {
            this.OnChange();
            this.Validate();
        },

        //设置值
        SetValue: function (v) {
            if (v == null) return;
            if (!this.Editable) {
                this.Value = (v + "").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                if (this.Visible)
                    this.$Input.html(this.Value);
            }
            else {
                this.$Input.val(v);
                this.Value = v;
                var sv = v.split(";");
                if (sv && sv.length > 0) {
                    this.SelectedValue = sv;
                }
            }
            this.ValChange();
        },

        AddSelectedValue: function (v) {
            if (v == null) return;
            if (!this.Editable) {
                this.Value = (v + "").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                if (this.Visible)
                    this.$Input.html(this.Value);
            } else {
                var val = "";
                this.SelectedValue.push(v);
                if (this.SelectedValue.length > 0) {
                    val = this.SelectedValue.join(";").replace(";", "");//报表要求使用分号分隔
                }
                this.$Input.val(val);
                this.Value = val;
            }
        },
        RemoveSelectValue: function (v) {
            if (v == null) return;
            if (!this.Editable) {
                return;
            } else {
                var val = ""
                this.SelectedValue.splice($.inArray(v, this.SelectedValue), 1);
                if (this.SelectedValue.length > 0) {
                    val = this.SelectedValue.join(";").replace(";", "");//去掉最前面的;
                }
                this.$Input.val(val);
                this.Value = val;
            }
        },
        SetPlaceHolder: function (ph) {
            if (this.Editable && this.ResponseContext.IsCreateMode) {
                this.PlaceHolder = ph.toString();//.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                this.$Input.attr("placeholder", this.PlaceHolder);
            }
        },

        GetValue: function () {
            if (!this.Editable) {
                var v = this.Value;
                return v == null ? "" : v;
            }
            else {
                return this.$Input.val();
            }
        },

        GetText: function () {
            return this.GetValue();
        },
        ClearItem: function () {
            this.SelectedValue = [];
            this.$DropListDetail.find("input:checkbox").prop("checked", false);
            this.SetValue("");
        },
        //设置只读
        SetReadonly: function (v) {
            if (v) {
                this.$Input.prop("readonly", "readonly");
            }
            else {
                this.$Input.removeProp("readonly");
            }
        },

        // 数据验证
        Validate: function () {
            //不可编辑，不可编辑状态为什么还要校验？
            //if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && val != null && val.trim() == "") {

                this.AddInvalidText(this.$Input, "必填");
                return false;
            }
            if (!$.isEmptyObject(val)) {
                if (!this.IsMultiple) {
                    //200字符长度
                    if (val.trim().length > 200) {
                        this.AddInvalidText(this.$Input, '字符长度超出限制200个字');
                        return false;
                    }
                } else {
                    if (val.trim().length > 2000) {
                        this.AddInvalidText(this.$Input, '字符长度超出限制2000个字');
                        return false;
                    }
                }
            }
            //格式验证
            if (!$.isEmptyObject(val) && this.Mode) {
                var exp1 = '';
                var exp2 = '';
                var err = '';
                switch (this.Mode) {
                    case "Email":
                        exp1 = /^\w+([-+.]\w+)*@\w+([-+.]\w+)*\.\w+([-.]\w+)*$/;
                        err = "错误的邮箱格式!";
                        break;
                    case "Mobile":
                    case "Telephone":
                        exp1 = /^1[3-8]\d{9}$/;
                        exp2 = /^(0\d{2,3}-)?\d{7,8}(-\d{1,4})?$/;
                        //exp2 = /^[0-9-()（）]{7,18}$/;
                        err = "错误的电话或手机号码格式!";
                        break;
                    case "Card":
                        exp1 = /^\d{15}(\d{2}[X0-9])?$/
                        err = "错误的身份证格式!";
                        break;
                    default:
                }
                var isValid1 = true;
                var isValid2 = true;
                if (exp1) {
                    isValid1 = exp1.test(val);
                }
                if (exp2) {
                    isValid2 = exp2.test(val);
                }
                if (this.Mode == "Mobile" || this.Mode == "Telephone") {
                    if (!isValid1 && !isValid2) {
                        if (this.invalidText != err)
                            this.AddInvalidText(this.$Input, err);
                        return false;
                    }
                } else {
                    if (!isValid1) {
                        if (this.invalidText != err)
                            this.AddInvalidText(this.$Input, err);
                        return false;
                    }
                }
            }

            this.RemoveInvalidText(this.$Input);
            return true;
        },

        //返回数据值
        SaveDataField: function () {
            var result = {
            };
            var oldResult = {
            };
            if (this.ComputationRule == null && !this.Visible) return result;
            oldResult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldResult) {
                return {};
            }

            if (("" + oldResult.Value) != this.GetValue()) {
                result[this.DataField] = this.GetValue().trim();
                return result;
            }

            return {
            };
        },

        LoadData: function (schemacode, propertyname, value, from, to) {
            var that = this;
            to = to || that.PerNum;
            that.HasMore = false;
            var scopetype = 3; //过滤权限
            that.$loadMore && that.$loadMore.hide();
            var param = JSON.stringify({
                SchemaCode: schemacode, PropertyName: propertyname, SearchKey: value, FromRowNum: from || 0, ToRowNum: to, scopeType: scopetype, ActionName: "LoadSchemaPropertyValues"
            });
            param = { "PostData": param };
            this.Ajax(that.FormComboBoxListHandler, "POST", param, function (data) {
                data = data.ReturnData.list;

                that.StopIndex = to;
                that.IsLoaded = true;
                if (to == that.PerNum) {
                    that.$DropListDetail.children("li:not(.fix)").remove();
                    for (var i = 0; i < data.length; i++) {
                        var ID = $.IGuid();
                        var v = data[i], checked = that.SelectedValue.indexOf(v) > -1 ? true : false;
                        if (v != "") {
                            var item;
                            if ($.isJsonLike(v)) {
                                var vv = JSON.parse(v);
                                var displayname = vv["Province"] + " " + vv["City"] + " " + vv["Town"] + " " + vv["Detail"];
                                item = $('<li class="dropdownlist-item"><input id="' + ID + '" type="checkbox" style="display:none"/><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn form-query-item-label" style="margin-left: 15px;width:100%;">' + (displayname || "--(空值)") + '</label></li>');
                            }
                            else {
                                if (that.IsQueryControl) {
                                    v = $.trim(v);
                                }

                                item = $('<li class="dropdownlist-item"><input id="' + ID + '" type="checkbox" style="display:none"/><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn form-query-item-label" style="margin-left: 15px;width:100%;">' + (v || "--(空值)") + '</label></li>');
                            }
                            item.find("input:checkbox").prop("checked", checked);
                            that.$DropListDetail.append(item);
                        }
                    }
                    //if (data.length === that.PerNum) {
                    that.HasMore = true;
                    that.$loadMore = $('<li style="width:100%; height:20px; line-height:20px; text-align:center;">滚动加载更多......</li>').appendTo(that.$DropListDetail);
                    //}
                } else {
                    var htmls = "";
                    for (var i = 0; i < data.length; i++) {
                        var ID = $.IGuid();
                        var v = data[i], checked = that.SelectedValue.indexOf(v) > -1 ? true : false;
                        if (v != "") {
                            if ($.isJsonLike(v)) {
                                continue;
                                var vv = JSON.parse(v);
                                var displayname = vv["Province"] + " " + vv["City"] + " " + vv["Town"] + " " + vv["Detail"];
                                htmls += '<li class="dropdownlist-item" ><input id="' + ID + '" type="checkbox" style="display:none"/><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn form-query-item-label" style="margin-left: 15px;width:100%;">' + (displayname || "--(空值)") + '</label></li>';
                            }
                            else {
                                if (that.IsQueryControl) {
                                    v = $.trim(v);
                                }
                                htmls += '<li class="dropdownlist-item" ><input id="' + ID + '" type="checkbox"  style="display:none"/><label for="' + ID + '" data-val="' + (v || "--") + '" class="drop-item-btn form-query-item-label" style="margin-left: 15px;width:100%;">' + (v || "--(空值)") + '</label></li>';
                            }

                        }
                    }
                    that.$loadMore.before(htmls);
                    //if (data.length === that.PerNum) {
                    //    that.HasMore = true;
                    //    that.$loadMore.show();
                    //}
                    if (data != void 0 && data.length > 0) {
                        that.HasMore = true;
                        that.$loadMore.show();
                    }
                }
            }, true);
        },
    });
})(jQuery);;
// FormQuery控件
; (function ($) {
    // 控件实例执行方式
    $.fn.FormQuery = function () {
        return $.ControlManager.Run.call(this, "FormQuery", arguments);
    };

    $.FormQueryData = {
        PropertyQueryItems: {},
        PropertyQueryColumns: {},
        SchemaCodeAcl: {},
        PropertyQueryDefaultValues: {}
    };

    // 构造函数
    $.Controls.FormQuery = function (element, options, sheetInfo) {
        $.Controls.FormQuery.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormQuery.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            var that = this;
            that.FirstLoad = true;

            //用于模糊查询的关联属性
            that.FilterProperties = undefined;

            that.isFirstSetValue = true;
            that.CurrentDocument = $(that.Element).closest("html").parent().length == 0 ? $(document) : $(that.Element).closest("html").parent();
            that.CurrentBody = $(that.Element).closest("body").length == 0 ? $("body") : $(that.Element).closest("body");

            that.SheetData = {};//关联表单过滤用到的数据
            //that.IsQueryControl = false;//标识该控件是表单中还是列表过滤
            that.LoadData = [];//关联表单的数据，表示加载出来的当前表单对应的关联的数据            
            if ($.FormQueryData[that.BOSchemaCode]) {
                that.IsRunnable = $.FormQueryData[that.BOSchemaCode].IsRunnable;
                that.CanCreate = $.FormQueryData[that.BOSchemaCode].CanCreate;
                that._Render();
            }
            else {
                var postData = { PostData: JSON.stringify({ ActionName: "LoadSchemaAcl", SchemaCode: that.BOSchemaCode }) }
                that.Ajax("/Form/OnAction", "GET", postData, function (data) {
                    $.FormQueryData[that.BOSchemaCode] = data.ReturnData;
                    that.IsRunnable = data.ReturnData.IsRunnable;
                    that.CanCreate = data.ReturnData.CanCreate;
                    that._Render();
                }, false);
            }

        },

        _Render: function () {
            var passedBoObjectId = $.IQuery(this.BOSchemaCode);
            var passedBoName = $.IQuery(this.BOSchemaCode + "_Name");
            if (passedBoObjectId && !passedBoName) {
                this.Editable = false;
            }

            //渲染前端
            this.HtmlRender();

            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }
            if ($.SmartForm != null && $.SmartForm.ResponseContext != null) {
                // 新增时，赋值需要处理改变事件，如携带之类的
                if ($.SmartForm.ResponseContext.IsCreateMode) {
                    this.BindChange("FormQueryChange", this.Change);
                    //初始化默认值
                    this.InitValue();
                } else {
                    // 编辑时，赋值不需要携带，所有的值都是从已经存的结果读取
                    //初始化默认值
                    this.InitValue();
                    this.BindChange("FormQueryChange", this.Change);
                }
            } else {
                this.BindChange("FormQueryChange", this.Change);
                //初始化默认值
                this.InitValue();
            }

            this._toDetailLink();

            //不可用
            if (!this.Editable) {
                this.SetReadonly(true);
                //子表中去掉title
                if (!$.isEmptyObject(this.ObjectId)) {
                    this.$Input.find("a").removeAttr("title");
                }
            } else {
                this.BindEvent();
            }

            this.InitMappingProperty();
        },
        //初始化关联属性控件值
        InitMappingProperty: function () {
            //给关联属性控件赋值
            var that = this;
            //如果当前控件是"关联属性"则不要设置关联携带
            if ($(that.Element).attr("data-ismappingproperty") != undefined) {
                return;
            }
            var mappingProperties = that.MappingProperties;
            if (that.Value != undefined && mappingProperties != undefined && !$.isEmptyObject(mappingProperties)) {
                //有关联属性
                var params = {
                    ActionName: "GetFormatBizObject",
                    SchemaCode: this.BOSchemaCode,
                    ObjectId: that.Value
                }
                this.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                    if (data.ReturnData.ListViewData && data.ReturnData.ListViewData.length > 0) {
                        that.SetMappingValue(data.ReturnData.ListViewData[0], that.MappingProperties);
                    }
                });
            }
        },
        //渲染前端
        HtmlRender: function () {
            var that = this;
            $(this.Element).addClass('SheetQuery');
            if (!this.Editable) {
                this.$Input = $("<pre>");
                this.$InputBody.append(this.$Input);
            } else {
                this.ID = "FormQuery_" + $.IGuid();
                this.$addModel = $("<a class='form-query-addModel icon-newsvg'></a>");
                this.$Input = $("<div class='form-control form-query-add' placeholder='点击选择已有表单的数据'></div");
                this.$InputBody.css('position', 'relative');
                this.$InputBody.append(this.$Input).append(this.$addModel);
                //控件渲染改到点击时处理
                //setTimeout(that._renderDropDown(that), 0);//渲染下拉
                //setTimeout(that._renderModal(that), 0);//渲染模态框
            }
        },

        BindEvent: function () {
            var that = this;
            this.$addModel.one("click", function (e) {
                that._renderModal(that);
                that.$addModel.trigger("click");
            });
            this.$Input.one("click", function (e) {
                that._renderDropDown(that);
                that.$Input.trigger("click");
            });
        },
        // 获取元素相对屏幕的绝对位置
        _getAbsPosition: function (element) {
            var that = this;
            var left = 0;

            var abs = {
                x: 0, y: 0
            };

            //火狐浏览器下拉框位置问题
            var inputOffset = $(element).offset();
            abs.x = inputOffset.left;
            abs.y = inputOffset.top;
            //if (document.documentElement.getBoundingClientRect) {
            //    abs.x = element.getBoundingClientRect().left;
            //    abs.y = element.getBoundingClientRect().top;
            //    abs.y += document.body.scrollTop | document.documentElement.scrollTop + document.documentElement.scrollTop - document.documentElement.clientTop;
            //} else {
            //    abs.x = $(element).offset().left;
            //    abs.y = $(element).offset().top + $(element).outerHeight;
            //}
            return abs;
        },
        //加载下拉框数据
        _loadDropDownData: function (needClear) {
            var that = this;
            if (that.FilterProperties == undefined && that.MappingProperties != undefined) {
                that.FilterProperties = [];
                //主表和子表情况
                var $container = $(that.Element).closest("#SheetContent");
                var isInChild = that.DataField.indexOf(".") > -1;
                for (var field in that.MappingProperties) {
                    var mappingProperty = $container.find("div[data-datafield='" + field + "']");
                    if (mappingProperty.length > 0) {
                        var asFilter = mappingProperty.attr("data-asfilter");
                        var controlKey = mappingProperty.attr("data-controlkey");
                        //关联多选/关联表单/选人不做过滤条件
                        if (asFilter != undefined &&
                            asFilter == "true" &&
                            controlKey.toLowerCase() != "formquery" &&
                            controlKey.toLowerCase() != "formmultiquery" &&
                            controlKey.toLowerCase() != "formuser" &&
                            controlKey.toLowerCase() != "formmultiquery") {
                            that.FilterProperties.push(that.MappingProperties[field]);
                        }
                    }
                }
            }
            if (!that.IsQueryControl) {
                that._getAssociationFilterData();
            }
            if (needClear) {
                that.offset = 0;
            }
            var defaultParams = {
                ActionName: "DoAction",
                Command: 'Load',
                QueryCode: that.BOSchemaCode,
                Status: 1,
                SheetQuery: 1,
                //isFormControl: true,
                ListScene: 2,
                SheetCode: that.SchemaCode,
                DataField: that.DataField,
                SheetData: JSON.stringify(that.SheetData),
                scopeType: 3,
                offset: that.offset,
                IsSheetQueryDropDown: true
            };
            var searchName = that.$dropDownInput.val().trim();
            var searchParams = {};

            //把Name和关联属性放在一起
            var params = {};
            if (searchName) {
                if (that.associateChildSchema) {
                    params[that.BOSchemaCode + ".Name"] = searchName;
                } else {
                    params["Name"] = searchName;
                }
                if (that.FilterProperties != undefined && that.FilterProperties.length > 0) {
                    for (var i = 0; i < that.FilterProperties.length; i++) {
                        params[that.FilterProperties[i]] = searchName;
                    }
                }
            }
            searchParams['FilterProperty'] = JSON.stringify(params);

            $.extend(defaultParams, searchParams);
            //初始渲染时候不要执行，只有在点击过关联表单控件后才能执行以下请求。
            //原因是在子表中打开时候会很慢
            if (!that.FirstLoad) {
                that.Ajax('/App/OnAction', 'GET', { PostData: JSON.stringify(defaultParams) }, function (data) {
                    if (data.Successful) {
                        that.LoadData = data.ReturnData.Response.ReturnData;
                        that._bindDataToDropDown(needClear, data.ReturnData.Response.ReturnData);
                    }
                }, true);
            }
        },
        //绑定过滤的数据到下拉框
        _bindDataToDropDown: function (needClear, data) {
            var that = this;
            that.$dropDownItemContainer.hide();
            if (needClear) {
                that.$dropDownItemContainer.empty();
            }
            if (data && data.length > 0) {
                that.offset += data.length;
                //判断是关联主表还是子表
                //表单中的控件直接通过BOSchemaInfo判断关联的是否是子表；列表过滤条件要根据返回值判断
                if (that.associateChildSchema == undefined) {
                    that.associateChildSchema = false;
                    for (var key in data[0]) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            that.associateChildSchema = true;
                            break;
                        }
                    }
                }

                //如果是过滤条件则需要提供用户一个空项让用户匹配未填写关联表单的记录
                if (needClear && that.IsQueryControl) {
                    var arr = [];
                    if (that.associateChildSchema) {
                        var noSelectValue = {
                        };
                        var objectId = that.BOSchemaCode + '.ObjectId';
                        var name = that.BOSchemaCode + '.Name';
                        noSelectValue[objectId] = "--";
                        noSelectValue[name] = '--(空)';
                        arr.push(noSelectValue);
                    } else {
                        arr = [{
                            ObjectId: "--", Name: '--(空)'
                        }];
                    }
                    data = arr.concat(data);
                }
                var existObjectIds = that.$Input.data('ObjectId');
                if (existObjectIds) {
                    existObjectIds = existObjectIds.split(';');
                }
                if (!existObjectIds) {
                    existObjectIds = [];
                }
                for (var i = 0, len = data.length; i < len; i++) {
                    var id = $.IGuid();
                    var itemId = data[i].ObjectId;
                    var itemName = data[i].Name;
                    if (that.associateChildSchema) {
                        itemId = data[i][that.BOSchemaCode + '.ObjectId'];
                        itemName = data[i][that.BOSchemaCode + '.Name'];
                    }
                    itemName = (itemName == null || itemName == void 0) ? '--' : ($.trim(itemName) == '' ? '--' : itemName);
                    var $dropDownItemRow = $('<div class="row form-query-itemrow"></div>');
                    $dropDownItemRow.hover(function () {
                        $(this).find('label.form-query-item-label').css({
                            'background-color': '#eff7fd',
                            'color': '#38adff'
                        });
                    }, function () {
                        $(this).find('label.form-query-item-label').css({
                            'background-color': '#fff',
                            'color': '#818181'
                        })
                    });
                    var $dropDownItem = $('<input type="checkbox" data-itemid = "' + itemId + '"  id="' + id + '"  value="' + itemName + '" style="display:none;" />');
                    var $dropDownItemLabel = $('<label class="form-query-item-label" for= "' + id + '" data-itemid="' + itemId + '" title="' + itemName + '">' + itemName + '</label>');
                    if (that.IsQueryControl) {
                        $dropDownItemLabel.css('margin-left', '15px');
                        $dropDownItemRow.append($dropDownItem).append($dropDownItemLabel);
                        //对于搜索出来的数据，如果之前已经选过则要勾中
                        if ($.inArray(itemId, existObjectIds) > -1) {
                            $dropDownItem.prop('checked', true);
                        } else if (itemId == undefined) {//undefined情况要处理下
                            if ($.inArray('undefined', existObjectIds) > -1) {
                                $dropDownItem.prop('checked', true);
                            }
                        }
                    } else {
                        $dropDownItemRow.append($dropDownItemLabel);
                    }
                    that.$dropDownItemContainer.append($dropDownItemRow);
                    var eventName = 'click.';
                    if (that.DataField) {
                        eventName += that.DataField;
                    } else if (that.ID) {
                        eventName += that.ID;
                    }
                    $dropDownItem.off(eventName).on(eventName, function (e) {
                        //这里不能清空Input
                        var $links = '';
                        var objectIds = '';
                        var checkState = $(this).is(':checked');
                        var decodedVal;
                        if (checkState) {//选中
                            var objectId = $(this).data('itemid');
                            decodedVal = decodeURIComponent($(this).val());
                            objectIds = that.$Input.data('ObjectId') || '';
                            if (objectIds.indexOf(objectId) > -1) {
                                return;
                            }
                            var link = '<a href="javascript:;" class="label label-info" style="background-color:#e2f0ff; color:#38ADFF;padding:0 6px 0 6px;position:relative;" title="' + decodedVal + '">' + decodedVal + '<i class="fa icon-close-middle" style="margin-left:5px;" data-objectId="' + objectId + '"></i></a>';

                            //添加时清空空的链接
                            if ($.trim(that.$Input.text().length > 0)) {
                                that.$Input.text("").append(link);
                            } else {
                                that.$Input.append(link);
                            }

                            //objectIds = that.$Input.data('ObjectId') || '';
                            if (objectIds != '' && objectIds.charAt(objectIds.length - 1) != ';') {
                                objectIds += ';';
                            }
                            objectIds += (objectId + ';');
                            that.$Input.data('ObjectId', objectIds);
                        } else {//取消选中
                            var objectId = $(this).data('itemid');
                            that.$Input.find()
                            objectIds = that.$Input.data('ObjectId');
                            objectIds = objectIds.replace(objectId + ';', '');
                            that.$Input.data('ObjectId', objectIds);
                            that.$Input.find('i[data-objectId="' + objectId + '"]').parent().remove();
                        }
                        that.isFirstSetValue = false;
                        //that.$Input.data('ObjectId', objectIds);
                        that.$Input.find('i').on('click', function () {
                            var $this = $(this);
                            $this.closest('a').remove();
                            var objectIds = that.$Input.data('ObjectId');
                            var thisObjectId = $this.attr('data-ObjectId');
                            objectIds = objectIds.replace(thisObjectId + ';', '');
                            that.$Input.data('ObjectId', objectIds);
                            that.OnChange();
                            that.$dropDownItemContainer.find('input[type="checkbox"][data-itemid="' + thisObjectId + '"]').prop('checked', false);
                        });
                        that.OnChange();
                    });
                    $dropDownItemLabel.off(eventName).on(eventName, function (e) {
                        if (that.IsQueryControl) {
                            //过滤条件
                        } else {
                            //表单控件
                            var objectId = $(this).data('itemid');
                            var name = $(this).text();
                            that.$Input && that.$Input.data("ObjectId", objectId).text(name);
                            that.OnChange.apply(that, [{
                                ObjectId: objectId, Name: name
                            }]);
                            that._toDetailLink();
                            that.$dropdown.hide();

                            //if ($.fn.FormGridView) {
                            //    var gridView = that.$Input.closest("[data-controlkey='FormGridView']");
                            //    var fGridView = $(gridView).FormGridView();
                            //    fGridView && fGridView.ResizeColumn(true);
                            //}
                        }
                        e.stopPropagation();
                    });
                }
            }
            that.$dropDownItemContainer.show();
        },
        //渲染FormQuery的下拉
        _renderDropDown: function (target) {
            this.offset = 0;
            var that = target;
            var h = that.$Input.outerHeight();
            if (h > 32) {
                //IE11中点击时候h会很大
                that.$Input.height(32);
                h = 32;
            }
            var w = that.$Input.outerWidth();
            var position = that._getAbsPosition(that.$Input[0]);
            that.$dropdown = $('<div class="form-query-dropdown">').css({
                'left': position.x,
                'top': position.y + h,
                'width': w
            });
            //绑定元素父元素的滚动事件，重新赋值$dropdown的高度和left  
            //TODO  $(this.CurrentBody).find("div")范围 ,影响性能
            //$.each($(this.CurrentBody).find("div"), function (index, obj) {
            //    $(obj).scroll(function () {
            //        that.$dropdown.css("top", that.$Input.offset().top + that.$Input.outerHeight());
            //    });
            //});

            $(this.CurrentBody).on("scroll", function () {
                that.$dropdown.css("top", that.$Input.offset().top + that.$Input.outerHeight());
            })

            var $dropDownInputRow = $('<div class="row" style="margin-left:0;margin-right:0;"></div>');

            that.$dropDownInput = $('<input type="text" class="form-control form-input search-input-dropdown" placeholder="输入表单名称查找"  />');
            that.$dropDownInput.off('keyup').on('keyup', function (event) {
                that.TimeOut && window.clearTimeout(that.TimeOut);
                that.TimeOut = setTimeout(function () { that._loadDropDownData(true) }, 1000);
                event.stopPropagation();
            });

            $dropDownInputRow.append(that.$dropDownInput);
            that.$dropDownItemContainer = $('<div class="form-query-container">')
            that.$dropdown.append($dropDownInputRow).append(that.$dropDownItemContainer);

            //绑定滚动事件
            that.$dropDownItemContainer.scroll(function () {
                var h_container = $(this).height();//窗口高度
                var h_scrollTop = $(this).scrollTop();//滚动条顶部
                if (0 + h_scrollTop >= $(this)[0].scrollHeight - h_container) {
                    that._loadDropDownData(false);
                }
            });
            //初始时候请求数据
            //that._loadDropDownData(true);
            //$('body').append(that.$dropdown);
            //Error：报表过滤情况CurrentBody是空的，
            //原因是在初始化控件的时候没有把元素append到DOM中，
            //所以在下面的点击事件中加了判断，如果不存在要先append到DOM中
            $(that.CurrentBody).append(that.$dropdown);
            //点击文本狂显示
            that.$Input.on('click.addModel', function () {
                //判断dom中是否有dropdown，如果没有就append进去
                //这种情况出现在render时候
                if ($(that.Element).css("visibility") == "hidden") {
                    return;
                }
                that.FirstLoad = false;
                var $body = $($(that.Element).closest("body"));
                if ($body.find('div.form-query-dropdown').length == 0) {
                    $body.append(that.$dropdown);
                }
                var searchText = that.$dropDownInput.val().trim();
                //如果有搜索记录则清空
                if (searchText != '') {
                    that.$dropDownInput.val('');

                }
                if (!that.IsQueryControl)
                    that._getAssociationFilterData();
                //每次打开下拉框都要重新加载数据
                //if (!$.isEmptyObject(that.SheetData))
                that._loadDropDownData(true);

                $('.form-query-dropdown').hide();
                var hh = '300px';
                if (that.IsQueryControl) {
                    hh = '200px';
                    that.$dropDownItemContainer.css('max-height', '150px');
                }
                //如果是列表过滤控件要重新获取坐标
                var h = that.$Input.outerHeight();
                var w = that.$Input.outerWidth();
                var position = that._getAbsPosition(that.$Input[0]);
                that.$dropdown.css({
                    'position': 'absolute',
                    'left': position.x,
                    'top': position.y + h,
                    'width': w
                    /*'height': hh*/
                });
                that.$dropdown.toggle();

                if (that.$dropdown.is(':hidden'))
                    return;

                //自动获取焦点
                that.$dropdown.find('input.search-input-dropdown').focus();
                //获取已经选中的item，在dropdown中设置勾中
                var selectedObjectIds = $(this).data('ObjectId');
                if (selectedObjectIds) {
                    var newSelectedObjectIds = [];
                    selectedObjectIds = selectedObjectIds.split(';');
                    for (var i = 0; i < selectedObjectIds.length; i++) {
                        if (selectedObjectIds[i] == 'undefined' || selectedObjectIds[i] == '') {
                            continue;
                        }
                        newSelectedObjectIds.push(selectedObjectIds[i]);
                    }
                    selectedObjectIds = newSelectedObjectIds;
                }
                if (selectedObjectIds && selectedObjectIds.length > 0) {
                    var checkboxItems = that.$dropDownItemContainer.find('input[type="checkbox"]');
                    for (var i = 0; i < checkboxItems.length; i++) {
                        $(checkboxItems[i]).prop('checked', false);
                        var itemObjectId = $(checkboxItems[i]).attr('data-itemid');
                        if ($.inArray(itemObjectId, selectedObjectIds) > -1) {
                            $(checkboxItems[i]).prop('checked', true);
                        }
                    }
                }
                //return false;
            });
            var $body = $(that.CurrentBody);
            var eventName = 'click.';
            if (that.DataField) {
                if (that.DataField.indexOf('.') > 0) {
                    //在子表
                    var trObjectId = $(that.Element).closest('tr').attr('data-objectid');
                    eventName += trObjectId + '.' + that.DataField;
                } else {
                    eventName += that.DataField;
                }
            } else if (that.ID) {
                eventName += that.ID;
            }
            //点击DropDown以外区域隐藏
            //后续要改进，不要每个控件绑定document的click事件，能不能在一个click里面隐藏所有的。需要考虑到主表，子表，列表过滤，报表过滤，列表默认值等地方
            $body.off(eventName).on(eventName, that, function (e) {
                var target = e.target;
                var ctrl = e.data;

                if (ctrl.$Input[0] != target && ctrl.$dropdown.find($(target)).length == 0) {
                    ctrl.$dropdown.hide();
                }
                //oEvent = oEvent || window.event;
                //oEvent.target
                //var position = that._getAbsPosition(that.$Input[0]);
                //var w = that.$dropdown.outerWidth(false);
                //var h = that.$dropdown.outerHeight(false) + that.$Input.outerHeight(false);
                //var mouseLeft = oEvent.pageX || window.event.pageX;
                //var mouseTop = oEvent.pageY || window.event.pageY;
                //if (mouseLeft < position.x || mouseLeft > position.x + w || mouseTop < position.y || mouseTop > position.y + h) {
                //    that.$dropdown.hide();
                //}
            });
        },
        //渲染 FormQuery的Modal
        _renderModal: function (target) {
            var that = target;
            that.ID = "FormQuery_" + $.IGuid();
            that.$modal = $("<div id='" + that.ID + "' class='modal fade modal-formquery'  data-backdrop='false' role='dialog'>" +
                "<div class='modal-dialog modal-lg modal-dialog-form'>" +
                "<div class='modal-content'>" +
                "<div class='modal-header modal-header-form'><div type='button' class='close' style='margin- top:-2px;' data-dismiss='modal'><span aria-hidden='true' class='fa icon-close' style='font-size:16px;'></span></div><h4 class='modal-title modal-title-form'>选择" + that.DisplayName + "</h4></div>" +
                "</div>" +
                "</div>" +
                "</div>");

            var $modalBody = $("<div class='modal-body'></div>");

            // 查询条件
            that.$searchForm = $("<div class='form-horizontal searchform myform-horizontal backgroundcolor'></div>");
            $modalBody.append(that.$searchForm);

            //查询条件按钮分割线
            that.$partingLine = $("<div style='border-bottom:1px solid #E3E7E9;text-align:center;'><i class='fa icon-arrow-up-double-b btn-up btnToggle' style='color:#e5e6e6;'></i></div>")
            $modalBody.append(that.$partingLine);

            var $modalFooter = $("<div class='modal-footer modal-footer-form'></div>");

            // 按钮
            that.$toolbar = $("<div class='toolbar text-left' style='margin-top:10px;'><div class='btn-group btn-group-sm' role='group'><button class='btn btn-ok btn-search btnSearch hide '><i class='fa fa-search'></i>查询</button><button class='btn btn-create btnAdd hide'><i class='fa icon-increase'></i>新增</button></div></div>");
            $modalBody.append(that.$toolbar);

            // 表格
            that.Table_ID = "FormTable_" + $.IGuid();
            that.$table = $("<table id='" + that.Table_ID + "' ></table>");

            var pagerStr = '<div class="table-page" id="bar-' + that.Table_ID + '">' +
                '<div class="page-index">' +
                '<input type="text" value="1" class="Page_Index" />/<label class="Page_Count">1</label>' +
                '</div>' +
                '<div class="btn-group table-page_ButtonGroup" style="width: 160px;">' +
                '<button class="btn Page_Num_Pre">上一页</button>' +
                '<button class="btn Page_Num_Next">下一页</button>' +
                '</div>' +
                '<div class="page-size dropup">' +
                '<button class="dropdown-toggle" data-toggle="dropdown" aria-expanded="false">' +
                '<span class="Page_Per_Size">' + 10 + '</span>' +
                '<i class="fa fa-angle-down"></i>' +
                '</button>' +
                '<ul class="dropdown-menu">' +
                '<li><a>5</a></li>' +
                '<li><a>10</a></li>' +
                '<li><a>20</a></li>' +
                '<li><a>50</a></li>' +
                '</ul>' +
                '</div>' +
                '<div class="page-total">共0条</div>' +
                '</div>';
            var buttonStr = '<div class="btn-group btn-group-sm" role="group" style="width:100%;"><button class="btn btn-ok btnMultiSelect">确定</button></div>';
            $modalBody.append(that.$table).append(pagerStr);
            //如果关联查询控件在子表中则允许批量选择，增加确定按钮
            //新增的时候出现按钮
            //$modalBody.append('<div class="btn-group btn-group-sm" role="group" style="width:100%;"><button class="btn btn-default btn-sm btnMultiSelect" style="float:right;">确定</button></div>')
            $modalFooter.append(buttonStr);
            that.$modal.find(".modal-content").append($modalBody).append($modalFooter);
            //$("body").append(that.$modal
            $(that.CurrentBody).append(that.$modal);

            //that.$Input = $("<div class='form-control form-query-add' style='height:32px;'></div");
            //that.$InputBody.append(that.$Input);
            that.SheetData = {
            };
            that.TableNeedRefresh = false;//为true的情况：关联查询过滤规则中配置了主表单的字段
            that.$addModel.off("click").on("click", function () {
                that.$dropdown && that.$dropdown.hide();
                //关联表单信息
                var associationSchemaInfo = $(that.Element).attr('data-boSchemaInfo');
                if (associationSchemaInfo != void 0 && associationSchemaInfo != '') {
                    var infoJson = $.parseJSON(associationSchemaInfo);
                    that.associateChildSchema = infoJson.IsChildSchema;
                } else {
                    that.associateChildSchema = undefined;
                }

                that._getAssociationFilterData();
                that.$modal.modal("show");
            });

            that.SearchInitialized = false; // 查询条件是否已初始化
            that.TableInitialized = false; // 表格是否已初始化
            that.CheckedRows = [];//点击“确定”按钮或者“查询”按钮将勾选的行存入CheckedRows
            // modal的show事件
            that.$modal.on("show.bs.modal", function (e) {
                $.MsgFilter.show();
                if (that.IsQueryControl) {
                    that.SelectedItems = [];
                    var items = that.$Input.find('i');
                    for (var i = 0; i < items.length; i++) {
                        var $item = $(items[i]);
                        var objectId = $item.attr('data-objectid');
                        if (objectId == 'undefined') {
                            continue;
                        }
                        var name = $item.closest('a').text();
                        //Error 列表过滤部分只显示一个Item，但是ObjectId可能是多个
                        var arr = objectId.split(";");
                        for (var j = 0; j < arr.length; j++) {
                            if (arr[j] == "" || arr[j] == undefined) {
                                continue;
                            }
                            that.SelectedItems.push({
                                ObjectId: arr[j], Name: name
                            });
                        }
                    }
                }

                that.$table.bootstrapTable('uncheckAll');
                var currModal = this;
                if (!$.FormQueryData.PropertyQueryItems[that.BOSchemaCode] || !$.FormQueryData.PropertyQueryColumns[that.BOSchemaCode]) {
                    var params = {
                        ActionName: "LoadView",
                        QueryCode: that.BOSchemaCode,
                        flag: $.IGuid()
                    }

                    that.Ajax("/App/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                        if (data.ReturnData.Response.Columns.length == 0 && data.ReturnData.QueryItems.length == 0) {
                            $(currModal).modal("hide");
                            $.IShowError("没有设置可用列！");
                            return;
                        }
                        //$.FormQueryData.PropertyQueryColumns[that.BOSchemaCode] = data.ReturnData.Response.Columns;
                        $.FormQueryData.PropertyQueryColumns[that.BOSchemaCode] = data.ReturnData.SortedColumns;
                        //调整initSearchParams位置为initTable之前，原因是在关联列表中初始时候searchform是空
                        $.FormQueryData.PropertyQueryItems[that.BOSchemaCode] = data.ReturnData.QueryItems;
                        $.FormQueryData.PropertyQueryDefaultValues[that.BOSchemaCode] = JSON.parse(data.ReturnData.QueryDefaultValues);
                        if (!that.SearchInitialized) {
                            that._initSearchParams(data.ReturnData.QueryItems, $.FormQueryData.PropertyQueryDefaultValues[that.BOSchemaCode]);
                        }

                        if (!that.TableInitialized || that.TableNeedRefresh) {
                            that._initTable($.FormQueryData.PropertyQueryColumns[that.BOSchemaCode]);//合并表头
                        } else {
                            that._setRowChecked();
                        }
                        that.afterTableInit();
                    });
                }
                else {
                    if (!that.TableInitialized || that.TableNeedRefresh) {
                        that._initTable($.FormQueryData.PropertyQueryColumns[that.BOSchemaCode]);
                    } else {
                        that._setRowChecked();
                    }
                    if (!that.SearchInitialized) {
                        that._initSearchParams($.FormQueryData.PropertyQueryItems[that.BOSchemaCode], $.FormQueryData.PropertyQueryDefaultValues[that.BOSchemaCode]);
                    }
                }
                that.afterTableInit();
            });
            that.$modal.on("hidden.bs.modal", function (e) {
                $.MsgFilter.remove();
            });
            var $btnAdd = that.$toolbar.find(".btnAdd");
            // 只有表单中的关联查询允许新增关联对象
            if (that.IsRunnable && that.CanCreate && $(that.Element).hasClass("sheet-control")) {
                // 新增关联对象
                $btnAdd.removeClass("hide");
                $btnAdd.off("click").on("click", function () {
                    var params = {
                        ActionName: "GetBizObjectSchemaDisplayName",
                        SchemaCode: that.BOSchemaCode,
                        flag: $.IGuid()
                    }
                    that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                        if (data.Successful) {
                            var url = "/Form/DefaultSheet?SchemaCode=" + that.BOSchemaCode + "&SheetQueryField=" + that.DataField;
                            if (that.BizObjectId) {
                                url += "&SheetQueryRowId=" + that.BizObjectId;
                            }
                            that.$modal.modal("hide");
                            $.ISideModal.Show(url, data.ReturnData.DisplayName);
                        }
                    });
                });
            }
            else {
                $btnAdd.addClass("hide");
            }

            //子表批量选择功能
            var $btnMultiSelect = that.$modal.find('.btnMultiSelect');
            //批量选择确定
            $btnMultiSelect.off('click').on('click', function () {
                that.$modal.modal('hide');
                $('.table-tip').hide();
                if (that.IsQueryControl) {
                    if (that.associateChildSchema == undefined) {
                        that.associateChildSchema = false;
                        for (var key in that.CheckedRows[0]) {
                            if (key.toLowerCase().indexOf('.objectid') > -1) {
                                that.associateChildSchema = true;
                                break;
                            }
                        }
                    }
                    var objectIdStr = 'ObjectId';
                    var nameStr = 'Name';
                    if (that.associateChildSchema) {
                        objectIdStr = that.BOSchemaCode + '.ObjectId';
                        nameStr = that.BOSchemaCode + '.Name';
                    }
                    //用于列表过滤条件
                    that.$Input.empty();
                    that.$Input.data('ObjectId', '').empty();
                    //Error：checkedRows有重复

                    for (var i = 0; i < that.CheckedRows.length; i++) {
                        var objectId = that.CheckedRows[i][objectIdStr];
                        if (!objectId) {
                            continue;
                        }
                        var name = that.CheckedRows[i][nameStr] || "--";
                        var link = '<a href="javascript:;" class="label label-info" style="position:relative;">' + name + '<i class="fa icon-close-middle" style="margin-left:5px;" data-objectId="' + objectId + '"></i></a>';
                        that.$Input.append(link);
                        objectIds = that.$Input.data('ObjectId') || '';
                        objectIds += (objectId + ';');
                        that.$Input.data('ObjectId', objectIds);
                        //that.$dropDownItemContainer.find('input[type="checkbox"][data-itemid="' + thisObjectId + '"]').prop('checked', true);
                    }
                    that.$Input.find('i').on('click', function () {
                        var $this = $(this);
                        $this.closest('a').remove();
                        var objectIds = that.$Input.data('ObjectId');
                        var thisObjectId = $this.attr('data-ObjectId');
                        objectIds = objectIds.replace(thisObjectId + ';', '');
                        that.$Input.data('ObjectId', objectIds);
                        that.OnChange();
                        that.$dropDownItemContainer.find('input[type="checkbox"][data-itemid="' + thisObjectId + '"]').prop('checked', false);
                    });
                    that.OnChange();
                    return;
                }

                //获取check的行
                var datafield = that.DataField;
                //获取当前FormQuery所在行
                var gridView = that.$Input.closest("[data-controlkey='FormGridView']");
                var fGridView = $(gridView).FormGridView();
                var currTr = that.$Input.closest('tr');//当前行
                var nextTr = $(currTr).nextAll('tr');//后续行
                //先将当前行添加进去
                var currQuery = $(currTr).find('[data-datafield="' + datafield + '"][data-controlkey="FormQuery"]').FormQuery();
                var queryRows = [];
                queryRows.push(currQuery);
                if (nextTr.length == 0) {
                    //后续没有行，直接新增行
                    if (fGridView && fGridView.Editable) {
                        for (var i = 0; i < that.CheckedRows.length - 1; i++) {
                            fGridView.AddRow();
                            var newTr = $(currTr).nextAll('tr').last();
                            var newQuery = $(newTr).find('[data-datafield="' + datafield + '"][data-controlkey="FormQuery"]').FormQuery();
                            queryRows.push(newQuery);
                        }
                    }
                } else {
                    //后续有行，需要判断行是否为空，取空行
                    var hasAddRow = false;//标记是否新增过行，如果新增过行则不需要便利已有行了
                    for (var i = 0; i < that.CheckedRows.length - 1; i++) {
                        var pushedOldRow = false;//标识是否将已有行加入queryRows
                        while ($(currTr).next('tr').length > 0 && !hasAddRow) {
                            var nextTr = $(currTr).next('tr');
                            var nextQuery = $(nextTr).find('[data-datafield="' + datafield + '"][data-controlkey="FormQuery"]').FormQuery();
                            var oldQueryValue = nextQuery.GetValue();
                            currTr = nextTr;
                            if (oldQueryValue != '' && oldQueryValue != void 0) {
                            } else {
                                queryRows.push(nextQuery);
                                pushedOldRow = true;
                                break;
                            }
                        }
                        //添加新行
                        if (!pushedOldRow) {
                            hasAddRow = true;
                            if (fGridView.Editable) {
                                fGridView.AddRow();
                                var newTr = $(currTr).nextAll('tr').last();
                                var newQuery = $(newTr).find('[data-datafield="' + datafield + '"][data-controlkey="FormQuery"]').FormQuery();
                                queryRows.push(newQuery);
                            }
                        }
                    }
                }

                //批量赋值
                setTimeout(function () {
                    for (var i = 0; i < that.CheckedRows.length; i++) {
                        var row = that.CheckedRows[i];
                        var objectId = row['ObjectId'];
                        var name = row['Name'];
                        if (that.associateChildSchema == true) {
                            objectId = row[that.BOSchemaCode + '.ObjectId'];
                            name = row[that.BOSchemaCode + '.Name'];
                        } else if (that.associateChildSchema == undefined) {//兼容旧的
                            for (var key in row) {
                                if (key.toLowerCase().indexOf('.objectid') > -1) {
                                    objectId = row[key];
                                }
                                if (key.toLowerCase().indexOf('.name') > -1) {
                                    name = row[key];
                                }
                            }
                        }
                        if (name == null || $.trim(name) == '') {
                            name = '--';
                        }
                        if (queryRows[i] == undefined) {
                            continue;
                        }
                        queryRows[i].$Input && queryRows[i].$Input.data("ObjectId", objectId).text(name);
                        queryRows[i].OnChange.apply(queryRows[i], [row]);
                        queryRows[i]._toDetailLink();
                    }
                    ////调整子表列宽
                    //if (!$.isEmptyObject(that.ObjectId)) {
                    //    var gridViewCtrl = $(that.Element).closest('div[data-controlkey="FormGridView"]');
                    //    if (gridViewCtrl.length > 0) {
                    //        gridViewCtrl = gridViewCtrl.FormGridView();
                    //        gridViewCtrl && gridViewCtrl.ResizeColumn(true);
                    //    }
                    //}
                }, 0);
            });
        },
        afterTableInit: function () {
            var that = this;
            //如果是修改要隐藏“确定”按钮（确定按钮只有在关联查询字段在子表中且在新增时候显示）
            if (that.DataField != undefined) {
                //在表单中
                if (that.DataField.indexOf('.') == -1 || (that.$Input.find('a').attr('title') != undefined && that.$Input.find('a').attr('title') != '') || (that.DataField.indexOf(".") > -1) && !that.isFirstSetValue) {
                    //不是子表字段或者是修改值情况要隐藏checkbox和确定按钮
                    that.$modal.find('.btnMultiSelect').addClass('hide');
                    that.$table.bootstrapTable('hideColumn', 'checkcolumn');
                } else {
                    //显示
                    that.$modal.find('.btnMultiSelect').removeClass('hide');
                    that.$table.bootstrapTable('showColumn', 'checkcolumn');
                }
            } else {
                //显示
                that.$modal.find('.btnMultiSelect').removeClass('hide');
                that.$table.bootstrapTable('showColumn', 'checkcolumn');
            }
            //判断是否要合并表头
            that._setColumnColspan(that.TableAllColumns);
        },

        //获取关联表单过滤条件中控件的值
        _getAssociationFilterData: function () {
            //判断关联查询是否配置了过滤规则
            //如果配置了过滤规则且规则中有当前主表单的字段
            //则要取主表单中的字段
            //兼容旧的bofilter
            var that = this;
            if (that.DataField == void 0) {
                return;
            }
            var bofilter = $(that.Element).attr('data-bofilter');
            if (that.AssociationFilter || bofilter) {
                var rule = that.AssociationFilter.Rule || $.parseJSON(bofilter).Rule;
                if (rule && rule.length > 0) {
                    var controls = $.ControlManager.Controls;
                    var hasCreatedByCtrl = false;//是否有创建者控件
                    var hasOwnerCtrl = false;//是否有拥有者控件
                    var hasOwnerDeptCtrl = false;//是否有所属部门控件
                    for (var control in controls) {
                        var ctrl = controls[control];
                        if (ctrl.IsQueryControl) {
                            continue;
                        }
                        var controlDataField = ctrl.DataField;
                        if (controlDataField == 'CreatedBy.FullName') {
                            controlDataField = controlDataField.split('.')[0];
                            hasCreatedByCtrl = true;
                        }
                        if (controlDataField == 'OwnerId') {
                            hasOwnerCtrl = true;
                        }
                        if (controlDataField == 'OwnerDeptId') {
                            hasOwnerDeptCtrl = true;
                        }
                        //rule.indexOf(controlDataField)<0这样不能判断rule中是否有controlDataField,例如rule:{D00001.helloworld}=="hi",controlDataField:hello
                        if (rule.indexOf(controlDataField + '}') < 0 || controlDataField == that.DataField) continue;
                        //如果rule中包含controlDataField，则应该是以如下形式存在
                        //{xx}或者{xxx.xx}形式，主表中的字段是{controlDataField}，子表中字段是{xxx.controlDataField}
                        var ctrlFieldIndex = rule.indexOf(controlDataField + '}');
                        var prefix = rule.slice(ctrlFieldIndex - 1, ctrlFieldIndex);
                        if (prefix != '{' && prefix != '.') {
                            continue;
                        }
                        //字表中的control不调用SaveDataField，由子表自己调用SaveDataField保存值
                        var controlValue = '';
                        if (controlDataField == 'CreatedBy') {
                            controlValue = $.SmartForm.ResponseContext.ReturnData.CreatedBy.Value[0].UnitId;
                        } else {
                            if (ctrl.DataField == void 0 || controlDataField == "Comments") continue;
                            //判断关联查询控件是否在子表中
                            if (controlDataField.indexOf('.') > 0 && ctrl.Type != 26 && ctrl.Type != 27) {
                                //规则中的字段在子表中
                                if (that.DataField.indexOf('.') > 0) {
                                    //获取与关联查询控件同一行的子表控件
                                    var $tr = $(that.Element).closest('tr');
                                    var thisRowCtrl = $tr.find('div[data-datafield="' + controlDataField + '"]');
                                    if (thisRowCtrl.length > 0) {
                                        controlValue = $(thisRowCtrl[0]).JControl().GetValue();
                                    }
                                } else {
                                    var $ctrl = $('div[data-datafield="' + controlDataField + '"]').not('.table_th');
                                    if ($ctrl != undefined) {
                                        controlValue = [];
                                        for (var i = 0; i < $ctrl.length; i++) {
                                            controlValue.push($($ctrl[i]).JControl().GetValue());
                                        }
                                    }
                                }
                            } else {
                                if (ctrl.Type == 26 || ctrl.Type == 27) {
                                    //单人
                                    //控件没有渲染的情况
                                    if (!ctrl.Visible) {
                                        if (ctrl.Type == 26) {
                                            controlValue = ctrl.Value[0].UnitId;
                                        } else {

                                        }
                                    } else {
                                        controlValue = ctrl.GetUnitIDs();
                                    }
                                } else if (ctrl.Type == 7) {
                                    controlValue = ctrl.GetNum();
                                } else {
                                    controlValue = ctrl.GetValue();
                                }
                            }
                        }
                        that.SheetData[controlDataField] = controlValue;
                        that.TableNeedRefresh = true;
                        //if (controlValue) break;
                    }
                    if (!hasCreatedByCtrl) {
                        that.SheetData["CreatedBy"] = $.SmartForm.ResponseContext.ReturnData.CreatedBy.Value[0].UnitId;
                    }
                    if (!hasOwnerCtrl) {
                        that.SheetData["OwnerId"] = $.SmartForm.ResponseContext.ReturnData.OwnerId.Value[0].UnitId;
                    }
                    if (!hasOwnerDeptCtrl) {
                        that.SheetData["OwnerDeptId"] = $.SmartForm.ResponseContext.ReturnData.OwnerDeptId ? ($.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0] != undefined ? $.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0].UnitId : null) : null;
                    }
                    that.SheetData["CreatedTime"] = $.SmartForm.ResponseContext.ReturnData.CreatedTime.Value;
                    that.SheetData["ParentObjectId"] = $.SmartForm.ResponseContext.BizObjectId;
                }
            }
        },
        //判断是否要合并表头
        _setColumnColspan: function (columns) {
            if (columns == void 0 || columns.length == 0) {
                return;
            }

            var colspantr = this.$table.find('thead tr[class="tr-colspan"]');
            if (colspantr != void 0 && colspantr.length > 0) {
                return;
            }

            var columnsCounter = {}; //统计主表字段和子表字段数量

            var parentColumnCount = 0;
            var childColumnCount = 0;

            for (var i = 0; i < columns.length; i++) {
                var field = columns[i].field;
                if (!columns[i].visible || field == undefined) {
                    continue;
                }
                if (field.indexOf('.') > -1) {
                    childColumnCount++;
                    var childField = field.slice(0, field.indexOf("."));
                    if (columnsCounter[childField] != undefined) {
                        columnsCounter[childField]++;
                    } else {
                        columnsCounter[childField] = 1;
                    }
                } else {
                    parentColumnCount++;
                    columnsCounter[field] = 0;
                }
            }

            if (childColumnCount > 0) {
                if (this.$table.find('th[data-field="checkcolumn"]').length == 0 && this.DataField.indexOf('.') > 0) {
                    //checkbox不可见
                    childColumnCount++;
                    parentColumnCount--;
                }


                //var tr = $('<tr class="tr-colspan"></tr>').append('<th colspan="' + parentColumnCount + '" style="text-align:center;">主表</th>').append('<th colspan="' + childColumnCount + '" style="text-align:center;">子表</th>');
                //var thead = this.$table.find('thead');
                var oldtr = this.$table.find('thead tr');
                //$(tr).insertBefore(oldtr);
                var columnCount = childColumnCount + parentColumnCount;
                var $topTr = $("<tr class='tr-colspan' style='border-bottom:none'></tr>");
                //for (var i = 0; i < columnCount; i++) {
                //    $topTr.append("<th></th>");
                //}
                for (var key in columnsCounter) {
                    if (columnsCounter[key] == 0) {
                        var $title = oldtr.find("th[data-field='" + key + "']");
                        $topTr.append($("<th rowspan='2'>").html($title.html()).attr("data-field", $title.attr("data-field")));
                        $title.hide();
                    } else {
                        $topTr.append("<th colspan='" + columnsCounter[key] + "' style='text-align:center;border-bottom:1px solid #e2e6e8'>子表</th>")
                    }
                }
                $topTr.insertBefore(oldtr);
            }
        },
        _checkRows: function (rows) {
            var that = this;
            var childObjectId = undefined;
            //先判断是check的是单行还是多行
            var tempRows = that.CheckedRows;
            if (that.associateChildSchema == true) {
                childObjectId = that.BOSchemaCode + '.ObjectId';
            }
            if ($.isArray(rows)) {
                if (that.associateChildSchema == undefined) {
                    //兼容旧的
                    for (var key in rows[0]) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                for (var i = 0; i < rows.length; i++) {
                    var rowExist = false;
                    for (var j = 0; j < tempRows.length; j++) {
                        if (childObjectId != undefined) {
                            if (rows[i][childObjectId] == tempRows[j][childObjectId]) {
                                rowExist = true;
                                break;
                            }
                        } else {
                            if (rows[i]['ObjectId'] == that.CheckedRows[j]['ObjectId']) {
                                rowExist = true;
                                break;
                            }
                        }
                    }
                    if (!rowExist) {
                        that.CheckedRows.push(rows[i]);
                    }
                }
            } else {
                if (that.associateChildSchema == undefined) {//兼容旧的
                    for (var key in rows) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                var rowExist = false;
                for (var i = 0; i < tempRows.length; i++) {
                    if (childObjectId != undefined) {
                        if (tempRows[i][childObjectId] == rows[childObjectId]) {
                            rowExist = true;
                            break;
                        }
                    } else {
                        if (tempRows[i]['ObjectId'] == rows['ObjectId']) {
                            rowExist = true;
                        }
                    }
                }
                if (!rowExist) {
                    that.CheckedRows.push(rows);
                }
            }
        },
        _unCheckRows: function (rows) {
            var that = this;
            var childObjectId = undefined;
            var tempRows = that.CheckedRows;
            if (that.associateChildSchema == true) {
                childObjectId = that.BOSchemaCode + '.ObjectId';
            }
            if ($.isArray(rows)) {//多行
                if (that.associateChildSchema == undefined) {//兼容旧的
                    for (var key in rows[0]) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                for (var i = 0; i < rows.length; i++) {
                    for (var j = 0; j < tempRows.length; j++) {
                        if (childObjectId != undefined) {
                            that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                                return item[childObjectId] == rows[i][childObjectId];
                            }, true);
                        } else {
                            that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                                return item['ObjectId'] == rows[i]['ObjectId'];
                            }, true);
                        }
                    }
                }
            } else {//单行
                if (that.associateChildSchema == undefined) {//兼容旧的
                    for (var key in rows) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                for (var i = 0; i < tempRows.length; i++) {
                    if (childObjectId != undefined) {
                        //if (tempRows[i][childObjectId] == rows[childObjectId]) {
                        //移除行
                        //that.CheckedRows.splice($.inArray(rows, that.CheckedRows), 1);
                        //}
                        that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                            return item[childObjectId] == rows[childObjectId];
                        }, true);
                    } else {
                        that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                            return item['ObjectId'] == rows['ObjectId'];
                        }, true);
                    }
                }
            }
        },
        _initSearchParams: function (queryItems, queryDefaultValues) {
            var that = this;
            if (!queryItems || queryItems.length == 0) {
                this.$searchForm.hide();
                this.$partingLine.hide();
                return;
            }
            var searchHtml = "";
            var showCount = 0;
            for (var i = 0, len = queryItems.length; i < len; i++) {
                var queryItem = queryItems[i];
                if (queryItem.Visible == false) {
                    continue;
                }
                searchHtml += (showCount % 2 == 0 ? "<div class='form-group form-group-sm myform-group mgb5' style='margin-bottom:10px;'>" : "");
                switch (queryItem.DataType) {
                    case 1:
                        //searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><span class="mycheckbox" data-propertyname="' + queryItem.PropertyName + '"><label class="checkbox-inline"><input type="checkbox" class="myform-control" value="true" style="display:block;" /> 是</label><label class="checkbox-inline"><input type="checkbox" value="false" style="display:block;" /> 否</label></span></div>';
                        //searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><span class="mycheckbox" data-propertyname="' + queryItem.PropertyName + '"><label class="checkbox-inline"><input type="checkbox" value="true" style="display:block;" /> 是</label><label class="checkbox-inline"><input type="checkbox" value="false" style="display:block;" /> 否</label></span></div>';
                        var inputId = $.IGuid();
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName +
                            '</label><div class="col-sm-4 pdt5"><span class="mycheckbox" data-propertyname="' + queryItem.PropertyName + '">' +
                            '<input type="checkbox" id="' + inputId + 't" value="true" style="display:none;" /><label for="' + inputId + 't" class="checkbox-inline" style="margin:2px 10px 0 0"> 是</label>' +
                            '<input type="checkbox" id="' + inputId + 'f" value="false" style="display:none;" /> <label for="' + inputId + 'f" class="checkbox-inline" style="margin:2px 10px 0 0">否</label></span></div>';

                        break;
                    case 14:
                        if (queryItem.AssociationSchemaCode) {
                            searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="mycomboboxlist" data-dataField="' + queryItem.PropertyName + '" data-schemaCode="' + this.BOSchemaCode + '" data-width="100%" data-defalutvalue="' + queryItem.DefaultValue + '"> </div></div>';
                        }
                        else if (queryItem.SelectedValues && queryItem.SelectedValues !== "") {
                            var checkItemsHtml = "";
                            var checkItems = queryItem.SelectedValues.split(";");
                            searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5">';
                            searchHtml += "<select id='" + queryItem.PropertyName + "' multiple='multiple' class='mymultiselect'>";
                            checkItemsHtml += "<option value='--'>--(空值)</option>";
                            for (var ci = 0, clen = checkItems.length; ci < clen; ci++) {
                                checkItemsHtml += "<option value='" + checkItems[ci] + "'> " + checkItems[ci] + "</option>";
                            }
                            searchHtml += checkItemsHtml;
                            searchHtml += "</select></div>";
                        }
                        else {
                            if (queryItem.PropertyName == "SeqNo") {
                                searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><input class="form-control mytext " type="text" data-propertyname="' + queryItem.PropertyName + '" /></div>';
                            }
                            else {
                                searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="mycombobox" data-dataField="' + queryItem.PropertyName + '" data-schemaCode="' + this.BOSchemaCode + '" data-width="100%" data-defalutvalue="' + queryItem.DefaultValue + '"> </div></div>';
                            }
                        }
                        break;

                    case 13:
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><input class="form-control mytext " type="text" data-propertyname="' + queryItem.PropertyName + '" /></div>';
                        break;
                    case 7:
                    case 9:
                    case 11:
                    case 35:

                        if (queryItem.DisplayName == "Status") {
                            //关联查询中的的筛选,隐藏流程状态
                            //add by jnyf
                            continue;
                            //流程状态
                            searchHtml += '<label class="col-sm-2 control-label">流程状态</label><div class="col-sm-4 pdt5">';
                            searchHtml += '<select id="' + queryItem.DisplayName + '" multiple="multiple" class="mymultiselect">';
                            searchHtml += '<option value="进行中">进行中</option><option value="已结束">已结束</option><option value="已取消">已取消</option>';
                            searchHtml += '</select>';
                            searchHtml += '</div>';
                        } else {
                            searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="input-group mynum" data-propertyname="' + queryItem.PropertyName + '"><div class="input-group-addon">从</div><input type="text" class="form-control" /><div class="input-group-addon" style="border-width:1px 0 1px 0">至</div><input type="text" class="form-control" /></div></div>';
                        }
                        break;
                    case 5:
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="input-group mydatetime" data-propertyname="' + queryItem.PropertyName + '"><div class="input-group-addon">从</div><input type="text" data-datetimemode="' + queryItem.DateTimeMode + '" class="form-control mydatetimepicker mytimestart" /><div class="input-group-addon" style="border-width:1px 0 1px 0">至</div><input type="text" data-datetimemode="' + queryItem.DateTimeMode + '" class="form-control mydatetimepicker mytimeend" /></div></div>';
                        break;
                    case 26:
                        var tempHtml = '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="myuserpicker" data-displayname="' + queryItem.DisplayName + '" data-propertyname="' + queryItem.PropertyName + '" data-width="100%"></div></div>';
                        if (queryItem.PropertyName == 'OwnerId' || queryItem.PropertyName == 'CreatedBy') {
                            tempHtml = '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="myuserpicker" data-displayname="' + queryItem.DisplayName + '" data-propertyname="' + queryItem.PropertyName + '" data-orgunitvisible="false" data-width="100%"></div></div>';
                        } else if (queryItem.PropertyName == 'OwnerDeptId') {
                            tempHtml = '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="myuserpicker" data-displayname="' + queryItem.DisplayName + '" data-propertyname="' + queryItem.PropertyName + '" data-orgunitvisible="true" data-uservisible="false" data-width="100%"></div></div>';
                        }
                        searchHtml += tempHtml;
                        break;
                    case 50:
                    case 51:
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 mydropdown pdt5" data-propertyname="' + queryItem.PropertyName + '" data-boschemacode="' + queryItem.AssociationSchemaCode + '"></div>';
                        break;
                }
                searchHtml += ((showCount % 2 || showCount === len - 1) != 0 ? "</div>" : "");
                showCount++;
            }
            this.$searchForm.append(searchHtml);

            this.$searchForm.find(".mycombobox").each(function () {
                var $combobox = $(this);
                var schemacode = $combobox.attr("data-schemaCode");
                var datafield = $combobox.attr("data-dataField");
                var defaultvalue = $combobox.attr("data-defalutvalue");
                var mycombobox = $combobox.FormComboBox({
                    IsQueryControl: true,
                    SchemaCode: schemacode,
                    DataField: datafield,
                    DefaultValue: defaultvalue,
                    Width: "50%",
                    OnChange: function () {
                        that._refreshTable();
                    },
                });
            });
            this.$searchForm.find(".mycombobox").removeClass("form-group");

            this.$searchForm.find(".mycomboboxlist").each(function () {
                var $combobox = $(this);
                var schemacode = $combobox.attr("data-schemaCode");
                var datafield = $combobox.attr("data-dataField");
                var defaultvalue = $combobox.attr("data-defalutvalue");
                var mycomboboxlist = $combobox.FormComboBoxList({
                    IsQueryControl: true,
                    Width: "50%",
                    OnChange: function () {
                        that._refreshTable();
                    },
                });
            });
            this.$searchForm.find(".mycomboboxlist").removeClass("form-group");


            // 统一初始化datetimepicker
            this.$searchForm.find(".mydatetimepicker").each(function () {
                var $picker = $(this);
                var minView = 2;
                var startView = 2;
                var mode = $picker.attr("data-datetimemode");
                if (!mode) {
                    mode = "yyyy-mm-dd";
                }
                if (mode == "yyyy-mm-dd hh:ii") {
                    minView = 0;
                }
                $picker.datetimepicker({
                    language: 'zh-CN',
                    format: mode,
                    todayBtn: true,
                    container: $picker.closest(".modal-dialog"),
                    autoclose: true,
                    startView: startView, // 选择器打开后首先显示的视图
                    minView: minView// 选择器能够提供的最精确的视图
                }).on("changeDate", function () {
                    that._refreshTable();
                });;
            });
            // 统一初始化选人控件
            var $myuserpicker = this.$searchForm.find(".myuserpicker");
            if (!$.isEmptyObject($myuserpicker)) {
                for (var r = 0; r < $myuserpicker.length; r++) {
                    var tempSheetUser = $($myuserpicker[r]).FormMultiUser({ IsQueryControl: true });
                    tempSheetUser.OnChange = function () {
                        that._refreshTable();
                    }
                }
            }

            this.$searchForm.find(".myuserpicker").removeClass("form-group");
            this.$searchForm.find(".mymultiselect").each(function () {
                $(this).multiselect({
                    enableFiltering: true,
                    filterPlaceholder: '搜索',
                    buttonText: function (options, select) {
                        if (options.length === 0) {
                            return "";
                        }
                        else {
                            var labels = [];
                            options.each(function () {
                                if ($(this).attr("label") !== void 0) {
                                    labels.push($(this).attr("label"));
                                }
                                else {
                                    labels.push($(this).html());
                                }
                            });
                            return labels.join(",") + "";
                        }
                    },
                    onChange: function () {
                        //that._refreshTable(); 
                    },
                    onDropdownShow: function () {
                        //点击时选人控件隐藏
                        $("div[data-FormMultiUserPanel='SelectorPanel'],div[data-FormUserPanel='SelectorPanel'],div[data-formmultiuserpanel='searchdiv']").hide();
                        $(".form-query-dropdown").hide();
                    },
                    selectedClass: "multiselect-selected"
                });
            });
            // 下拉搜索自动获取焦点
            $(".dropdown-toggle").on('click', function () {
                var that = this;
                setTimeout(function () {
                    $(that).next().find("input.multiselect-search").focus();
                }, 200);
            });
            // 统一初始化关联查询控件
            this.$searchForm.find(".mydropdown").each(function () {
                //筛选控件使用关联多选控件
                var myquery = $(this).FormMultiQuery({ IsQueryControl: true });
                myquery.IsQueryControl = true;
                myquery.OnChange = function () {
                    that._refreshTable();
                }
            });//.FormQuery();
            this.$searchForm.find(".mydropdown").removeClass("form-group");


            this.$searchForm.find("input[type='text']").blur(function () {
                //有下拉选项中在ValChange触发刷新数据
                if (!$(this).hasClass("comboboxtext")) {
                    that._refreshTable();
                }
            }).keydown(function (e) {
                if (e.which == 13) {
                    that._refreshTable();
                }
            });

            this.$searchForm.find("input[type='checkbox']").change(function () {
                that._refreshTable();
            });

            /***********************************关联查询默认查询 Begin***********************************/
            //格式化日期
            var formatDate = function (date) {
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                var day = date.getDate();
                return year + '-' + (month < 10 ? ('0' + month) : month) + '-' + (day < 10 ? ('0' + day) : day);
            };
            //当天
            var thisDay = function () {
                var date = new Date();
                date = formatDate(date);
                return date + ';' + date;
            };
            //本周
            var thisWeek = function () {
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth();
                var day = date.getDate();
                var dayOfWeek = date.getDay();
                var start = new Date(year, month, day - dayOfWeek);
                start = formatDate(start);
                var end = new Date(year, month, day + (6 - dayOfWeek));
                end = formatDate(end);
                return start + ';' + end;
            };
            //本月
            var thisMonth = function () {
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth();
                var start = new Date(year, month, 1);
                start = formatDate(start);
                var end = new Date(year, month + 1, 0);
                end = formatDate(end);
                return start + ';' + end;
            };
            //本季度
            var thisQuarter = function () {
                var startMonth = 0;
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                if (month < 3) {
                    startMonth = 0;
                } else if (month > 2 && month < 6) {
                    startMonth = 3;
                } else if (month > 5 && month < 9) {
                    startMonth = 6;
                } else if (month > 8) {
                    startMonth = 9;
                }
                var start = new Date(year, startMonth, 1);
                var end = new Date(year, startMonth + 3, 0);
                start = formatDate(start);
                end = formatDate(end);
                return start + ';' + end;
            };
            //本年度
            var thisYear = function () {
                var date = new Date();
                var year = date.getFullYear();
                var start = new Date(year, 0, 1);
                var end = new Date(year, 12, 0);
                start = formatDate(start);
                end = formatDate(end);
                return start + ';' + end;
            };
            //设置默认查询值
            //下面这段代码主要是用于关联查询中设置默认值的列表
            var searchParams = {
            };
            for (var i = 0; i < queryItems.length; i++) {
                var item = queryItems[i];
                if (item.DataType == 5) {
                    //datetime
                    var filterValue = parseInt(item.FilterValue);
                    switch (filterValue) {
                        case 1://当天
                            searchParams[item.PropertyName] = thisDay();
                            break;
                        case 2://本周
                            searchParams[item.PropertyName] = thisWeek();
                            break;
                        case 3://本月
                            searchParams[item.PropertyName] = thisMonth();
                            break;
                        case 4://本季度
                            searchParams[item.PropertyName] = thisQuarter();
                            break;
                        case 5://本年度
                            searchParams[item.PropertyName] = thisYear();
                            break;
                        default:
                            break;
                    }
                } else if (item.DataType == 26) {
                    var filterValue = parseInt(item.FilterValue);
                    var organizationType = parseInt(item.OrganizationType);
                    var defaultValue = queryDefaultValues[item.PropertyName];
                    switch (filterValue) {
                        case 1://本人
                            searchParams[item.PropertyName] = defaultValue + ";" + organizationType;
                            break;
                        case 2://本部门
                            searchParams[item.PropertyName] = defaultValue + ";" + organizationType;
                            break;
                        default:
                            break;
                    }
                }
                else {
                    //searchParams[queryItems[i].PropertyName] = queryItems[i].DefaultValue;
                    searchParams[queryItems[i].PropertyName] = queryDefaultValues[queryItems[i].PropertyName];
                }
            }
            var $divSearch = this.$searchForm;
            //单选、多选、下拉
            var myMultiSelect = $divSearch.find(".mymultiselect");
            for (var i = 0; i < myMultiSelect.length; i++) {
                var $property = $(myMultiSelect[i]);
                var propertyName = $property.attr("id");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    //$property.multiselect("select", propertyVal.split(";"));
                    $property.multiselect("select", propertyVal);
                }
            }
            // 文本
            var myText = $divSearch.find(".mytext");
            for (var i = 0; i < myText.length; i++) {
                var $property = $(myText[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    $property.val(propertyVal);
                }
            }
            // 选人
            var myUserPicker = $divSearch.find(".myuserpicker");
            for (var i = 0; i < myUserPicker.length; i++) {
                var $property = $(myUserPicker[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    var arr = propertyVal.split(';');
                    var $ctrl = $property.FormMultiUser();//.SetValue(arr[0]);

                    $ctrl.SetValue(arr[0]);
                    if (parseInt(arr[1]) == 0) {
                        //人员可选
                        $($ctrl.Element).find('li[data-tabtype="tab_Deps"]').remove();
                    } else if (parseInt(arr[1]) == 1) {
                        //部门可选
                        $($ctrl.Element).find('li[data-tabtype="tab_Users"]').remove();
                    }
                }
            }
            // 数字
            var myNum = $divSearch.find(".mynum");
            for (var i = 0; i < myNum.length; i++) {
                var $property = $(myNum[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    //var defaultValue = propertyVal;
                    var valArr = propertyVal;//.split(";");
                    for (var j = 0; j < valArr.length; j++) {
                        if (!$.isNumeric(valArr[j])) {
                            continue;
                        }
                        $property.find("input:text").eq(j).val(valArr[j]);
                    }
                }
            }
            //是/否
            var myCheckBox = $divSearch.find('.mycheckbox');
            for (var i = 0; i < myCheckBox.length; i++) {
                var $property = $(myCheckBox[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal != undefined && propertyVal != null && propertyVal != "") {
                    if (propertyVal && propertyVal !== "false") {
                        $property.find("input[value='true']").prop("checked", "true");
                    }
                    else {
                        $property.find("input[value='false']").prop("checked", "true");
                    }
                }
            }
            //datetime
            var myDateTime = $divSearch.find(".mydatetime");
            for (var i = 0; i < myDateTime.length; i++) {
                var $property = $(myDateTime[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    var days = propertyVal.split(';');
                    var picker = $property.find(".mydatetimepicker");
                    for (var j = 0; j < picker.length; j++) {
                        $(picker[j]).val(days[j]);
                    }
                }
            }
            // FormQuery
            var myDropDown = $divSearch.find(".mydropdown");
            for (var i = 0; i < myDropDown.length; i++) {
                var $property = $(myDropDown[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    var formQuery = $property.FormMultiQuery({ IsQueryControl: true });
                    formQuery.SetValue(propertyVal);
                }
            }
            /***********************************关联查询默认查询 End***********************************/



            var $btnSearch = this.$toolbar.find(".btnSearch");
            $btnSearch.removeClass("hide");
            $btnSearch.click(function () {
                that._refreshTable();
                return false;
            });
            // 查询条件展开or收起
            var $btnToggle = this.$partingLine.find(".btnToggle");
            $btnToggle.removeClass("hide");
            $btnToggle.click(function () {
                if ($(this).hasClass("btn-up")) {
                    $(this).removeClass("btn-up").addClass("btn-down").removeClass("icon-arrow-up-double-b").addClass("icon-arrow-down-double-b");
                    //$(this).html("<i class='fa icon-arrow-down-double'></i>");
                    that.$searchForm.find("div.form-group:gt(1)").hide();
                }
                else {
                    $(this).removeClass("btn-down").addClass("btn-up").removeClass("icon-arrow-down-double-b").addClass("icon-arrow-up-double-b");

                    that.$searchForm.find("div.form-group").show();
                }
                return false;
            });

            // 查询条件多于2行时默认触发收起
            var seachRowCount = this.$searchForm.find("div.form-group").length;
            if (seachRowCount > 2) {
                $btnToggle.trigger("click");
            }
            else { // 查询条件少于3行时，隐藏收起按钮
                //$btnToggle.hide();
                this.$partingLine.hide();

                // 没有查询条件时，隐藏查询按钮
                if (seachRowCount === 0) {
                    $btnSearch.hide();
                }
            }

            this.SearchInitialized = true;
        },

        _initTable: function (queryColumns) {
            var that = this;
            var columns = [];
            var childSchema = []; //子表
            if (queryColumns) {
                var tempColumnList = [];
                //for (var key in queryColumns) {
                //    if (queryColumns[key].ChildColumns) {
                //        childSchema.push(queryColumns[key]);
                //    } else {
                //        tempColumnList.push(queryColumns[key]);
                //    }
                //}

                for (var i = 0; i < queryColumns.length; i++) {
                    if (queryColumns[i].ChildColumns) {
                        //childSchema.push(queryColumns[i]);
                        var childColumns = queryColumns[i].ChildColumns;
                        for (var childKey in childColumns) {
                            if (childColumns[childKey].Code.indexOf(".") == -1) {
                                childColumns[childKey].Code = queryColumns[i].Code + "." + childColumns[childKey].Code;
                            }
                            tempColumnList.push(childColumns[childKey]);
                        }
                        //for (var j = 0; j < childColumns.length; j++) {
                        //    if (childColumns[j].Code.indexOf(".") == -1) {
                        //        childColumns[j].Code = queryColumns[i].Code + "." + childColumns[j].Code;
                        //    }
                        //    tempColumnList.push(childColumns[j]);
                        //}
                    } else {
                        tempColumnList.push(queryColumns[i]);
                    }
                }

                //添加完主表字段后再添加子表字段
                //if (childSchema.length > 0) {
                //    for (var i = 0; i < childSchema.length; i++) {
                //        var chidColumns = childSchema[i].ChildColumns;
                //        var key = childSchema[i].Code;
                //        for (var childKey in chidColumns) {
                //            if (chidColumns[childKey].Code.indexOf(".") == -1) {
                //                chidColumns[childKey].Code = key + "." + chidColumns[childKey].Code;
                //            }

                //            tempColumnList.push(chidColumns[childKey]);
                //        }
                //    }
                //}

                for (var i = 0, len = tempColumnList.length; i < len; i++) {
                    var queryColumn = tempColumnList[i];
                    columns.push({
                        field: queryColumn["Code"],
                        title: queryColumn["DisplayName"],
                        visible: queryColumn["Visible"],
                        formatter: function (value, row, index, field) {
                            if (value != null && value.constructor == Object) {
                                if (value.IsCustom != null) {
                                    value = value.Value;
                                }
                                else if (value.Color != null) {
                                    return "<span style='padding: 5px 15px 5px 15px;border-radius:4px; color:#fff;background-color:" + value.Color.toString() + ";'>" + value.Value + "</span>";
                                }
                            }
                            if (value != null && value.constructor == String && (value.indexOf("<") || value.indexOf(">"))) {
                                value = value.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                            }
                            if (field == OwnerDeptId_Name) {
                                return value;
                            }
                            if (value == null || $.trim(value.toString()) == "") value = "--";
                            return value;
                        }
                    });
                }
            }
            if (/*this.DataField == undefined || this.DataField.indexOf('.') > 0*/typeof (this.DataField) != "undefined" && this.DataField.indexOf('.') > 0 || this.IsQueryControl) {
                //当前关联查询控件在子表中,在column中增加一个checkbox列
                var checkColumn = [];
                var checkColumn = {
                    field: 'checkcolumn',
                    title: '',
                    visible: true,
                    checkbox: true,
                    clickToSelect: true
                };
                var tempColumns = columns;
                columns = [];
                columns.push(checkColumn);
                columns = columns.concat(tempColumns);
            }
            that.TableAllColumns = columns;
            // 关联查询只显示审批通过的记录
            this.$table.bootstrapTable('destroy');
            var queryparams = {
                ActionName: "DoAction",
                Command: "Load",
                QueryCode: this.BOSchemaCode,
                ChildSchemaCode: childSchema.length == 0 ? "" : childSchema[0].Code,
                Status: 1,
                SheetQuery: 1,
                //isFormControl: true,
                ListScene: 2,//列表场景，1表示普通列表，2表示弹窗内列表
                SheetCode: this.SchemaCode,
                DataField: this.DataField,
                SheetData: JSON.stringify(this.SheetData),
                scopeType: 3
            }
            var bootstrapTableOptions = {
                method: "post",
                // 添加SheetQuery标识，让关联查询只以列表展现
                //这里传入scopeType为OwnAndOwnDept。如果不传入默认权限为own
                url: "/App/OnAction/?PostData=" + JSON.stringify(queryparams),
                // clickToSelect:true,
                cache: false,
                striped: false,
                sidePagination: "server",
                pagination: true,
                pageSize: 10,
                contentType: "application/x-www-form-urlencoded",
                pageList: [10, 20, 50],
                columns: columns,
                idField: "ObjectId",
                sortName: "",
                sortOrder: "",
                TargetId: that.Table_ID,
                queryParams: function (params) {
                    return that._formatQueryParams(params);
                },
                onLoadSuccess: function (data) {
                    that.LoadData = data;
                    that.$table.find("tbody > tr").css({
                        "cursor": "pointer"
                    });
                    that.$table.find("th")
                    that.TableInitialized = true;

                    //报表筛选不固定表头时需要给table指定高度，
                    if (that.FixedTableHeader == false) {
                        //高度调整到220,防止弹出框时确定按钮到屏幕之外
                        that.$table.closest('.fixed-table-body').css({ 'height': '180px', "overflow": "auto" });
                    }

                    var fixedTableHeader = that.$table.closest(".fixed-table-container").find(".fixed-table-header");
                    if (fixedTableHeader) {
                        //表头多一层主表，子表
                        if (fixedTableHeader.find("tr.tr-colspan").length > 0) {
                            that.$modal.find("div.table-page").css("margin-top", "88px");
                        }
                        fixedTableHeader.removeAttr("style");
                    }

                    //设置第一层th宽度
                    var $topTr = $("tr.tr-colspan");
                    if ($topTr.length > 0) {
                        var $titleTr = $topTr.next();
                        var $topTh = $topTr.find("th[data-field]");
                        $topTh.each(function () {
                            if ($(this).attr("rowspan") == undefined) {
                                return true;
                            } else {
                                var field = $(this).attr("data-field");
                                var $fieldTh = $titleTr.find("th[data-field='" + field + "']");
                                var fieldWidth = $fieldTh.find(".fht-cell").css("width");
                                $(this).find(".fht-cell").css("width", fieldWidth);
                            }
                        });
                    }

                    //设置选中行
                    that._setRowChecked();
                },
                onCheck: function (row, $element) {
                    that._checkRows(row);
                },
                onCheckAll: function (rows) {
                    that._checkRows(rows);
                },
                onUncheck: function (row, $element) {
                    that._unCheckRows(row);
                },
                onUncheckAll: function (rows) {
                    that._unCheckRows(rows);
                },
                onClickRow: function (row, $element) {
                    //点击行不执行操作的情况（显示勾选框情况）
                    //1.在表单中控件在子表
                    //2.列表、报表过滤
                    if ((that.DataField != void 0 && that.DataField.indexOf('.') > -1 && that.$Input.data('ObjectId') == undefined) ||
                        that.IsQueryControl ||
                        !that.$modal.find('.btnMultiSelect').hasClass('hide')) {
                        //如果关联查询控件在子表中则执行onCheck事件以批量选择，不执行ClickRow事件
                        return;
                    }
                    that.$modal.modal("hide");
                    $(".table-tip").hide();
                    //处理子表情况
                    var ObjectId = row["ObjectId"];
                    var name = row["Name"];
                    if (that.associateChildSchema == true) {
                        ObjectId = row[that.BOSchemaCode + '.ObjectId'];
                        name = row[that.BOSchemaCode + '.Name'];
                    } else if (that.associateChildSchema == undefined) {//兼容旧的
                        for (var key in row) {
                            if (key.toLowerCase().indexOf(".objectid") > -1) {
                                ObjectId = row[key];
                                if (key.toLowerCase().indexOf(".name") > -1) {
                                    name = row[key];
                                }
                            }
                        }
                    }


                    if (name == null || $.trim(name) == "") {
                        name = "--";
                    }
                    that.$Input.data("ObjectId", ObjectId).text(name);
                    that.OnChange.apply(that, [row]);
                    that._toDetailLink();
                    ////调整子表列宽
                    //if (!$.isEmptyObject(that.ObjectId)) {
                    //    var gridViewCtrl = $(that.Element).closest('div[data-controlkey="FormGridView"]');
                    //    if (gridViewCtrl.length > 0) {
                    //        gridViewCtrl = gridViewCtrl.FormGridView();
                    //        gridViewCtrl && gridViewCtrl.ResizeColumn(true);
                    //    }
                    //}
                },
                responseHandler: function (params) {
                    if (params.ReturnData === null) params.ReturnData = new Array();
                    that.RenderPage.call(this, params);
                    return {
                        rows: params.ReturnData, total: params.DataCount
                    };
                },
                onAll: function () {
                }
            };
            if (that.FixedTableHeader == undefined || that.FixedTableHeader == true) {
                bootstrapTableOptions.height = 180;
            }

            this.$table.bootstrapTable(bootstrapTableOptions);
            that._setColumnColspan(columns);

            this.$table.off("mouseenter.list").on("mouseenter.list", 'td', function () {
                var $tableTip = $(".table-tip"), $TextLabel = $(".TextLabel");
                $tableTip.length == 0 && ($tableTip = $('<div class="table-tip" style="display: none;"></div>').appendTo(that.CurrentBody)); //.appendTo($("body")));
                $TextLabel.length == 0 && ($TextLabel = $('<label class="TextLabel" style="display: none; opacity:0; position:fixed;"></label>').appendTo(that.CurrentBody));//.appendTo($("body")));
                var $that = $(this);
                $TextLabel.text($that.text());
                if ($TextLabel.width() > $that.width()) {
                    var offset = $that.offset();
                    $tableTip.text($that.text()).css({
                        left: offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft(), bottom: $(window).height() - offset.top + 6 + $(window).scrollTop()
                    }).show();
                }
            });

            this.$table.off("mouseleave.list").on("mouseleave.list", 'td', function () {
                $(".table-tip").hide();
                return false;
            });
        },
        //设置行选中
        _setRowChecked: function () {
            var that = this;
            if (that.IsQueryControl) {
                if (that.SelectedItems.length == 0) {
                    return;
                }
                //如果checkedrows中有selecteditems则不要添加
                var checkedRows = [];

                for (var i = 0; i < that.CheckedRows.length; i++) {
                    checkedRows.push(that.CheckedRows[i].ObjectId);
                }
                for (var i = 0; i < that.SelectedItems.length; i++) {
                    if ($.inArray(that.SelectedItems[i].ObjectId, checkedRows) == -1) {
                        that.CheckedRows.push(that.SelectedItems[i]);
                    }
                }


                //that.CheckedRows = that.CheckedRows.concat(that.SelectedItems);

                var data = that.$table.bootstrapTable('getData', true);
                if (that.associateChildSchema == undefined) {
                    that.associateChildSchema = false;
                    if (data && data.length > 0) {
                        for (var key in data[0]) {
                            if (key.indexOf('.ObjectId') > -1) {
                                that.associateChildSchema = true;
                                break;
                            }
                        }
                    }
                }
                var objectIdStr = 'ObjectId';
                if (that.associateChildSchema) {
                    objectIdStr = that.BOSchemaCode + '.ObjectId';
                }
                var childSchemaObjectId = undefined;
                for (var i = 0; i < data.length; i++) {
                    for (var j = 0; j < that.SelectedItems.length; j++) {
                        if (data[i][objectIdStr] == that.CheckedRows[j].ObjectId) {
                            that.$table.bootstrapTable('check', i);
                            break;
                        }
                    }
                }
            }

            //设置选中行
            if (that.CheckedRows.length == 0)
                return;
            var data = that.$table.bootstrapTable('getData', true);
            var childSchemaObjectId = undefined;
            if (data.length > 0) {
                if (that.associateChildSchema == true) {
                    childSchemaObjectId = that.BOSchemaCode + '.ObjectId';
                } else if (that.associateChildSchema == undefined) {
                    for (var key in data[0]) {
                        if (key.toLowerCase().indexOf(".objectid") > -1) {
                            childSchemaObjectId = key;
                            break;
                        }
                    }
                }
            }
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < that.CheckedRows.length; j++) {
                    if (childSchemaObjectId != undefined) {
                        if (data[i][childSchemaObjectId] == that.CheckedRows[j][childSchemaObjectId]) {
                            that.$table.bootstrapTable('check', i);
                            break;
                        }
                    } else {
                        if (data[i].ObjectId == that.CheckedRows[j].ObjectId) {
                            that.$table.bootstrapTable('check', i);
                            break;
                        }
                    }
                }
            }
        },
        _refreshTable: function () {
            this.$table.bootstrapTable("refresh");
        },

        // 添加查询条件
        _formatQueryParams: function (params) {
            var searchParams = {
            };
            var $divSearch = this.$searchForm;

            var myMultiSelect = $divSearch.find(".mymultiselect");
            for (var i = 0; i < myMultiSelect.length; i++) {
                var v = [];
                var $multiSelect = $(myMultiSelect[i]);
                var selectedText = $multiSelect.parent().find(".multiselect-selected-text").text();
                if (selectedText) {
                    v = selectedText.split(/,|，|;|；/); //支持中文逗号
                }
                if (v.length > 0) {
                    for (var j = 0; j < v.length; j++) {
                        v[j] = $.trim(v[j]);
                    }
                    searchParams[$multiSelect.attr("id")] = v;
                }
            }
            // 文本
            var myText = $divSearch.find(".mytext");
            for (var i = 0; i < myText.length; i++) {
                var $text = $(myText[i]);
                var v = $.trim($text.val());
                if (v !== "") {
                    if (v.indexOf(",") > -1 || v.indexOf("，") > -1) {
                        v = v.split(/,|，/);
                        if (v.length > 0) {
                            for (var j = 0; j < v.length; j++) {
                                v[j] = $.trim(v[j]);
                                if (v[j] == "--")//未填写，空白值项
                                {
                                    v[j] = "";
                                }
                            }
                            searchParams[$text.attr("data-propertyname")] = v;
                        }
                    }
                    else if (v.indexOf("；") > -1 || v.indexOf(";") > -1) {
                        v = v.split(/;|；/);
                        if (v.length > 0) {
                            for (var j = 0; j < v.length; j++) {
                                v[j] = $.trim(v[j]);
                                if (v[j] == "--")//未填写，空白值项
                                {
                                    v[j] = "";
                                }
                            }
                            searchParams[$text.attr("data-propertyname")] = v;
                        }

                    }
                    else {
                        if ($.trim(v) == "--") {
                            searchParams[$text.attr("data-propertyname")] = [""];
                        }
                        else {
                            searchParams[$text.attr("data-propertyname")] = [v];
                        }

                    }
                }
            }
            // 选人
            var myUserPicker = $divSearch.find(".myuserpicker");
            for (var i = 0; i < myUserPicker.length; i++) {
                var $picker = $(myUserPicker[i]);
                var v = $picker.FormMultiUser().GetUnitIDs();
                if (v && v.length > 0) {
                    searchParams[$picker.attr("data-propertyname")] = v;
                }
            }
            // 数字
            var myNum = $divSearch.find(".mynum");
            for (var i = 0; i < myNum.length; i++) {
                var $myNum = $(myNum[i]);
                var v = [];
                var num = $myNum.find(":text");
                for (var j = 0; j < num.length; j++) {
                    var $num = $(num[j]);
                    var val = $num.val();
                    if ($.isNumeric(val)) {
                        v.push(val);
                    } else {
                        v.push(null);
                    }
                }
                if (v.length > 0) {
                    searchParams[$myNum.attr("data-propertyname")] = v;
                }
            }
            //是/否
            var myCheckBox = $divSearch.find('.mycheckbox');
            for (var i = 0; i < myCheckBox.length; i++) {
                var $myCheckBox = $(myCheckBox[i]);
                var v = [];
                var checkedbox = $myCheckBox.find('input[type="checkbox"]:checked');
                for (var j = 0; j < checkedbox.length; j++) {
                    var val = $(checkedbox[j]).val();
                    v.push(val);
                }
                searchParams[$myCheckBox.attr('data-propertyname')] = v;
            }
            // datetime
            var myDateTime = $divSearch.find(".mydatetime");
            for (var i = 0; i < myDateTime.length; i++) {
                var $myDateTime = $(myDateTime[i]);
                var v = [];
                var myDateTimePicker = $myDateTime.find(".mydatetimepicker");
                for (var j = 0; j < myDateTimePicker.length; j++) {
                    var $myDateTimePicker = $(myDateTimePicker[j]);
                    var val = $myDateTimePicker.val();
                    if ($.trim(val) !== "") {
                        v.push(val);
                    } else {
                        v.push(null);
                    }
                }
                if (v.length > 0) {
                    searchParams[$myDateTime.attr("data-propertyname")] = v;
                }
            }

            // FormQuery
            var myDropDown = $divSearch.find(".mydropdown");
            for (var i = 0; i < myDropDown.length; i++) {
                var $mydropdown = $(myDropDown[i]);
                var v = $mydropdown.FormMultiQuery().GetValue();
                //多个关联表单中间用;隔开
                var arr = [];
                if (!$.isArray(v)) {
                    if (v && v.length > 0) {
                        v = v.split(';');
                        for (var j = 0; j < v.length; j++) {
                            if (v[j] == undefined || v[j] == 'undefined') {
                                arr.push('');
                            } else if (v[j] != '') {
                                arr.push(v[j]);
                            }
                        }
                        //searchParams[$mydropdown.attr("data-propertyname")] = arr;
                    }
                } else {
                    for (var j = 0; j < v.length; j++) {
                        if (v[j] == undefined || v[j] == 'undefined') {
                            arr.push('');
                        } else if (v[j] != '') {
                            arr.push(v[j]);
                        }
                    }
                }
                searchParams[$mydropdown.attr("data-propertyname")] = arr;
            }
            params["searchParamsJson"] = JSON.stringify(searchParams);
            return params;
        },

        _getQueryParams: function () {
            var queryParams = {
            };
            if (this.InputMappings) {
                for (var datafield in this.InputMappings) {
                    // 根据datafield，从页面上取值
                    var controlManager = this._getTargetElement(datafield).JControl();
                    if (controlManager) {
                        queryParams[this.InputMappings[datafield]] = controlManager.GetValue();
                    }
                }
            }
            return queryParams;
        },

        _getTargetElement: function (datafield) {
            var $targetElement;
            var dataFieldName = $.ControlManager.PreDataKey + $.ControlManager.DataFieldKey;
            // 子表字段，通过datafield在当前行中找
            if (datafield.indexOf(".") > -1) {
                $targetElement = this.$InputBody.closest("tr").find("[" + dataFieldName + "='" + datafield + "']")
            }
            else {
                $targetElement = $("[" + dataFieldName + "='" + datafield + "']");
            }
            return $targetElement;
        },

        _toDetailLink: function () {
            var that = this;
            var $link = "";
            var inputText = this.$Input.text();
            var decodedInputText;
            if ($.trim(inputText).length > 0) {
                decodedInputText = inputText;// decodeURIComponent(inputText);
                $link = $("<a href='javascript:;' title='" + decodedInputText + "' class='label label-info' style='position:relative;' >" + decodedInputText + "<i class='fa icon-close-middle' style='margin-left:5px;' data-objectId='" + this.$Input.data("ObjectId") + "'></i></a>");

                var $btnClear = $($link).find('i').on('click', function (e) {
                    that.$Input.text("").data("ObjectId", "");
                    //that.$Input.data("ObjectId", "");
                    //这里要清除下拉框的数据
                    var thisObjectId = $(this).attr('data-objectid');
                    that.$dropDownItemContainer && that.$dropDownItemContainer.find('input[type="checkbox"][data-itemid="' + thisObjectId + '"]').prop('checked', false);
                    that.OnChange.apply(that);
                    if (e.stopPropagation) {
                        e.stopPropagation();
                    } else {
                        e.cancelBubble = true;
                    }
                });
                that.isFirstSetValue = false;
            } else {
                //$link = $("<a href='javascript:;' title='" + this.$Input.text() + "' class='label label-info'>" + this.$Input.text() + "</a>");
            }
            this.$Input.text("").append($link);
            if (!that.Editable) {//不可编辑
                if ($link) {
                    $link.removeClass("label label-info").css({
                        "border": "none",
                        "white-space": "pre-wrap",
                        "white-space": "-moz-pre-wrap",
                        "white-space": "-pre-wrap",
                        "white-space": "-o-pre-wrap",
                        "word-wrap": "break-word",
                        "overflow": "auto",
                        "word-break": "break-all"
                    }).find("i").remove();
                    $link.off("click").on("click", function () {
                        var boId = that.GetValue();
                        if (boId) {
                            var params = {
                                ActionName: "GetBizObjectSchemaDisplayName", SchemaCode: that.BOSchemaCode, flag: $.IGuid()
                            }
                            that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                                var url = "/Form/DefaultSheet?SchemaCode=" + that.BOSchemaCode + "&BizObjectId=" + boId + "&Mode=View";
                                $.ISideModal.Show(url, data.ReturnData.DisplayName);
                            });
                        }
                    });
                }
            }
            else {
                //$link.off("click").on("click", function () {
                //    that.$modal.modal("show");
                //});
            }
        },

        RenderPage: function (data) {
            var that = this;
            var $target = $("#" + that["TargetId"]);
            if (!$target) return;
            if (that.pageNumber > 1 && data && data.length == 0) {
                $target.bootstrapTable("refreshOptions", {
                    pageNumber: that.pageNumber - 1
                });
            }
            if (!that.$PageNext) {
                var $pageBar = $("#bar-" + that["TargetId"]);
                that.$PageNext = $pageBar.find(".Page_Num_Next");
                that.$PagePre = $pageBar.find(".Page_Num_Pre");
                that.$PageIndex = $pageBar.find(".Page_Index");
                that.$PageCount = $pageBar.find(".Page_Count");
                that.$PageTotal = $pageBar.find(".page-total");
                that.$PageSize = $pageBar.find(".Page_Per_Size");
                that.$PageNext.bind('click', function () {
                    $target.bootstrapTable("nextPage");
                });
                that.$PagePre.bind('click', function () {
                    $target.bootstrapTable("prevPage");
                });

                var PageTimeout;
                that.$PageIndex.bind("keyup", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val().replace(/[^\d]/g, '');
                    v = v == "" ? 0 : parseInt(v);
                    v = v >= that.Count ? that.Count : v;
                    if (v == 0) return;
                    $(this).val(v);
                    PageTimeout = setTimeout(function () {
                        v != that.pageNumber && $target.bootstrapTable("selectPage", v);
                        PageTimeout = null;
                    }, 600);
                });
                that.$PageIndex.bind("blur", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val();
                    v = v == "" || v == "0" ? 1 : parseInt(v);
                    $(this).val(v);
                    v != that.pageNumber && $target.bootstrapTable("selectPage", v);
                });
                $pageBar.on("click", "li>a", function () {
                    var size = parseInt($(this).text());
                    that.$PageSize.html(size);
                    $target.bootstrapTable("refreshOptions", {
                        pageSize: size
                    });

                })
            }
            if (!data) {
                that.$PageNext.addClass("disable").attr("disabled", true);
                that.$PagePre.addClass("disable").attr("disabled", true);
                that.$PageIndex.val(1).attr("disabled", true);
                that.$PageCount.html(1);
                that.$PageTotal.html("共0条");
            }
            else {
                that.$PageIndex.val(that.pageNumber);
                that.Count = Math.ceil(data.DataCount / that.pageSize);
                that.$PageCount.html(that.Count);
                that.$PageTotal.html("共" + data.DataCount + "条");
                if (that.pageNumber <= 1) {
                    that.$PagePre.addClass("disable").attr("disabled", true);
                }
                else {
                    that.$PagePre.removeClass("disable").attr("disabled", false);
                }

                if (that.pageNumber == that.Count) {
                    that.$PageNext.addClass("disable").attr("disabled", true);
                }
                else {
                    that.$PageNext.removeClass("disable").attr("disabled", false);
                }
            }
        },

        //设置值
        InitValue: function () {
            if ($.SmartForm.ResponseContext && !$.SmartForm.ResponseContext.IsCreateMode) {
                var currentVal = this.Value;
                if (!currentVal) return;

                if (currentVal.constructor == String) {
                    var name = "";
                    if ($.SmartForm.ResponseContext.AssociatedBoNames &&
                        $.SmartForm.ResponseContext.AssociatedBoNames[currentVal]) {
                        name = $.SmartForm.ResponseContext.AssociatedBoNames[currentVal].replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    }
                    name = name.trim("");
                    this.$Input.text(name == "" ? "--" : name);
                    this.$Input.data("ObjectId", currentVal);
                } else {
                    var name = currentVal.Name || currentVal[this.BOSchemaCode + ".Name"];
                    var objectId = currentVal.ObjectId || currentVal[this.BOSchemaCode + ".ObjectId"];
                    name = name.trim("");
                    this.$Input.data("ObjectId", objectId).text(name == "" ? "--" : name);
                }
                this._toDetailLink();
                return;
            }

            var passedBoObjectId = $.IQuery(this.BOSchemaCode);
            var passedBoName = $.IQuery(this.BOSchemaCode + "_Name");
            var item = undefined;
            item = passedBoObjectId ? { ObjectId: passedBoObjectId, Name: passedBoName } : this.DefaultValue;

            if (item != void 0) {
                //2017/2/21这里setvalue取消了异步。原因是如果异步的话有可能会覆盖掉mapping的控件的值，仍然存在的缺陷是如果先渲染mapping的控件再渲染formaquery还是会覆盖掉mapping控件的值
                //this.SetValue(item, false);
                this.SetVal(item, false);
            }
            //Error关联列表新增不会携带值
            //item只有objectId和Name 
        },

        //InitValue和SetValue调用的公共部分
        SetVal: function (item, asy) {
            var that = this;
            if (item == void 0 || item == null || item == "") {
                that.$Input.text("");
                that.$Input.data("ObjectId", "");
                //如果有关联配置则要清空
                if (that.MappingControls && !$.isEmptyObject(that.MappingControls)) {
                    that.ClearMappingValue();
                }
                that.OnChange({
                    ObjectId: "", Name: ""
                });
                return;
            }
            if (item.constructor == String) {
                //#Error:如果不是从后台加载的，需要支持开发者SetValue(objectId)
                var name = "";
                if ($.SmartForm.ResponseContext && $.SmartForm.ResponseContext.AssociatedBoNames &&
                    $.SmartForm.ResponseContext.AssociatedBoNames[item]) {
                    name = $.SmartForm.ResponseContext.AssociatedBoNames[item].replace(/</g, "&lt;").replace(/>/g, "&gt;");
                }
                var params = {
                    ActionName: "GetFormatBizObject",
                    SchemaCode: that.BOSchemaCode,
                    ObjectId: item
                };
                //ERROR这里有可能是空值
                if ($.trim(name) == '') {
                    that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                        var returnData = data.ReturnData.ListViewData;
                        if (returnData != void 0 && returnData.length > 0) {
                            name = $.trim(returnData[0].Name || returnData[0][that.BOSchemaCode + ".Name"]);
                        }
                        if ($.trim(name) == '') {
                            name = '--';
                        }
                        that.$Input.text(name);
                        that.$Input.data("ObjectId", item);
                        that.OnChange({
                            ObjectId: item, Name: name
                        });
                        that._toDetailLink();
                    }, asy);
                } else {
                    that.$Input.text(name);
                    that.$Input.data("ObjectId", item);
                    that.OnChange({
                        ObjectId: item, Name: name
                    });
                    that._toDetailLink();
                }
            } else {
                var name = item.Name;
                var objectId = item.ObjectId;
                if (objectId == undefined && item[that.BOSchemaCode + ".ObjectId"] != undefined) {
                    name = item[that.BOSchemaCode + ".Name"];
                    objectId = item[that.BOSchemaCode + ".ObjectId"];
                }
                if (name == void 0 || name == "null" || name == "undefined") {
                    var params = {
                        ActionName: "GetFormatBizObject",
                        SchemaCode: that.BOSchemaCode,
                        ObjectId: objectId
                    };
                    that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                        var itemData = null;
                        if (data.ReturnData.ListViewData != void 0 && data.ReturnData.ListViewData.length > 0) {
                            name = $.trim(data.ReturnData.ListViewData[0].Name);
                            itemData = data.ReturnData.ListViewData[0];
                            itemData['isQuery'] = true;
                        }
                        if ($.trim(name) == '') {
                            name = '--';
                        }
                        that.$Input.text(name);
                        that.$Input.data("ObjectId", item.ObjectId);
                        //that.OnChange({ ObjectId: item.ObjectId, Name: name });
                        if (itemData != null) {
                            that.OnChange(itemData);
                        } else {
                            that.OnChange({
                                ObjectId: item.ObjectId, Name: name
                            });
                        }
                        that._toDetailLink();
                    }, asy);
                } else {
                    that.$Input.data("ObjectId", objectId).text(name);
                    if (that.BOSchemaCode && $.IQuery(this.BOSchemaCode + "_Name"))
                        that.OnChange();
                    else
                        that.OnChange(item);
                    that._toDetailLink();
                }
            }
        },
        //设置值
        SetValue: function (item, asy) {
            var oldValue = this.GetValue();
            if (item == this.GetValue() || (item && item.ObjectId == this.GetValue())) return;
            this.SetVal(item, asy);
            this.IsFirstSetValue = false;
        },

        //校验
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && $.isEmptyObject(val)) {
                if (this.SchemaCode != this.BOSchemaCode) {
                    this.AddInvalidText(this.$InputBody, "必填");
                    return false;
                } else {
                    //如果关联的是自己,且关联的数据是空的，则不要校验必填
                    if (this.LoadData != undefined && this.LoadData.length > 0) {
                        this.AddInvalidText(this.$InputBody, "必填");
                        return false;
                    }
                    //如果初始没有数据（this.LoadData.length==0）,在关联表单界面新增了也要校验
                    if (this.$Input.find('a').length == 0) {
                        this.AddInvalidText(this.$InputBody, "必填");
                        return false;
                    }
                }
            }
            this.RemoveInvalidText(this.$InputBody);
            return true;
        },

        SaveDataField: function () {
            var result = {
            };
            if (!this.ResponseContext.IsCreateMode && (!this.Visible)) return result;
            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (!oldresult) {
                return {
                };
            }
            if (oldresult.Value != this.GetValue()) {
                result[this.DataField] = this.GetValue();
                return result;
            }
            return {
            };
        },

        GetValue: function () {
            if (!this.Visible) {
                if (this.Value == null) {
                    return "";
                }
                return this.Value;
            }
            if (!$(this.Element).is(":visible") && $.IQuery(this.BOSchemaCode)) {
                return $.IQuery(this.BOSchemaCode);
            }
            var value = this.$Input.data("ObjectId");
            return value == undefined ? "" : value;
        },

        GetText: function () {
            if (this.$Input) {
                return this.$Input.text();
            } else {
                return ""
            };
        },

        SetReadonly: function (flag) {
            if (flag) {
                this.$Input && this.$Input.prop("disabled", "disabled").off("click");
                this.$addModel && this.$addModel.off("click");
            }
            else {
                this.$Input.removeProp("disabled");
            }
        },

        Change: function (rowData) {
            //如果当前控件是"关联属性"则不要设置关联携带
            if ($(this.Element).attr("data-ismappingproperty") != undefined) {
                return;
            }
            if ((this.MappingControls && !$.isEmptyObject(this.MappingControls)) || (this.MappingProperties && !$.isEmptyObject(this.MappingProperties))) {
                //关于关联配置数据携带，关联查询“新增”的时候不能将新增的数据携带出来。原因是返回的rowData中没有新增的数据。
                //修改后每次都要请求数据
                /*if (rowData && rowData.length > 0) {
                    if ($.isArray(rowData) || rowData.length > 0) {
                        rowData = rowData[0];
                    }
                    this.SetMappingValue(rowData);
                }
                else {*/
                var that = this;
                if (rowData[0] != void 0 && rowData[0].isQuery != void 0) {
                    that.SetMappingValue(rowData[0]);
                } else {
                    var ObjectId = this.GetValue();
                    if (ObjectId) {
                        var params = {
                            ActionName: "GetFormatBizObject",
                            SchemaCode: this.BOSchemaCode,
                            ObjectId: ObjectId
                        }
                        this.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                            if (data.ReturnData.ListViewData && data.ReturnData.ListViewData.length > 0) {
                                that.SetMappingValue(data.ReturnData.ListViewData[0]);
                            }
                        });
                    } else {
                        //清空关联配置值
                        this.ClearMappingValue();
                    }
                }
                /* }*/
            }
            this.Required && this.Editable && (this.$Input.text() != "" && this.$Input.css({
                "border": "1px solid #ddd", "box-shadow": "none"
            }));
            ////如果控件在子表中，子表列宽要重新计算
            //if ($.fn.FormGridView) {
            //    var gridViewCtrl = $(this.Element).closest('div[data-controlkey="FormGridView"]');
            //    if (gridViewCtrl.length > 0) {
            //        gridViewCtrl = gridViewCtrl.FormGridView();
            //        gridViewCtrl && gridViewCtrl.ResizeColumn(true);
            //    }
            //}
        },
        //清除关联配置携带数据
        ClearMappingValue: function () {
            if ($(this.Element).attr("data-ismappingproperty") != undefined) {
                return;
            }
            var mappings = {};
            $.extend(mappings, this.MappingControls);
            $.extend(mappings, this.MappingProperties);

            //如果是主表关联主表，并且携带子表到子表，则清空整个子表
            var childSchemas = [];
            var leftMappings = {};//要排除的字段
            for (var property in mappings) {
                if (property.indexOf(".") > -1 && mappings[property].indexOf(".") > -1) {
                    var childSchema = property.split(".")[0];
                    ($.inArray(childSchema, childSchemas) == -1) && childSchemas.push(childSchema);
                } else {
                    //$.extend(leftMappings, { property: mappings[property] });
                    leftMappings[property] = mappings[property];
                }
            }
            //清空childSchemas中子表行
            if (this.DataField.indexOf(".") == -1 && this.BOSchemaCode.indexOf(".") == -1) {
                for (var i = 0; i < childSchemas.length; i++) {
                    var gridView = $("div.SheetGridView[data-datafield='" + childSchemas[i] + "']");
                    if (gridView && gridView.length > 0) {
                        var gridViewCtrl = gridView.JControl();
                        gridViewCtrl && gridViewCtrl.ClearRows();
                    }
                }
                //排除掉主表关联主表携带子表的关联配置
                mappings = leftMappings;
            }
            //清除剩下mapping控件值
            for (var targetProperty in mappings) {
                var $ctrl = null;
                if (this.ObjectId != undefined) {
                    $ctrl = $("tr[data-objectid='" + this.ObjectId + "']").find("[data-datafield='" + targetProperty + "']:not('.table_th')");
                } else {
                    $ctrl = $("[data-datafield='" + targetProperty + "']:not('.table_th')");
                }
                if ($ctrl) {
                    for (var i = 0; i < $ctrl.length; i++) {
                        var control = $($ctrl[i]).JControl();
                        control && control.ClearValue();
                    }
                }
                //$ctrl && $ctrl.JControl().ClearValue();
            }
        },
        SetMappingValue: function (rowData, mapping) {
            //1.主表关联主表
            //1.1主->主(A:B)
            //1.2主->子(A.x:B)
            //1.3子->子(A.x:B.x)
            //2.主表关联子表
            //2.1子->子(A.x:B.x)
            //2.2子->主(A:B.x)
            //3.子表关联主表
            //3.1主->主(A:A)
            //3.2主->子(A.x:B)
            //4.子表关联子表
            //4.1子->子(A.x:B.y)
            //4.2子->主(A:B.x)
            var that = this;
            if ((!that.MappingControls && !that.MappingProperties) || ($.isEmptyObject(that.MappingControls) && $.isEmptyObject(that.MappingProperties))) {
                return;
            }
            var hasError = false;
            //判断当前字段是在子表还是主表
            var thisCtrlInChild = that.DataField.indexOf(".") > -1;
            //判断关联的是子表还是主表(后来配置的时候会保存是关联主表还是子表，老的配置中没有保存，那种情况需要请求后台判断)
            var boSchemaInfo = $(that.Element).attr("data-boSchemaInfo");
            var isAssociateChild = boSchemaInfo ? JSON.parse(boSchemaInfo).IsChildSchema : undefined;
            if (isAssociateChild == undefined) {
                //同步请求后台判断关联的是子表还是主表
                var params = {
                    ActionName: "CheckChildSchema",
                    SchemaCode: that.BOSchemaCode
                }
                that.Ajax("/Form/OnAction", "POST", { PostData: JSON.stringify(params) }, function (data) {
                    if (data.Successful) {
                        isAssociateChild = data.ReturnData.IsChildSchema;
                    } else {
                        hasError = true;
                    }
                }, false);
            }
            if (hasError) {
                $.IShowError("", "关联表单错误!");
                return;
            }
            //判断关联关系，是主表关联主表还/主表关联子表/子表关联主表/子表关联子表中哪一种
            var associationType = undefined;
            if (!thisCtrlInChild) {
                //关联表单控件在主表
                if (!isAssociateChild) {
                    //主关联主
                    associationType = 1;
                } else {
                    //主关联子
                    associationType = 2;
                }
            } else {
                if (!isAssociateChild) {
                    //子关联主
                    associationType = 3;
                } else {
                    //子关联子
                    associationType = 4;
                }
            }
            //根据不同的关联关系,处理关联配置
            switch (associationType) {
                case 1:
                    that._mainSchemaAssociateMainSchema(rowData, mapping);
                    break;
                case 2:
                    that._mainSchemaAssociateChildSchema(rowData, mapping);
                    break;
                case 3:
                    that._childSchemaAssociateMainSchema(rowData, mapping);
                    break;
                case 4:
                    that._childSchemaAssociateChildSchema(rowData, mapping);
                    break;
                default:
                    hasError = true;
                    break;
            }
            if (hasError) {
                $.IShowError("", "获取的关联信息错误");
                return;
            }
        },
        _setDestControlValue: function (destControl, sourceField, rowData) {
            var that = this;
            if (destControl == undefined) return;
            switch (destControl.Type) {
                case 51:
                    //判断destControl是否关联属性控件
                    var sourceType = $(destControl.Element).attr("data-sourcetype");
                    if (sourceType != undefined) {
                        destControl.BOSchemaCode = rowData[sourceField + "_SchemaCode"];
                    }
                    if (rowData[sourceField] == void 0) {
                        destControl.ClearValue();
                    } else {
                        destControl.SetValue(rowData[sourceField]);
                    }
                    break;
                case 50:
                    {
                        var destSchemaCode = rowData[sourceField + "_SchemaCode"];
                        //if (destSchemaCode == undefined) {
                        //    //携带过来的数据不对，清空当前数据
                        //    destControl.ClearValue();
                        //}
                        var sourceType = $(destControl.Element).attr("data-sourcetype");
                        if (sourceType != undefined) {
                            destControl.BOSchemaCode = destSchemaCode;
                        }
                        if (destSchemaCode != undefined && destSchemaCode != destControl.BOSchemaCode) {
                            //关联配置与返回的数据不一致，清空数据
                            destControl.ClearValue();
                            return;
                        }
                        //if (destControl.BOSchemaCode == destSchemaCode) {
                        if (destControl.MappingControls && !$.isEmptyObject(destControl.MappingControls)) {
                            if (rowData[sourceField] == void 0) {
                                destControl.ClearValue();
                                destControl.ClearMappingValue();
                                return;
                            }
                            //有关联配置
                            var params = {
                                ActionName: "GetFormatBizObject",
                                SchemaCode: destControl.BOSchemaCode,
                                ObjectId: rowData[sourceField]
                            };
                            (function (destControl, p) {
                                that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(p) }, function (data) {
                                    if (data.Successful) {
                                        var returnData = data.ReturnData.ListViewData;
                                        if (returnData && returnData.length > 0) {
                                            destControl.SetValue(returnData[0]);
                                        }
                                    }
                                });
                            })(destControl, params);
                        } else {
                            //无关联配置
                            var objectId = rowData[sourceField];
                            var name = rowData[sourceField + "_Name"];
                            if (sourceField.indexOf(".") > -1) {
                                if (sourceField.toLowerCase().indexOf(".objectid") > -1) {
                                    //将ObjectId携带到关联表单
                                    name = rowData[sourceField.split(".")[0] + ".Name"];
                                } else {
                                    name = rowData[sourceField + "_Name"];
                                }
                            }
                            if (objectId != void 0)
                                destControl.SetValue({ ObjectId: objectId, Name: name });
                            else
                                destControl.ClearValue();
                        }
                        //}
                    }
                    break;
                case 24://附件
                    {
                        var objectId = "ObjectId";
                        if (sourceField.indexOf(".") > -1) {
                            objectId = sourceField.split(".")[0] + ".ObjectId";
                        }
                        var params = {
                            ActionName: "GetMappingFiles",
                            SchemaCode: that.BOSchemaCode,
                            BizObjectId: rowData[objectId],
                            PropertyName: sourceField,
                            Random: Math.round(Math.random() * 10000) //IE11里面不会重复请求，加这个参数是为了兼容IE11，参数内容无任何意义
                        };
                        (function (destControl) {
                            that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                                // 清空控件上的附件
                                destControl.ClearFiles();
                                var returnData = data.ReturnData.HandlerResult;
                                if (returnData && returnData.length > 0) {
                                    for (var i = 0, len = returnData.length; i < len; i++) {
                                        var result = returnData[i];
                                        var url = '/Form/Download?AttachmentID=' + result.AttachmentId;
                                        destControl.AppendFile(result.FileId, result.AttachmentId, result.FileName, result.Size, result.Thumb, result.Description, url);
                                    }
                                }
                            });
                        })(destControl);
                    }
                    break;
                default:
                    var val = rowData[sourceField];
                    if (destControl.Type == 1) {
                        val = val == "是" ? true : false;
                    }
                    //多选人控件时，先清空再赋值
                    if (destControl.Type == 27) {
                        destControl.ClearValue();
                    }
                    destControl.SetValue(val);
                    destControl.OnChange();
                    break;
            }
        },
        //主表关联主表
        //主->主/主->子/子->子
        _mainSchemaAssociateMainSchema: function (rowData, mapping) {
            var that = this;
            //要把关联配置分成两类。一类是主->主(子),另一类是子->子
            var mainSchemaMapping = {};//主->主(子)
            var childSchemaMapping = {};//子->子
            var mappings = {};
            if (mapping == undefined) {
                $.extend(mappings, that.MappingControls);//关联配置
                $.extend(mappings, that.MappingProperties);//关联属性
            } else {
                $.extend(mappings, mapping);
            }
            for (var destField in mappings) {
                var sourceField = mappings[destField];
                if (destField.indexOf(".") > -1 && sourceField.indexOf(".") > -1) {
                    //子->子
                    childSchemaMapping[destField] = sourceField;
                } else {
                    mainSchemaMapping[destField] = sourceField;
                }
            }
            var $container = $(that.Element).closest("#SheetContent");
            //1.主->主(子)
            for (var destField in mainSchemaMapping) {
                var sourceField = mainSchemaMapping[destField];
                if (sourceField.indexOf(".") == -1) {
                    if (destField.indexOf(".") == -1) {
                        //主->主
                        //判断目标字段类型
                        var destControl = $container.find("div[data-datafield='" + destField + "']").JControl();
                        that._setDestControlValue(destControl, sourceField, rowData);
                    } else {
                        //主->子
                        var childSchemaField = destField.split('.')[0];
                        var dests = $container.find("div[data-datafield='" + destField + "']:not('.table_th')");
                        for (var i = 0; i < dests.length; i++) {
                            var destControl = $(dests[i]).JControl();
                            that._setDestControlValue(destControl, sourceField, rowData);
                        }
                    }
                } else {
                    //主表关联主表情况不支持将子表值携带到主表
                    //此场景不支持
                }
            }
            //2.子->子
            if (!$.isEmptyObject(childSchemaMapping)) {
                //获取关联配置中源子表和目标子表
                var childSchemas = {};//{destChildSchema:sourceChildSchema}
                for (var destField in childSchemaMapping) {
                    var existInChildSchemas = false;
                    var destChildSchema = destField.split(".")[0];
                    var sourceChildSchema = childSchemaMapping[destField].split(".")[0];
                    for (var key in childSchemas) {
                        if (key == destChildSchema) {
                            existInChildSchemas = true;
                            break;
                        }
                    }
                    if (!existInChildSchemas) {
                        childSchemas[destChildSchema] = sourceChildSchema;
                    }
                }
            }
            //将源子表的数据添加到目标子表
            for (var destChildSchema in childSchemas) {
                var sourceChildSchema = childSchemas[destChildSchema];
                var params = {
                    ActionName: "GetChildSchemaDataByObjectId",
                    TargetChild: destChildSchema,
                    SchemaCode: that.BOSchemaCode,
                    BizObjectId: rowData["ObjectId"],
                    PropertyName: sourceChildSchema
                };
                that.Ajax("/Form/OnAction", "POST", { PostData: JSON.stringify(params) }, function (data) {
                    if (data.Successful) {
                        var returnData = data.ReturnData;
                        if (returnData.ListViewData && returnData.ListViewData.length > 0) {
                            var gridView = $(that.Element).closest("#SheetContent").find("div[data-datafield='" + returnData.TargetChild + "']").FormGridView();
                            if (gridView) {
                                gridView.ClearRows();
                                var listViewData = returnData.ListViewData;
                                for (var i = 0; i < listViewData.length; i++) {
                                    var newRowData = {};
                                    newRowData["ObjectId"] = $.IGuid();
                                    var propertySchemaCode = {};

                                    for (var destField in childSchemaMapping) {
                                        var sourceField = childSchemaMapping[destField];
                                        var sourceValue = listViewData[i][sourceField];
                                        if (sourceValue == void 0) {
                                            continue;
                                        } else {
                                            newRowData[destField] = sourceValue;
                                        }
                                        //获取关联属性的BOSchemaCode
                                        if (that.MappingProperties != undefined) {
                                            //有关联配置
                                            var isMappingProperty = false;
                                            for (var key in that.MappingProperties) {
                                                if (key == destField) {
                                                    isMappingProperty = true;
                                                    break;
                                                }
                                            }
                                            if (isMappingProperty) {
                                                propertySchemaCode[destField] = listViewData[i][sourceField + "_SchemaCode"];
                                            }
                                        }
                                    }
                                    gridView.AddRow($.IGuid(), newRowData, null, null, propertySchemaCode);
                                }
                            }
                        }
                    }
                });
            }
        },
        //主表关联子表
        //子->主/子->子
        _mainSchemaAssociateChildSchema: function (rowData, mapping) {
            var that = this;
            var $container = $(that.Element).closest("#SheetContent");
            //var mappingsControls = that.MappingControls;
            var mappings = {};
            if (mapping == undefined) {
                $.extend(mappings, that.MappingControls);//关联配置
                $.extend(mappings, that.MappingProperties);//关联属性
            } else {
                $.extend(mappings, mapping);
            }
            for (var destField in mappings) {
                var sourceField = mappings[destField];
                if (destField.indexOf(".") == -1) {
                    //子->主
                    var destControl = $container.find("div[data-datafield='" + destField + "']").JControl();
                    that._setDestControlValue(destControl, sourceField, rowData);
                } else {
                    //子->子
                    var dests = $container.find("div[data-datafield='" + destField + "']:not('.table_th')");
                    for (var i = 0; i < dests.length; i++) {
                        var destControl = $(dests[i]).JControl();
                        that._setDestControlValue(destControl, sourceField, rowData);
                    }
                }
            }
        },
        //子表关联主表
        //主->主/主->子
        _childSchemaAssociateMainSchema: function (rowData, mapping) {
            var that = this;
            var $container = $(that.Element).closest("#SheetContent");
            //var mappingControls = that.MappingControls;
            var mappings = {};
            if (mapping == undefined) {
                $.extend(mappings, that.MappingControls);//关联配置
                $.extend(mappings, that.MappingProperties);//关联属性
            } else {
                $.extend(mappings, mapping);
            }
            for (var destField in mappings) {
                var sourceField = mappings[destField];
                if (destField.indexOf(".") == -1) {
                    //主->主
                    var destControl = $container.find("div[data-datafield='" + destField + "']").JControl();
                    that._setDestControlValue(destControl, sourceField, rowData);
                } else {
                    //主->子
                    //取当前控件所在行的目标控件
                    var $currentTr = $(that.Element).closest("tr");
                    var destControl = $currentTr.find("div[data-datafield='" + destField + "']").JControl();
                    that._setDestControlValue(destControl, sourceField, rowData);
                }
            }
        },
        //子表关联子表
        //子->主/子->子
        _childSchemaAssociateChildSchema: function (rowData, mapping) {
            var that = this;
            var $container = $(that.Element).closest("#SheetContent");
            //var mappingControls = that.MappingControls;
            var mappings = {};
            if (mapping == undefined) {
                $.extend(mappings, that.MappingControls);//关联配置
                $.extend(mappings, that.MappingProperties);//关联属性
            } else {
                $.extend(mappings, mapping);
            }
            for (var destField in mappings) {
                var sourceField = mappings[destField];
                if (destField.indexOf(".") == -1) {
                    //子->主
                    var destControl = $container.find("div[data-datafield='" + destField + "']").JControl();
                    that._setDestControlValue(destControl, sourceField, rowData);
                } else {
                    //子->子
                    //取当前控件所在行的目标控件
                    var $currentTr = $(that.Element).closest("tr");
                    var destControl = $currentTr.find("div[data-datafield='" + destField + "']").JControl();
                    that._setDestControlValue(destControl, sourceField, rowData);
                }
            }
        },

        SetMappingValueOld: function (rowData) {
            var trId = this.$InputBody.closest("tr").attr("data-ObjectId");
            //如果关联查询控件在主表且关联配置是将关联表单子表字段带到当前表单子表字段
            //则要执行如下操作
            //清除当前子表的行，将关联表单子表的行添加到当前表单的子表
            var flag = false;
            if (this.DataField.indexOf(".") == -1) {
                //关联查询控件在主表
                for (var targetProperty in this.MappingControls) {
                    if (targetProperty.indexOf(".") > -1 && this.MappingControls[targetProperty].indexOf(".") > -1) {
                        flag = true;
                        break;
                    }
                }
            }
            //将主表和子表的mappingcontrol分开
            var mappingCtrl_schema = {
            };//主表关联配置
            var mappingCtrl_childSchema = {
            };//子表关联配置
            var targetChildSchema = {
            };//关联配置中涉及的子表

            for (var targetProperty in this.MappingControls) {
                if (!(targetProperty.indexOf('.') > -1 && this.MappingControls[targetProperty].indexOf('.') > -1)) {
                    mappingCtrl_schema[targetProperty] = this.MappingControls[targetProperty];
                } else {
                    mappingCtrl_childSchema[targetProperty] = this.MappingControls[targetProperty];
                    var targetChild = targetProperty.slice(0, targetProperty.indexOf('.'));
                    var sourceChild = this.MappingControls[targetProperty].slice(0, this.MappingControls[targetProperty].indexOf('.'));
                    var existInTargetChildSchema = false;
                    for (var target in targetChildSchema) {
                        if (target == targetChild) {
                            existInTargetChildSchema = true;
                            break;
                        }
                    }
                    if (!existInTargetChildSchema) {
                        targetChildSchema[targetChild] = sourceChild;
                    }
                }
            }
            var MappingCtrls = {
            };
            if (flag) {
                MappingCtrls = mappingCtrl_schema;
            } else {
                MappingCtrls = this.MappingControls;
            }
            for (var targetProperty in MappingCtrls) {
                var sourceProperty = MappingCtrls[targetProperty];
                var propertyName = sourceProperty;
                var potIndex = sourceProperty.indexOf('.');
                if (potIndex > 0) {
                    //propertyName = sourceProperty.slice(potIndex + 1);
                    //sourceProperty = propertyName;
                }
                var propertyValue = rowData[propertyName] /*|| rowData[sourceProperty]*/;
                var controlManager = null;
                if (targetProperty.indexOf(".") > -1) {
                    // 子表中找同行
                    var $controls = $("[data-datafield='" + targetProperty + "']:not(.table_th)");
                    for (var ci = 0, clen = $controls.length; ci < clen; ci++) {
                        var $control = $($controls[ci]);
                        if (($control.closest("tr").attr("data-ObjectId") == trId && trId != void 0) || (trId == void 0 && $control.closest("tr").attr("data-ObjectId") != void 0)) {
                            controlManager = $control.JControl();
                            break;
                        }
                    }
                } else {
                    //这里会找到两个dom;需要在表单内查找，不是在body内查找
                    var tempdoms = $("[data-datafield='" + targetProperty + "']");
                    if (tempdoms.length > 1) {
                        var tempSheetContent = $(this.Element).closest("#SheetContent");
                        controlManager = tempSheetContent.find("[data-datafield='" + targetProperty + "']").JControl();
                    } else {
                        controlManager = tempdoms.JControl();
                    }
                }
                if (controlManager) {
                    if (controlManager.Type == 50) { // 关联查询
                        var that = this;
                        var rowSchemaCode = rowData[sourceProperty + "_SchemaCode"];
                        if (rowSchemaCode == undefined) {
                            rowSchemaCode = controlManager.BOSchemaCode;
                        }
                        var propertyName = "Name";
                        if (sourceProperty.indexOf(".") > -1) {
                            propertyName = sourceProperty.split('.')[0] + ".Name";
                            //propertyName = propertyName[propertyName.length - 1];
                            //rowSchemaCode = rowData[propertyName + "_SchemaCode"];
                        }
                        propertyValue = rowData[propertyName] /*|| rowData[sourceProperty]*/;

                        if (rowSchemaCode == undefined && sourceProperty == targetProperty) {
                            rowSchemaCode = rowData[targetProperty + "_SchemaCode"];
                        }
                        if (rowSchemaCode == undefined) {
                            //携带过来的数据不对，清空当前数据
                            controlManager.ClearValue();
                        }
                        if (controlManager.BOSchemaCode == rowSchemaCode) {
                            //有关联配置
                            if (controlManager.MappingControls && !$.isEmptyObject(controlManager.MappingControls)) {
                                (function (ctrlManager) {
                                    var params = {
                                        ActionName: "GetFormatBizObject",
                                        SchemaCode: ctrlManager.BOSchemaCode,
                                        ObjectId: rowData[sourceProperty + "_Id"] || rowData[sourceProperty]
                                    }
                                    that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                                        if (data.ReturnData.ListViewData && data.ReturnData.ListViewData.length > 0) {
                                            ctrlManager.SetValue(data.ReturnData.ListViewData[0]);
                                        }
                                    });
                                })(controlManager);
                            } else {
                                //无关联配置
                                var objectId = rowData[sourceProperty + "_Id"] || rowData[sourceProperty];
                                if (targetProperty.indexOf('.') > -1 && sourceProperty.indexOf('.') > -1) {
                                    objectId = rowData[sourceProperty.split('.')[1] + "_Id"];
                                }
                                controlManager.SetValue({
                                    ObjectId: objectId, Name: propertyValue
                                });
                            }
                        }
                    } else if (controlManager.Type == 24) { // 附件
                        var that = this;
                        var objectId = rowData.ObjectId;
                        for (var key in rowData) {
                            if (key.toLowerCase().indexOf(".objectid") > -1) {
                                objectId = rowData[key];
                                break;
                            }
                        }
                        if (controlManager) {
                            (function (ctrlMgr) {
                                var params = {
                                    ActionName: "GetMappingFiles",
                                    SchemaCode: that.BOSchemaCode,
                                    BizObjectId: objectId,
                                    PropertyName: sourceProperty
                                }
                                that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                                    // 清空控件上的附件
                                    ctrlMgr.ClearFiles();
                                    if (data.ReturnData.HandlerResult && data.ReturnData.HandlerResult.length > 0) {
                                        for (var i = 0, len = data.ReturnData.HandlerResult.length; i < len; i++) {
                                            var result = data.ReturnData.HandlerResult[i];
                                            var url = '/Form/Download?AttachmentID=' + result.AttachmentId;
                                            ctrlMgr.AppendFile(result.FileId, result.AttachmentId, result.FileName, result.Size, result.Thumb, result.Description, url);
                                        }
                                    }
                                });
                            })(controlManager);
                        }
                    } else {
                        if (controlManager.Type == 1) {
                            propertyValue = propertyValue == "是" ? true : false;
                        }
                        //多选人控件时，先清空再赋值
                        if (controlManager.Type == 27) {
                            controlManager.ClearValue();
                        }
                        controlManager.SetValue(propertyValue);
                        controlManager.OnChange();
                    }
                }
            }
            var completeTargetChildSchemas = [];
            //1.查看关联配置中是否配置target为主表单的字段

            //2.将关联表单子表行添加到当前表单子表
            //2.1清除主表子表行并将关联子表的行添加到当前子表
            var listViewData = [];
            for (var targetChild in targetChildSchema) {
                //请求关联的子表数据
                var params = {
                    ActionName: "GetChildSchemaDataByObjectId",
                    TargetChild: targetChild,
                    SchemaCode: this.BOSchemaCode,
                    BizObjectId: rowData.ObjectId,
                    PropertyName: targetChildSchema[targetChild]
                };
                this.Ajax("/Form/OnAction", "POST", { PostData: JSON.stringify(params) }, function (data) {
                    if (data.ReturnData.ListViewData && data.ReturnData.ListViewData.length > 0) {
                        var gridView = $("[data-datafield='" + data.ReturnData.TargetChild + "']").FormGridView();
                        gridView.ClearRows();
                        var listViewData = data.ReturnData.ListViewData;
                        for (var i = 0; i < listViewData.length; i++) {
                            var newRowData = {
                            };
                            newRowData["ObjectId"] = $.IGuid();
                            for (var targetProperty in mappingCtrl_childSchema) {
                                var fieldValue = listViewData[i][mappingCtrl_childSchema[targetProperty]];
                                if (fieldValue == void 0) continue;
                                newRowData[targetProperty] = fieldValue;
                            }
                            gridView.AddRow($.IGuid(), newRowData);
                        }
                    }
                    //var gridView = $("[data-datafield='" + data.ReturnData.TargetChild + "']");
                    //if (gridView.length > 0) {
                    //    gridView = gridView.FormGridView();
                    //    gridView.ResizeColumn(true);
                    //}
                });
            }
        }
    });
})(jQuery);;
// FormMultiQuery控件
; (function ($) {
    // 控件实例执行方式
    $.fn.FormMultiQuery = function () {
        return $.ControlManager.Run.call(this, "FormMultiQuery", arguments);
    };

    $.FormMultiQueryData = {
        PropertyQueryItems: {},
        PropertyQueryColumns: {},
        SchemaCodeAcl: {},
        PropertyQueryDefaultValues: {}
    };

    // 构造函数
    $.Controls.FormMultiQuery = function (element, options, sheetInfo) {
        $.Controls.FormMultiQuery.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormMultiQuery.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            var that = this;
            that.FirstLoad = true;
            //是否在子表里面子表
            that.IsInGridView = !$.isEmptyObject(this.ObjectId);
            //that.IsQueryControl = false;
            that.CurrentDocument = $(that.Element).closest("html").parent();
            that.CurrentBody = $(that.Element).closest("body").length == 0 ? $("body") : $(that.Element).closest("body");

            that.SheetData = {};//关联表单过滤用到的数据
            that.LoadData = [];//关联表单的数据，表示加载出来的当前表单对应的关联的数据
            if ($.FormMultiQueryData[that.BOSchemaCode]) {
                that.IsRunnable = $.FormMultiQueryData[that.BOSchemaCode].IsRunnable;
                that.CanCreate = $.FormMultiQueryData[that.BOSchemaCode].CanCreate;
                that._Render();
            }
            else {
                var postData = { PostData: JSON.stringify({ ActionName: "LoadSchemaAcl", SchemaCode: that.BOSchemaCode }) }
                that.Ajax("/Form/OnAction", "GET", postData, function (data) {
                    $.FormMultiQueryData[that.BOSchemaCode] = data.ReturnData;
                    that.IsRunnable = data.ReturnData.IsRunnable;
                    that.CanCreate = data.ReturnData.CanCreate;
                    that._Render();
                }, false);
            }
        },

        _Render: function () {
            //是否通过Url传值过来
            if ($.IQuery(this.BOSchemaCode)) {
                if ($.IQuery(this.BOSchemaCode + "_Name")) {
                    this.Value = $.IQuery(this.BOSchemaCode);
                } else {
                    this.Editable = false;
                    //2017-3-22注释，关联列表新增的表单打开时候修改过的携带的值会被还原。
                    //this.Value = $.IQuery(this.BOSchemaCode);
                }
            }
            //是否可见
            if (!this.Visible) {
                $(this.Element).hide(); return;
            }
            //渲染前端
            this.HtmlRender();

            if ($.SmartForm != null && $.SmartForm.ResponseContext != null) {
                // 新增时，赋值需要处理改变事件，如携带之类的
                if ($.SmartForm.ResponseContext.IsCreateMode) {
                    this.BindChange("FormMultiQueryChange", this.Change);
                    //初始化默认值
                    this.InitValue();
                } else {
                    //初始化默认值
                    this.InitValue();
                    this.BindChange("FormMultiQueryChange", this.Change);
                }
            } else {
                this.BindChange("FormMultiQueryChange", this.Change);
                //初始化默认值
                this.InitValue();
            }
            //不可用
            if (!this.Editable) {
                this.SetReadonly(true);
            } else {
                this.BindEvent();
            }
        },

        //渲染前端
        HtmlRender: function () {
            var that = this;
            $(this.Element).addClass('SheetMultiQuery');
            if (!this.Editable) {
                this.$Input = $("<pre>");
                this.$InputBody.append(this.$Input);
            } else {
                this.ID = "FormMultiQuery_" + $.IGuid();
                this.$addModel = $("<a class='form-query-addModel icon-newsvg'></a>");
                this.$Input = $("<div class='form-control form-query-add' placeholder='点击选择已有表单的数据'></div");
                this.$InputBody.css({ 'position': 'relative', 'min-width': '200px' });
                this.$InputBody.append(this.$Input).append(this.$addModel);
                //改为点击时执行
                //setTimeout(that._renderDropDown(that), 0);//渲染下拉
                //setTimeout(that._renderModal(that), 0);//渲染模态框
            }
        },
        BindEvent: function () {
            var that = this;
            this.$addModel.one("click", function (e) {
                that._renderModal.apply(that);
                that.$addModel.trigger("click");
            });
            this.$Input.one("click", function (e) {
                if (!that.$dropDownItemContainer) {
                    that._renderDropDown.apply(that);
                }
            });
        },
        // 获取元素相对屏幕的绝对位置
        _getAbsPosition: function (element) {
            var that = this;
            var left = 0;
            var abs = {
                x: 0, y: 0
            };

            //火狐浏览器下拉框位置问题
            var inputOffset = $(element).offset();
            abs.x = inputOffset.left;
            abs.y = inputOffset.top;

            //if (document.documentElement.getBoundingClientRect) {
            //    abs.x = element.getBoundingClientRect().left;
            //    abs.y = element.getBoundingClientRect().top;
            //    abs.y += document.body.scrollTop | document.documentElement.scrollTop + document.documentElement.scrollTop - document.documentElement.clientTop;
            //} else {
            //    abs.x = $(element).offset().left;
            //    abs.y = $(element).offset().top + $(element).outerHeight;
            //}
            return abs;
        },
        //加载下拉框数据
        _loadDropDownData: function (needClear) {
            var that = this;
            that._getAssociationFilterData();
            if (needClear) {
                that.offset = 0;
            }
            var defaultParams = {
                ActionName: "DoAction",
                Command: 'Load',
                QueryCode: that.BOSchemaCode,
                Status: 1,
                SheetQuery: 1,
                //isFormControl: true,
                ListScene: 2,
                SheetCode: that.SchemaCode,
                DataField: that.DataField,
                SheetData: JSON.stringify(that.SheetData),
                scopeType: 3,
                offset: that.offset,
                IsSheetQueryDropDown: true
            };
            var searchName = that.$dropDownInput.val().trim();
            var searchParams = {};
            var params = {};
            if (searchName) {
                if (that.associateChildSchema) {
                    params[that.BOSchemaCode + '.Name'] = [searchName];
                } else {
                    params['Name'] = [searchName];
                }
            }
            searchParams['searchParamsJson'] = JSON.stringify(params);
            $.extend(defaultParams, searchParams);
            if (!that.FirstLoad) {
                that.Ajax('/App/OnAction', 'GET', { PostData: JSON.stringify(defaultParams) }, function (data) {
                    if (data.Successful) {
                        that.LoadData = data.ReturnData.Response.ReturnData;
                        that._bindDataToDropDown(needClear, data.ReturnData.Response.ReturnData);
                    }
                }, true);
            }
        },
        //绑定过滤的数据到下拉框
        _bindDataToDropDown: function (needClear, data) {
            var that = this;
            that.$dropDownItemContainer.hide();
            if (needClear) {
                that.$dropDownItemContainer.empty();
            }
            if (data && data.length > 0) {
                that.offset += data.length;
                //判断是关联主表还是子表
                //表单中的控件直接通过BOSchemaInfo判断关联的是否是子表；列表过滤条件要根据返回值判断
                if (that.associateChildSchema == undefined) {
                    that.associateChildSchema = false;
                    for (var key in data[0]) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            that.associateChildSchema = true;
                            break;
                        }
                    }
                }
                var existObjectIds = that.$Input.data('ObjectId');
                if (existObjectIds) {
                    existObjectIds = existObjectIds.split(';');
                } else {
                    existObjectIds = [];
                }
                if (needClear && that.IsQueryControl) {
                    var arr = [];
                    if (that.associateChildSchema) {
                        var noSelectValue = {};
                        var objectId = that.BOSchemaCode + ".ObjectId";
                        var name = that.BOSchemaCode + ".Name";
                        noSelectValue[objectId] = "--";
                        noSelectValue[name] = "--(空值)";
                        arr.push(noSelectValue);
                    } else {
                        arr = [{ ObjectId: "--", Name: '--(空值)' }];
                    }
                    data = arr.concat(data);
                }
                for (var i = 0, len = data.length; i < len; i++) {
                    var id = $.IGuid();
                    var itemId = data[i].ObjectId;
                    var itemName = data[i].Name;
                    if (that.associateChildSchema) {
                        itemId = data[i][that.BOSchemaCode + '.ObjectId'];
                        itemName = data[i][that.BOSchemaCode + '.Name'];
                    }
                    itemName = (itemName == null || itemName == void 0) ? '--' : ($.trim(itemName) == '' ? '--' : itemName);
                    var $dropDownItemRow = $('<div class="row form-query-itemrow"></div>');
                    $dropDownItemRow.hover(function () {
                        $(this).find('label.form-query-item-label').css({
                            'background-color': '#eff7fd',
                            'color': '#38adff'
                        });
                    }, function () {
                        $(this).find('label.form-query-item-label').css({
                            'background-color': '#fff',
                            'color': '#818181'
                        })
                    });
                    var $dropDownItem = $('<input type="checkbox" data-itemid = "' + itemId + '"  id="' + id + '"  value="' + itemName + '" style="display:none;" />');
                    var $dropDownItemLabel = $('<label class="form-query-item-label" for= "' + id + '" data-itemid="' + itemId + '" title="' + itemName + '">' + itemName + '</label>');
                    $dropDownItemLabel.css('margin-left', '15px');
                    $dropDownItemRow.append($dropDownItem).append($dropDownItemLabel);
                    //对于搜索出来的数据，如果之前已经选过则要勾中
                    if ($.inArray(itemId, existObjectIds) > -1) {
                        $dropDownItem.prop('checked', true);
                    } else if (itemId == undefined) {//undefined情况要处理下
                        if ($.inArray('undefined', existObjectIds) > -1) {
                            $dropDownItem.prop('checked', true);
                        }
                    }
                    that.$dropDownItemContainer.append($dropDownItemRow);
                    var eventName = 'click.';
                    if (that.DataField) {
                        eventName += that.DataField;
                    } else if (that.ID) {
                        eventName += that.ID;
                    }
                    $dropDownItem.off(eventName).on(eventName, function (e) {
                        //这里不能清空Input
                        var $links = '';
                        var objectIds = '';
                        var checkState = $(this).is(':checked');
                        if (checkState) {//选中
                            var objectId = $(this).data('itemid');
                            objectIds = that.$Input.data('ObjectId') || '';
                            if (objectIds.indexOf(objectId) > -1) {
                                return;
                            }
                            var link = '<a href="javascript:;" class="label label-info" style="position:relative" title="' + $(this).val() + '">' + $(this).val() + '<i class="fa icon-close-middle" style="margin-left:5px;right:0;" data-objectId="' + objectId + '"></i></a>';
                            //添加时清空空的链接
                            that.$Input.append(link);
                            if (objectIds != '' && objectIds.charAt(objectIds.length - 1) != ';') {
                                objectIds += ';';
                            }
                            objectIds += (objectId + ';');
                            that.$Input.data('ObjectId', objectIds);
                        } else {//取消选中
                            var objectId = $(this).data('itemid');
                            that.$Input.find()
                            objectIds = that.$Input.data('ObjectId');
                            objectIds = objectIds.replace(objectId + ';', '');
                            that.$Input.data('ObjectId', objectIds);
                            that.$Input.find('i[data-objectId="' + objectId + '"]').parent().remove();
                        }

                        that.$Input.find('i').on('click', function () {
                            var $this = $(this);
                            $this.closest('a').remove();
                            var objectIds = that.$Input.data('ObjectId');
                            var thisObjectId = $this.attr('data-ObjectId');
                            objectIds = objectIds.replace(thisObjectId + ';', '');
                            that.$Input.data('ObjectId', objectIds);
                            that.OnChange();
                            that.$dropDownItemContainer.find('input[type="checkbox"][data-itemid="' + thisObjectId + '"]').prop('checked', false);
                        });
                        that.OnChange();
                    });
                    $dropDownItemLabel.off(eventName).on(eventName, function (e) {
                        e.stopPropagation();
                    });
                }
            }
            that.$dropDownItemContainer.show();
        },
        //渲染FormMultiQuery的下拉
        _renderDropDown: function () {
            this.offset = 0;
            var that = this;
            var h = that.$Input.outerHeight();
            var w = that.$Input.outerWidth();
            var position = that._getAbsPosition(that.$Input[0]);

            var dropdownStr = "<div class='form-query-dropdown' style='left:" + position.x + "; top:" + (position.y + h) + "; width:" + w + "'></div>";

            that.$dropdown = $(dropdownStr);

            //绑定元素父元素的滚动事件，重新赋值$UserPanel的高度和left
            $.each($(this.Element).parents(), function (index, obj) {
                $(obj).scroll(function () {
                    that.$dropdown.css("top", that.$Input.offset().top + that.$Input.outerHeight());
                });
            });
            var $dropDownInputRow = $('<div class="row" style="margin-left:0;margin-right:0;"></div>');

            that.$dropDownInput = $('<input type="text" autofocus="autofocus" class="form-control form-input search-input-dropdown" placeholder="输入表单名称查找"  />');
            that.$dropDownInput.off('keyup').on('keyup', function (event) {
                that.TimeOut && window.clearTimeout(that.TimeOut);
                that.TimeOut = setTimeout(function () { that._loadDropDownData(true) }, 1000);
                event.stopPropagation();
            });

            $dropDownInputRow.append(that.$dropDownInput);
            that.$dropDownItemContainer = $('<div class="form-query-container">')
            that.$dropdown.append($dropDownInputRow).append(that.$dropDownItemContainer);

            //绑定滚动事件
            that.$dropDownItemContainer.scroll(function () {
                var h_container = $(this).height();//窗口高度
                var h_scrollTop = $(this).scrollTop();//滚动条顶部
                if (0 + h_scrollTop >= $(this)[0].scrollHeight - h_container) {
                    that._loadDropDownData(false);
                }
            });
            //初始时候请求数据
            that._loadDropDownData(true);
            //Error：报表过滤情况CurrentBody是空的，
            //原因是在初始化控件的时候没有把元素append到DOM中，
            //所以在下面的点击事件中加了判断，如果不存在要先append到DOM中
            $(that.CurrentBody).append(that.$dropdown);
            //点击文本狂显示
            that.$Input.on('click.addModel', function () {
                if ($(that.Element).css("visibility") == "hidden") {
                    return;
                }
                that.FirstLoad = false;
                //记录当前dropdown是否可见
                var thisDropDownIsVisible = that.$dropdown.is(":visible");
                //隐藏界面上所有的dropdown
                $('.form-query-dropdown').hide();
                //如果当前dropdown是可见的直接隐藏掉就可以了
                if (thisDropDownIsVisible) {
                    that.$dropdown.hide();
                    return;
                }
                //判断dom中是否有dropdown，如果没有就append进去
                //这种情况出现在render时候
                var $body = $($(that.Element).closest("body"));
                if ($body.find('div.form-query-dropdown').length == 0) {
                    $body.append(that.$dropdown);
                }
                var searchText = that.$dropDownInput.val().trim();
                //如果有搜索记录则清空
                if (searchText != '') {
                    that.$dropDownInput.val('');
                }
                that._getAssociationFilterData();
                //每次打开下拉框都要重新加载数据
                that._loadDropDownData(true);


                var hh = '300px';
                that.$dropDownItemContainer.css('max-height', '150px');
                //如果是列表过滤控件要重新获取坐标
                var h = that.$Input.outerHeight();
                var w = that.$Input.outerWidth();
                var position = that._getAbsPosition(that.$Input[0]);
                that.$dropdown.css({
                    'position': 'absolute',
                    'left': position.x,
                    'top': position.y + h,
                    'width': w
                });
                that.$dropdown.show();
                //获取焦点
                that.$dropdown.find('input.search-input-dropdown').focus();
                //if (that.$dropdown.is(':hidden'))
                //    return;
                //获取已经选中的item，在dropdown中设置勾中
                var selectedObjectIds = $(this).data('ObjectId');
                if (selectedObjectIds) {
                    var newSelectedObjectIds = [];
                    selectedObjectIds = selectedObjectIds.split(';');
                    for (var i = 0; i < selectedObjectIds.length; i++) {
                        if (selectedObjectIds[i] == 'undefined' || selectedObjectIds[i] == '') {
                            continue;
                        }
                        newSelectedObjectIds.push(selectedObjectIds[i]);
                    }
                    selectedObjectIds = newSelectedObjectIds;
                }
                if (selectedObjectIds && selectedObjectIds.length > 0) {
                    var checkboxItems = that.$dropDownItemContainer.find('input[type="checkbox"]');
                    for (var i = 0; i < checkboxItems.length; i++) {
                        $(checkboxItems[i]).prop('checked', false);
                        var itemObjectId = $(checkboxItems[i]).attr('data-itemid');
                        if ($.inArray(itemObjectId, selectedObjectIds) > -1) {
                            $(checkboxItems[i]).prop('checked', true);
                        }
                    }
                }
            });
            var $body = $(that.CurrentBody);
            var eventName = 'click.';
            if (that.DataField) {
                if (that.DataField.indexOf('.') > 0) {
                    //在子表
                    var trObjectId = $(that.Element).closest('tr').attr('data-objectid');
                    eventName += trObjectId + '.' + that.DataField;
                } else {
                    eventName += that.DataField;
                }
            } else if (that.ID) {
                eventName += that.ID;
            }
            //点击DropDown以外区域隐藏
            //后续要改进，不要每个控件绑定document的click事件，能不能在一个click里面隐藏所有的。需要考虑到主表，子表，列表过滤，报表过滤，列表默认值等地方
            //绑定事件到document
            $($body.parent().parent()).off(eventName).on(eventName, that, function (e) {
                var target = e.target;
                var ctrl = e.data;
                if (ctrl.$Input[0] != target && ctrl.$dropdown.find($(target)).length == 0) {
                    ctrl.$dropdown.hide();
                }
            });
            that.$Input.trigger("click");
        },
        //渲染 FormMultiQuery的Modal
        _renderModal: function () {
            var that = this;
            that.ID = "FormMultiQuery_" + $.IGuid();
            that.$modal = $("<div id='" + that.ID + "' class='modal fade modal-formquery'  data-backdrop='false' role='dialog'>" +
                "<div class='modal-dialog modal-lg modal-dialog-form'>" +
                "<div class='modal-content'>" +
                "<div class='modal-header modal-header-form'><div type='button' class='close' style='margin- top:-2px;' data-dismiss='modal'><span aria-hidden='true' class='fa icon-close' style='font-size:16px;'></span></div><h4 class='modal-title modal-title-form'>选择" + that.DisplayName + "</h4></div>" +
                "</div>" +
                "</div>" +
                "</div>");

            var $modalBody = $("<div class='modal-body'></div>");

            // 查询条件
            that.$searchForm = $("<div class='form-horizontal searchform myform-horizontal backgroundcolor'></div>");
            $modalBody.append(that.$searchForm);

            //查询条件按钮分割线
            that.$partingLine = $("<div style='border-bottom:1px solid #E3E7E9;text-align:center;'><i class='fa icon-arrow-up-double-b btn-up btnToggle' style='color:#e5e6e6;'></i></div>")
            $modalBody.append(that.$partingLine);

            var $modalFooter = $("<div class='modal-footer modal-footer-form'></div>");

            // 按钮
            that.$toolbar = $("<div class='toolbar text-left' style='margin-top:10px;'><div class='btn-group btn-group-sm' role='group'><button class='btn btn-ok btn-search btnSearch hide '><i class='fa fa-search'></i>查询</button><button class='btn btn-create btnAdd hide'><i class='fa icon-increase'></i>新增</button></div></div>");
            $modalBody.append(that.$toolbar);

            // 表格
            that.Table_ID = "FormTable_" + $.IGuid();
            that.$table = $("<table id='" + that.Table_ID + "' ></table>");

            var pagerStr = '<div class="table-page" id="bar-' + that.Table_ID + '">' +
                '<div class="page-index">' +
                '<input type="text" value="1" class="Page_Index" />/<label class="Page_Count">1</label>' +
                '</div>' +
                '<div class="btn-group table-page_ButtonGroup" style="width: 160px;">' +
                '<button class="btn Page_Num_Pre">上一页</button>' +
                '<button class="btn Page_Num_Next">下一页</button>' +
                '</div>' +
                '<div class="page-size dropup">' +
                '<button class="dropdown-toggle" data-toggle="dropdown" aria-expanded="false">' +
                '<span class="Page_Per_Size">' + 10 + '</span>' +
                '<i class="fa fa-angle-down"></i>' +
                '</button>' +
                '<ul class="dropdown-menu">' +
                '<li><a>5</a></li>' +
                '<li><a>10</a></li>' +
                '<li><a>20</a></li>' +
                '<li><a>50</a></li>' +
                '</ul>' +
                '</div>' +
                '<div class="page-total">共0条</div>' +
                '</div>';
            var buttonStr = '<div class="btn-group btn-group-sm" role="group" style="width:100%;"><button class="btn btn-ok btnMultiSelect">确定</button></div>';
            $modalBody.append(that.$table).append(pagerStr);
            //如果关联查询控件在子表中则允许批量选择，增加确定按钮
            //新增的时候出现按钮
            $modalFooter.append(buttonStr);
            that.$modal.find(".modal-content").append($modalBody).append($modalFooter);
            $(that.CurrentBody).append(that.$modal);
            that.SheetData = {};
            that.TableNeedRefresh = false;//为true的情况：关联查询过滤规则中配置了主表单的字段
            that.$addModel.off("click").on("click", function () {
                that.$dropdown && that.$dropdown.hide();
                //关联表单信息
                var associationSchemaInfo = $(that.Element).attr('data-boSchemaInfo');
                if (associationSchemaInfo != void 0 && associationSchemaInfo != '') {
                    var infoJson = $.parseJSON(associationSchemaInfo);
                    that.associateChildSchema = infoJson.IsChildSchema;
                } else {
                    that.associateChildSchema = undefined;
                }

                that._getAssociationFilterData();
                that.$modal.modal("show");
            });

            that.SearchInitialized = false; // 查询条件是否已初始化
            that.TableInitialized = false; // 表格是否已初始化
            that.CheckedRows = [];//点击“确定”按钮或者“查询”按钮将勾选的行存入CheckedRows
            // modal的show事件
            that.$modal.on("show.bs.modal", function (e) {
                $.MsgFilter.show();
                that.SelectedItems = [];
                var items = that.$Input.find('i');
                for (var i = 0; i < items.length; i++) {
                    var $item = $(items[i]);
                    var objectId = $item.attr('data-objectid');
                    if (objectId == 'undefined') {
                        continue;
                    }
                    var name = $item.closest('a').text();
                    that.SelectedItems.push({
                        ObjectId: objectId, Name: name
                    });
                }

                that.$table.bootstrapTable('uncheckAll');
                var currModal = this;
                if (!$.FormMultiQueryData.PropertyQueryItems[that.BOSchemaCode] || !$.FormMultiQueryData.PropertyQueryColumns[that.BOSchemaCode]) {
                    //var params = {
                    //    ActionName: "GetPropertyQueryColumnAndItem",
                    //    SchemaCode: that.BOSchemaCode,
                    //    flag: $.IGuid()
                    //}
                    var params = {
                        ActionName: "LoadView",
                        QueryCode: that.BOSchemaCode,
                        flag: $.IGuid()
                    }
                    that.Ajax("/App/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                        if (data.ReturnData.Response.Columns.length == 0 && data.ReturnData.QueryItems.length == 0) {
                            $(currModal).modal("hide");
                            $.IShowError("没有设置可用列！");
                            return;
                        }
                        $.FormMultiQueryData.PropertyQueryColumns[that.BOSchemaCode] = data.ReturnData.Response.Columns;

                        //调整initSearchParams位置为initTable之前，原因是在关联列表中初始时候searchform是空
                        $.FormMultiQueryData.PropertyQueryItems[that.BOSchemaCode] = data.ReturnData.QueryItems;
                        $.FormQueryData.PropertyQueryDefaultValues[that.BOSchemaCode] = JSON.parse(data.ReturnData.QueryDefaultValues);

                        if (!that.SearchInitialized) {
                            that._initSearchParams(data.ReturnData.QueryItems, $.FormQueryData.PropertyQueryDefaultValues[that.BOSchemaCode]);
                        }

                        if (!that.TableInitialized || that.TableNeedRefresh) {
                            that._initTable(data.ReturnData.Response.Columns);//合并表头
                        } else {
                            that._setRowChecked();
                        }
                    });
                } else {
                    if (!that.TableInitialized || that.TableNeedRefresh) {
                        that._initTable($.FormMultiQueryData.PropertyQueryColumns[that.BOSchemaCode]);
                    } else {
                        that._setRowChecked();
                    }
                    if (!that.SearchInitialized) {
                        that._initSearchParams($.FormMultiQueryData.PropertyQueryItems[that.BOSchemaCode], $.FormQueryData.PropertyQueryDefaultValues[that.BOSchemaCode]);
                    }
                }
                //判断是否要合并表头
                that._setColumnColspan(that.TableAllColumns);
            });
            that.$modal.on("hidden.bs.modal", function (e) {
                $.MsgFilter.remove();
            });
            var $btnAdd = that.$toolbar.find(".btnAdd");
            // 只有表单中的关联查询允许新增关联对象
            if (that.IsRunnable && that.CanCreate && $(that.Element).hasClass("sheet-control")) {
                // 新增关联对象
                $btnAdd.removeClass("hide");
                $btnAdd.off("click").on("click", function () {
                    var params = {
                        ActionName: "GetBizObjectSchemaDisplayName",
                        SchemaCode: that.BOSchemaCode,
                        flag: $.IGuid()
                    }
                    that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                        if (data.Successful) {
                            var url = "/Form/DefaultSheet?SchemaCode=" + that.BOSchemaCode + "&SheetQueryField=" + that.DataField;
                            if (that.BizObjectId) {
                                url += "&SheetQueryRowId=" + that.BizObjectId;
                            }
                            that.$modal.modal("hide");
                            $.ISideModal.Show(url, data.ReturnData.DisplayName);
                        }
                    });
                });
            } else {
                $btnAdd.addClass("hide");
            }

            //子表批量选择功能
            var $btnMultiSelect = that.$modal.find('.btnMultiSelect');
            //批量选择确定
            $btnMultiSelect.off('click').on('click', function () {
                that.$modal.modal('hide');
                $('.table-tip').hide();
                //获取check的行
                var datafield = that.DataField;

                //控件在主表中
                if (that.associateChildSchema == undefined) {
                    that.associateChildSchema = false;
                    for (var key in that.CheckedRows[0]) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            that.associateChildSchema = true;
                            break;
                        }
                    }
                }
                var objectIdStr = 'ObjectId';
                var nameStr = 'Name';
                if (that.associateChildSchema) {
                    objectIdStr = that.BOSchemaCode + '.ObjectId';
                    nameStr = that.BOSchemaCode + '.Name';
                }
                //用于列表过滤条件
                that.$Input.empty();
                that.$Input.data('ObjectId', '').empty();
                //Error：checkedRows有重复

                for (var i = 0; i < that.CheckedRows.length; i++) {
                    var objectId = that.CheckedRows[i][objectIdStr];
                    if (!objectId) {
                        continue;
                    }
                    var name = that.CheckedRows[i][nameStr] || "--";
                    var link = '<a href="javascript:;" class="label label-info">' + name + '<i class="fa icon-close-middle" style="margin-left:5px" data-objectId="' + objectId + '"></i></a>';
                    that.$Input.append(link);
                    objectIds = that.$Input.data('ObjectId') || '';
                    objectIds += (objectId + ';');
                    that.$Input.data('ObjectId', objectIds);
                }
                that.$Input.find('i').on('click', function () {
                    var $this = $(this);
                    $this.closest('a').remove();
                    var objectIds = that.$Input.data('ObjectId');
                    var thisObjectId = $this.attr('data-ObjectId');
                    objectIds = objectIds.replace(thisObjectId + ';', '');
                    that.$Input.data('ObjectId', objectIds);
                    that.OnChange();
                    that.$dropDownItemContainer.find('input[type="checkbox"][data-itemid="' + thisObjectId + '"]').prop('checked', false);
                });
                that.OnChange();
            });
        },

        //获取关联表单过滤条件中控件的值
        _getAssociationFilterData: function () {
            //判断关联查询是否配置了过滤规则
            //如果配置了过滤规则且规则中有当前主表单的字段
            //则要取主表单中的字段
            //兼容旧的bofilter
            var that = this;
            if (that.DataField == void 0) {
                return;
            }
            var bofilter = $(that.Element).attr('data-bofilter');
            if (that.AssociationFilter || bofilter) {
                var rule = that.AssociationFilter.Rule || $.parseJSON(bofilter).Rule;
                if (rule && rule.length > 0) {
                    var controls = $.ControlManager.Controls;
                    var hasCreatedByCtrl = false;//是否有创建者控件
                    var hasOwnerCtrl = false;//是否有拥有者控件
                    var hasOwnerDeptCtrl = false;//是否有所属部门控件
                    for (var control in controls) {
                        var ctrl = controls[control];
                        var controlDataField = ctrl.DataField;
                        if (controlDataField == 'CreatedBy.FullName') {
                            controlDataField = controlDataField.split('.')[0];
                            hasCreatedByCtrl = true;
                        }
                        if (controlDataField == 'OwnerId') {
                            hasOwnerCtrl = true;
                        }
                        if (controlDataField == 'OwnerDeptId') {
                            hasOwnerDeptCtrl = true;
                        }
                        //rule.indexOf(controlDataField)<0这样不能判断rule中是否有controlDataField,例如rule:{D00001.helloworld}=="hi",controlDataField:hello
                        if (rule.indexOf(controlDataField + '}') < 0 || controlDataField == that.DataField) continue;
                        //如果rule中包含controlDataField，则应该是以如下形式存在
                        //{xx}或者{xxx.xx}形式，主表中的字段是{controlDataField}，子表中字段是{xxx.controlDataField}
                        var ctrlFieldIndex = rule.indexOf(controlDataField + '}');
                        var prefix = rule.slice(ctrlFieldIndex - 1, ctrlFieldIndex);
                        if (prefix != '{' && prefix != '.') {
                            continue;
                        }
                        //字表中的control不调用SaveDataField，由子表自己调用SaveDataField保存值
                        var controlValue = '';
                        if (controlDataField == 'CreatedBy') {
                            controlValue = $.SmartForm.ResponseContext.ReturnData.CreatedBy.Value[0].UnitId;
                        } else {
                            if (ctrl.DataField == void 0 || controlDataField == "Comments") continue;
                            //判断关联查询控件是否在子表中
                            if (controlDataField.indexOf('.') > 0 && ctrl.Type != 26 && ctrl.Type != 27) {
                                //规则中的字段在子表中
                                if (that.DataField.indexOf('.') > 0) {
                                    //获取与关联查询控件同一行的子表控件
                                    var $tr = $(that.Element).closest('tr');
                                    var thisRowCtrl = $tr.find('div[data-datafield="' + controlDataField + '"]');
                                    if (thisRowCtrl.length > 0) {
                                        controlValue = $(thisRowCtrl[0]).JControl().GetValue();
                                    }
                                } else {
                                    var $ctrl = $('div[data-datafield="' + controlDataField + '"]').not('.table_th');
                                    if ($ctrl != undefined) {
                                        controlValue = [];
                                        for (var i = 0; i < $ctrl.length; i++) {
                                            controlValue.push($($ctrl[i]).JControl().GetValue());
                                        }
                                    }
                                }
                            } else {
                                if (ctrl.Type == 26 || ctrl.Type == 27) {
                                    //单人
                                    controlValue = ctrl.GetUnitIDs();
                                } else if (ctrl.Type == 7) {
                                    controlValue = ctrl.GetNum();
                                } else {
                                    controlValue = ctrl.GetValue();
                                }
                            }
                        }
                        that.SheetData[controlDataField] = controlValue;
                        that.TableNeedRefresh = true;
                    }
                    if (!hasCreatedByCtrl) {
                        that.SheetData["CreatedBy"] = $.SmartForm.ResponseContext.ReturnData.CreatedBy.Value[0].UnitId;
                    }
                    if (!hasOwnerCtrl) {
                        that.SheetData["OwnerId"] = $.SmartForm.ResponseContext.ReturnData.OwnerId.Value[0].UnitId;
                    }
                    if (!hasOwnerDeptCtrl) {
                        that.SheetData["OwnerDeptId"] = $.SmartForm.ResponseContext.ReturnData.OwnerDeptId ? ($.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0] != undefined ? $.SmartForm.ResponseContext.ReturnData.OwnerDeptId.Value[0].UnitId : null) : null;
                    }
                    that.SheetData["CreatedTime"] = $.SmartForm.ResponseContext.ReturnData.CreatedTime.Value;
                }
            }
        },
        //判断是否要合并表头
        _setColumnColspan: function (columns) {
            if (columns == void 0 || columns.length == 0) {
                return;
            }
            var colspantr = this.$table.find('thead tr[class="tr-colspan"]');
            if (colspantr != void 0 && colspantr.length > 0) {
                return;
            }
            var parentColumnCount = 0;
            var childColumnCount = 0;
            for (var i = 0; i < columns.length; i++) {
                var field = columns[i].field;
                if (!columns[i].visible || field == undefined) {
                    continue;
                }
                if (field.indexOf('.') > -1) {
                    childColumnCount++;
                } else {
                    parentColumnCount++;
                }
            }
            if (childColumnCount > 0) {
                if (this.$table.find('th[data-field="checkcolumn"]').length == 0 && this.DataField.indexOf('.') > 0) {
                    //checkbox不可见
                    childColumnCount++;
                    parentColumnCount--;
                }
                var tr = $('<tr class="tr-colspan"></tr>').append('<th colspan="' + parentColumnCount + '" style="text-align:center;">主表</th>').append('<th colspan="' + childColumnCount + '" style="text-align:center;">子表</th>');
                var oldtr = this.$table.find('thead tr');
                $(tr).insertBefore(oldtr);
            }
        },
        _checkRows: function (rows) {
            var that = this;
            var childObjectId = undefined;
            //先判断是check的是单行还是多行
            var tempRows = that.CheckedRows;
            if (that.associateChildSchema == true) {
                childObjectId = that.BOSchemaCode + '.ObjectId';
            }
            if ($.isArray(rows)) {
                if (that.associateChildSchema == undefined) {
                    //兼容旧的
                    for (var key in rows[0]) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                for (var i = 0; i < rows.length; i++) {
                    var rowExist = false;
                    for (var j = 0; j < tempRows.length; j++) {
                        if (childObjectId != undefined) {
                            if (rows[i][childObjectId] == tempRows[j][childObjectId]) {
                                rowExist = true;
                                break;
                            }
                        } else {
                            if (rows[i]['ObjectId'] == that.CheckedRows[j]['ObjectId']) {
                                rowExist = true;
                                break;
                            }
                        }
                    }
                    if (!rowExist) {
                        that.CheckedRows.push(rows[i]);
                    }
                }
            } else {
                if (that.associateChildSchema == undefined) {//兼容旧的
                    for (var key in rows) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                var rowExist = false;
                for (var i = 0; i < tempRows.length; i++) {
                    if (childObjectId != undefined) {
                        if (tempRows[i][childObjectId] == rows[childObjectId]) {
                            rowExist = true;
                            break;
                        }
                    } else {
                        if (tempRows[i]['ObjectId'] == rows['ObjectId']) {
                            rowExist = true;
                        }
                    }
                }
                if (!rowExist) {
                    that.CheckedRows.push(rows);
                }
            }
        },
        _unCheckRows: function (rows) {
            var that = this;
            var childObjectId = undefined;
            var tempRows = that.CheckedRows;
            if (that.associateChildSchema == true) {
                childObjectId = that.BOSchemaCode + '.ObjectId';
            }
            if ($.isArray(rows)) {//多行
                if (that.associateChildSchema == undefined) {//兼容旧的
                    for (var key in rows[0]) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                for (var i = 0; i < rows.length; i++) {
                    for (var j = 0; j < tempRows.length; j++) {
                        if (childObjectId != undefined) {
                            that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                                return item[childObjectId] == rows[i][childObjectId];
                            }, true);
                        } else {
                            that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                                return item['ObjectId'] == rows[i]['ObjectId'];
                            }, true);
                        }
                    }
                }
            } else {//单行
                if (that.associateChildSchema == undefined) {//兼容旧的
                    for (var key in rows) {
                        if (key.toLowerCase().indexOf('.objectid') > -1) {
                            childObjectId = key;
                            break;
                        }
                    }
                }
                for (var i = 0; i < tempRows.length; i++) {
                    if (childObjectId != undefined) {
                        that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                            return item[childObjectId] == rows[childObjectId];
                        }, true);
                    } else {
                        that.CheckedRows = $.grep(that.CheckedRows, function (item, n) {
                            return item['ObjectId'] == rows['ObjectId'];
                        }, true);
                    }
                }
            }
        },
        _initSearchParams: function (queryItems, queryDefaultValues) {
            var that = this;
            if (!queryItems || queryItems.length == 0) {
                this.$searchForm.hide();
                this.$partingLine.hide();
                return;
            }
            var searchHtml = "";
            var showCount = 0;
            for (var i = 0, len = queryItems.length; i < len; i++) {
                var queryItem = queryItems[i];
                if (queryItem.Visible == false) {
                    continue;
                }
                searchHtml += (showCount % 2 == 0 ? "<div class='form-group form-group-sm myform-group mgb5' style='margin-bottom:10px;'>" : "");
                switch (queryItem.DataType) {
                    case 1:
                        var inputId = $.IGuid();
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName +
                            '</label><div class="col-sm-4 pdt5"><span class="mycheckbox" data-propertyname="' + queryItem.PropertyName + '">' +
                            '<input type="checkbox" id="' + inputId + 't" value="true" style="display:none;" /><label for="' + inputId + 't" class="checkbox-inline" style="margin:2px 10px 0 0"> 是</label>' +
                            '<input type="checkbox" id="' + inputId + 'f" value="false" style="display:none;" /> <label for="' + inputId + 'f" class="checkbox-inline" style="margin:2px 10px 0 0">否</label></span></div>';

                        break;
                    case 14:
                        if (queryItem.AssociationSchemaCode) {
                            searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="mycomboboxlist" data-dataField="' + queryItem.PropertyName + '" data-schemaCode="' + this.BOSchemaCode + '" data-width="100%" data-defalutvalue="' + queryItem.DefaultValue + '"> </div></div>';
                        }
                        else if (queryItem.SelectedValues && queryItem.SelectedValues !== "") {
                            var checkItemsHtml = "";
                            var checkItems = queryItem.SelectedValues.split(";");
                            searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5">';
                            searchHtml += "<select id='" + queryItem.PropertyName + "' multiple='multiple' class='mymultiselect'>";
                            checkItemsHtml += "<option value='--'>--(空值)</option>";
                            for (var ci = 0, clen = checkItems.length; ci < clen; ci++) {
                                checkItemsHtml += "<option value='" + checkItems[ci] + "'> " + checkItems[ci] + "</option>";
                            }
                            searchHtml += checkItemsHtml;
                            searchHtml += "</select></div>";
                        }
                        else {
                            if (queryItem.PropertyName == "SeqNo") {
                                searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><input class="form-control mytext " type="text" data-propertyname="' + queryItem.PropertyName + '" /></div>';
                            }
                            else {
                                searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="mycombobox" data-dataField="' + queryItem.PropertyName + '" data-schemaCode="' + this.BOSchemaCode + '" data-width="100%" data-defalutvalue="' + queryItem.DefaultValue + '"> </div></div>';
                            }
                        }
                        break;

                    case 13:
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><input class="form-control mytext " type="text" data-propertyname="' + queryItem.PropertyName + '" /></div>';
                        break;
                    case 7:
                    case 9:
                    case 11:
                    case 35:
                        if (queryItem.DisplayName == "Status") {
                            //关联查询中的的筛选,隐藏流程状态
                            //add by jnyf
                            continue;
                            //流程状态
                            searchHtml += '<label class="col-sm-2 control-label">流程状态</label><div class="col-sm-4 pdt5">';
                            searchHtml += '<select id="' + queryItem.DisplayName + '" multiple="multiple" class="mymultiselect">';
                            searchHtml += '<option value="进行中">进行中</option><option value="已结束">已结束</option><option value="已取消">已取消</option>';
                            searchHtml += '</select>';
                            searchHtml += '</div>';
                        } else {
                            searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="input-group mynum" data-propertyname="' + queryItem.PropertyName + '"><div class="input-group-addon">从</div><input type="text" class="form-control" /><div class="input-group-addon">至</div><input type="text" class="form-control" /></div></div>';
                        }
                        break;
                    case 5:
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="input-group mydatetime" data-propertyname="' + queryItem.PropertyName + '"><div class="input-group-addon">从</div><input type="text" data-datetimemode="' + queryItem.DateTimeMode + '" class="form-control mydatetimepicker mytimestart" /><div class="input-group-addon">至</div><input type="text" data-datetimemode="' + queryItem.DateTimeMode + '" class="form-control mydatetimepicker mytimeend" /></div></div>';
                        break;
                    case 26:
                        var tempHtml = '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="myuserpicker" data-displayname="' + queryItem.DisplayName + '" data-propertyname="' + queryItem.PropertyName + '" data-width="100%"></div></div>';
                        if (queryItem.PropertyName == 'OwnerId' || queryItem.PropertyName == 'CreatedBy') {
                            tempHtml = '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="myuserpicker" data-displayname="' + queryItem.DisplayName + '" data-propertyname="' + queryItem.PropertyName + '" data-orgunitvisible="false" data-width="100%"></div></div>';
                        } else if (queryItem.PropertyName == 'OwnerDeptId') {
                            tempHtml = '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 pdt5"><div class="myuserpicker" data-displayname="' + queryItem.DisplayName + '" data-propertyname="' + queryItem.PropertyName + '" data-orgunitvisible="true" data-uservisible="false" data-width="100%"></div></div>';
                        }
                        searchHtml += tempHtml;
                        break;
                    case 50:
                    case 51:
                        searchHtml += '<label class="col-sm-2 control-label">' + queryItem.DisplayName + '</label><div class="col-sm-4 mydropdown pdt5" data-propertyname="' + queryItem.PropertyName + '" data-boschemacode="' + queryItem.AssociationSchemaCode + '"></div>';
                        break;
                }
                searchHtml += ((showCount % 2 || showCount === len - 1) != 0 ? "</div>" : "");
                showCount++;
            }
            this.$searchForm.append(searchHtml);

            this.$searchForm.find(".mycombobox").each(function () {
                var $combobox = $(this);
                var schemacode = $combobox.attr("data-schemaCode");
                var datafield = $combobox.attr("data-dataField");
                var defaultvalue = $combobox.attr("data-defalutvalue");
                var mycombobox = $combobox.FormComboBox({
                    SchemaCode: schemacode, DataField: datafield, DefaultValue: defaultvalue, Width: "50%",
                    OnChange: function () {
                        that._refreshTable();
                    },
                });
            });


            this.$searchForm.find(".mycombobox").removeClass("form-group");

            this.$searchForm.find(".mycomboboxlist").each(function () {
                var $combobox = $(this);
                var schemacode = $combobox.attr("data-schemaCode");
                var datafield = $combobox.attr("data-dataField");
                var defaultvalue = $combobox.attr("data-defalutvalue");
                var mycomboboxlist = $combobox.FormComboBoxList({
                    Width: "50%",
                    OnChange: function () {
                        that._refreshTable();
                    },
                });
            });
            this.$searchForm.find(".mycomboboxlist").removeClass("form-group");


            // 统一初始化datetimepicker
            this.$searchForm.find(".mydatetimepicker").each(function () {
                var $picker = $(this);
                var minView = 2;
                var startView = 2;
                var mode = $picker.attr("data-datetimemode");
                if (!mode) {
                    mode = "yyyy-mm-dd";
                }
                if (mode == "yyyy-mm-dd hh:ii") {
                    minView = 0;
                }
                $picker.datetimepicker({
                    language: 'zh-CN',
                    format: mode,
                    todayBtn: true,
                    container: $picker.closest(".modal-dialog"),
                    autoclose: true,
                    startView: startView, // 选择器打开后首先显示的视图
                    minView: minView// 选择器能够提供的最精确的视图
                }).on("changeDate", function () {
                    that._refreshTable();
                });;
            });
            // 统一初始化选人控件
            var $myuserpicker = this.$searchForm.find(".myuserpicker");

            if (!$.isEmptyObject($myuserpicker)) {
                for (var r = 0; r < $myuserpicker.length; r++) {
                    var tempSheetUser = $($myuserpicker[r]).FormMultiUser({ IsQueryControl: true });
                    tempSheetUser.OnChange = function () {
                        that._refreshTable();
                    }
                }
            }

            this.$searchForm.find(".myuserpicker").removeClass("form-group");
            this.$searchForm.find(".mymultiselect").each(function () {
                $(this).multiselect({
                    enableFiltering: true,
                    filterPlaceholder: '搜索',
                    buttonText: function (options, select) {
                        if (options.length === 0) {
                            return "";
                        }
                        else {
                            var labels = [];
                            options.each(function () {
                                if ($(this).attr("label") !== void 0) {
                                    labels.push($(this).attr("label"));
                                }
                                else {
                                    labels.push($(this).html());
                                }
                            });
                            return labels.join(",") + "";
                        }
                    },
                    onChange: function () {
                        //that._refreshTable(); 
                    },
                    onDropdownShow: function () {
                        //点击时选人控件隐藏
                        $("div[data-FormMultiUserPanel='SelectorPanel'],div[data-FormUserPanel='SelectorPanel'],div[data-formmultiuserpanel='searchdiv']").hide();
                        $(".form-query-dropdown").hide();
                    },
                    selectedClass: "multiselect-selected"
                });
            });
            // 下拉搜索自动获取焦点
            $(".dropdown-toggle").on('click', function () {
                var that = this;
                setTimeout(function () {
                    $(that).next().find("input.multiselect-search").focus();
                }, 200);
            });
            // 统一初始化关联查询控件
            this.$searchForm.find(".mydropdown").each(function () {
                var myquery = $(this).FormMultiQuery();
                myquery.IsQueryControl = true;
                myquery.OnChange = function () {
                    that._refreshTable();
                }
            });
            this.$searchForm.find(".mydropdown").removeClass("form-group");


            this.$searchForm.find("input[type='text']").blur(function () {
                //有下拉选项中在ValChange触发刷新数据
                if (!$(this).hasClass("comboboxtext")) {
                    that._refreshTable();
                }
            }).keydown(function (e) {
                if (e.which == 13) {
                    that._refreshTable();
                }
            });

            this.$searchForm.find("input[type='checkbox']").change(function () {
                that._refreshTable();
            });

            /***********************************关联查询默认查询 Begin***********************************/
            //格式化日期
            var formatDate = function (date) {
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                var day = date.getDate();
                return year + '-' + (month < 10 ? ('0' + month) : month) + '-' + (day < 10 ? ('0' + day) : day);
            };
            //当天
            var thisDay = function () {
                var date = new Date();
                date = formatDate(date);
                return date + ';' + date;
            };
            //本周
            var thisWeek = function () {
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth();
                var day = date.getDate();
                var dayOfWeek = date.getDay();
                var start = new Date(year, month, day - dayOfWeek);
                start = formatDate(start);
                var end = new Date(year, month, day + (6 - dayOfWeek));
                end = formatDate(end);
                return start + ';' + end;
            };
            //本月
            var thisMonth = function () {
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth();
                var start = new Date(year, month, 1);
                start = formatDate(start);
                var end = new Date(year, month + 1, 0);
                end = formatDate(end);
                return start + ';' + end;
            };
            //本季度
            var thisQuarter = function () {
                var startMonth = 0;
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                if (month < 3) {
                    startMonth = 0;
                } else if (month > 2 && month < 6) {
                    startMonth = 3;
                } else if (month > 5 && month < 9) {
                    startMonth = 6;
                } else if (month > 8) {
                    startMonth = 9;
                }
                var start = new Date(year, startMonth, 1);
                var end = new Date(year, startMonth + 3, 0);
                start = formatDate(start);
                end = formatDate(end);
                return start + ';' + end;
            };
            //本年度
            var thisYear = function () {
                var date = new Date();
                var year = date.getFullYear();
                var start = new Date(year, 0, 1);
                var end = new Date(year, 12, 0);
                start = formatDate(start);
                end = formatDate(end);
                return start + ';' + end;
            };
            //设置默认查询值
            //下面这段代码主要是用于关联查询中设置默认值的列表
            var searchParams = {
            };
            for (var i = 0; i < queryItems.length; i++) {
                var item = queryItems[i];
                if (item.DataType == 5) {
                    //datetime
                    var filterValue = parseInt(item.FilterValue);
                    switch (filterValue) {
                        case 1://当天
                            searchParams[item.PropertyName] = thisDay();
                            break;
                        case 2://本周
                            searchParams[item.PropertyName] = thisWeek();
                            break;
                        case 3://本月
                            searchParams[item.PropertyName] = thisMonth();
                            break;
                        case 4://本季度
                            searchParams[item.PropertyName] = thisQuarter();
                            break;
                        case 5://本年度
                            searchParams[item.PropertyName] = thisYear();
                            break;
                        default:
                            break;
                    }
                } else if (item.DataType == 26) {
                    var filterValue = parseInt(item.FilterValue);
                    var organizationType = parseInt(item.OrganizationType);
                    var defaultValue = queryDefaultValues[item.PropertyName];
                    switch (filterValue) {
                        case 1://本人
                            searchParams[item.PropertyName] = defaultValue + ";" + organizationType;
                            break;
                        case 2://本部门
                            searchParams[item.PropertyName] = defaultValue + ";" + organizationType;
                            break;
                        default:
                            break;
                    }
                }
                else {
                    //searchParams[queryItems[i].PropertyName] = queryItems[i].DefaultValue;
                    searchParams[queryItems[i].PropertyName] = queryDefaultValues[queryItems[i].PropertyName];
                }
            }
            var $divSearch = this.$searchForm;

            //单选、多选、下拉
            var myMultiSelect = $divSearch.find(".mymultiselect");
            for (var i = 0; i < myMultiSelect.length; i++) {
                var $property = $(myMultiSelect[i]);
                var propertyName = $property.attr("id");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    //$property.multiselect("select", propertyVal.split(";"));
                    $property.multiselect("select", propertyVal);
                }
            }
            // 文本
            var myText = $divSearch.find(".mytext");
            for (var i = 0; i < myText.length; i++) {
                var $property = $(myText[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    $property.val(propertyVal);
                }
            }
            // 选人
            var myUserPicker = $divSearch.find(".myuserpicker");
            for (var i = 0; i < myUserPicker.length; i++) {
                var $property = $(myUserPicker[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    var arr = propertyVal.split(';');
                    var $ctrl = $property.FormMultiUser();//.SetValue(arr[0]);

                    $ctrl.SetValue(arr[0]);
                    if (parseInt(arr[1]) == 0) {
                        //人员可选
                        $($ctrl.Element).find('li[data-tabtype="tab_Deps"]').remove();
                    } else if (parseInt(arr[1]) == 1) {
                        //部门可选
                        $($ctrl.Element).find('li[data-tabtype="tab_Users"]').remove();
                    }
                }
            }
            // 数字
            var myNum = $divSearch.find(".mynum");
            for (var i = 0; i < myNum.length; i++) {
                var $property = $(myNum[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    //var defaultValue = propertyVal;
                    var valArr = propertyVal;//.split(";");
                    for (var i = 0; i < valArr.length; i++) {
                        if (!$.isNumeric(valArr[i])) {
                            continue;
                        }
                        $property.find("input:text").eq(i).val(valArr[i]);
                    }
                }
            }
            //是/否
            var myCheckBox = $divSearch.find('.mycheckbox');
            for (var i = 0; i < myCheckBox.length; i++) {
                var $property = $(myCheckBox[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal != undefined && propertyVal != null && propertyVal != "") {
                    if (propertyVal) {
                        $property.find("input[value='true']").prop("checked", "true");
                    }
                    else {
                        $property.find("input[value='false']").prop("checked", "true");
                    }
                }
            }
            //datetime
            var myDateTime = $divSearch.find(".mydatetime");
            for (var i = 0; i < myDateTime.length; i++) {
                var $property = $(myDateTime[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    var days = propertyVal.split(';');
                    var picker = $property.find(".mydatetimepicker");
                    for (var j = 0; j < picker.length; j++) {
                        $(picker[j]).val(days[j]);
                    }
                }
            }
            // FormQuery
            var myDropDown = $divSearch.find(".mydropdown");
            for (var i = 0; i < myDropDown.length; i++) {
                var $property = $(myDropDown[i]);
                var propertyName = $property.attr("data-propertyname");
                var propertyVal = searchParams[propertyName];
                if (propertyVal) {
                    var formQuery = $property.FormMultiQuery();
                    formQuery.SetValue(propertyVal);
                }
            }
            /***********************************关联查询默认查询 End***********************************/



            var $btnSearch = this.$toolbar.find(".btnSearch");
            $btnSearch.removeClass("hide");
            $btnSearch.click(function () {
                that._refreshTable();
                return false;
            });
            // 查询条件展开or收起
            var $btnToggle = this.$partingLine.find(".btnToggle");
            $btnToggle.removeClass("hide");
            $btnToggle.click(function () {
                if ($(this).hasClass("btn-up")) {
                    $(this).removeClass("btn-up").addClass("btn-down").removeClass("icon-arrow-up-double-b").addClass("icon-arrow-down-double-b");
                    //$(this).html("<i class='fa icon-arrow-down-double'></i>");
                    that.$searchForm.find("div.form-group:gt(1)").hide();
                }
                else {
                    $(this).removeClass("btn-down").addClass("btn-up").removeClass("icon-arrow-down-double-b").addClass("icon-arrow-up-double-b");

                    that.$searchForm.find("div.form-group").show();
                }
                return false;
            });

            // 查询条件多于2行时默认触发收起
            var seachRowCount = this.$searchForm.find("div.form-group").length;
            if (seachRowCount > 2) {
                $btnToggle.trigger("click");
            }
            else { // 查询条件少于3行时，隐藏收起按钮
                //$btnToggle.hide();
                this.$partingLine.hide();

                // 没有查询条件时，隐藏查询按钮
                if (seachRowCount === 0) {
                    $btnSearch.hide();
                }
            }

            this.SearchInitialized = true;
        },

        _initTable: function (queryColumns) {
            var that = this;
            var columns = [];
            if (queryColumns) {
                //添加一个checkbox列
                columns.push({
                    field: 'checkcolumn',
                    title: '',
                    visible: true,
                    checkbox: true,
                    clickToSelect: true
                });

                var tempColumnList = [];
                var childSchema = []; //子表
                for (var key in queryColumns) {
                    if (queryColumns[key].ChildColumns) {
                        childSchema.push(queryColumns[key]);
                    } else {
                        tempColumnList.push(queryColumns[key]);
                    }
                }
                //添加完主表字段后再添加子表字段
                if (childSchema.length > 0) {
                    for (var i = 0; i < childSchema.length; i++) {
                        var chidColumns = childSchema[i].ChildColumns;
                        var key = childSchema[i].Code;
                        for (var childKey in chidColumns) {
                            chidColumns[childKey].Code = chidColumns[childKey].Code.indexOf(".") > -1 ?
                                chidColumns[childKey].Code :
                                key + "." + chidColumns[childKey].Code;
                            tempColumnList.push(chidColumns[childKey]);
                        }
                    }
                }

                for (var i = 0, len = tempColumnList.length; i < len; i++) {
                    var queryColumn = tempColumnList[i];
                    columns.push({
                        field: queryColumn["Code"],
                        title: queryColumn["DisplayName"],
                        visible: queryColumn["Visible"],
                        formatter: function (value, row, index, field) {
                            if (value != null && value.constructor == Object) {
                                if (value.IsCustom != null) {
                                    value = value.Value;
                                } else if (value.Color != null) {
                                    return "<span style='padding: 5px 15px 5px 15px;border-radius:4px; color:#fff;background-color:" + value.Color.toString() + ";'>" + value.Value + "</span>";
                                }
                            }
                            if (value != null && value.constructor == String && (value.indexOf("<") || value.indexOf(">"))) {
                                value = value.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                            }
                            if (field == OwnerDeptId_Name) {
                                return value;
                            }
                            if (value == null || $.trim(value.toString()) == "") value = "--";
                            return value;
                        }
                    });
                }
            }

            that.TableAllColumns = columns;
            // 关联查询只显示审批通过的记录
            this.$table.bootstrapTable('destroy');
            var queryparams = {
                ActionName: "DoAction",
                Command: "Load",
                QueryCode: this.BOSchemaCode,
                Status: 1,
                SheetQuery: 1,
                //isFormControl: true,
                ListScene: 2,//列表场景，1表示普通列表，2表示弹窗内列表
                SheetCode: this.SchemaCode,
                DataField: this.DataField,
                SheetData: JSON.stringify(this.SheetData),
                scopeType: 3
            }
            var bootstrapTableOptions = {
                method: "post",
                // 添加SheetQuery标识，让关联查询只以列表展现
                //这里传入scopeType为OwnAndOwnDept。如果不传入默认权限为own
                url: "/App/OnAction/?PostData=" + JSON.stringify(queryparams),
                // clickToSelect:true,
                cache: false,
                striped: false,
                sidePagination: "server",
                pagination: true,
                pageSize: 10,
                contentType: "application/x-www-form-urlencoded",
                pageList: [10, 20, 50],
                columns: columns,
                idField: "ObjectId",
                sortName: "",
                sortOrder: "",
                TargetId: that.Table_ID,
                queryParams: function (params) {
                    return that._formatQueryParams(params);
                },
                onLoadSuccess: function (data) {
                    that.LoadData = data;
                    that.$table.find("tbody > tr").css({
                        "cursor": "pointer"
                    });
                    that.$table.find("th")
                    that.TableInitialized = true;

                    //不固定表头时需要给table指定高度，
                    if (that.FixedTableHeader == false) {
                        //高度调整到220,防止弹出框时确定按钮到屏幕之外
                        that.$table.closest('.fixed-table-body').css({ "height": "180px", "overflow": "auto" });
                    }
                    setTimeout(function () {
                        var fixedTableHeader = that.$table.closest(".fixed-table-container").find(".fixed-table-header");
                        if (fixedTableHeader) {
                            if (fixedTableHeader.find(".tr-colspan").length > 0) {
                                that.$modal.find("div.table-page").css("margin-top", "88px");
                            }
                            fixedTableHeader.removeAttr("style");
                        }
                    }, 100);

                    //设置选中行
                    that._setRowChecked();
                },
                onCheck: function (row, $element) {
                    that._checkRows(row);
                },
                onCheckAll: function (rows) {
                    that._checkRows(rows);
                },
                onUncheck: function (row, $element) {
                    that._unCheckRows(row);
                },
                onUncheckAll: function (rows) {
                    that._unCheckRows(rows);
                },
                onClickRow: function (row, $element) {
                    return;
                },
                responseHandler: function (params) {
                    if (params.ReturnData === null) params.ReturnData = new Array();
                    that.RenderPage.call(this, params);
                    return {
                        rows: params.ReturnData, total: params.DataCount
                    };
                },
                onAll: function () {
                }
            };
            if (that.FixedTableHeader == undefined || that.FixedTableHeader == true) {
                bootstrapTableOptions.height = 180;
            }

            this.$table.bootstrapTable(bootstrapTableOptions);
            that._setColumnColspan(columns);

            this.$table.off("mouseenter.list").on("mouseenter.list", 'td', function () {
                var $tableTip = $(".table-tip"), $TextLabel = $(".TextLabel");
                $tableTip.length == 0 && ($tableTip = $('<div class="table-tip" style="display: none;"></div>').appendTo(that.CurrentBody)); //.appendTo($("body")));
                $TextLabel.length == 0 && ($TextLabel = $('<label class="TextLabel" style="display: none; opacity:0; position:fixed;"></label>').appendTo(that.CurrentBody));//.appendTo($("body")));
                var $that = $(this);
                $TextLabel.text($that.text());
                if ($TextLabel.width() > $that.width()) {
                    var offset = $that.offset();
                    $tableTip.text($that.text()).css({
                        left: offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft(), bottom: $(window).height() - offset.top + 6 + $(window).scrollTop()
                    }).show();
                }
            });

            this.$table.off("mouseleave.list").on("mouseleave.list", 'td', function () {
                $(".table-tip").hide();
                return false;
            });
        },
        //设置行选中
        _setRowChecked: function () {
            var that = this;
            if (that.SelectedItems.length == 0) {
                return;
            }
            //如果checkedrows中有selecteditems则不要添加
            var checkedRows = [];

            for (var i = 0; i < that.CheckedRows.length; i++) {
                checkedRows.push(that.CheckedRows[i].ObjectId);
            }
            for (var i = 0; i < that.SelectedItems.length; i++) {
                if ($.inArray(that.SelectedItems[i].ObjectId, checkedRows) == -1) {
                    that.CheckedRows.push(that.SelectedItems[i]);
                }
            }


            var data = that.$table.bootstrapTable('getData', true);
            if (that.associateChildSchema == undefined) {
                that.associateChildSchema = false;
                if (data && data.length > 0) {
                    for (var key in data[0]) {
                        if (key.indexOf('.ObjectId') > -1) {
                            that.associateChildSchema = true;
                            break;
                        }
                    }
                }
            }
            var objectIdStr = 'ObjectId';
            if (that.associateChildSchema) {
                objectIdStr = that.BOSchemaCode + '.ObjectId';
            }
            var childSchemaObjectId = undefined;
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < that.SelectedItems.length; j++) {
                    if (data[i][objectIdStr] == that.CheckedRows[j].ObjectId) {
                        that.$table.bootstrapTable('check', i);
                        break;
                    }
                }
            }

            //设置选中行
            if (that.CheckedRows.length == 0)
                return;
            var data = that.$table.bootstrapTable('getData', true);
            var childSchemaObjectId = undefined;
            if (data.length > 0) {
                if (that.associateChildSchema == true) {
                    childSchemaObjectId = that.BOSchemaCode + '.ObjectId';
                } else if (that.associateChildSchema == undefined) {
                    for (var key in data[0]) {
                        if (key.toLowerCase().indexOf(".objectid") > -1) {
                            childSchemaObjectId = key;
                            break;
                        }
                    }
                }
            }
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < that.CheckedRows.length; j++) {
                    if (childSchemaObjectId != undefined) {
                        if (data[i][childSchemaObjectId] == that.CheckedRows[j][childSchemaObjectId]) {
                            that.$table.bootstrapTable('check', i);
                            break;
                        }
                    } else {
                        if (data[i].ObjectId == that.CheckedRows[j].ObjectId) {
                            that.$table.bootstrapTable('check', i);
                            break;
                        }
                    }
                }
            }
        },
        _refreshTable: function () {
            this.$table.bootstrapTable("refresh");
        },

        // 添加查询条件
        _formatQueryParams: function (params) {
            var searchParams = {
            };
            var $divSearch = this.$searchForm;

            var myMultiSelect = $divSearch.find(".mymultiselect");
            for (var i = 0; i < myMultiSelect.length; i++) {
                var v = [];
                var $multiSelect = $(myMultiSelect[i]);
                var selectedText = $multiSelect.parent().find(".multiselect-selected-text").text();
                if (selectedText) {
                    v = selectedText.split(/,|，|；|;/); //支持中文逗号
                }
                if (v.length > 0) {
                    for (var j = 0; j < v.length; j++) {
                        v[j] = $.trim(v[j]);
                    }
                    searchParams[$multiSelect.attr("id")] = v;
                }
            }
            // 文本
            var myText = $divSearch.find(".mytext");
            for (var i = 0; i < myText.length; i++) {
                var $text = $(myText[i]);
                var v = $.trim($text.val());
                if (v !== "") {
                    if (v.indexOf(",") > -1 || v.indexOf("，") > -1) {
                        v = v.split(/,|，|;|；/);
                        if (v.length > 0) {
                            for (var j = 0; j < v.length; j++) {
                                v[j] = $.trim(v[j]);
                                if (v[j] == "--")//未填写，空白值项
                                {
                                    v[j] = "";
                                }
                            }
                            searchParams[$text.attr("data-propertyname")] = v;
                        }
                    }
                    else if (v.indexOf("；") > -1 || v.indexOf(";") > -1) {
                        v = v.split(/;|；/);
                        if (v.length > 0) {
                            for (var j = 0; j < v.length; j++) {
                                v[j] = $.trim(v[j]);
                                if (v[j] == "--")//未填写，空白值项
                                {
                                    v[j] = "";
                                }
                            }
                            searchParams[$text.attr("data-propertyname")] = v;
                        }
                    }
                    else {
                        if ($.trim(v) == "--") {
                            searchParams[$text.attr("data-propertyname")] = [""];
                        }
                        else {
                            searchParams[$text.attr("data-propertyname")] = [v];
                        }

                    }
                }
            }
            // 选人
            var myUserPicker = $divSearch.find(".myuserpicker");
            for (var i = 0; i < myUserPicker.length; i++) {
                var $picker = $(myUserPicker[i]);
                var v = $picker.FormMultiUser().GetUnitIDs();
                if (v && v.length > 0) {
                    searchParams[$picker.attr("data-propertyname")] = v;
                }
            }
            // 数字
            var myNum = $divSearch.find(".mynum");
            for (var i = 0; i < myNum.length; i++) {
                var $myNum = $(myNum[i]);
                var v = [];
                var num = $myNum.find(":text");
                for (var j = 0; j < num.length; j++) {
                    var $num = $(num[j]);
                    var val = $num.val();
                    if ($.isNumeric(val)) {
                        v.push(val);
                    } else {
                        v.push(null);
                    }
                }
                if (v.length > 0) {
                    searchParams[$myNum.attr("data-propertyname")] = v;
                }
            }
            //是/否
            var myCheckBox = $divSearch.find('.mycheckbox');
            for (var i = 0; i < myCheckBox.length; i++) {
                var $myCheckBox = $(myCheckBox[i]);
                var v = [];
                var val = $myCheckBox.find('input[type="checkbox"]:checked').val();
                v.push(val);
                searchParams[$myCheckBox.attr('data-propertyname')] = v;
            }
            // datetime
            var myDateTime = $divSearch.find(".mydatetime");
            for (var i = 0; i < myDateTime.length; i++) {
                var $myDateTime = $(myDateTime[i]);
                var v = [];
                var myDateTimePicker = $myDateTime.find(".mydatetimepicker");
                for (var j = 0; j < myDateTimePicker.length; j++) {
                    var $myDateTimePicker = $(myDateTimePicker[j]);
                    var val = $myDateTimePicker.val();
                    if ($.trim(val) !== "") {
                        v.push(val);
                    } else {
                        v.push(null);
                    }
                }
                if (v.length > 0) {
                    searchParams[$myDateTime.attr("data-propertyname")] = v;
                }
            }

            // FormQuery
            var myDropDown = $divSearch.find(".mydropdown");
            for (var i = 0; i < myDropDown.length; i++) {
                var $mydropdown = $(myDropDown[i]);
                var v = $mydropdown.FormMultiQuery().GetValue();
                //多个关联表单中间用;隔开
                var arr = [];
                if (!$.isArray(v)) {
                    if (v && v.length > 0) {
                        v = v.split(';');
                        for (var i = 0; i < v.length; i++) {
                            if (v[i] == undefined || v[i] == 'undefined') {
                                arr.push('');
                            } else if (v[i] != '') {
                                arr.push(v[i]);
                            }
                        }
                        searchParams[$mydropdown.attr("data-propertyname")] = arr;
                    }
                } else {
                    //替换掉undefined
                    for (var j = 0; j < v.length; j++) {
                        if (v[j] == undefined || v[j] == 'undefined') {
                            arr.push('');
                        } else if (v[j] != '') {
                            arr.push(v[j]);
                        }
                    }
                    searchParams[$mydropdown.attr("data-propertyname")] = arr;
                }
            }
            params["searchParamsJson"] = JSON.stringify(searchParams);
            return params;
        },

        _getQueryParams: function () {
            var queryParams = {
            };
            if (this.InputMappings) {
                for (var datafield in this.InputMappings) {
                    // 根据datafield，从页面上取值
                    var controlManager = this._getTargetElement(datafield).JControl();
                    if (controlManager) {
                        queryParams[this.InputMappings[datafield]] = controlManager.GetValue();
                    }
                }
            }
            return queryParams;
        },

        _getTargetElement: function (datafield) {
            var $targetElement;
            var dataFieldName = $.ControlManager.PreDataKey + $.ControlManager.DataFieldKey;
            // 子表字段，通过datafield在当前行中找
            if (datafield.indexOf(".") > -1) {
                $targetElement = this.$InputBody.closest("tr").find("[" + dataFieldName + "='" + datafield + "']")
            }
            else {
                $targetElement = $("[" + dataFieldName + "='" + datafield + "']");
            }
            return $targetElement;
        },
        //重写DetailLink
        //link是文本框中总内容
        _toItemLink: function (link) {
            var that = this;
            var $newLink = $(link);
            if (that.Editable) {
                //可编辑状态绑定i的删除事件
                $newLink.find('i').on('click', function () {
                    var objectId = $(this).data('objectid');
                    var objectIds = that.$Input.data("ObjectId").split(";");
                    var newObjectIds = [];
                    for (var i = 0; i < objectIds.length; i++) {
                        if (objectIds[i] != objectId && objectIds[i] != "") {
                            newObjectIds.push(objectIds[i]);
                        }
                    }
                    $(this).parent('a').remove();
                    that.$Input.data("ObjectId", newObjectIds.join(";"));
                    that.OnChange(newObjectIds);
                });
            } else {
                //不可编辑状态改变标签样式并绑定点击事件
                $newLink = $newLink.removeClass("label label-info").css({
                    "border": "none",
                    "white-space": "pre-wrap",
                    "white-space": "-moz-pre-wrap",
                    "white-space": "-pre-wrap",
                    "white-space": "-o-pre-wrap",
                    "word-wrap": "break-word",
                    "overflow": "auto",
                    "word-break": "break-all"
                });
                $newLink.find("i").remove();
                $newLink.on("click", function () {
                    var objectId = $(this).data('objectid');
                    if (objectId) {
                        var params = {
                            ActionName: "GetBizObjectSchemaDisplayName",
                            SchemaCode: that.BOSchemaCode,
                            flag: $.IGuid()
                        }
                        that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                            var url = "/Form/DefaultSheet?SchemaCode=" + that.BOSchemaCode + "&BizObjectId=" + objectId + "&Mode=View";
                            $.ISideModal.Show(url, data.ReturnData.DisplayName);
                        });
                    }
                });
            }
            return $newLink;
        },

        RenderPage: function (data) {
            var that = this;
            var $target = $("#" + that["TargetId"]);
            if (!$target) return;
            if (that.pageNumber > 1 && data && data.length == 0) {
                $target.bootstrapTable("refreshOptions", {
                    pageNumber: that.pageNumber - 1
                });
            }
            if (!that.$PageNext) {
                var $pageBar = $("#bar-" + that["TargetId"]);
                that.$PageNext = $pageBar.find(".Page_Num_Next");
                that.$PagePre = $pageBar.find(".Page_Num_Pre");
                that.$PageIndex = $pageBar.find(".Page_Index");
                that.$PageCount = $pageBar.find(".Page_Count");
                that.$PageTotal = $pageBar.find(".page-total");
                that.$PageSize = $pageBar.find(".Page_Per_Size");
                that.$PageNext.bind('click', function () {
                    $target.bootstrapTable("nextPage");
                });
                that.$PagePre.bind('click', function () {
                    $target.bootstrapTable("prevPage");
                });

                var PageTimeout;
                that.$PageIndex.bind("keyup", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val().replace(/[^\d]/g, '');
                    v = v == "" ? 0 : parseInt(v);
                    v = v >= that.Count ? that.Count : v;
                    if (v == 0) return;
                    $(this).val(v);
                    PageTimeout = setTimeout(function () {
                        v != that.pageNumber && $target.bootstrapTable("selectPage", v);
                        PageTimeout = null;
                    }, 600);
                });
                that.$PageIndex.bind("blur", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val();
                    v = v == "" || v == "0" ? 1 : parseInt(v);
                    $(this).val(v);
                    v != that.pageNumber && $target.bootstrapTable("selectPage", v);
                });
                $pageBar.on("click", "li>a", function () {
                    var size = parseInt($(this).text());
                    that.$PageSize.html(size);
                    $target.bootstrapTable("refreshOptions", {
                        pageSize: size
                    });

                })
            }
            if (!data) {
                that.$PageNext.addClass("disable").attr("disabled", true);
                that.$PagePre.addClass("disable").attr("disabled", true);
                that.$PageIndex.val(1).attr("disabled", true);
                that.$PageCount.html(1);
                that.$PageTotal.html("共0条");
            }
            else {
                that.$PageIndex.val(that.pageNumber);
                that.Count = Math.ceil(data.DataCount / that.pageSize);
                that.$PageCount.html(that.Count);
                that.$PageTotal.html("共" + data.DataCount + "条");
                if (that.pageNumber <= 1) {
                    that.$PagePre.addClass("disable").attr("disabled", true);
                }
                else {
                    that.$PagePre.removeClass("disable").attr("disabled", false);
                }

                if (that.pageNumber == that.Count) {
                    that.$PageNext.addClass("disable").attr("disabled", true);
                }
                else {
                    that.$PageNext.removeClass("disable").attr("disabled", false);
                }
            }
        },

        //设置值
        InitValue: function () {
            var item = this.Value || this.DefaultValue;
            if (item != void 0) {
                this.SetValue(item, true);
            }
        },

        //设置值
        SetValue: function (item, asy) {
            //item可以是string或者数组
            if (item == void 0 || item == null || item == "") {
                this.$Input.text("");
                this.$Input.data("ObjectId", "");
                return;
            }
            var that = this;
            //把item转成数组
            (item.constructor == String) && (item = item.replace(/,/g, ';').split(";"));
            if (item.constructor == Object && item.ObjectId != undefined) {
                item = item.ObjectId;
            }
            if (item.constructor == String) {
                //传入单个值
                var name = "";
                if ($.SmartForm.ResponseContext && $.SmartForm.ResponseContext.AssociatedBoNames &&
                    $.SmartForm.ResponseContext.AssociatedBoNames[item]) {
                    name = $.SmartForm.ResponseContext.AssociatedBoNames[item].replace(/</g, "&lt;").replace(/>/g, "&gt;");
                }
                if ($.trim(name) == '') {
                    var params = {
                        ActionName: "GetFormatBizObject",
                        SchemaCode: that.BOSchemaCode,
                        ObjectId: item
                    };
                    that.Ajax("/Form/OnAction", "POST", { PostData: JSON.stringify(params) }, function (data) {
                        if (data.ReturnData.ListViewData != void 0 && data.ReturnData.ListViewData.length > 0) {
                            name = $.trim(data.ReturnData.ListViewData[0].Name);
                        }
                        if ($.trim(name) == '') {
                            name = '--';
                        }
                        var title = name;
                        if (!that.Editable && that.IsInGridView) {
                            title = "";
                        }
                        var link = '<a href="javascript:;" class="label label-info" title="' + title + '" data-objectId="' + item + '">' + name + '<i class="fa icon-close-middle" style="margin-left:5px" data-objectId="' + item + '"></i></a>';
                        link = that._toItemLink(link);
                        that.$Input.append(link).data("ObjectId", item);
                        that.OnChange({
                            ObjectId: item, Name: name
                        });
                    }, asy);
                } else {
                    var title = name;
                    if (!that.Editable && that.IsInGridView) {
                        title = "";
                    }
                    var link = '<a href="javascript:;" class="label label-info" title="' + title + '" data-objectId="' + item + '">' + name + '<i class="fa icon-close-middle" style="margin-left:5px" data-objectId="' + item + '"></i></a>';
                    link = that._toItemLink(link);
                    that.$Input.append(link).data("ObjectId", item);
                    that.OnChange({
                        ObjectId: item, Name: name
                    });
                }
            } else if (item.constructor == Array) {
                //传入多个值
                var objectIds = "";
                for (var i = 0; i < item.length; i++) {
                    objectIds += item[i] + ";";
                }
                var params = {
                    ActionName: "GetFormatBizObject",
                    SchemaCode: that.BOSchemaCode,
                    ObjectId: objectIds
                };
                that.Ajax("/Form/OnAction", "POST", { PostData: JSON.stringify(params) }, function (data) {
                    if (data.ReturnData.ListViewData != void 0 && data.ReturnData.ListViewData.length > 0) {
                        var retData = data.ReturnData.ListViewData;
                        var objectIds = [];
                        var link = '';
                        var isAssociateChild = false;
                        for (var key in retData[0]) {
                            if (key.toLocaleLowerCase().indexOf('.objectid') > -1) {
                                isAssociateChild = true;
                                break;
                            }
                        }
                        for (var i = 0; i < retData.length; i++) {
                            var objectId = isAssociateChild ? retData[i][that.BOSchemaCode + ".ObjectId"] : retData[i].ObjectId;
                            var name = (isAssociateChild ? retData[i][that.BOSchemaCode + ".Name"] : retData[i].Name) || '--';
                            if ($.trim(name) == "") {
                                name = "--";
                            }
                            var title = name;
                            if (!that.Editable && that.IsInGridView) {
                                title = "";
                            }
                            link += '<a href="javascript:;" class="label label-info" title="' + title + '" data-objectId="' + objectId + '">' + name + '<i class="fa icon-close-middle" style="margin-left:5px" data-objectId="' + objectId + '"></i></a>';
                            if (!that.Editable) {
                                link += ";";//非编辑状态用";"分割
                            }
                            objectIds.push(objectId);
                        }
                        var newLink = $(link);
                        if (that.Editable) {
                            //可编辑状态绑定i的删除事件
                            newLink.find('i').on('click', function () {
                                var objectId = $(this).data('objectid');
                                var objectIds = that.$Input.data("ObjectId").split(";");
                                var newObjectIds = [];
                                for (var i = 0; i < objectIds.length; i++) {
                                    if (objectIds[i] != objectId && objectIds[i] != "") {
                                        newObjectIds.push(objectIds[i]);
                                    }
                                }
                                $(this).parent('a').remove();
                                that.$Input.data("ObjectId", newObjectIds.join(";"));
                                that.OnChange(newObjectIds);
                            });
                        } else {
                            //不可编辑状态改变标签样式并绑定点击事件
                            newLink = $(link).removeClass("label label-info").css({
                                "border": "none",
                                "white-space": "pre-wrap",
                                "white-space": "-moz-pre-wrap",
                                "white-space": "-pre-wrap",
                                "white-space": "-o-pre-wrap",
                                "word-wrap": "break-word",
                                "overflow": "auto",
                                "word-break": "break-all"
                            });
                            newLink.find("i").remove();
                            newLink.on("click", function () {
                                var objectId = $(this).data('objectid');
                                if (objectId) {
                                    var params = {
                                        ActionName: "GetBizObjectSchemaDisplayName",
                                        SchemaCode: that.BOSchemaCode,
                                        flag: $.IGuid()
                                    }
                                    that.Ajax("/Form/OnAction", "GET", { PostData: JSON.stringify(params) }, function (data) {
                                        var url = "/Form/DefaultSheet?SchemaCode=" + that.BOSchemaCode + "&BizObjectId=" + objectId + "&Mode=View";
                                        $.ISideModal.Show(url, data.ReturnData.DisplayName);
                                    });
                                }
                            });
                        }
                        that.$Input.empty().append(newLink).data("ObjectId", objectIds.join(";"));
                        that.OnChange(objectIds);
                    }
                }, asy);
            }
        },

        //校验
        Validate: function () {
            //不可编辑
            if (!this.Editable) return true;

            var val = this.GetValue();

            if (this.Required && ($.isEmptyObject(val) || val.length == 0)) {
                if (this.SchemaCode != this.BOSchemaCode) {
                    this.AddInvalidText(this.$InputBody, "必填");
                    return false;
                } else {
                    //如果关联的是自己,且关联的数据是空的，则不要校验必填
                    if (this.LoadData != undefined && this.LoadData.length > 0) {
                        this.AddInvalidText(this.$InputBody, "必填");
                        return false;
                    }
                    //如果初始没有数据（this.LoadData.length==0）,在关联表单界面新增了也要校验
                    if (this.$Input.find('a').length == 0) {
                        this.AddInvalidText(this.$InputBody, "必填");
                        return false;
                    }
                }
            }
            this.RemoveInvalidText(this.$InputBody);
            return true;
        },

        SaveDataField: function () {
            var result = {
            };
            var val = this.GetValue();
            if (!this.ResponseContext.IsCreateMode && (!this.Visible)) return result;
            var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
            if (oldresult && oldresult.Value != val) {
                result[this.DataField] = val;
                return result;
            }
            result[this.DataField] = [];
            return result;
        },

        GetValue: function () {
            if (!this.Visible) {
                if (this.Value == null) {
                    return [];
                }
                return this.Value;
            }
            var objectId = this.$Input.data('ObjectId');
            //去掉最后一个分号
            if (objectId == undefined || objectId == null)
                return [];
            var arr = objectId.split(';');
            //过滤掉""
            var vals = [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] != '') {
                    arr[i] == 'undefined' ? vals.push('') : vals.push(arr[i]);
                }
            }
            return vals;
        },

        GetText: function () {
            if (this.$Input) {
                return this.$Input.text();
            } else {
                return ""
            };
        },

        SetReadonly: function (flag) {
            if (flag) {
                this.$Input && this.$Input.prop("disabled", "disabled").off("click");
                this.$addModel && this.$addModel.off("click");

            } else {
                this.$Input.removeProp("disabled");
            }
        },

        Change: function (rowData) {
            this.Required && (this.$Input.text() != "" && this.$Input.css({
                "border": "1px solid #ddd", "box-shadow": "none"
            }));
            //如果控件在子表中，子表列宽要重新计算
            //if ($.fn.FormGridView) {
            //    var gridViewCtrl = $(this.Element).closest('div[data-controlkey="FormGridView"]');
            //    if (gridViewCtrl.length > 0) {
            //        gridViewCtrl = gridViewCtrl.FormGridView();
            //        gridViewCtrl && gridViewCtrl.ResizeColumn(true);
            //    }
            //}
        }
    });
})(jQuery);;
(function ($) {
    $.fn.FormBoList = function () {
        return $.ControlManager.Run.call(this, "FormBoList", arguments);
    };

    // 构造函数
    $.Controls.FormBoList = function (element, options, sheetInfo) {
        $.Controls.FormBoList.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormBoList.Inherit($.Controls.BaseControl, {
        Render: function () {
            if (this.ResponseContext == null ||
                this.ResponseContext.IsCreateMode ||
                this.ResponseContext.BizObjectStatus == $.SmartForm.BizObjectStatus.Draft ||
                this.ResponseContext.BizObjectStatus == $.SmartForm.BizObjectStatus.Running) {
                $(this.Element).remove();
                return;
            }
            if (this.ResponseContext.IsCreateMode || $.isEmptyObject(this.BOSchemaCode)) {
                this.ShowEmptyList();
                return;
            }

            this.BizObjectStatus = {
                // 草稿，对于表单来说，用户点保存，表示是草稿状态；对于流程来说，审批完成前，都是草稿状态
                Draft: 0,
                // 审批通过
                Effective: 1,
                // 被取消
                Canceled: 3,
                // 进行中
                Running: 2
            };
            this.ListViewDisplayMode = {
                List: 0,
                Calendar: 1,
                Timeline: 2
            }
            this.SheetUrl = "/Form/DefaultSheet";
            this.HtmlRender();
        },

        HtmlRender: function () {
            var that = this;
            $(this.Element).attr("id", $.IGuid()).css({ "width": "100%", "overflow-x": "auto" });
            this.InitServer();
        },
        GetRowAttributes: function (row, index) {
            var that = this;
            if (row.Status == that.BizObjectStatus.Draft) {
                return { "class": "Draft-Row" };
            } else if (row.Status == that.BizObjectStatus.Running) {
                return { "class": "Running-Row" };
            } else if (row.Status == that.BizObjectStatus.Canceled) {
                return { "class": "Canceled-Row" };
            } else {
                return {};
            }
        },

        GetSheetBoListParams: function (params) {
            if (params == void 0) {
                params = {};
            }
            var paramData = $.extend(params, {
                Command: "LoadBoListData",
                BOSchemaCode: this.BOSchemaCode,
                AssociationCode: this.SchemaCode,
            }, $.SmartForm.RequestParameters);
            paramData.ActionName = $.SmartForm.BaseActionName;
            var queryParams = { PostData: JSON.stringify(paramData) };
            return queryParams;
        },


        ResponseHandler: function (res) {
            if (res == void 0) return;
            var that = this;
            var $target = $("#" + that.TableId);
            if (!$target) return;
            var returnData = res.StartFormResponse.ReturnData;
            if (returnData == undefined) {
                return;
            }
            if (that.pageNumber > 1 && returnData.BOListData && returnData.BOListData.total == 0) {
                $target.bootstrapTable("refreshOptions", { pageNumber: that.pageNumber - 1 });
            }
            if (!that.$PageNext) {
                var $pageBar = $("#bar-" + that.TableId);
                that.$PageNext = $pageBar.find(".Page_Num_Next");
                that.$PagePre = $pageBar.find(".Page_Num_Pre");
                that.$PageIndex = $pageBar.find(".Page_Index");
                that.$PageCount = $pageBar.find(".Page_Count");
                that.$PageTotal = $pageBar.find(".page-total");
                that.$PageSize = $pageBar.find(".Page_Per_Size");
                that.$PageNext.on('click', function (e) {
                    that.pageNumber++;
                    $target.bootstrapTable("nextPage");
                    $target.bootstrapTable("refresh");
                    return false;
                });
                that.$PagePre.on('click', function () {
                    that.pageNumber--;
                    $target.bootstrapTable("prevPage");
                    $target.bootstrapTable("refresh");
                    return false;
                });

                var PageTimeout;
                that.$PageIndex.on("keyup", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val().replace(/[^\d]/g, '');
                    v = v == "" ? 0 : parseInt(v);
                    v = v >= that.Count ? that.Count : v;
                    if (v == 0) return;
                    $(this).val(v);
                    PageTimeout = setTimeout(function () {
                        v != that.pageNumber && $target.bootstrapTable("selectPage", v);
                        if (v != that.pageNumber) {
                            $target.bootstrapTable("selectPage", v);
                            that.pageNumber = v;
                            $target.bootstrapTable("refresh");
                        }
                        PageTimeout = null;
                    }, 600);
                });
                that.$PageIndex.on("blur", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val();
                    v = v == "" || v == "0" ? 1 : parseInt(v);
                    $(this).val(v);
                    if (v != that.pageNumber) {
                        $target.bootstrapTable("selectPage", v);
                        that.pageNumber = v;
                        $target.bootstrapTable("refresh");
                    }
                });
                $pageBar.on("click", "li>a", function () {
                    var size = parseInt($(this).text());
                    that.$PageSize.html(size);
                    that.pageSize = size;
                    $target.bootstrapTable("refreshOptions", { pageSize: size });
                })
            }
            if (that.pageNumber == undefined) {
                that.pageNumber = 1;
            }
            if (that.pageSize == undefined) {
                that.pageSize = 10;
            }
            that.$PageIndex.val(that.pageNumber);
            that.Count = Math.ceil(returnData.BOListData.total / that.pageSize);
            that.$PageCount.html(that.Count);
            that.$PageTotal.html("共" + returnData.BOListData.total + "条");
            if (that.pageNumber <= 1) {
                that.$PagePre.addClass("disable").attr("disabled", true);
            } else {
                that.$PagePre.removeClass("disable").attr("disabled", false);
            }
            if (that.Count == 0 || that.pageNumber == that.Count) {
                that.$PageNext.addClass("disable").attr("disabled", true);
            } else {
                that.$PageNext.removeClass("disable").attr("disabled", false);
            }
            //end
            return returnData.BOListData;
        },

        InitServer: function () {
            var that = this;
            $.SmartForm.PostForm("LoadBoListHeader", {
                BOSchemaCode: that.BOSchemaCode,
                AssociationCode: this.SchemaCode
            }, function (SmartFormResult) {
                if (SmartFormResult.Successful) {
                    that.InitDisplay.apply(that, [SmartFormResult.ReturnData]);
                } else {
                    that.ShowEmptyList.apply(that, [SmartFormResult.Errors]);
                }
            });
        },

        RenderTable: function (columns, actions, sortInfo) {
            var that = this;
            that.TableId = "FormTable_" + $.IGuid();
            that.$Table = $("<table id='" + that.TableId + "' class='table table-bordered table-hover table-condensed'>");//.addClass("table table-bordered table-hover table-condensed");
            //表格体
            that.$TableBody = $("<tbody>");
            that.$Table.append(that.$TableBody);
            var pagerStr = '<div class="table-page" id="bar-' + that.TableId + '">' +
                '<div class="page-index">' +
                '<input type="text" value="1" class="Page_Index" />/<label class="Page_Count">1</label>' +
                '</div>' +
                '<div class="btn-group table-page_ButtonGroup" style="width: 160px;">' +
                '<button class="btn Page_Num_Pre">上一页</button>' +
                '<button class="btn Page_Num_Next">下一页</button>' +
                '</div>' +
                '<div class="page-size dropup">' +
                '<button class="dropdown-toggle" data-toggle="dropdown" aria-expanded="false">' +
                '<span class="Page_Per_Size">' + 10 + '</span>' +
                '<i class="fa fa-angle-down"></i>' +
                '</button>' +
                '<ul class="dropdown-menu">' +
                '<li><a>10</a></li>' +
                '<li><a>50</a></li>' +
                '<li><a>100</a></li>' +
                '<li><a>150</a></li>' +
                '<li><a>200</a></li>' +
                '</ul>' +
                '</div>' +
                '<div class="page-total">共0条</div>' +
                '</div>';

            $(that.Element).append(that.$Table).append(pagerStr);
            var sortBy = "CreatedTime";
            var sortDirection = "desc";
            if (sortInfo != void 0) {
                sortBy = sortInfo.SortBy;
                sortDirection = sortInfo.SortDirection == 0 ? "asc" : "desc";
            }
            that.$Table.attr({
                "data-cache": "false",
                "data-toggle": "table",
                "data-click-to-select": "false",
                "data-url": $.SmartForm.AjaxUrl,
                "data-side-pagination": "server",
                "data-pagination": "true",
                "data-page-list": "[10,50,100,150,200]",
                "data-sort-name": sortBy,
                "data-sort-order": sortDirection,
                "data-method": "post",
                "data-boschema": "schema",
                "data-row-attributes": "GetRowAttributes" + that.Element.id,
                "data-query-params": "GetSheetBoListParams" + that.Element.id,
                "data-response-handler": "ResponseHandler" + that.Element.id,
                "data-content-type": "application/x-www-form-urlencoded"
            });

            window["GetRowAttributes" + that.Element.id] = function (row, index) { return that.GetRowAttributes.apply(that, [row, index]) };
            window["GetSheetBoListParams" + that.Element.id] = function (params) { return that.GetSheetBoListParams.apply(that, [params, that]) };
            window["ResponseHandler" + that.Element.id] = function (params) { return that.ResponseHandler.apply(that, [params]) };
            window["OperateFormatter" + that.Element.id] = function (value, row, index) { return that.OperateFormatter.apply(that, [value, row, index]); }

            that.$Table.off("mouseenter.BoList BoList.list").on("mouseenter.BoList mouseleave.BoList", 'td', function () {
                var $tableTip = $(".table-tip"), $TextLabel = $(".TextLabel");
                $tableTip.length == 0 && ($tableTip = $('<div class="table-tip" style="display: none;"></div>').appendTo($("body")));
                $TextLabel.length == 0 && ($TextLabel = $('<label class="TextLabel" style="display: none; opacity:0; position:fixed;"></label>').appendTo($("body")));
                var $that = $(this);
                $TextLabel.text($that.text());

                if ($TextLabel.width() > $that.width()) {
                    var offset = $that.offset();
                    $tableTip.text($that.text());
                    var left = offset.left + ($that.outerWidth() - $tableTip.outerWidth()) / 2 - $(window).scrollLeft();
                    left = left < 0 ? 1 : left;
                    $tableTip.css({ left: left, bottom: $(window).height() - offset.top + 6 + $(window).scrollTop() }).toggle();
                }
            });
            that.InitHeader(columns);
            var actionPanelId = that.InitAction(actions);
            this.$Table.attr("data-toolbar", "#" + actionPanelId);
            that.$Table.bootstrapTable({ TargetId: that.TableId });
        },

        //获取时间轴参数
        GetTimelineParams: function (params) {
            if (params == void 0) {
                params = {};
            }
            var paramData = $.extend(params, {
                Command: "LoadBoListData",
                BOSchemaCode: this.BOSchemaCode,
                SchemaCode: this.SchemaCode,
                AssociationCode: this.SchemaCode,
                BizObjectId: this.Element.id,
                Mode: "View",
                sort: "CreatedTime",
                order: "desc",
                limit: this.pageSize * this.pageNumber,
                offset: this.pageSize * (this.pageNumber - 1)
            }, $.SmartForm.RequestParameters);
            paramData.ActionName = $.SmartForm.BaseActionName;
            var queryParams = { PostData: JSON.stringify(paramData) };
            //return params;
            return queryParams;
        },

        //渲染时间轴
        RenderTimeline: function (actions) {
            var that = this;
            that.pageSize = 10;
            that.pageNumber = 1;
            //渲染actions
            var actionPanelId = that.InitAction(actions);
            var $actionPanel = $("#" + actionPanelId);
            $actionPanel.height(50);

            var $container = $("<div></div>");

            var $window = $(window);
            var h_window = $window.height();
            var $sheetContent = $("#SheetContent");
            var $tab = $sheetContent.find(".nav-tabs-wrap");
            var h_tab = $tab.height();
            var $nav = $("nav.sheet-navbar.navbar.navbar-default.navbar-fixed-top");
            var h_nav = $nav.height();

            var $sheetContainer = $(".container-fluid.sheet_container");
            $sheetContainer.css("padding", "0 40px 0");

            var h_container = h_window - h_nav - parseInt($nav.css("margin-top")) - parseInt($nav.css("margin-bottom"));
            h_container -= (h_tab + parseInt($tab.css("margin-top")) + parseInt($tab.css("margin-bottom")));
            h_container -= parseInt($sheetContainer.css("padding-bottom"));
            h_container -= 10;
            h_container -= $actionPanel.height();
            h_container -= (parseInt($actionPanel.css("margin-top")) + parseInt($actionPanel.css("margin-bottom")));

            //容器高度=window高度-nav高度-navmargin-tab高度-tabmargin-sheetContainer的padding;
            $container.css("height", h_container);
            $(that.Element).append($container);
            that.FormlistTimeline = $container.FormlistTimeline({
                url: $.SmartForm.AjaxUrl,
                sheetUrl: "/Form/DefaultSheet/",
                sheetCode: that.BOSchemaCode,
                axis: "CreatedTime",
                gotop: true,
                queryParams: that.GetTimelineParams(),
                loaded: function () { },
                handler: function (data) {
                    //处理返回的数据，封装成Timeline需要的格式
                    var returnData = {};
                    returnData["Successful"] = data.Successful;
                    returnData["DataCount"] = data.ReturnData.StartFormResponse.ReturnData.BOListData.total;
                    returnData["ReturnData"] = data.ReturnData.StartFormResponse.ReturnData.BOListData.rows;
                    return returnData;
                },
                loaded: function (Timeline) {
                    that.LoadedTimeline(Timeline);
                }
            });

            //绑定滚动事件
            that.FormlistTimeline.$template.scroll({ Timeline: that.FormlistTimeline }, function (e) {
                var scrollTop = $(this).scrollTop();
                var clientHeight = this.clientHeight;
                var scrollHeight = this.scrollHeight;
                if (scrollTop + clientHeight >= scrollHeight) {
                    e.data.Timeline.scrollLoad(function (timeline) {
                        var $template = timeline.$template;
                        $template.find(".rightContainer").attr("style", "padding-left:30px !important");
                    });
                }
                //滚动高度超过500就显示“返回顶部”
                if (scrollTop > 500) {
                    e.data.Timeline.$top.show(500);
                } else {
                    e.data.Timeline.$top.hide(500);
                }
            });
        },

        //时间轴加载完成后执行的事件
        LoadedTimeline: function (timeline) {
            //调整样式
            var $template = timeline.$template;
            $template.height("100%");
            $template.find(".rightContainer").attr("style", "padding-left:30px !important");
        },

        //渲染显示模式，是用列表显示还是用时间轴显示
        InitDisplay: function (data) {
            var that = this;
            var columns = [];
            var actions = null;
            var sortInfo = {};
            if (data) {
                that.DisplayMode = data.DefaultDisplayMode;
                columns = data.Columns;
                actions = data.Actions;
                sortInfo["SortBy"] = data.SortBy;
                sortInfo["SortDirection"] = data.SortDirection;
            }

            //var defaultDisplayMode = data.DefaultDisplayMode;
            that.RenderTable(columns, actions, sortInfo);
            //if (defaultDisplayMode == that.ListViewDisplayMode.Timeline) {
            //    that.RenderTimeline(actions);
            //} else {
            //    that.RenderTable(columns, actions);
            //}
        },

        InitHeader: function (Headers) {
            if (!Headers) return;
            var $Tr = $('<tr><th data-formatter="OperateFormatter' + this.Element.id + '" data-field="Name">名称</th></tr>');
            var trStr = '<tr><th data-formatter="OperateFormatter' + this.Element.id + '" data-field="Name">名称</th>';
            for (var key in Headers) {
                trStr += "<th style='min-width:100px;' data-switchable='true' data-field='" + key + "' data-visible='" + Headers[key].Visible + "' data-sortable='" + Headers[key].Sortable + "'>" + Headers[key].DisplayName + "</th>";
            }
            trStr += '</tr>';
            this.$Table.append($("<thead>").append(trStr));
        },

        InitAction: function (Actions) {
            if (!Actions) return;
            var ActionPanelId = $.IGuid();
            this.$ActionPanel = $("<div id='" + ActionPanelId + "' class='btn-toolbar' role='toolbar'>");//.attr("id", ActionPanelId).addClass("btn-toolbar").attr("role", "toolbar");
            for (var key in Actions) {
                //如果是时间轴模式只支持"新增"
                if (this.DisplayMode == this.ListViewDisplayMode.Timeline && key != "Create") {
                    continue;
                }
                // 暂时屏蔽掉导入导出删除按钮
                if (key == "Import" || key == "Export" || key == "Remove") {
                    continue;
                }
                if (Actions[key].Icon == "fa-plus") {
                    Actions[key].Icon = "icon-dian";
                }

                var $Button = $("<div class='btn btn-default' id='" + key + "'><i class='fa " + Actions[key].Icon + "'></i>" + Actions[key].DisplayName + "</div>");//.addClass("btn btn-default").attr("id", key).append("<i class='fa " + Actions[key].Icon + "'></i>" + Actions[key].DisplayName);
                this.$ActionPanel.append($("<div class='btn-group' role='group'>").append($Button));
                $Button.click(this, function (e) {
                    e.data.DoAction.apply(e.data, [$(this).attr("id")]);
                });
            }
            //this.$Table.attr("data-toolbar", "#" + ActionPanelId);
            $(this.Element).append(this.$ActionPanel);
            return ActionPanelId;
        },

        DoAction: function (ActionName) {
            var that = this;
            switch (ActionName) {
                case "Create":
                    //that.CreateBO.apply(that);
                    that.CreateBO();
                    break;
                case "Remove":
                    //that.RemoveBOs.apply(that);
                    that.RemoveBOs();
                    break;
            }
        },

        CreateBO: function () {
            var that = this;
            $.ISideModal.Show(that.SheetUrl + "?SchemaCode=" + that.BOSchemaCode + "&" + this.SchemaCode + "=" + this.ResponseContext.BizObjectId + "&" + this.SchemaCode + "_Name=" + encodeURIComponent(this.ResponseContext.Name), "", function () {
                that.ReloadList();
            });
        },

        OperateFormatter: function (value, row, index) {
            var that = this;
            window.EditBORow = function (SchemaCode, ObjectId, InstanceId, AssociationCode, TargetObjectId) {
                $.ISideModal.Show(that.SheetUrl + "?SchemaCode=" + SchemaCode + "&BizObjectId=" + ObjectId + "&" + AssociationCode + "=" + TargetObjectId, "", function () {
                    that.ReloadList.apply(that);
                });
            };
            if (value == null || value.trim() == "") value = "--";
            return "<a class='edit ml10' href=\"javascript:EditBORow(\'" + that.BOSchemaCode + "\',\'" + row.ObjectId + "\',\'" + row.WorkflowInstanceId + "\',\'" + that.SchemaCode + "\',\'" + that.ResponseContext.BizObjectId + "\')\"' >" + value.replace(/</g, "&lt;").replace(/>/g, "&gt;") + "</a>";
        },

        RemoveBOs: function () {
            var that = this;
            var rows = that.$Table.bootstrapTable("getSelections");
            if (rows.length == 0) {
                $.IShowWarn("提示", "没有选中任何行");
                return;
            }

            if (confirm("确定删除" + rows.length + "行数据")) {
                var ObjectIds = {};
                var ids = Array();
                for (var i = 0; i < rows.length; i++) {
                    ObjectIds[rows[i].ObjectId] = rows[i].ObjectId;
                    ids.push(rows[i].ObjectId);
                }
                $.ajax({
                    type: "GET",
                    url: "/Home/RemoveAppData",
                    data: { SchemaCode: that.BOSchemaCode, ObjectIds: ObjectIds },
                    //async: false,//同步执行
                    dataType: "json",
                    success: function (result) {
                        if (result) {
                            //$("#tb_Applist").bootstrapTable("remove", { field: "ObjectId", values: ids });
                            that.ReloadList.apply(that);
                        }
                    },
                    error: function (e) {
                        $.IshowError("错误", e.responseText);
                    }
                });
            }
        },

        ReloadList: function () {
            var that = this;
            //由于关联列表还没有支持时间轴模式，所以刷新时候都是刷新列表
            that.$Table.bootstrapTable("refresh");
            return;
            if (that.DisplayMode == that.ListViewDisplayMode.List) {
                that.$Table.bootstrapTable("refresh");
            } else {
                that.pageNumber = 1;
                that.FormlistTimeline.reload({
                    queryParams: that.GetTimelineParams()
                }, function (timeline) {
                    that.LoadedTimeline(timeline);
                });
            }
        },

        ShowEmptyList: function (Errors) {
            $(this.Element).html("");
            if (Errors) {
                var errorStr = '';
                for (var i = 0; i < Errors.length; i++) {
                    errorStr += "<span>" + Errors[i] + "</span>";
                    //$(this.Element).append("<span>" + Errors[i] + "</span>");
                }
                $(this.Element).append(errorStr);
            } else {
                $(this.Element).append("<span>当前列表为空!</span>");
            }
            $(this.Element).css({
                "text-align": "center",
                "color": "gainsboro",
                "border": "1px dotted",
                "padding-top": "10px",
                "padding-bottom": "10px"
            });
        }
    });
})(jQuery);;
(function ($) {
    $.fn.FormMap = function () {
        return $.ControlManager.Run.call(this, "FormMap", arguments);
    };

    // 构造函数
    $.Controls.FormMap = function (element, ptions, sheetInfo) {
        $.Controls.FormMap.Base.constructor.call(this, element, ptions, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormMap.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }

            this.Address = "";
            this.Point = { lat: 0, lng: 0 };


            //渲染界面
            this.HtmlRender();
            ////初始化默认值
            this.InitValue();
            //绑定事件
            this.BindEvent();

        },

        //界面渲染
        HtmlRender: function () {
            if (!this.Editable) {
                this.$Input = $("<pre style='border:none'>");//.css("border", "none");
                this.$InputBody.append(this.$Input);
            } else {
                this.$Input = $("<div>").css({ "padding-top": "5px", "padding-bottom": "5px", "border": "1px solid #ddd", "height": "30px", "border-bottom": 0, "border-radius": "3px 3px 0 0" });
                this.$InputBody.append(this.$Input);
                if (this.Value) {
                    var loc = JSON.parse(this.Value);
                    this.Address = loc.address;
                }
                this.$Input.append(" " + this.Address);
            }

            if (this.Editable) {
                // 悬浮 iframe
                this.$IframePanel = $("<div style='border:1px solid #ddd;height:280px'>");//.height("280px");
                this.$Iframe = $("<iframe style='height:100%;width:100%' frameborder='0' >");//.height("100%").width("100%").attr("frameborder", 0);
                this.$Iframe.attr("src", "/Content/Mobile/Template/LocationMap.html?ismobile=false&rowid=" + (this.BizObjectId || "") + "&datafield=" + this.DataField + "&Range=" + this.Range + "&Address=" + this.Address);
                this.$IframePanel.append(this.$Iframe);
                this.$InputBody.append(this.$IframePanel);
            }
        },

        BindEvent: function () {
            var that = this;
            $(this.$Input).change(function () {
                that.Validate();
            });
        },
        InitValue: function () {
            if (this.Value) {
                try {
                    this.SetValue(JSON.parse(this.Value));
                } catch (ex) { }
            } else if (this.Editable){
                this.$Input.append("pc端定位不准确，请到移动端进行定位！");
            }
        },

        SetValue: function (data) {
            this.Address = data.Address;
            this.Point = data.Point;
            this.$Input.html("");
            if (this.Address) {
                this.$Input.append(" " + this.Address);
            }
            this.OnChange();
        },

        GetValue: function () {
            var pointData = {
                Address: this.Address || "",
                Point: this.Point || ""
            };
            return JSON.stringify(pointData);
        },
        SetReadonly: function (flag) {
            if (flag) {
                this.$Iframe && this.$Iframe.hide();
            } else {
                this.$Iframe && this.$Iframe.show();
            }
        },
        Validate: function () {
            var val = this.GetValue();
            var address = $.parseJSON(val).Address;
            if (this.Required && address.trim() == "") {
                this.AddInvalidText(this.$Input, "必填");
                return false;
            }
            this.RemoveInvalidText(this.$Input);
            return true;
        },
        //返回数据值
        SaveDataField: function () {
            if (this.Validate()) {
                var result = {};
                if (!this.Visible) return result;
                var oldresult = $.Controls.GetSheetDataItem(this.DataField, $(this.Element));
                if (!oldresult) {
                    return {};
                }

                if (("" + oldresult.Value) != this.GetValue()) {
                    result[this.DataField] = this.GetValue();
                    return result;
                }

                return {};
            }
        }
    });
})(jQuery);;;
// SheetSns控件
; (function ($) {
    //控件执行
    $.fn.FormSns = function () {
        return $.ControlManager.Run.call(this, "FormSns", arguments);
    };

    // 构造函数
    $.Controls.FormSns = function (element, options, sheetInfo) {
        $.Controls.FormSns.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormSns.Inherit($.Controls.BaseControl, {
        // post发布成功后执行
        AfterPost: function () { },
        //控件渲染函数
        Render: function () {
            //渲染前端
            this.HtmlRender();
        },

        //渲染前端
        HtmlRender: function () {
            // Create模式时，不显示
            if (this.ResponseContext == null || this.ResponseContext.IsCreateMode) {
                $(this.Element).css({ "display": "none" });
                return false;
            }

            // 将控件的Title隐藏
            $(this.Element).find("." + this.Css.ControlTitle).hide();

            var that = this;

            this.$panel = $('<div class="panel panel-info"><div class="panel-heading"><span class="fa fa-comments"></span>动态</div></div>');
            this.$panelBody = $('<div class="panel-body"></div>');
            this.$panel.append(this.$panelBody);

            this.$addPost = $('<div class="row" style="margin-bottom:3px;"><div class="col-sm-12"><textarea class="form-control" rows="3" placeholder="内容"></textarea></div></div><div class="row" style="margin-bottom:10px;"><div class="col-sm-11 text-left" id="fileUploader"></div><div class="col-sm-1 text-right"><button type="button" class="btn btn-success btn-xs">&nbsp;发布&nbsp;</button></div></div>');

            this.$filePicker = $('<a href="javascript:;" id="filePicker"><span class="fa fa-paperclip"></span>文件(最多支持9个，单个大小不能超过5M)</a>');
            this.$fileList = $('<div id="fileList" class="uploader-list"></div>');
            this.$addPost.find("#fileUploader").append(this.$filePicker).append(this.$fileList);

            this.$panelBody.append(this.$addPost);

            this._initWebUploader();
            // 控件所属panel的id
            var panelid = this.$InputBody.closest(".tab-pane").attr("id");
            /* 
             * WebUploader按钮或者其父级被设置成display:none，flash会停止运行，导致失效
             * 在控件所属所属panel显示后，重新初始化WebUploader
             */
            $(".nav-tabs  a[href='#"+panelid+"']").on("shown.bs.tab", function () {
                that._initWebUploader();
            });

            // ctrl+enter快捷发布Post
            this.$postTextarea = this.$addPost.find("textarea");
            this.$postTextarea.keydown(function (e) {
                if (e.ctrlKey && e.which === 13) {
                    // 防止重复提交
                    if (!that.$btnPost.prop("disabled")) {
                        that.$btnPost.trigger("click");
                    }
                }
            });
            // 发布Post
            this.$btnPost = this.$addPost.find("button");
            this.$btnPost.click(function () {
                var $textarea = that.$postTextarea;
                var txt = $.trim($textarea.val());
                if (txt === "") {
                    $textarea.focus();
                    $.IShowWarn("提示", "请填写动态内容");
                }
                else {
                    // 设置发布按钮不可用
                    that.$btnPost.prop("disabled", true);

                    that.fileIds = "";
                    // 上传图片，文件
                    that.picUploader.upload();
                }
            });
            this._initPost();
            $(this.$InputBody).append(this.$panel);
        },

        _initPost: function () {
            var that = this;
            var params = { PostData: JSON.stringify({ ActionName: 'GetSNSPost', bizObjectId: $.SmartForm.ResponseContext.BizObjectId, flag: $.IGuid() }) };
            that.Ajax(
                    "/Form/OnAction",
                    "POST",
                    params,
                    function (data) {
                        if (data.Successful) {
                            that._initPostCallBack.apply(that, [data.ReturnData.snsItemList]);
                        }
                        
                    });
        },

        _initPostCallBack: function (data) {
            var that = this;
            if (data) {
                that.$panelBody.find(".panel").remove();
                $.each(data, function (p, post) {
                    if (post.ItemType == 1) {//post
                        var $postPanel = $('<div class="panel panel-success"></div>');
                        var $postPanelHeader = $('<div class="panel-heading"></div>');
                        var $postPanelFooter = $('<div class="panel-footer"></div>');
                        //var $postPanelBody = $('<div class="panel-body"><div class="media"><div class="media-left"><img class="media-object img-circle" src="' + post.ProfilePhotoUrl + '" alt="" style="width: 40px;margin-top:10px;" /></div><div class="media-body" style="width:100%;"><h5><a href="javascript:;">' + post.Name + '</a>&nbsp;' + post.FormatCreatedTime + '</h5>' + that._changeTextareaValue(post.Text) + '</div></div><div class="row" style="margin-bottom:3px;"><div class="col-sm-12"><textarea class="form-control" rows="2" placeholder="快速回复"></textarea></div></div><div class="row"><div class="col-sm-12 text-right"><button type="button" class="btn btn-success btn-xs">&nbsp;回复&nbsp;</button></div></div></div>');
                        var $postPanelBody = $('<div class="panel-body"></div>');
                        var $postPanelBody_media = $('<div class="media"><div class="media-left"><img class="media-object img-circle" src="' + post.ProfilePhotoUrl + '" alt="" style="width: 40px;margin-top:10px;" /></div><div class="media-body" style="width:100%;"><h5><a href="javascript:;">' + post.Name + '</a>&nbsp;' + post.FormatCreatedTime + '</h5>' + that._changeTextareaValue(post) + '</div></div>');
                        var $postPanelBody_textarea = $('<div class="row" style="margin-bottom:3px;"><div class="col-sm-12"><textarea class="form-control" rows="2" placeholder="快速回复"></textarea></div></div>');
                        var $postPanelBody_button = $('<div class="row"><div class="col-sm-12 text-right"><button type="button" class="btn btn-success btn-xs">&nbsp;回复&nbsp;</button></div></div></div>');

                        var $postPanelBody_comment = $('<div style="margin-left:30px;margin-top:10px;">');
                        //加载回复
                        for (var i = 0; i < post.Comments.length; i++) {
                            var comment = post.Comments[i];
                            var $commentPanelBody = $('<div class="panel-body" style="padding:10px"></div>').attr('id',comment.ObjectId).attr('data-user',comment.UserID);
                         //   var $commentPanelBody_media = $('<div class="comment"><div class="media-left"><img class="media-object img-circle" src="' + comment.ProfilePhotoUrl + '" alt="" style="width: 40px;margin-top:10px;" /></div><div class="media-body" style="width:100%;"><h5><a href="javascript:;">' + comment.Name + '</a>&nbsp;回复了&nbsp;<a href="javascript:;">' + post.Name + '</a>&nbsp;' + comment.FormatCreatedTime + '</h5>' + that._changeTextareaValue(comment.Text) + '</div></div>');
                            var $commentPanelBody_media = $('<div class="comment"><div class="media-left"><img class="media-object img-circle" src="' + comment.ProfilePhotoUrl + '" alt="" style="width: 40px;margin-top:10px;" /></div><div class="media-body" style="width:100%;"><h5><a href="javascript:;">' + comment.Name + '</a>&nbsp;回复了&nbsp;<a href="javascript:;">' + post.Name + '</a>&nbsp;' + comment.FormatCreatedTime + '</h5>' + that._changeTextareaValue(comment) + '</div></div>');
                            $($commentPanelBody).append($commentPanelBody_media);
                            $($postPanelBody_comment).append($commentPanelBody);
                            if (comment.UserID == $.SmartForm.ResponseContext.Originator) {
                                var $remove = $("<div class='media-right'><button type='button' class='btn btn-link'>删除</button></div>");
                                $($commentPanelBody_media).append($remove);
                                $($remove).find('button').click(function () {
                                    var btn = this;
                                    var commentBox = $(this).parent().parent().parent();
                                    var commentId = $(commentBox).attr('id');
                                    var userId = $(commentBox).attr('data-user');
                                    var params = { PostData: JSON.stringify({ ActionName: 'DeleteComment', commentId: commentId, userID: userId}) };
                                    that.Ajax(
                                        '/Form/OnAction',
                                        'POST',
                                        params,
                                        function (data) {
                                            if (data.Successful) {
                                                $('#' + commentId).remove();
                                                $.IShowSuccess("提示", "删除成功");
                                                return;
                                            }
                                            else {
                                                $.IShowError("提示", "删除失败");
                                            }
                                        }
                                        )
                                });
                            }
                        }

                        $($postPanelBody).append($postPanelBody_media).append($postPanelBody_textarea).append($postPanelBody_button).append($postPanelBody_comment);

                        if (post.IsMyItem && (typeof post.LinkContent == "undefined" || post.LinkContent == "")) {
                            var $btnContainer = $("<div class='media-right'><button type='button' class='btn btn-link'>删除</button></div>");
                            $postPanelBody.find(".media").append($btnContainer);
                            $btnContainer.find("button").click(function () {
                                var params = { PostData: JSON.stringify({ ActionName: 'DeletePost', postId: post.ObjectId, createdBy: post.CreatedBy  }) };
                                that.Ajax(
                                  "/Form/OnAction",
                                  "POST",
                                    params,
                                    function (data) {
                                        if (data.Successful) {
                                          $postPanel.remove();
                                          $.IShowSuccess("提示", "删除成功");
                                          return;
                                      }
                                      else {
                                          $.IShowError("提示", "删除失败");
                                      }
                                  });
                            });

                        }

                        // 文件
                        if (post.Files) {
                            var $fileContainer = $("<div></div>");
                            $.each(post.Files, function (f, file) {
                                var fileUrl = "/Form/GetPostFile/?postId=" + file.PostId + "&fileId=" + file.ObjectId;
                                if (file.ContentType.indexOf("image") > -1 && file.ThumbnailUrl) {
                                    $fileContainer.append("<a target='_blank' style='cursor:pointer;' href='" + fileUrl + "'><div class='file-item thumbnail'><img src='" + file.ThumbnailUrl + "'><div class='info' title='" + file.FileName + "'>" + file.FileName + "</div></div></a>");
                                }
                                else {
                                    $fileContainer.append("<a target='_blank' style='cursor:pointer;' href='" + fileUrl + "'><div class='file-item thumbnail text-center'><span class='fa fa-file-text-o fa-4x' style='margin-top:5px;'></span><div class='info' title='" + file.FileName + "'>" + file.FileName + "</div></div></a>");
                                }
                            });
                            $postPanelBody.find(".media .media-body").append($fileContainer);
                        }

                        var $commentTextarea = $postPanelBody.find("textarea");
                        var $btnComment = $postPanelBody.find("button");
                        // ctrl+enter快速回复
                        $commentTextarea.keydown(function (e) {
                            if (e.ctrlKey && e.which === 13) {
                                // 防止重复提交
                                if (!$btnComment.prop("disabled")) {
                                    $btnComment.trigger("click");
                                }
                            }
                        });
                        //回复post
                        $btnComment.click(function () {
                            var txt = $.trim($commentTextarea.val());
                            if (txt === "") {
                                $commentTextarea.focus();
                                //$.IShowWarn("提示", "请填写回复内容");

                            }
                            else {
                                $btnComment.prop("disabled", true);
                                //$.post("/Sheet/AddSNSComment/", { text: txt, targetId: post.ObjectId }, function (data) {
                                //    $btnComment.prop("disabled", false);
                                //    if (data.IsScuccess) {
                                //        that._initPost();
                                //    }
                                //}, "json");
                                var params = { PostData: JSON.stringify({ ActionName: 'AddSNSComment', text: txt, targetId: post.ObjectId }) };
                                that.Ajax(
                                  "/Form/OnAction/",
                                  "POST",
                                    params,
                                  function (data) {
                                      $btnComment.prop("disabled", false);
                                      if (data.Successful) {
                                          that._initPost();
                                      }
                                  });
                            }
                        });

                        if (post.Comments) {
                            $.each(post.Comments, function (c, comment) {
                                var replyTo = comment.ReplyToUser ?
                                    ('@<a href="javascript:;">' + comment.ReplyToUser + '</a>&nbsp;') : '';

                            //    var $comment = $('<div class="media"><div class="media-left"><img class="media-object img-circle" src="' + comment.ProfilePhotoUrl + '" alt="" style="width:30px;margin-top:10px;" /></div><div class="media-body commentBody" style="width:100%;"><h5><a href="javascript:;">' + comment.Name + '</a>&nbsp;' + comment.FormatCreatedTime + '</h5>' + replyTo + that._changeTextareaValue(comment.Text) + '</div><div class="media-right"></div></div>');
                                var $comment = $('<div class="media"><div class="media-left"><img class="media-object img-circle" src="' + comment.ProfilePhotoUrl + '" alt="" style="width:30px;margin-top:10px;" /></div><div class="media-body commentBody" style="width:100%;"><h5><a href="javascript:;">' + comment.Name + '</a>&nbsp;' + comment.FormatCreatedTime + '</h5>' + replyTo + that._changeTextareaValue(comment) + '</div><div class="media-right"></div></div>');
                                if (comment.IsMyComment) {
                                    var $btnDelete = $('<button type="button" class="btn btn-link">删除</button>');
                                    $comment.find(".media-right").append($btnDelete);
                                    $btnDelete.click(function () {
                                        var params = { PostData: JSON.stringify({ ActionName: 'DeleteComment', commentId: comment.ObjectId, userID: comment.UserID }) };
                                        that.Ajax(
                                          "/Form/OnAction",
                                          "POST",
                                           params,
                                          function (data) {
                                              if (data.Successful) {
                                                  $comment.remove();
                                                  $.IShowSuccess("提示", "删除成功");
                                              }
                                              else {
                                                  $.IShowError("提示", "删除失败");
                                              }
                                          });
                                    });
                                    return;
                                }

                                var $btnReply = $('<button type="button" class="btn btn-link">回复</button>');
                                $comment.find(".media-right").append($btnReply);

                                $postPanelFooter.append($comment);

                                //回复comment
                                $btnReply.click(function () {
                                    $comment.find(".commentBody > .commentReply").remove();
                                    var $commentReply = $('<div class="commentReply"><textarea class="form-control" rows="2"></textarea><div class="row" style="padding-top:3px;"><div class="col-sm-12 text-right"><div class="btn-group" role="group"><button type="button" class="btn btn-default btn-xs btnCancel">&nbsp;取消&nbsp;</button><button type="button" class="btn btn-success btn-xs btnReply">&nbsp;回复&nbsp;</button></div></div></div></div>');
                                    $comment.find(".commentBody").append($commentReply);

                                    var $textarea = $commentReply.find("textarea");
                                    $textarea.focus();

                                    $commentReply.find(".btnCancel").click(function () {
                                        $commentReply.remove();
                                    });

                                    var $btnReply = $commentReply.find(".btnReply");

                                    // ctrl+enter快捷回复comment
                                    $textarea.keydown(function (e) {
                                        if (e.ctrlKey && e.which === 13) {
                                            // 防止重复提交
                                            if (!$btnReply.prop("disabled")) {
                                                $btnReply.trigger("click");
                                            }
                                        }
                                    });
                                    $btnReply.click(function () {
                                        var txt = $.trim($textarea.val());
                                        if (txt === "") {
                                            $textarea.focus();
                                            $.IShowWarn("提示", "请填写评论内容");

                                        }
                                        else {
                                            $btnReply.prop("disabled", true);
                                            var params = {
                                                PostData: JSON.stringify({
                                                    ActionName: 'AddSNSComment', replyTo: comment.ObjectId, replyToUserId: comment.UserID,
                                                    schemaCode: $.SmartForm.ResponseContext.SchemaCode,
                                                    bizObjectId: $.SmartForm.ResponseContext.BizObjectId,
                                                    targetId: post.ObjectId, text: $textarea.val() }) };
                                            that.Ajax(
                                              "/Form/OnAction/",
                                              "POST",
                                              params,
                                              function (data) {
                                                  $btnReply.prop("disabled", false);
                                                  if (data.Successful) {
                                                      that._initPost();
                                                  }
                                              });
                                        }
                                    });
                                });
                            });
                        }
                        $postPanel.append($postPanelHeader).append($postPanelBody).append($postPanelFooter)
                            .appendTo(that.$panelBody);
                    }
                    else { //feed
                        var $feedPanel = $('<div class="panel panel-info"></div>');
                        var $feedPanelHeader = $('<div class="panel-heading"></div>');
                        var $feedPanelBody = $('<div class="panel-body"><div class="row"><div class="col-sm-2 text-center"><img class="media-object img-circle" src="' + post.ProfilePhotoUrl + '" alt="" style="width: 40px;" /></div><div class="col-sm-10"><a href="javascript:;">' + post.Name + '</a><div>' + post.FormatCreatedTime + '</div><p>' + post.Text + '</p></div></div></div>');
                        $feedPanel.append($feedPanelHeader).append($feedPanelBody).appendTo(that.$panelBody);
                    }
                });
            }
        },

        _initWebUploader: function () {
            var that = this;
            // 初始化WebUploader
            this.picUploader = WebUploader.create({
                pick: that.$filePicker,
                //runtimeOrder: "html5",
                swf: "/Scripts/plugins/webuploader/Uploader.swf",
                server: "/Form/UploadFile",
                fileNumLimit: 9,
                fileSizeLimit: 45 * 1024 * 1024, // 45M
                fileSingleSizeLimit: 5 * 1024 * 1024 // 5M
                //accept: {
                //    title: "Images",
                //    extensions: "gif,jpg,jpeg,bmp,png",
                //    mimeTypes: "image/*"
                //}
            });
            //限制文件数量和大小信息
            this.picUploader.on('error', function (handler) {
                if (handler=='Q_EXCEED_NUM_LIMIT') {
                    $.IShowWarn('最多只能上传9个文件');
                } else if (handler=='Q_EXCEED_SIZE_LIMIT') {
                    $.IShowWarn('单个附件最大支持5M');
                }
            });
            // 当一批文件被加入队列后触发
            this.picUploader.on("filesQueued", function (files) {
                $.each(files, function (f, file) {
                    var $picLi = $("<div id='" + file.id + "' class='file-item thumbnail text-center'><img><div class='info' title='" + file.name + "'>" + file.name + "</div></div>");

                    var $btns = $("<div class='remove'><span class='fa fa-trash-o'></span></div>").appendTo($picLi);
                    $btns.find("span").click(function () {
                        $picLi.remove();
                        // 将文件从队列中移除
                        that.picUploader.cancelFile(file);

                        // Textarea方便快捷添加
                        that.$postTextarea.focus();
                    });

                    var $img = $picLi.find("img");
                    that.$fileList.append($picLi);
                    that.picUploader.makeThumb(file, function (error, src) {
                        if (error) {
                            $img.replaceWith("<span class='fa fa-file-text-o fa-4x' style='margin-top:5px;'></span>");
                            return;
                        }
                        $img.attr("src", src);
                    }, 100, 100);
                });

                // focus到Textarea，方便快捷添加
                that.$postTextarea.focus();
            });

            // 文件上传过程中创建进度条实时显示
            this.picUploader.on("uploadProgress", function (file, percentage) {
                var $li = $("#" + file.id),
                    $percent = $li.find(".progress span");

                if (!$percent.length) {
                    $percent = $('<p class="progress"><span></span></p>').appendTo($li).find("span");
                }

                $percent.css("width", percentage * 100 + "%");
            });

            this.fileIds = ""; // 保存SNSPostFile的ObjectId

            // 文件一个一个上传到服务器
            this.picUploader.on("uploadSuccess", function (file, response) {
                if (response.success) {
                    that.fileIds += (response.fileid + ",");
                }
                that.picUploader.cancelFile(file);
            });

            // 非自动上传，发布post调用upload方法，所有文件上传结束时触发
            this.picUploader.on("uploadFinished", function () {
                var txt = $.trim(that.$addPost.find("textarea").val());
                // 发布分享内容
                var params = {
                    PostData: JSON.stringify({
                        ActionName: 'AddSNSPost', text: txt, fileIds: that.fileIds, schemaCode: $.SmartForm.ResponseContext.SchemaCode,
                        bizObjectId: $.SmartForm.ResponseContext.BizObjectId }) };

                that.Ajax(
                    "/Form/OnAction/",
                    "POST",
                    params,
                    function (data) {
                        if (data.Successful) {
                            that.$addPost.find("textarea").val("");
                            that.$fileList.empty();
                            that._initPost();

                            // 执行AfterPost方法
                            that.AfterPost.apply(that);
                        }

                        // 重置发布按钮状态
                        that.$btnPost.prop("disabled", false);
                    });
            });
        },

        _changeTextareaValue: function (post) {
            if (post.LinkContent == "" || post.LinkContent==null)
                return (post.Text || "").replace(/\n/g, "<br />");
            else
            {
                var text = (post.Text || "").replace(/\n/g, "<br />");
                var linkcontent = "";
                try
                {
                    linkcontent=JSON.parse(post.LinkContent);
                }
                catch (e) { return (post.Text || "").replace(/\n/g, "<br />"); };
                var html="";
                if(linkcontent.PostType==0)
                {
                    html+="<span>创建了</span>";
                }
                else
                {
                    html+="<span>更新了</span>";
                }
                var url = "/Form/DefaultSheet/{SchemaCode}?SchemaCode={SchemaCode}&BizObjectId={BizObjectId}";
                url = url.replace("{SchemaCode}", linkcontent.SchemaCode).replace("{SchemaCode}", linkcontent.SchemaCode).replace("{BizObjectId}", linkcontent.BizObjectId);
                html += "<a href=\"javascript: $.ISideModal.Show('" + url + "');\">" + linkcontent.DisplayName + ":" + linkcontent.Name + "</a>";
                return html;
            }
        },

        //校验
        Validate: function () {
            return true;
        },

        SaveDataField: function () {
            return {};
        },

        GetValue: function () {
            return "Sns";
        }
    });
})(jQuery);;
(function ($) {
    $.fn.FormSeqNo = function () {
        return $.ControlManager.Run.call(this, "FormSeqNo", arguments);
    };

    // 构造函数
    $.Controls.FormSeqNo = function (element, options, sheetInfo) {
        $.Controls.FormSeqNo.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormSeqNo.Inherit($.Controls.BaseControl, {
        //控件渲染函数
        Render: function () {
            //是否可见
            if (!this.Visible) { $(this.Element).hide(); return; }
            //渲染Html页面
            this.HtmlRender();

            //Error:新建的话，可以制作默认值 ，非新建设置值加载的值
            if (this.ResponseContext.IsCreateMode) {
                this.SetValue("系统自动生成");
                this.$Input.css({ "color": "#333333", "font-size": "14px" });
            } else {
                if (this.Value) {
                    this.SetValue(this.Value);
                }
                this.$Input.css({ "color": "#000", "font-style": "normal" });
            }

            // 不可编辑
            this.SetReadonly(true);
        },

        //渲染html内容
        HtmlRender: function () {
            this.$Input = $("<pre style='border:none'>");
            this.$InputBody.append(this.$Input);
        },

        //设置值
        SetValue: function (v) {
            this.Value = v.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            this.$Input.html(this.Value);
            this.OnChange();
        },

        GetValue: function () {
            if (!this.Editable) {
                if (this.ResponseContext.IsCreateMode) {
                    return "";
                } else {
                    return this.Value;
                }
            }
            else {
                return this.$Input.val().trim();
            }
        },

        GetText: function () {
            return this.GetValue();
        },

        //设置只读
        SetReadonly: function (v) {
            if (v) {
                this.$Input.prop("readonly", "readonly");
            }
            else {
                this.$Input.removeProp("readonly");
            }
        },

        //返回数据值
        SaveDataField: function () {
            return {};
        }
    });
})(jQuery);;
// FormTaskTips控件 caojp
; (function ($) {
    //控件执行
    $.fn.FormTaskTips = function () {
        return $.ControlManager.Run.call(this, "FormTaskTips", arguments);
    };

    // 构造函数
    $.Controls.FormTaskTips = function (element, options, sheetInfo) {
        $.Controls.FormTaskTips.Base.constructor.call(this, element, options, sheetInfo);
    };

    // 继承及控件实现
    $.Controls.FormTaskTips.Inherit($.Controls.BaseControl, {
        // post发布成功后执行
        AfterPost: function () { },
        //控件渲染函数
        Render: function () {
            //渲染前端
            this.HtmlRender();
        },

        HtmlRender: function () {
            $(this.Element).attr("id", $.IGuid());
            this.InitTable();
        },
        InitTable: function () {
            var that = this;

            //table
            var ID = $.IGuid();
            this.$Table = $('<table id="' + ID + '" class="table table-bordered table-hover table-condensed" data-content-type="application/x-www-form-urlencoded"></table>');
            //this.$Table = $("<table>");
            var params = {
                ActionName: "GetTaskTipByCode",
                code: $.SmartForm.ResponseContext.BizObjectId
            };
            this.$Table.attr({
                "data-cache": "false",
                "data-toggle": "table",
                "data-click-to-select": "false",
                "data-url": "/FormTaskTips/OnAction?PostData=" + JSON.stringify(params),//ActionName=GetTaskTipByCode&code=" + $.SmartForm.ResponseContext.BizObjectId,
                "data-side-pagination": "client",
                "data-pagination": "true",
                "data-page-list": "[10,50,100,150,200]",
                "data-sort-name": "",
                "data-sort-order": "",
                "data-method": "post",
                "data-align": "center",
                "data-sort-name": "AlertTime"
            });
            //this.$Table.attr("data-sort-order", "AlertTime");

            //this.$Table.attr("data-content-type", "application/x-www-form-urlencoded");
            //thead
            var theadStr = '<thead>' +
                '<tr>' +
                '<th data-field="Sender" data-visible=false>Sender</th>' +
                '<th data-field="ObjectId" data-visible=false>ObjectId</th>' +
                '<th data-field="Name" data-formatter="OperateFormatter_TaskName' + this.Element.id + '">任务名称</th>' +
                '<th style="width:200px;" data-field="Summary" data-width=300>内容</th>' +
                '<th data-field="TaskState" data-formatter="OperateFormatter_TaskState' + this.Element.id + '">状态</th>' +
                '<th data-field="ReminderType" data-width=80 data-formatter="OperateFormatter_ReminderType' + this.Element.id + '">提醒类型</th>' +
                '<th data-field="AlertTime" data-width=150 data-formatter="OperateFormatter_AlertTime' + this.Element.id + '">提醒时间</th>' +
                '<th data-field="UserName" data-formatter="OperateFormatter_UserName' + this.Element.id + '">指派人员</th>' +
                '<th data-field="UserId" data-visible=false>UserId</th>' +
                '<th data-field="Action" data-formatter="OperateFormatter_Action' + this.Element.id + '" data-events="TaskTipActionEvents">操作</th>' +
                '</tr>' +
                '</thead>';

            this.$Table.append(theadStr);

            //tbody
            this.$TableBody = $('<tbody>');
            this.$Table.append(this.$TableBody);
            $(this.Element).append(this.$Table);
            var pagerStr = '<div class="table-page" id="bar-' + ID + '">' +
                '<div class="page-index">' +
                '<input type="text" value="1" class="Page_Index" />/<label class="Page_Count">1</label>' +
                '</div>' +
                '<div class="btn-group table-page_ButtonGroup" style="width: 160px;">' +
                '<button class="btn Page_Num_Pre">上一页</button>' +
                '<button class="btn Page_Num_Next">下一页</button>' +
                '</div>' +
                '<div class="page-size dropup">' +
                '<button class="dropdown-toggle" data-toggle="dropdown" aria-expanded="false">' +
                '<span class="Page_Per_Size">10</span>' +
                '<i class="fa fa-angle-down"></i>' +
                '</button>' +
                '<ul class="dropdown-menu">' +
                '<li><a>10</a></li>' +
                '<li><a>50</a></li>' +
                '<li><a>100</a></li>' +
                '<li><a>150</a></li>' +
                '<li><a>200</a></li>' +
                '</ul>' +
                '</div>' +
                '<div class="page-total">共0条</div>' +
                '</div>';
            $(this.Element).append(pagerStr);
            //toolbar
            this.$Toolbar = $('<div class="btn-toolbar" role="toolbar" id="toolbar_tasktips">');
            this.$Btn = $('<div class="btn btn-create"><i class="fa icon-increase"></i>新建</div>');
            this.$Toolbar.append(this.$Btn);
            this.$Btn.click(function () {
                $.ISideModal.Show('/FormTaskTips/CreateTaskTip?SchemaCode=' + $.SmartForm.ResponseContext.SchemaCode + '&TargetId=' + $.SmartForm.ResponseContext.BizObjectId, '', function () {
                    that.$Table.bootstrapTable('refresh');
                });
            });
            $(this.Element).append(this.$Toolbar);
            this.$Table.attr('data-toolbar', '#toolbar_tasktips');
            this.$Table.bootstrapTable({
                TargetId: ID,
                responseHandler: that.ResponseHandler
            });
            //this.$Table.find('th').attr('data-formatter', 'OperateFormatter' + this.Element.id);
            //window["OperateFormatter" + this.Element.id] = function (value, row, index, field) { return that.OperateFormatter.apply(that, [value, row, index, field]); }
            window["OperateFormatter" + this.Element.id] = function (value, row, index) { return that.OperateFormatter(value, row, index); }
            window["OperateFormatter_TaskName" + this.Element.id] = function (value, row, index) { return that.OperateFormatter_TaskName(value, row, index); }
            window["OperateFormatter_TaskState" + this.Element.id] = function (value, row, index) { return that.OperateFormatter_TaskState(value, row, index); }
            window["OperateFormatter_ReminderType" + this.Element.id] = function (value, row, index) { return that.OperateFormatter_ReminderType(value, row, index); }
            window["OperateFormatter_AlertTime" + this.Element.id] = function (value, row, index) { return that.OperateFormatter_AlertTime(value, row, index); }
            window["OperateFormatter_UserName" + this.Element.id] = function (value, row, index) { return that.OperateFormatter_UserName(value, row, index); }
            window["OperateFormatter_Action" + this.Element.id] = function (value, row, index) { return that.OperateFormatter_Action(value, row, index); }
            window["ResponseHandler" + this.Element.id] = function (params) { return that.ResponseHandler(params); }
            //OperateFormatter需要优化，之前传入field取不到数据
            window["TaskTipActionEvents"] = {
                'click .ExecuteTask': function (e, value, row, index) {
                    if (row.TaskState == 1) {
                        $.IShowSuccess('该提醒已完成，无需再次确认!');
                        return;
                    }
                    var param = {
                        //Command: 'DoAction',
                        ObjectId: row.ObjectId,
                        UserId: row.UserId,
                        ActionName: "ExecuteTask"
                    };
                    $.post('/FormTaskTips/OnAction', { PostData: JSON.stringify(param) }, function (data) {
                        if (data.Successful) {
                            row.TaskState = 1;
                            that.$Table.bootstrapTable('updateRow', { index: index, row: row });
                            that.$Table.bootstrapTable("refresh");
                        } else {
                            $.IShowError(data.info);
                        }
                    }, 'json');
                },
                'click .RemoveTask': function (e, value, row, index) {
                    $.IConfirm('提示', '确定要删除当前提醒吗?', function (data) {
                        if (data) {
                            var param = {
                                ObjectId: row.ObjectId,
                                ActionName: "RemoveTask"
                            };
                            $.post('/FormTaskTips/OnAction', { PostData: JSON.stringify(param) }, function (ret) {
                                if (ret.Successful) {
                                    //that.$Table.bootstrapTable('remove', { field: 'ObjectId', values: row.ObjectId });
                                    that.$Table.bootstrapTable('hideRow', { index: index });
                                    that.$Table.bootstrapTable("refresh");
                                }
                            });
                        }
                    });
                }
            };
        },

        ActionEvents: function () {

        },
        OperateFormatter_TaskName: function (value, row, index) {

            return "<a onclick='RenderPage.call(this,\"" + row.ObjectId + "\")'>" + value + "</a>";
        },
        OperateFormatter_TaskState: function (value, row, index) {
            if (row.ReminderType == 1) {
                if (value == 0) {
                    return "未结束";
                } else {
                    return '<span style="color:#ccc;">已结束</span>';
                }
            } else {
                if (value == 0) {
                    return "未终止";
                } else {
                    return '<span style="color:#ccc;">已终止</span>';
                }
            }
        },
        OperateFormatter_ReminderType: function (value, row, index) {
            if (value == 1) {
                return "定时";
            } else if (value == 2) {
                return "每日";
            } else if (value == 3) {
                return "每周";
            } else if (value == 4) {
                return "每月";
            } else if (value == 5) {
                return "每年";
            }
        },
        OperateFormatter_AlertTime: function (value, row, index) {
            var date = eval("new " + (value.replace(/\//g, "")));
            var y = date.getFullYear();
            var m = date.getMonth() + 1;
            var d = date.getDate();
            var h = date.getHours();
            var mm = date.getMinutes();
            var s = date.getSeconds();
            return y + '-' + (m < 10 ? '0' + m : m) + '-' + (d < 10 ? '0' + d : d) + ' ' + (h < 10 ? '0' + h : h) + ':' + (mm < 10 ? '0' + mm : mm) + ':' + (s < 10 ? '0' + s : s);
        },
        OperateFormatter_UserName: function (value, row, index) {
            return "<a  href=\"javascript: $.ISideModal.Show('/Account/Setting/" + row.UserId + "');\"' >" + value + "</a>";
        },
        OperateFormatter_Action: function (value, row, index) {
            var strAction = '';
            if (row.TaskState == 0) {
                if (row.UserId == $.SmartForm.ResponseContext.Originator) {
                    //if (row.TaskState == 1) { return; }
                    if (row.ReminderType == 1) {
                        //定时
                        strAction = '<a class="ExecuteTask fa fa-check">结束</a>';
                    } else {
                        //循环
                        strAction = '<a class="ExecuteTask fa fa-check" >终止</a>';
                    }
                }
                if (row.Sender == $.SmartForm.ResponseContext.Originator) {
                    strAction += '<a class="RemoveTask fa fa-times">删除</a>';
                }
            }
            return strAction;
        },
        OperateFormatter: function (value, row, index) {
            var taskState = '';
            var reminderType = '';
            var alertTime = '';
            var userName = '';
            var strAction = '';
            if (row.ReminderType == 1) {
                if (row.TaskState == 0) {
                    taskState = '未结束';
                } else {
                    taskState = '<span style="color:#ccc;">已结束</span>';
                }
            } else {
                if (row.TaskState == 0) {
                    taskState = '未终止';
                } else {
                    taskState = '<span style="color:#ccc;">已终止</span>';
                }
            }
            switch (row.ReminderType) {
                case 1:
                    reminderType = '定时';
                    break;
                case 2:
                    reminderType = '每日';
                    break;
                case 3:
                    reminderType = '每周';
                    break;
                case 4:
                    reminderType = '每月';
                    break;
                case 5:
                    reminderType = '每年';
                    break;
            }

            var date = eval("new " + (row.AlertTime.replace(/\//g, "")));
            var y = date.getFullYear();
            var m = date.getMonth() + 1;
            var d = date.getDate();
            var h = date.getHours();
            var mm = date.getMinutes();
            var s = date.getSeconds();
            alertTime = y + '-' + (m < 10 ? '0' + m : m) + '-' + (d < 10 ? '0' + d : d) + ' ' + (h < 10 ? '0' + h : h) + ':' + (mm < 10 ? '0' + mm : mm) + ':' + (s < 10 ? '0' + s : s);
            userName = "<a  href=\"javascript: $.ISideModal.Show('/Account/Setting/" + row.UserId + "');\"' >" + value + "</a>";


            if (row.TaskState == 0) {
                if (row.UserId == $.SmartForm.ResponseContext.Originator) {
                    //if (row.TaskState == 1) { return; }
                    if (row.ReminderType == 1) {
                        //定时
                        strAction = '<a class="ExecuteTask fa fa-check">结束</a>';
                    } else {
                        //循环
                        strAction = '<a class="ExecuteTask fa fa-check" >终止</a>';
                    }
                }
                if (row.Sender == $.SmartForm.ResponseContext.Originator) {
                    strAction += '<a class="RemoveTask fa fa-times">删除</a>';
                }
            }

            row.TaskState = taskState;
            row.ReminderType = reminderType;
            row.AlertTime = alertTime;
            row.UserName = userName;
            row.Action = strAction;
        },
        ResponseHandler: function (data) {////
            var that = this;
            var $target = $("#" + that["TargetId"]);
            if (!$target) return;
            if (that.pageNumber > 1 && data && data.Tasks.length == 0) {
                $target.bootstrapTable("refreshOptions", { pageNumber: that.pageNumber - 1 });
            }
            if (!that.$PageNext) {
                var $pageBar = $("#bar-" + that["TargetId"]);
                that.$PageNext = $pageBar.find(".Page_Num_Next");
                that.$PagePre = $pageBar.find(".Page_Num_Pre");
                that.$PageIndex = $pageBar.find(".Page_Index");
                that.$PageCount = $pageBar.find(".Page_Count");
                that.$PageTotal = $pageBar.find(".page-total");
                that.$PageSize = $pageBar.find(".Page_Per_Size");
                that.$PageNext.bind('click', function (e) {
                    $target.bootstrapTable("nextPage");
                    $target.bootstrapTable("refresh");
                    return false;
                });
                that.$PagePre.bind('click', function () {
                    $target.bootstrapTable("prevPage");
                    $target.bootstrapTable("refresh");
                    return false;
                });

                var PageTimeout;
                that.$PageIndex.bind("keyup", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val().replace(/[^\d]/g, '');
                    v = v == "" ? 0 : parseInt(v);
                    v = v >= that.Count ? that.Count : v;
                    if (v == 0) return;
                    $(this).val(v);
                    PageTimeout = setTimeout(function () {
                        v != that.pageNumber && $target.bootstrapTable("selectPage", v);
                        $target.bootstrapTable("refresh");
                        PageTimeout = null;
                    }, 600);
                });
                that.$PageIndex.bind("blur", function (e) {
                    PageTimeout && clearTimeout(PageTimeout);
                    PageTimeout = null;
                    var v = $(this).val();
                    v = v == "" || v == "0" ? 1 : parseInt(v);
                    $(this).val(v);
                    v != that.pageNumber && $target.bootstrapTable("selectPage", v);
                    $target.bootstrapTable("refresh");
                });
                $pageBar.on("click", "li>a", function () {
                    var size = parseInt($(this).text());
                    that.$PageSize.html(size);
                    $target.bootstrapTable("refreshOptions", { pageSize: size });
                })
            }
            that.$PageIndex.val(that.pageNumber);
            that.Count = Math.ceil(data.Tasks.length / that.pageSize);
            that.$PageCount.html(that.Count);
            that.$PageTotal.html("共" + data.Tasks.length + "条");
            if (that.pageNumber <= 1) {
                that.$PagePre.addClass("disable").attr("disabled", true);
            }
            else {
                that.$PagePre.removeClass("disable").attr("disabled", false);
            }

            if (that.pageNumber == that.Count) {
                that.$PageNext.addClass("disable").attr("disabled", true);
            }
            else {
                that.$PageNext.removeClass("disable").attr("disabled", false);
            }

            return data.Tasks;
        }
    });

})(jQuery);

function RenderPage(v) {
    $.ISideModal.Show('/FormTaskTips/DetailTask?TaskId=' + v);
};
